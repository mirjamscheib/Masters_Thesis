---
title: "Index_Calculation"
format: html
---

# Clean Environment
```{r}
#clear R environment -------------------------------------------
rm(list = ls())
```


# Libraries 
```{r}

# Load the required packages
library("dplyr")
library("readr")
library("tidyr")
library("tidyverse")
library("stringr")
library(gbm)
library(dismo)
library(raster)
library("writexl")
```

# Load Data
## Lab Data
```{r}
lab <- read_delim("abiotic_mi_sampling/Abiotic_MI_Lab.csv")
```

# Prepare Data 
```{r}
# remove all response variables
lab_exp <- lab[ , c(1:60)]

lab <- lab[ ,-c(1:60)]

lab <- as.data.frame(lapply(lab, as.numeric))
```

# Calculate EPT Taxa 
```{r}
# Plecoptera, Trichoptera, Ephemeroptera
# Define the letter combination to search for
combination_Plecoptera <- "Plecoptera"
combination_Trichoptera <- "Trichoptera"
combination_Ephemeroptera <- "Ephemeroptera"

# Identify the column names containing the letter combination
matching_Plecoptera <- grep(combination_Plecoptera, names(lab), value = TRUE)
matching_Trichoptera <- grep(combination_Trichoptera, names(lab), value = TRUE)
matching_Ephemeroptera <- grep(combination_Ephemeroptera, names(lab), value = TRUE)


# Iterate through each row and count the cells meeting the conditions
lab$Count_Plecoptera <- apply(lab, 1, function(row) {
  sum(!is.na(row[matching_Plecoptera]) & row[matching_Plecoptera] > 0)
})

lab$Count_Trichoptera <- apply(lab, 1, function(row) {
  sum(!is.na(row[matching_Trichoptera]) & row[matching_Trichoptera] > 0)
})

lab$Count_Ephemeroptera <- apply(lab, 1, function(row) {
  sum(!is.na(row[matching_Ephemeroptera]) & row[matching_Ephemeroptera] > 0)
})

# Calculate EPT Taxa per Sampling_location 
lab$EPT_Taxa <- lab$Count_Plecoptera + lab$Count_Trichoptera + lab$Count_Ephemeroptera

# Display the resulting dataframe
print(lab$Count_Plecoptera) # - OK
print(lab$EPT_Taxa) # - OK?
```

# Calculate Shannon (H) Index & Abundance
```{r}
# Create a sample dataframe
lab_Shannon <- lab[ , -c(193:197)]

# Convert all columns to numeric format
lab_Shannon <- data.frame(sapply(lab_Shannon, as.numeric))

# Calculate the total number of observations at each sampling site
# df$total_count <- rowSums(df[, -1])
abundance <- rowSums(lab_Shannon, na.rm = TRUE) # = Abundance


# Calculate the proportion of each species within each sampling site
# proportions <- df[, -c(1, ncol(df))] / df$total_count
 proportions <- lab_Shannon[, -c(1, ncol(lab_Shannon))] / abundance

# Calculate the Shannon index for each sampling site
# shannon <- -rowSums(proportions * log2(proportions), na.rm = TRUE)
shannon <- -rowSums(proportions * log2(proportions), na.rm = TRUE)

# Compute the average Shannon index across all sampling sites
average_shannon <- mean(shannon, na.rm = TRUE)

# Display the results
print(shannon)
print(average_shannon)
```

# Calculate Number of Taxa 
```{r}
# Iterate through each row and count the cells meeting the conditions
Number_Taxa <- apply(lab_Shannon, 1, function(row) {
  sum(!is.na(row) & row > 0)
})
```

# Example Simpsons Index
```{r}
# Create the data frame
df <- data.frame(
  sampling_location = c(1, 2, 3, 4),
  species1 = c(5, 8, 10, 3),
  species2 = c(12, 2, 1, 5),
  species3 = c(5, 5, 3, 1)
)

# Calculate relative abundance for each species
df <- df %>%
  mutate_at(vars(starts_with("species")), ~ . / rowSums(.[2:4]))

# Calculate squared relative abundance for each species
df_squared <- df %>%
  mutate_at(vars(starts_with("species")), ~ .^2)

# Calculate the sum of squared relative abundances for each location
df_sum_squared <- df_squared %>%
  rowwise() %>%
  mutate(sum_squared = sum(c_across(starts_with("species"))))

# Calculate Simpson Index for each location
df_simpson <- df_sum_squared %>%
  mutate(simpson_index = 1 / sum_squared)

# Print the resulting data frame
print(df_simpson)
```

# Calculate Simpsons Index 
```{r}
# Calculate relative abundance for each species
lab[is.na(lab)] <- 0
lab$rel_abundance <- rowSums(lab[, c(1:199)]) / rowSums(lab[, c(1:199)], na.rm = TRUE)

# Calculate squared relative abundance for each species
lab_squared <- lab |>
  mutate(rel_abundance2 = rel_abundance^2)

# Calculate the sum of squared relative abundances for each location
lab_sum_squared <- lab_squared |>
  mutate(sum_squared = rowSums(lab_squared[1:199]))

# Calculate Simpson Index for each location
lab_simpson <- lab_sum_squared |>
  mutate(simpson_index = 1 / sum_squared)

# Print the resulting data frame
print(lab_simpson)
```


# Combine all Results in one DF
```{r}
# combine all results + response variables 
lab_new <- cbind(lab_exp, shannon, Number_Taxa, abundance, lab$EPT_Taxa)

# create clean df which only contains the values needed 
lab_index <- lab_new |>
  dplyr::select(EPT_Taxa, shannon, Number_Taxa, abundance, Water_depth_cm, `Flow_velocity_v60_cm/s`, x, y, z, Reach_Untersuchungsstelle)
```

# Calculate K-Index (Theodoropoulos et al., 2018)
```{r}
lab_ml_model <- lab_new |>
  mutate(k_index = 0.4*(Number_Taxa/max(Number_Taxa, na.rm = TRUE))
         + 0.3*(shannon/max(shannon, na.rm = TRUE))
         + 0.2*(lab$EPT_Taxa/max(lab$EPT_Taxa, na.rm = TRUE))
         + 0.1*(abundance/max(abundance, na.rm = TRUE))) |>
  cbind(lab_simpson$simpson_index)

# write results into new .csv file 
write_xlsx(lab_ml_model,"abiotic_mi_sampling\\lab_ml_models.xlsx") 
```

```{r}
# Identify rows with NA values
na_rows <- apply(is.na(lab_index_clean), 1, any)

# Extract rows with NA values
na_rows_data <- lab_index_clean[na_rows, ]

# Get row indices of NA values
na_row_indices <- which(na_rows)

# Print the resulting rows and indices
print(na_rows_data)
print(na_row_indices)
```

# Univariate HM DF
```{r}
# combine all abiotic data with abundance & Shannon Diversity 
lab_univariate <- cbind(lab_exp, shannon, abundance)

# write results into new .csv file 
write_xlsx(lab_univariate,"abiotic_mi_sampling\\lab_univariate.xlsx") 
```


