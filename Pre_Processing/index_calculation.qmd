---
title: "Index_Calculation"
format: html
---

# Libraries 
```{r}
#clear R environment 
rm(list = ls())

# Load the required packages
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("dplyr")
pkgCheck("readr")
pkgCheck("tidyr")
pkgCheck("tidyverse")
pkgCheck("stringr")
pkgCheck("writexl")
pkgCheck("gbm")
pkgCheck("dismo")
pkgCheck("raster")
```

# Load Data
```{r}
lab <- read_delim("Pre_Processing/abiotic_mi_sampling/Abiotic_MI_Lab_Model.csv")
```

# Prepare Data 
```{r}
# remove all response variables
lab_exp <- lab[ , c(1:60)]

lab <- lab[ ,-c(1:60)]

lab <- as.data.frame(lapply(lab, as.numeric))
```

# Calculate EPT Taxa 
```{r}
# Plecoptera, Trichoptera, Ephemeroptera
# Define the letter combination to search for
combination_Plecoptera <- "Plecoptera"
combination_Trichoptera <- "Trichoptera"
combination_Ephemeroptera <- "Ephemeroptera"

# Identify the column names containing the letter combination
matching_Plecoptera <- grep(combination_Plecoptera, names(lab), value = TRUE)
matching_Trichoptera <- grep(combination_Trichoptera, names(lab), value = TRUE)
matching_Ephemeroptera <- grep(combination_Ephemeroptera, names(lab), value = TRUE)


# Iterate through each row and count the cells meeting the conditions
lab$Count_Plecoptera <- apply(lab, 1, function(row) {
  sum(!is.na(row[matching_Plecoptera]) & row[matching_Plecoptera] > 0)
})

lab$Count_Trichoptera <- apply(lab, 1, function(row) {
  sum(!is.na(row[matching_Trichoptera]) & row[matching_Trichoptera] > 0)
})

lab$Count_Ephemeroptera <- apply(lab, 1, function(row) {
  sum(!is.na(row[matching_Ephemeroptera]) & row[matching_Ephemeroptera] > 0)
})

# Calculate EPT Taxa per Sampling_location 
EPT_Taxa <- lab$Count_Plecoptera + lab$Count_Trichoptera + lab$Count_Ephemeroptera

# Display the resulting dataframe
print(EPT_Taxa) # - OK?
```

# Shannon (H) Index & Abundance
```{r}
# Create a sample dataframe
lab_Shannon <- lab[ , -c(193:197)]

# Convert all columns to numeric format
lab_Shannon <- data.frame(sapply(lab_Shannon, as.numeric))

# Calculate the total number of observations at each sampling site
# df$total_count <- rowSums(df[, -1])
abundance <- rowSums(lab_Shannon, na.rm = TRUE) # = Abundance

rel_abundance <- abundance / max(abundance) # relative Abundance

# Calculate the proportion of each species within each sampling site
# proportions <- df[, -c(1, ncol(df))] / df$total_count
 proportions <- lab_Shannon[, -c(1, ncol(lab_Shannon))] / abundance

# Calculate the Shannon index for each sampling site
# shannon <- -rowSums(proportions * log2(proportions), na.rm = TRUE)
shannon <- -rowSums(proportions * log2(proportions), na.rm = TRUE)

# Compute the average Shannon index across all sampling sites
average_shannon <- mean(shannon, na.rm = TRUE)

# Display the results
print(shannon)
print(average_shannon)
```

# Number of Taxa 
```{r}
# Iterate through each row and count the cells meeting the conditions
Number_Taxa <- apply(lab_Shannon, 1, function(row) {
  sum(!is.na(row) & row > 0)
})
```


# Combine all Results in one DF
```{r}
# combine all results + response variables 
lab_new <- cbind(lab_exp, shannon, Number_Taxa, abundance, EPT_Taxa, rel_abundance)
```

# K-Index (Theodoropoulos et al., 2018)
```{r}
# calculate k_index and create two dataframes for ML modelling (one with velocity, one with water depth and velocity as environmental explanatory variable)
# only velocity
lab_ml_model_v <- lab_new |>
  mutate(k_index = 0.4*(Number_Taxa/max(Number_Taxa, na.rm = TRUE))
         + 0.3*(shannon/max(shannon, na.rm = TRUE))
         + 0.2*(EPT_Taxa/max(EPT_Taxa, na.rm = TRUE))
         + 0.1*(abundance/max(abundance, na.rm = TRUE))) |>
  dplyr::select(reach, velocity, x, y, shannon, abundance, k_index, rel_abundance) |>
  mutate(x = as.numeric(x),
         y = as.numeric(y),
         velocity = velocity/100)

# water depth + velocity
lab_ml_model_wd_v <- lab_new |>
  mutate(k_index = 0.4*(Number_Taxa/max(Number_Taxa, na.rm = TRUE))
         + 0.3*(shannon/max(shannon, na.rm = TRUE))
         + 0.2*(EPT_Taxa/max(EPT_Taxa, na.rm = TRUE))
         + 0.1*(abundance/max(abundance, na.rm = TRUE))) |>
  dplyr::select(reach, velocity, wd_cm, x, y, shannon, abundance, k_index, rel_abundance) |>
  mutate(x = as.numeric(x),
         y = as.numeric(y),
         velocity = velocity/100,
         wd_m = wd_cm/100) |>
  dplyr::select(-wd_cm)


# write results into new .csv file 
write.csv(lab_ml_model_v, "Pre_Processing/abiotic_mi_sampling/lab_ml_model_v.csv", row.names = FALSE)
write.csv(lab_ml_model_wd_v, "Pre_Processing/abiotic_mi_sampling/lab_ml_model_wd_v.csv", row.names = FALSE)
write_xlsx(lab_ml_model_v,"Pre_Processing\\abiotic_mi_sampling\\lab_ml_v.xlsx") 
write_xlsx(lab_ml_model_wd_v,"Pre_Processing\\abiotic_mi_sampling\\lab_ml_wd_v.xlsx") 
```

```{r}
# df with all environmental variables measured at each sampling location 
lab_ml_model_sampling <- lab_new |>
  mutate(k_index = 0.4*(Number_Taxa/max(Number_Taxa, na.rm = TRUE))
         + 0.3*(shannon/max(shannon, na.rm = TRUE))
         + 0.2*(EPT_Taxa/max(EPT_Taxa, na.rm = TRUE))
         + 0.1*(abundance/max(abundance, na.rm = TRUE))) |>
  dplyr::select(reach, velocity, wd_cm, x, y, z, `DIstance_Wasseranschlaglinie_m`, `Category_Flow_velocity_5_Bewohnbarkeits-klasse`, Clogging_3_Klassen, Clogging_6_Klassen, Substrate_type, `Algae_cover_Bewuchsdichte_5_Kategorien_1-5`, `Moos_cover_Deckungsgrad_6_Kategorien_0-5`, `CPOM_cover_Deckungsgrad_5_Kategorien_1-5`, shannon, abundance, k_index, rel_abundance) |>
  dplyr::rename(cat_velocity = `Category_Flow_velocity_5_Bewohnbarkeits-klasse`,
         dist_w = DIstance_Wasseranschlaglinie_m,
         clog_3_class = Clogging_3_Klassen,
         clog_6_class = Clogging_6_Klassen, 
         sub_type = Substrate_type,
         alg_cover = `Algae_cover_Bewuchsdichte_5_Kategorien_1-5`,
         moos_cover = `Moos_cover_Deckungsgrad_6_Kategorien_0-5`,
         cpom_cover = `CPOM_cover_Deckungsgrad_5_Kategorien_1-5`) |>
  mutate(x = as.numeric(x),
         y = as.numeric(y),
         velocity = velocity/100,
         wd_m = wd_cm/100) |>
  dplyr::select(-wd_cm)

# df with all environmental variables measured including mean value of before, during and after sampling measured variables 
# prep data to calculate mean for variables measured only at one location per section
lab_gauging <- lab_new[ ,c("Water_gauge_MueM_before", "Water_gauge_MueM_during", "Water_gauge_MueM_after")]

lab_q <- lab_new[ ,c("Discharge_m3_s_before", "Discharge_m3_s_during", "Discharge_m3_s_after")]

lab_temp <- lab_new[ ,c("Temperature_C_before", "Temperature_C_during", "Temperature_C_after")]

lab_new$Turbidity_FNU_after <- as.numeric(gsub(">", "", lab_new$Turbidity_FNU_after))
lab_turb <- lab_new[ ,c("Turbidity_FNU_before", "Turbidity_FNU_during", "Turbidity_FNU_after")]

lab_ox_sat <- lab_new[ ,c("Oxygen_saturation_perc_before", "Oxygen_saturation_perc_during", "Oxygen_saturation_perc_after")]

lab_ox_cont <- lab_new[ ,c("Oxygen_content_mg_l_before", "Oxygen_content_mg_l_during", "Oxygen_content_mg_l_after")]

lab_cond <- lab_new[ ,c("Conductivity_ys_s_before", "Conductivity_ys_s_during", "Conductivity_ys_s_after")]

lab_ph <- lab_new[ ,c("pH_before", "pH_during", "pH_after")]
 

# construct df 
lab_ml_model_section <- lab_new |>
  mutate(k_index = 0.4*(Number_Taxa/max(Number_Taxa, na.rm = TRUE))
         + 0.3*(shannon/max(shannon, na.rm = TRUE))
         + 0.2*(EPT_Taxa/max(EPT_Taxa, na.rm = TRUE))
         + 0.1*(abundance/max(abundance, na.rm = TRUE))) |>
  dplyr::rename(date = Date_of_survey.x,
         time = Time_of_survey,
         cat_velocity = `Category_Flow_velocity_5_Bewohnbarkeits-klasse`,
         dist_w = DIstance_Wasseranschlaglinie_m,
         clog_3_class = Clogging_3_Klassen,
         clog_6_class = Clogging_6_Klassen, 
         sub_type = Substrate_type,
         alg_cover = `Algae_cover_Bewuchsdichte_5_Kategorien_1-5`,
         moos_cover = `Moos_cover_Deckungsgrad_6_Kategorien_0-5`,
         cpom_cover = `CPOM_cover_Deckungsgrad_5_Kategorien_1-5`,
         time_before = Time_of_survey_before,
         time_during = Time_of_survey_during,
         time_after = Time_of_survey_after, 
         conduct_before = Conductivity_ys_s_before,
         conduct_during = Conductivity_ys_s_during,
         conduct_after = Conductivity_ys_s_after,
         ox_before = Oxygen_content_mg_l_before,
         ox_during = Oxygen_content_mg_l_during,
         ox_after = Oxygen_content_mg_l_after, 
         ox_sat_before = `Oxygen_saturation_perc_before`,
         ox_sat_during = `Oxygen_saturation_perc_during`,
         ox_sat_after = `Oxygen_saturation_perc_after`,
         gaug_before = Water_gauge_MueM_before,
         gaug_during = Water_gauge_MueM_during,
         gaug_after = Water_gauge_MueM_after,
         q_before = Discharge_m3_s_before,
         q_during = Discharge_m3_s_during,
         q_after = Discharge_m3_s_after,
         temp_before = Temperature_C_before,
         temp_during = Temperature_C_during,
         temp_after = Temperature_C_after,
         turb_before = Turbidity_FNU_before,
         turb_during = Turbidity_FNU_during,
         turb_after = Turbidity_FNU_after) |>
  mutate(x = as.numeric(x),
         y = as.numeric(y),
         velocity = velocity/100,
         wd_m = wd_cm/100) |>
  dplyr::select(-Transect, -Sampling_point, -Abiotic_measured_by.x, -Abiotic_measured_by.y, -River.x, -`RTK-GPS_Nr`, -`MZB_kick-net_taken_by`, -Varia, -Varia_before, -Varia_during, -Varia_after, -Gauging_station, -Sampling_site, -join_key, -wd_cm)
```

```{r}
clog_3_int <- c("none" = 1, "strong" = 3, "slight-medium" = 2)
clog_6_int <- c("none" = 1, "none " = 1, "none-light" = 2, "none-slight" = 3, "slight" = 4, "slight-medium" = 5, "medium-strong" = 6, "strong" = 7)
sub_int <- c("< 2.5 mm" = 0, "25 mm > x > 2.5 mm" = 1, "250 mm > x > 25 mm" = 2, "> 250 mm" = 3)
hydr_type <- c("2a" = 1, "2b" = 2, "3a" = 3, "3b" = 4)
hydr_int <- c("Hydropeaking" = 1, "Residual flow" = 2, "Natural/near-natural" = 3)

data_sampling <- lab_ml_model_sampling |>
  mutate(clog_3_class_int = ifelse(clog_3_class %in% names(clog_3_int), 
                                   clog_3_int[clog_3_class], NA),
         clog_6_class_int = ifelse(clog_6_class %in% names(clog_6_int), 
                                   clog_6_int[clog_6_class], NA),
         sub_type_int = ifelse(sub_type %in% names(sub_int), 
                                   sub_int[sub_type], NA)) 


data_section <- lab_ml_model_section |>
    mutate(clog_3_class_int = ifelse(clog_3_class %in% names(clog_3_int), 
                                   clog_3_int[clog_3_class], NA),
         clog_6_class_int = ifelse(clog_6_class %in% names(clog_6_int), 
                                   clog_6_int[clog_6_class], NA),
         sub_type_int = ifelse(sub_type %in% names(sub_int), 
                                   sub_int[sub_type], NA),
         hydr_type_int = ifelse(Hydropeaking_river_type %in%
                                  names(hydr_type), 
                                   hydr_type[Hydropeaking_river_type], NA),
         hydr_int = ifelse(Hydrokeaking_residual_flow_natural_near_natural
                           %in% names(hydr_int), hydr_int[Hydrokeaking_residual_flow_natural_near_natural], NA)) 


# write results into new .csv file 
write.csv(data_sampling, "Pre_Processing/abiotic_mi_sampling/lab_ml_sampling.csv", row.names = FALSE)
write.csv(data_section, "Pre_Processing/abiotic_mi_sampling/lab_ml_section.csv", row.names = FALSE)
write_xlsx(data_sampling,"Pre_Processing\\abiotic_mi_sampling\\lab_ml_sampling.xlsx") 
write_xlsx(data_section,"Pre_Processing\\abiotic_mi_sampling\\lab_ml_section.xlsx")
```

# Univariate HM DF
```{r}
# combine all abiotic data with abundance & Shannon Diversity 
lab_univariate <- lab_ml_model_wd_v |>
  dplyr::select(reach, velocity, wd_m, x, y, shannon, abundance, k_index, rel_abundance) |>
  mutate(x = as.numeric(x),
         y = as.numeric(y))

# write results into new .csv file 
write.csv(lab_univariate, "Pre_Processing/abiotic_mi_sampling/lab_univariate.csv", row.names = FALSE)
write_xlsx(lab_univariate,"Pre_Processing\\abiotic_mi_sampling\\lab_univariate.xlsx") 
```

# Selected variables 
|>
  group_by(reach) |>
  dplyr::summarise(ecomorph_class = mean(ecomorph_class),
            biogeo_int = mean(biogeo_int),
            mean_diff_nitrogen = mean(mean_diff_nitrogen),
            mean_diff_phosphor = mean(mean_diff_phosphor)) 
            
            |>
  group_by(reach) |>
  dplyr::summarise(ecomorph_class = mean(ecomorph_class),
                biogeo_int = mean(biogeo_int),
                mean_diff_nitrogen = mean(mean_diff_nitrogen),
                mean_diff_phosphor = mean(mean_diff_phosphor),
            nr_inhabitants = mean(nr_inhabitants),
            dom_ww_disch = mean(dom_ww_disch),
            geology_int = mean(geology_int))
            
```{r}
# change biogeo regions and geology into integers for ML modelling
biogeo_new <- c("Southern Alps" = 0, "Central Plateau" = 1, "Northern Alps" = 2, "Eastern Central Alps" = 3)

geology_new <- c("karbonatisch" = 2, "silikatisch" = 1, "-" = 0)


aggr_gis <- read_delim("Pre_Processing/abiotic_mi_sampling/environmental_gis.csv") |>
  dplyr::select(`Ecomorphological Class`, `BIOGEO`, `Mean diffuse total nitrogen [kg/ha a]`, `Mean diffuse total phosphor [kg/ha a]`, `Study site (Untersuchungsstelle)`) |>
  dplyr::rename(reach = `Study site (Untersuchungsstelle)`,
                ecomorph_class = `Ecomorphological Class`,
                biogeo = `BIOGEO`,
                mean_diff_nitrogen = `Mean diffuse total nitrogen [kg/ha a]`,
                mean_diff_phosphor = `Mean diffuse total phosphor [kg/ha a]`) |>
  mutate(biogeo_int = ifelse(biogeo %in% names(biogeo_new), 
                                   biogeo_new[biogeo], NA),
         ecomorph_class = ifelse(ecomorph_class == "-", 0, as.numeric(ecomorph_class))) |>
  dplyr::select(-biogeo) 

aggr_gis_2 <- read_delim("Pre_Processing/abiotic_mi_sampling/environmental_gis.csv") |>
  dplyr::select(`Ecomorphological Class`, `BIOGEO`, `Mean diffuse total nitrogen [kg/ha a]`, `Mean diffuse total phosphor [kg/ha a]`, `Study site (Untersuchungsstelle)`, `Number of inhabitants`, `Domestic wastewater discharge`, Geology) |>
  dplyr::rename(reach = `Study site (Untersuchungsstelle)`,
                ecomorph_class = `Ecomorphological Class`,
                biogeo = `BIOGEO`,
                mean_diff_nitrogen = `Mean diffuse total nitrogen [kg/ha a]`,
                mean_diff_phosphor = `Mean diffuse total phosphor [kg/ha a]`,
                nr_inhabitants = `Number of inhabitants`,
                dom_ww_disch = `Domestic wastewater discharge`,
                geology = Geology) |>
  mutate(biogeo_int = ifelse(biogeo %in% names(biogeo_new), 
                                   biogeo_new[biogeo], NA),
         geology_int = ifelse(geology %in% names(geology_new), 
                                   geology_new[geology], NA),
         ecomorph_class = ifelse(ecomorph_class == "-", 0, as.numeric(ecomorph_class))) |>
  dplyr::select(-biogeo, -geology) 


# select all variables needed from sampling locations dataset
data <- data_sampling |>
  dplyr::select(reach, z, x, y, velocity, wd_m, k_index, shannon, abundance, rel_abundance)

data_new <- left_join(data, aggr_gis, by = "reach")

data_new_2 <- left_join(data, aggr_gis_2, by = "reach")

# save as .csv file
write.csv(data_new, "Pre_Processing/abiotic_mi_sampling/ml_selected_var.csv", row.names = FALSE)  

write.csv(data_new_2, "Pre_Processing/abiotic_mi_sampling/ml_sel_var_2.csv", row.names = FALSE) 
```




