---
title: "RF_model"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
pkgCheck("Fgmutils") # for bias calculation (bias() function)
pkgCheck("hydroGOF") # for NSE calculation with NSE() function 
```

# Load & prepare data 
```{r}
# Load data containing velocity as predictor variable 
data_v <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_v_add.csv") 

# Load data containing velocity and wd as predictors 
data_wd <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_wd_add.csv") 

# Load data containing all variables measured at each sampling locations and remove all other "chr" variables
data_sampling <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_sampling_add.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type)

# Load data containing all variables measured at each river section and remove all other "chr" variables
# Additionally, remove ox_sat columns, as they contain NA values
data_section <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_section_add.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type, -Hydropeaking_river_type, -Hydrokeaking_residual_flow_natural_near_natural, -date, -time, -time_before, -time_during, -time_after, -Category_Water_depth, -Number_Taxa, -EPT_Taxa, -ox_sat_after, -ox_sat_before, -ox_sat_during, -hydr_type_int, -hydr_int)
```
    
```{r}
### TRAINING SETS ###
# w/o hydr. models "GL1", "GL2", "L2", "M1", "S1", "S2", "TH4", "VR3"
# training set containing velocity 
training_v <- data_v |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

# training set containing velocity + wd
training_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location 
training_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location and overall river section 
training_section <- data_section |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

### TEST SETS ###
# test set containing velocity 
test_v <- data_v |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")

# test set containing velocity + wd
test_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location 
test_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location and overall river section 
test_section <- data_section |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")
```

## Training Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response 
training_v_k <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance)

# With shannon index as response 
training_v_s <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance)

# With abundance as response 
training_v_a <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance)

# With relative abundance as response  
training_v_ra <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index)

### PREDICTOR: VELOCITY AND WD ### ---------------------------------------------
# With k_index as response 
training_wd_k <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance)

# With shannon index as response 
training_wd_s <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance)

# With abundance index as response 
training_wd_a <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance)

# With relative abundance index as response 
training_wd_ra <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index)

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response 
training_samp_k <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_samp_a <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_samp_ra <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response 
training_sec_k <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_sec_a <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_sec_ra <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Training Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response 
training_v_k_c <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance, -x, -y)

# With shannon index as response
training_v_s_c <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance, -x, -y)

# With abundance as response
training_v_a_c <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance, -x, -y)

# With rel_abundance as response
training_v_ra_c <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index, -x, -y)

### PREDICTOR: VELOCITY AND WD ### ----------------------------------
# With k_index as response 
training_wd_k_c <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance, -x, -y)

# With shannon index as response 
training_wd_s_c <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance, -x, -y)

# With abundance as response 
training_wd_a_c <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance, -x, -y)

# With rel_abundance as response 
training_wd_ra_c <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index, -x, -y)

### PREDICTOR: SAMPLING LOCATIONS ### --------------------------------
# With k_index as response 
training_samp_k_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s_c <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_samp_a_c <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_samp_ra_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### ----------------------------------
# With k_index as response 
training_sec_k_c <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s_c <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_sec_a_c <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_sec_ra_c <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)
```

## Test Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ------------------------------------------
# With k_index as response
test_v_k <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance)

# With shannon index as response
test_v_s <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance)

# With abundance as response 
test_v_a <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance)

# With relative abundance as response 
test_v_ra <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance)

# With shannon index as response 
test_wd_s <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance)

# With abundance as response 
test_wd_a <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance)

# With relative abundance as response 
test_wd_ra <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response
test_samp_a <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_samp_ra <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
test_sec_s <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
test_sec_a <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_sec_ra <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Test Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response
test_v_k_c <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance, -x, -y)

# With shannon index as response
test_v_s_c <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance, -x, -y) 

# With abundance as response
test_v_a_c <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance, -x, -y) 

# With rel_abundance as response
test_v_ra_c <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index, -x, -y)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k_c <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance, -x, -y) 

# With shannon index as response 
test_wd_s_c <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance, -x, -y)

# With abundance as response 
test_wd_a_c <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance, -x, -y)

# With rel_abundance as response 
test_wd_ra_c <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index, -x, -y)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s_c <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
test_samp_a_c <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
test_samp_ra_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k_c <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response
test_sec_s_c <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response
test_sec_a_c <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response
test_sec_ra_c <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)
```

# Random Forest 
## Hyperparameter tuning 
```{r}
# convert dataframes into spatial objects for mlr3 spatial hyperparameter tuning
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
data_v_k_sp <-  st_as_sf(training_v_k, coords =  c("x", "y"))
st_crs(data_v_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_v_s_sp <-  st_as_sf(training_v_s, coords =  c("x", "y"))
st_crs(data_v_s_sp) <- "EPSG: 2056"

# With abundance as response
data_v_a_sp <-  st_as_sf(training_v_a, coords =  c("x", "y"))
st_crs(data_v_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_v_ra_sp <-  st_as_sf(training_v_ra, coords =  c("x", "y"))
st_crs(data_v_ra_sp) <- "EPSG: 2056"

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# With k_index as response
data_wd_k_sp <-  st_as_sf(training_wd_k, coords =  c("x", "y"))
st_crs(data_wd_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_wd_s_sp <-  st_as_sf(training_wd_s, coords =  c("x", "y"))
st_crs(data_wd_s_sp) <- "EPSG: 2056"

# With abundance as response
data_wd_a_sp <-  st_as_sf(training_wd_a, coords =  c("x", "y"))
st_crs(data_wd_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_wd_ra_sp <-  st_as_sf(training_wd_ra, coords =  c("x", "y"))
st_crs(data_wd_ra_sp) <- "EPSG: 2056"

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response
data_samp_k_sp <-  st_as_sf(training_samp_k, coords =  c("x", "y"))
st_crs(data_samp_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_samp_s_sp <-  st_as_sf(training_samp_s, coords =  c("x", "y"))
st_crs(data_samp_s_sp) <- "EPSG: 2056"

# With abundance as response
data_samp_a_sp <-  st_as_sf(training_samp_a, coords =  c("x", "y"))
st_crs(data_samp_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_samp_ra_sp <-  st_as_sf(training_samp_ra, coords =  c("x", "y"))
st_crs(data_samp_ra_sp) <- "EPSG: 2056"

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response
data_sec_k_sp <-  st_as_sf(training_sec_k, coords =  c("x", "y"))
st_crs(data_sec_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_sec_s_sp <-  st_as_sf(training_sec_s, coords =  c("x", "y"))
st_crs(data_sec_s_sp) <- "EPSG: 2056"

# With abundance as response
data_sec_a_sp <-  st_as_sf(training_sec_a, coords =  c("x", "y"))
st_crs(data_sec_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_sec_ra_sp <-  st_as_sf(training_sec_ra, coords =  c("x", "y"))
st_crs(data_sec_ra_sp) <- "EPSG: 2056"
```

### Create Task & Learner
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# TASK with k_index as response
task_rf_v_k <- mlr3spatiotempcv::as_task_regr_st(data_v_k_sp,
  id = "velocity_k_index", target = "k_index")

# TASK with shannon index as response
task_rf_v_s <- mlr3spatiotempcv::as_task_regr_st(data_v_s_sp,
  id = "velocity_shannon", target = "shannon")

# TASK with abundance as response
task_rf_v_a <- mlr3spatiotempcv::as_task_regr_st(data_v_a_sp,
  id = "velocity_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_v_ra <- mlr3spatiotempcv::as_task_regr_st(data_v_ra_sp,
  id = "velocity_rel_abundance", target = "rel_abundance")

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# TASK with k_index as response
task_rf_wd_k <- mlr3spatiotempcv::as_task_regr_st(data_wd_k_sp,
  id = "wd_k_index", target = "k_index")

# TASK with shannon index as response
task_rf_wd_s <- mlr3spatiotempcv::as_task_regr_st(data_wd_s_sp,
  id = "wd_shannon", target = "shannon")

# TASK with abundance as response
task_rf_wd_a <- mlr3spatiotempcv::as_task_regr_st(data_wd_a_sp,
  id = "wd_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_wd_ra <- mlr3spatiotempcv::as_task_regr_st(data_wd_ra_sp,
  id = "wd_rel_abundance", target = "rel_abundance")

### PREDICTORS: SAMPLING LOCATIONS ### -----------------------------------------
# TASK with k_index as response
task_rf_samp_k <- mlr3spatiotempcv::as_task_regr_st(data_samp_k_sp,
  id = "sampling_k_index", target = "k_index")

# TASK with shannon index as response
task_rf_samp_s <- mlr3spatiotempcv::as_task_regr_st(data_samp_s_sp,
  id = "sampling_shannon", target = "shannon")

# TASK with abundance as response
task_rf_samp_a <- mlr3spatiotempcv::as_task_regr_st(data_samp_a_sp,
  id = "sampling_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_samp_ra <- mlr3spatiotempcv::as_task_regr_st(data_samp_ra_sp,
  id = "sampling_rel_abundance", target = "rel_abundance")

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# TASK with k_index as response
task_rf_sec_k <- mlr3spatiotempcv::as_task_regr_st(data_sec_k_sp,
  id = "section_k_index", target = "k_index")

# TASK with shannon index as response 
task_rf_sec_s <- mlr3spatiotempcv::as_task_regr_st(data_sec_s_sp,
  id = "section_shannon", target = "shannon")

# TASK with abundance as response
task_rf_sec_a <- mlr3spatiotempcv::as_task_regr_st(data_sec_a_sp,
  id = "section_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_sec_ra <- mlr3spatiotempcv::as_task_regr_st(data_sec_ra_sp,
  id = "section_rel_abundance", target = "rel_abundance")

### LEARNER ### ---------------------------------------------------------------
# learner for a random forest model from the ranger package
lrn_rf <- lrn("regr.ranger", predict_type = "response", importance = "permutation")
```

### Specify Search Space
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# specify the search space for k_index as response
search_space_v_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_v_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_v_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_v_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# specify the search space for k_index as response
search_space_wd_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_wd_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_wd_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_wd_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)


### PREDICTORS: SAMPLING LOCATIONS ### -----------------------------------------
# specify the search space for k_index as response
search_space_samp_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_samp_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_samp_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_samp_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# specify the search space for k_index as response
search_space_sec_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_sec_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_sec_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_sec_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)
```


### Specify Autotuner  
resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning # gibt kein richtig, falsch, je mehr folds desto mehr modelle müssen trainiert werden
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
autotuner_rf_v_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning  
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_v_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response 
autotuner_rf_v_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_v_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_v_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_v_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_v_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_v_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: VELOCITY AND WD ### --------------------------------------------
# With k_index as response
autotuner_rf_wd_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_wd_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_rf_wd_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_wd_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_wd_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_wd_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_wd_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_wd_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: SAMPLING LOCATION ### ------------------------------------------
# With k_index as response
autotuner_rf_samp_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_samp_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_rf_samp_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_samp_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_samp_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_samp_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_samp_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_samp_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# With k_index as response
autotuner_rf_sec_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_sec_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_rf_sec_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_sec_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_sec_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_sec_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_sec_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_sec_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)
```

### Train Autotuner
```{r}
# set seed to obtain the same results with each run
set.seed(0412022)

### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
autotuner_rf_v_k$train(task_rf_v_k)

# With shannon index as response
autotuner_rf_v_s$train(task_rf_v_s)

# With abundance as response
autotuner_rf_v_a$train(task_rf_v_a)

# With rel_abundance as response 
autotuner_rf_v_ra$train(task_rf_v_ra)

### PREDICTORS: VELOCITY + WD ### ----------------------------------------------
# With k_index as response
autotuner_rf_wd_k$train(task_rf_wd_k)

# With shannon index as response
autotuner_rf_wd_s$train(task_rf_wd_s)

# With abundance as response
autotuner_rf_wd_a$train(task_rf_wd_a)

# With rel_abundance as response
autotuner_rf_wd_ra$train(task_rf_wd_ra)

### PREDICTORS: SAMPLING LOCATION ### ------------------------------------------
# With k_index as response
autotuner_rf_samp_k$train(task_rf_samp_k)

# With shannon index as response 
autotuner_rf_samp_s$train(task_rf_samp_s)

# With abundance as response
autotuner_rf_samp_a$train(task_rf_samp_a)

# With rel_abundance as response
autotuner_rf_samp_ra$train(task_rf_samp_ra)

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# With k_index as response
autotuner_rf_sec_k$train(task_rf_sec_k)

# With shannon index as response 
autotuner_rf_sec_s$train(task_rf_sec_s)

# With abundance as response
autotuner_rf_sec_a$train(task_rf_sec_a)

# With rel_abundance as response
autotuner_rf_sec_ra$train(task_rf_sec_ra)
```

### Tuned Hyperparameters
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
autotuner_rf_v_k$tuning_result

# With shannon index as response
autotuner_rf_v_s$tuning_result

# With abundance as response
autotuner_rf_v_a$tuning_result

# With rel_abundance as response
autotuner_rf_v_ra$tuning_result

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
autotuner_rf_wd_k$tuning_result

# With shannon index as response
autotuner_rf_wd_s$tuning_result

# With abundance as response
autotuner_rf_wd_a$tuning_result

# With rel_abundance as response
autotuner_rf_wd_ra$tuning_result

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
autotuner_rf_samp_k$tuning_result

# With shannon index as response
autotuner_rf_samp_s$tuning_result

# With abundance as response
autotuner_rf_samp_a$tuning_result

# With rel_abundance as response
autotuner_rf_samp_ra$tuning_result

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
autotuner_rf_sec_k$tuning_result

# With shannon index as response
autotuner_rf_sec_s$tuning_result

# With abundance as response
autotuner_rf_sec_a$tuning_result

# With rel_abundance as response
autotuner_rf_sec_ra$tuning_result
```


# Ranger Models 
## Ranger w/o coordinates 
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# With k_index as response
#   mtry sample.fraction min.node.size 
#1:    2       0.2059293            10 
rf_model_v_k_c <- ranger(formula = k_index ~., data = training_v_k_c, mtry = 2, sample.fraction = 0.2059293, min.node.size = 10, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2443021             5          
rf_model_v_s_c <- ranger(formula = shannon ~., data = training_v_s_c, mtry = 1, sample.fraction = 0.2443021, min.node.size = 5, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    4       0.2741381             8         
rf_model_v_a_c <- ranger(formula = abundance ~., data = training_v_a_c, mtry = 4, sample.fraction = 0.2741381, min.node.size = 8, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    4       0.2679696             2         
rf_model_v_ra_c <- ranger(formula = rel_abundance ~., data = training_v_ra_c, mtry = 4, sample.fraction = 0.2679696, min.node.size = 2, importance = "impurity")

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
#   mtry sample.fraction min.node.size 
#1:    4       0.2170115             6          
rf_model_wd_k_c <- ranger(formula = k_index ~., data = training_wd_k_c, mtry = 4, sample.fraction = 0.2170115, min.node.size = 6, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2068668             5          
rf_model_wd_s_c <- ranger(formula = shannon ~., data = training_wd_s_c, mtry = 1, sample.fraction = 0.2068668, min.node.size = 5, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    4       0.2132617             4          
rf_model_wd_a_c <- ranger(formula = abundance ~., data = training_wd_a_c, mtry = 4, sample.fraction = 0.2132617, min.node.size = 4, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2197985             6          
rf_model_wd_ra_c <- ranger(formula = rel_abundance ~., data = training_wd_ra_c, mtry = 1, sample.fraction = 0.2197985, min.node.size = 6, importance = "impurity")

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.3387031             5          
rf_model_samp_k_c <- ranger(formula = k_index ~., data = training_samp_k_c, mtry = 1, sample.fraction = 0.3387031, min.node.size = 5, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2275265             6          
rf_model_samp_s_c <- ranger(formula = shannon ~., data = training_samp_s_c, mtry = 1, sample.fraction = 0.2275265, min.node.size = 6, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:   14       0.4662279             2          
rf_model_samp_a_c <- ranger(formula = abundance ~., data = training_samp_a_c, mtry = 14, sample.fraction = 0.4662279, min.node.size = 2, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    9        0.827493             7          
rf_model_samp_ra_c <- ranger(formula = rel_abundance ~., data = training_samp_ra_c, mtry = 9, sample.fraction = 0.827493, min.node.size = 7, importance = "impurity")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.4870585             7         
rf_model_sec_k_c <- ranger(formula = k_index ~., data = training_sec_k_c, mtry = 1, sample.fraction = 0.4870585, min.node.size = 7, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:   32        0.365004             8         
rf_model_sec_s_c <- ranger(formula = shannon ~., data = training_sec_s_c, mtry = 32, sample.fraction = 0.365004, min.node.size = 8, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.3062136             4           
rf_model_sec_a_c <- ranger(formula = abundance ~., data = training_sec_a_c, mtry = 1, sample.fraction = 0.3062136, min.node.size = 4, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.4203471            10          
rf_model_sec_ra_c <- ranger(formula = rel_abundance ~., data = training_sec_ra_c, mtry = 1, sample.fraction = 0.4203471, min.node.size = 10, importance = "impurity")
```

# Model Evaluation 
## Variable Importance
```{r}
### VARIABLE IMPORTANCE FROM RANGER MODELS ### --------------------------------
### PREDICTOR: ONLY VELOCITY ### ----------------------------------------------
# w/o coordinates
vi_v_k_c <- importance(rf_model_v_k_c) 
vi_rel_v_k_c <- vi_v_k_c/sum(vi_v_k_c) 

vi_v_s_c <- importance(rf_model_v_s_c) 
vi_rel_v_s_c <- vi_v_s_c/sum(vi_v_s_c) 

vi_v_a_c <- importance(rf_model_v_a_c) 
vi_rel_v_a_c <- vi_v_a_c/sum(vi_v_a_c) 

vi_v_ra_c <- importance(rf_model_v_ra_c) 
vi_rel_v_ra_c <- vi_v_ra_c/sum(vi_v_ra_c) 


### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# w/o coordinates
vi_wd_k_c <- importance(rf_model_wd_k_c) 
vi_rel_wd_k_c <- vi_wd_k_c/sum(vi_wd_k_c) 

vi_wd_s_c <- importance(rf_model_wd_s_c) 
vi_rel_wd_s_c <- vi_wd_s_c/sum(vi_wd_s_c) 

vi_wd_a_c <- importance(rf_model_wd_a_c) 
vi_rel_wd_a_c <- vi_wd_a_c/sum(vi_wd_a_c) 

vi_wd_ra_c <- importance(rf_model_wd_ra_c) 
vi_rel_wd_ra_c <- vi_wd_ra_c/sum(vi_wd_ra_c) 

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# w/o coordinates
vi_samp_k_c <- importance(rf_model_samp_k_c) 
vi_rel_samp_k_c <- vi_samp_k_c/sum(vi_samp_k_c) 

vi_samp_s_c <- importance(rf_model_samp_s_c) 
vi_rel_samp_s_c <- vi_samp_s_c/sum(vi_samp_s_c) 

vi_samp_a_c <- importance(rf_model_samp_a_c) 
vi_rel_samp_a_c <- vi_samp_a_c/sum(vi_samp_a_c) 

vi_samp_ra_c <- importance(rf_model_samp_ra_c) 
vi_rel_samp_ra_c <- vi_samp_ra_c/sum(vi_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# w/o coordinates
vi_sec_k_c <- importance(rf_model_sec_k_c) 
vi_rel_sec_k_c <- vi_sec_k_c/sum(vi_sec_k_c) 

vi_sec_s_c <- importance(rf_model_sec_s_c) 
vi_rel_sec_s_c <- vi_sec_s_c/sum(vi_sec_s_c) 

vi_sec_a_c <- importance(rf_model_sec_a_c) 
vi_rel_sec_a_c <- vi_sec_a_c/sum(vi_sec_a_c) 

vi_sec_ra_c <- importance(rf_model_sec_ra_c)
vi_rel_sec_ra_c <- vi_sec_ra_c/sum(vi_sec_ra_c) 


# bind results together ------------------------------------------------------
vi_rf_model_v_c <- rbind(vi_v_k_c, vi_v_s_c, vi_v_a_c, vi_v_ra_c)
vi_rel_rf_model_v_c <- rbind(vi_rel_v_k_c, vi_rel_v_s_c, vi_rel_v_a_c, vi_rel_v_ra_c)
vi_rf_model_wd_c <- rbind(vi_wd_k_c, vi_wd_s_c, vi_wd_a_c, vi_wd_ra_c)
vi_rel_rf_model_wd_c <- rbind(vi_rel_wd_k_c, vi_rel_wd_s_c, vi_rel_wd_a_c, vi_rel_wd_ra_c)
vi_rf_model_samp_c <- rbind(vi_samp_k_c, vi_samp_s_c, vi_samp_a_c, vi_samp_ra_c)
vi_rel_rf_model_samp_c <- rbind(vi_rel_samp_k_c, vi_rel_samp_s_c, vi_rel_samp_a_c, vi_rel_samp_ra_c)
vi_rf_model_sec_c <- rbind(vi_sec_k_c, vi_sec_s_c, vi_sec_a_c, vi_sec_ra_c)
vi_rel_rf_model_sec_c <- rbind(vi_rel_sec_k_c, vi_rel_sec_s_c, vi_rel_sec_a_c, vi_rel_sec_ra_c)

# write results into .csv ------------------------------------------------------
write.csv(vi_rf_model_v_c, "ML_model/var_imp/vi_rf_model_v_woc_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_v_c, "ML_model/var_imp/vi_rel_rf_model_v_woc_add.csv", row.names = FALSE)
write.csv(vi_rf_model_wd_c, "ML_model/var_imp/vi_rf_model_wd_woc_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_wd_c, "ML_model/var_imp/vi_rel_rf_model_wd_woc_add.csv", row.names = FALSE)
write.csv(vi_rf_model_samp_c, "ML_model/var_imp/vi_rf_model_samp_woc_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_samp_c, "ML_model/var_imp/vi_rel_rf_model_samp_woc_add.csv", row.names = FALSE)
write.csv(vi_rf_model_sec_c, "ML_model/var_imp/vi_rf_model_sec_woc_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_sec_c, "ML_model/var_imp/vi_rel_rf_model_sec_woc_add.csv", row.names = FALSE)
```

## Partial dependence plots
### Data extraction & export
```{r}
### PREDICTOR: VELOCITY ### -------------------------------------------------
# With k_index as response --------------------------------------------------
### velocity
pdp_model_v_k_c <- pdp::partial(rf_model_v_k_c, pred.var = "velocity")|>
  mutate(predictors = "velocity_c",
         model = "velocity w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_k_c, "ML_Model/pdp_data/pdp_v_k_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_v_k_c <- pdp::partial(rf_model_v_k_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "velocity w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_f_v_k_c, "ML_Model/pdp_data/pdp_f_v_k_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_v_k_c <- pdp::partial(rf_model_v_k_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "velocity w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_s_v_k_c, "ML_Model/pdp_data/pdp_s_v_k_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_v_k_c <- pdp::partial(rf_model_v_k_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "velocity w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_sp_v_k_c, "ML_Model/pdp_data/pdp_sp_v_k_c_rf_add.csv", row.names = FALSE)

# With shannon index as response ----------------------------------------------
### velocity 
pdp_model_v_s_c <- pdp::partial(rf_model_v_s_c, pred.var = "velocity")|>
  mutate(predictors = "velocity_c",
         model = "velocity w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_v_s_c, "ML_Model/pdp_data/pdp_v_s_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_v_s_c <- pdp::partial(rf_model_v_s_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "velocity w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_f_v_s_c, "ML_Model/pdp_data/pdp_f_v_s_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_v_s_c <- pdp::partial(rf_model_v_s_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "velocity w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_s_v_s_c, "ML_Model/pdp_data/pdp_s_v_s_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_v_s_c <- pdp::partial(rf_model_v_s_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "velocity w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_sp_v_s_c, "ML_Model/pdp_data/pdp_sp_v_s_c_rf_add.csv", row.names = FALSE)

# With abundance as response --------------------------------------------------
### velocity 
pdp_model_v_a_c <- pdp::partial(rf_model_v_a_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "velocity w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_v_a_c, "ML_Model/pdp_data/pdp_v_a_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_v_a_c <- pdp::partial(rf_model_v_a_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "velocity w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_f_v_a_c, "ML_Model/pdp_data/pdp_f_v_a_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_v_a_c <- pdp::partial(rf_model_v_a_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "velocity w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_s_v_a_c, "ML_Model/pdp_data/pdp_s_v_a_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_v_a_c <- pdp::partial(rf_model_v_a_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "velocity w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_sp_v_a_c, "ML_Model/pdp_data/pdp_sp_v_a_c_rf_add.csv", row.names = FALSE)

# With rel_abundance as response ----------------------------------------------
### velocity 
pdp_model_v_ra_c <- pdp::partial(rf_model_v_ra_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "velocity w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_ra_c, "ML_Model/pdp_data/pdp_v_ra_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_v_ra_c <- pdp::partial(rf_model_v_ra_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "velocity w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_f_v_ra_c, "ML_Model/pdp_data/pdp_f_v_ra_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_v_ra_c <- pdp::partial(rf_model_v_ra_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "velocity w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_s_v_ra_c, "ML_Model/pdp_data/pdp_s_v_ra_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_v_ra_c <- pdp::partial(rf_model_v_ra_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "velocity w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_sp_v_ra_c, "ML_Model/pdp_data/pdp_sp_v_ra_c_rf_add.csv", row.names = FALSE)

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
pdp_model_v_wd_k_c <- pdp::partial(rf_model_wd_k_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "v + wd w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_wd_k_c, "ML_Model/pdp_data/pdp_v_wd_k_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_wd_k_c <- pdp::partial(rf_model_wd_k_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "v + wd w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_f_wd_k_c, "ML_Model/pdp_data/pdp_f_wd_k_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_wd_k_c <- pdp::partial(rf_model_wd_k_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "v + wd w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_s_wd_k_c, "ML_Model/pdp_data/pdp_s_wd_k_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_wd_k_c <- pdp::partial(rf_model_wd_k_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "v + wd w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_sp_wd_k_c, "ML_Model/pdp_data/pdp_sp_wd_k_c_rf_add.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_k_c <- pdp::partial(rf_model_wd_k_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "v + wd w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_wd_k_c, "ML_Model/pdp_data/pdp_wd_k_c_rf_add.csv", row.names = FALSE)

# With shannon index as response ----------------------------------------------
### velocity 
pdp_model_v_wd_s_c <- pdp::partial(rf_model_wd_s_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "v + wd w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_v_wd_s_c, "ML_Model/pdp_data/pdp_v_wd_s_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_wd_s_c <- pdp::partial(rf_model_wd_s_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "v + wd w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_f_wd_s_c, "ML_Model/pdp_data/pdp_f_wd_s_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_wd_s_c <- pdp::partial(rf_model_wd_s_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "v + wd w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_s_wd_s_c, "ML_Model/pdp_data/pdp_s_wd_s_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_wd_s_c <- pdp::partial(rf_model_wd_s_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "v + wd w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_sp_wd_s_c, "ML_Model/pdp_data/pdp_sp_wd_s_c_rf_add.csv", row.names = FALSE)

### wd_m
pdp_model_wd_s_c <- pdp::partial(rf_model_wd_s_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "v + wd w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_wd_s_c, "ML_Model/pdp_data/pdp_wd_s_c_rf_add.csv", row.names = FALSE)

# With abundance as response --------------------------------------------------
### velocity 
pdp_model_v_wd_a_c <- pdp::partial(rf_model_wd_a_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "v + wd w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_v_wd_a_c, "ML_Model/pdp_data/pdp_v_wd_a_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_wd_a_c <- pdp::partial(rf_model_wd_a_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "v + wd w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_f_wd_a_c, "ML_Model/pdp_data/pdp_f_wd_a_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_wd_a_c <- pdp::partial(rf_model_wd_a_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "v + wd w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_s_wd_a_c, "ML_Model/pdp_data/pdp_s_wd_a_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_wd_a_c <- pdp::partial(rf_model_wd_a_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "v + wd w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_sp_wd_a_c, "ML_Model/pdp_data/pdp_sp_wd_a_c_rf_add.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_a_c <- pdp::partial(rf_model_wd_a_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "v + wd w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_wd_a_c, "ML_Model/pdp_data/pdp_wd_a_c_rf_add.csv", row.names = FALSE)

# With rel_abundance as response ---------------------------------------------
### velocity
pdp_model_v_wd_ra_c <- pdp::partial(rf_model_wd_ra_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "v + wd w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_wd_ra_c, "ML_Model/pdp_data/pdp_v_wd_ra_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_wd_ra_c <- pdp::partial(rf_model_wd_ra_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "v + wd w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_f_wd_ra_c, "ML_Model/pdp_data/pdp_f_wd_ra_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_wd_ra_c <- pdp::partial(rf_model_wd_ra_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "v + wd w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_s_wd_ra_c, "ML_Model/pdp_data/pdp_s_wd_ra_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_wd_ra_c <- pdp::partial(rf_model_wd_ra_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "v + wd w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_sp_wd_ra_c, "ML_Model/pdp_data/pdp_sp_wd_ra_c_rf_add.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_ra_c <- pdp::partial(rf_model_wd_ra_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "v + wd w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_wd_ra_c, "ML_Model/pdp_data/pdp_wd_ra_c_rf_add.csv", row.names = FALSE)

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
pdp_model_v_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_samp_k_c, "ML_Model/pdp_data/pdp_v_samp_k_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_f_samp_k_c, "ML_Model/pdp_data/pdp_f_samp_k_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_s_samp_k_c, "ML_Model/pdp_data/pdp_s_samp_k_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_sp_samp_k_c, "ML_Model/pdp_data/pdp_sp_samp_k_c_rf_add.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_wd_samp_k_c, "ML_Model/pdp_data/pdp_wd_samp_k_c_rf_add.csv", row.names = FALSE)

### z 
pdp_model_z_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_z_samp_k_c, "ML_Model/pdp_data/pdp_z_samp_k_c_rf_add.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_dist_samp_k_c, "ML_Model/pdp_data/pdp_dist_samp_k_c_rf_add.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cv_samp_k_c, "ML_Model/pdp_data/pdp_cv_samp_k_c_rf_add.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ac_samp_k_c, "ML_Model/pdp_data/pdp_ac_samp_k_c_rf_add.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_mc_samp_k_c, "ML_Model/pdp_data/pdp_mc_samp_k_c_rf_add.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cc_samp_k_c, "ML_Model/pdp_data/pdp_cc_samp_k_c_rf_add.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_clog_3_samp_k_c, "ML_Model/pdp_data/pdp_clog_3_samp_k_c_rf_add.csv", row.names = FALSE)

### clog_6 
pdp_model_clog_6_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_clog_6_samp_k_c, "ML_Model/pdp_data/pdp_clog_6_samp_k_c_rf_add.csv", row.names = FALSE)

### sub_type
pdp_model_sub_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_sub_samp_k_c, "ML_Model/pdp_data/pdp_sub_samp_k_c_rf_add.csv", row.names = FALSE)

# With shannon index as response ----------------------------------------------
### velocity 
pdp_model_v_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_v_samp_s_c, "ML_Model/pdp_data/pdp_v_samp_s_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_f_samp_s_c, "ML_Model/pdp_data/pdp_f_samp_s_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_s_samp_s_c, "ML_Model/pdp_data/pdp_s_samp_s_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_sp_samp_s_c, "ML_Model/pdp_data/pdp_sp_samp_s_c_rf_add.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_wd_samp_s_c, "ML_Model/pdp_data/pdp_wd_samp_s_c_rf_add.csv", row.names = FALSE)

### z 
pdp_model_z_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_z_samp_s_c, "ML_Model/pdp_data/pdp_z_samp_s_c_rf_add.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_dist_samp_s_c, "ML_Model/pdp_data/pdp_dist_samp_s_c_rf_add.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/ coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cv_samp_s_c, "ML_Model/pdp_data/pdp_cv_samp_s_c_rf_add.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ac_samp_s_c, "ML_Model/pdp_data/pdp_ac_samp_s_c_rf_add.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_mc_samp_s_c, "ML_Model/pdp_data/pdp_mc_samp_s_c_rf_add.csv", row.names = FALSE)

### cpom_cover
pdp_model_cc_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cc_samp_s_c, "ML_Model/pdp_data/pdp_cc_samp_s_c_rf_add.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_3_samp_s_c, "ML_Model/pdp_data/pdp_clog_3_samp_s_c_rf_add.csv", row.names = FALSE)

### clog_6 
pdp_model_clog_6_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_6_samp_s_c, "ML_Model/pdp_data/pdp_clog_6_samp_s_c_rf_add.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_sub_samp_s_c, "ML_Model/pdp_data/pdp_sub_samp_s_c_rf_add.csv", row.names = FALSE)

# With abundance as response --------------------------------------------------
### velocity 
pdp_model_v_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_v_samp_a_c, "ML_Model/pdp_data/pdp_v_samp_a_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_f_samp_a_c, "ML_Model/pdp_data/pdp_f_samp_a_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_s_samp_a_c, "ML_Model/pdp_data/pdp_s_samp_a_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_sp_samp_a_c, "ML_Model/pdp_data/pdp_sp_samp_a_c_rf_add.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_wd_samp_a_c, "ML_Model/pdp_data/pdp_wd_samp_a_c_rf_add.csv", row.names = FALSE)

### z 
pdp_model_z_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_z_samp_a_c, "ML_Model/pdp_data/pdp_z_samp_a_c_rf_add.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_dist_samp_a_c, "ML_Model/pdp_data/pdp_dist_samp_a_c_rf_add.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cv_samp_a_c, "ML_Model/pdp_data/pdp_cv_samp_a_c_rf_add.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ac_samp_a_c, "ML_Model/pdp_data/pdp_ac_samp_a_c_rf_add.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_mc_samp_a_c, "ML_Model/pdp_data/pdp_mc_samp_a_c_rf_add.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cc_samp_a_c, "ML_Model/pdp_data/pdp_cc_samp_a_c_rf_add.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_clog_3_samp_a_c, "ML_Model/pdp_data/pdp_clog_3_samp_a_c_rf_add.csv", row.names = FALSE)

### clog_6 
pdp_model_clog_6_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_clog_6_samp_a_c, "ML_Model/pdp_data/pdp_clog_6_samp_a_c_rf_add.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_sub_samp_a_c, "ML_Model/pdp_data/pdp_sub_samp_a_c_rf_add.csv", row.names = FALSE)

# With rel_abundance as response ----------------------------------------------
### velocity 
pdp_model_v_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_samp_ra_c, "ML_Model/pdp_data/pdp_v_samp_ra_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_f_samp_ra_c, "ML_Model/pdp_data/pdp_f_samp_ra_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_s_samp_ra_c, "ML_Model/pdp_data/pdp_s_samp_ra_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_sp_samp_ra_c, "ML_Model/pdp_data/pdp_sp_samp_ra_c_rf_add.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_wd_samp_ra_c, "ML_Model/pdp_data/pdp_wd_samp_ra_c_rf_add.csv", row.names = FALSE)

### z 
pdp_model_z_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_z_samp_ra_c, "ML_Model/pdp_data/pdp_z_samp_ra_c_rf_add.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_dist_samp_ra_c, "ML_Model/pdp_data/pdp_dist_samp_ra_c_rf_add.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cv_samp_ra_c, "ML_Model/pdp_data/pdp_cv_samp_ra_c_rf_add.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ac_samp_ra_c, "ML_Model/pdp_data/pdp_ac_samp_ra_c_rf_add.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_mc_samp_ra_c, "ML_Model/pdp_data/pdp_mc_samp_ra_c_rf_add.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cc_samp_ra_c, "ML_Model/pdp_data/pdp_cc_samp_ra_c_rf_add.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_3_samp_ra_c, "ML_Model/pdp_data/pdp_clog_3_samp_ra_c_rf_add.csv", row.names = FALSE)

### clog_6 
pdp_model_clog_6_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_6_samp_ra_c, "ML_Model/pdp_data/pdp_clog_6_samp_ra_c_rf_add.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_sub_samp_ra_c, "ML_Model/pdp_data/pdp_sub_samp_ra_c_rf_add.csv", row.names = FALSE)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
pdp_model_v_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_sec_k_c, "ML_Model/pdp_data/pdp_v_sec_k_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_f_sec_k_c, "ML_Model/pdp_data/pdp_f_sec_k_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_s_sec_k_c, "ML_Model/pdp_data/pdp_s_sec_k_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_sp_sec_k_c, "ML_Model/pdp_data/pdp_sp_sec_k_c_rf_add.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_wd_sec_k_c, "ML_Model/pdp_data/pdp_wd_sec_k_c_rf_add.csv", row.names = FALSE)

### z 
pdp_model_z_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_z_sec_k_c, "ML_Model/pdp_data/pdp_z_sec_k_c_rf_add.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_dist_sec_k_c, "ML_Model/pdp_data/pdp_dist_sec_k_c_rf_add.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cv_sec_k_c, "ML_Model/pdp_data/pdp_cv_sec_k_c_rf_add.csv", row.names = FALSE)

### alg_cover
pdp_model_ac_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ac_sec_k_c, "ML_Model/pdp_data/pdp_ac_sec_k_c_rf_add.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_mc_sec_k_c, "ML_Model/pdp_data/pdp_mc_sec_k_c_rf_add.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cc_sec_k_c, "ML_Model/pdp_data/pdp_cc_sec_k_c_rf_add.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_clog_3_sec_k_c, "ML_Model/pdp_data/pdp_clog_3_sec_k_c_rf_add.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_clog_6_sec_k_c, "ML_Model/pdp_data/pdp_clog_6_sec_k_c_rf_add.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_sub_sec_k_c, "ML_Model/pdp_data/pdp_sub_sec_k_c_rf_add.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "pH_before") |>
  mutate(predictors = "pH_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_phb_sec_k_c, "ML_Model/pdp_data/pdp_phb_sec_k_c_rf_add.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "pH_during") |>
  mutate(predictors = "pH_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_phd_sec_k_c, "ML_Model/pdp_data/pdp_phd_sec_k_c_rf_add.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "pH_after") |>
  mutate(predictors = "pH_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_pha_sec_k_c, "ML_Model/pdp_data/pdp_pha_sec_k_c_rf_add.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "conduct_before") |>
  mutate(predictors = "conduct_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cb_sec_k_c, "ML_Model/pdp_data/pdp_cb_sec_k_c_rf_add.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "conduct_during") |>
  mutate(predictors = "conduct_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cd_sec_k_c, "ML_Model/pdp_data/pdp_cd_sec_k_c_rf_add.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "conduct_after") |>
  mutate(predictors = "conduct_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ca_sec_k_c, "ML_Model/pdp_data/pdp_ca_sec_k_c_rf_add.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "ox_before") |>
  mutate(predictors = "ox_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ob_sec_k_c, "ML_Model/pdp_data/pdp_ob_sec_k_c_rf_add.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "ox_during") |>
  mutate(predictors = "ox_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_od_sec_k_c, "ML_Model/pdp_data/pdp_od_sec_k_c_rf_add.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "ox_after") |>
  mutate(predictors = "ox_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_oa_sec_k_c, "ML_Model/pdp_data/pdp_oa_sec_k_c_rf_add.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "turb_before") |>
  mutate(predictors = "turb_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_tb_sec_k_c, "ML_Model/pdp_data/pdp_tb_sec_k_c_rf_add.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "turb_during") |>
  mutate(predictors = "turb_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_td_sec_k_c, "ML_Model/pdp_data/pdp_td_sec_k_c_rf_add.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "turb_after") |>
  mutate(predictors = "turb_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ta_sec_k_c, "ML_Model/pdp_data/pdp_ta_sec_k_c_rf_add.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "temp_before") |>
  mutate(predictors = "temp_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_teb_sec_k_c, "ML_Model/pdp_data/pdp_teb_sec_k_c_rf_add.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "temp_during") |>
  mutate(predictors = "temp_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ted_sec_k_c, "ML_Model/pdp_data/pdp_ted_sec_k_c_rf_add.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "temp_after") |>
  mutate(predictors = "temp_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_tea_sec_k_c, "ML_Model/pdp_data/pdp_tea_sec_k_c_rf_add.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "q_before") |>
  mutate(predictors = "q_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_qb_sec_k_c, "ML_Model/pdp_data/pdp_qb_sec_k_c_rf_add.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "q_during") |>
  mutate(predictors = "q_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_qd_sec_k_c, "ML_Model/pdp_data/pdp_qd_sec_k_c_rf_add.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "q_after") |>
  mutate(predictors = "q_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_qa_sec_k_c, "ML_Model/pdp_data/pdp_qa_sec_k_c_rf_add.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "gaug_before") |>
  mutate(predictors = "gaug_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_gb_sec_k_c, "ML_Model/pdp_data/pdp_gb_sec_k_c_rf_add.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "gaug_during") |>
  mutate(predictors = "gaug_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_gd_sec_k_c, "ML_Model/pdp_data/pdp_gd_sec_k_c_rf_add.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "gaug_after") |>
  mutate(predictors = "gaug_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ga_sec_k_c, "ML_Model/pdp_data/pdp_ga_sec_k_c_rf_add.csv", row.names = FALSE)

# With shannon index as response ----------------------------------------------
### velocity 
pdp_model_v_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_v_sec_s_c, "ML_Model/pdp_data/pdp_v_sec_s_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_f_sec_s_c, "ML_Model/pdp_data/pdp_f_sec_s_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_s_sec_s_c, "ML_Model/pdp_data/pdp_s_sec_s_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_sp_sec_s_c, "ML_Model/pdp_data/pdp_sp_sec_s_c_rf_add.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_wd_sec_s_c, "ML_Model/pdp_data/pdp_wd_sec_s_c_rf_add.csv", row.names = FALSE)

### z 
pdp_model_z_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_z_sec_s_c, "ML_Model/pdp_data/pdp_z_sec_s_c_rf_add.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_dist_sec_s_c, "ML_Model/pdp_data/pdp_dist_sec_s_c_rf_add.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cv_sec_s_c, "ML_Model/pdp_data/pdp_cv_sec_s_c_rf_add.csv", row.names = FALSE)

### alg_cover
pdp_model_ac_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ac_sec_s_c, "ML_Model/pdp_data/pdp_ac_sec_s_c_rf_add.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_mc_sec_s_c, "ML_Model/pdp_data/pdp_mc_sec_s_c_rf_add.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cc_sec_s_c, "ML_Model/pdp_data/pdp_cc_sec_s_c_rf_add.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_3_sec_s_c, "ML_Model/pdp_data/pdp_clog_3_sec_s_c_rf_add.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_6_sec_s_c, "ML_Model/pdp_data/pdp_clog_6_sec_s_c_rf_add.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_sub_sec_s_c, "ML_Model/pdp_data/pdp_sub_sec_s_c_rf_add.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "pH_before") |>
  mutate(predictors = "pH_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_phb_sec_s_c, "ML_Model/pdp_data/pdp_phb_sec_s_c_rf_add.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "pH_during") |>
  mutate(predictors = "pH_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_phd_sec_s_c, "ML_Model/pdp_data/pdp_phd_sec_s_c_rf_add.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "pH_after") |>
  mutate(predictors = "pH_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_pha_sec_s_c, "ML_Model/pdp_data/pdp_pha_sec_s_c_rf_add.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "conduct_before") |>
  mutate(predictors = "conduct_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cb_sec_s_c, "ML_Model/pdp_data/pdp_cb_sec_s_c_rf_add.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "conduct_during") |>
  mutate(predictors = "conduct_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cd_sec_s_c, "ML_Model/pdp_data/pdp_cd_sec_s_c_rf_add.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "conduct_after") |>
  mutate(predictors = "conduct_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ca_sec_s_c, "ML_Model/pdp_data/pdp_ca_sec_s_c_rf_add.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "ox_before") |>
  mutate(predictors = "ox_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ob_sec_s_c, "ML_Model/pdp_data/pdp_ob_sec_s_c_rf_add.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "ox_during") |>
  mutate(predictors = "ox_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_od_sec_s_c, "ML_Model/pdp_data/pdp_od_sec_s_c_rf_add.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "ox_after") |>
  mutate(predictors = "ox_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_oa_sec_s_c, "ML_Model/pdp_data/pdp_oa_sec_s_c_rf_add.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "turb_before") |>
  mutate(predictors = "turb_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_tb_sec_s_c, "ML_Model/pdp_data/pdp_tb_sec_s_c_rf_add.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "turb_during") |>
  mutate(predictors = "turb_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_td_sec_s_c, "ML_Model/pdp_data/pdp_td_sec_s_c_rf_add.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "turb_after") |>
  mutate(predictors = "turb_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ta_sec_s_c, "ML_Model/pdp_data/pdp_ta_sec_s_c_rf_add.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "temp_before") |>
  mutate(predictors = "temp_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_teb_sec_s_c, "ML_Model/pdp_data/pdp_teb_sec_s_c_rf_add.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "temp_during") |>
  mutate(predictors = "temp_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ted_sec_s_c, "ML_Model/pdp_data/pdp_ted_sec_s_c_rf_add.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "temp_after") |>
  mutate(predictors = "temp_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_tea_sec_s_c, "ML_Model/pdp_data/pdp_tea_sec_s_c_rf_add.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "q_before") |>
  mutate(predictors = "q_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_qb_sec_s_c, "ML_Model/pdp_data/pdp_qb_sec_s_c_rf_add.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "q_during") |>
  mutate(predictors = "q_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_qd_sec_s_c, "ML_Model/pdp_data/pdp_qd_sec_s_c_rf_add.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "q_after") |>
  mutate(predictors = "q_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_qa_sec_s_c, "ML_Model/pdp_data/pdp_qa_sec_s_c_rf_add.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "gaug_before") |>
  mutate(predictors = "gaug_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_gb_sec_s_c, "ML_Model/pdp_data/pdp_gb_sec_s_c_rf_add.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "gaug_during") |>
  mutate(predictors = "gaug_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_gd_sec_s_c, "ML_Model/pdp_data/pdp_gd_sec_s_c_rf_add.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "gaug_after") |>
  mutate(predictors = "gaug_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ga_sec_s_c, "ML_Model/pdp_data/pdp_ga_sec_s_c_rf_add.csv", row.names = FALSE)

# With abundance as response --------------------------------------------------
### velocity 
pdp_model_v_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_v_sec_a_c, "ML_Model/pdp_data/pdp_v_sec_a_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_f_sec_a_c, "ML_Model/pdp_data/pdp_f_sec_a_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_s_sec_a_c, "ML_Model/pdp_data/pdp_s_sec_a_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_sp_sec_a_c, "ML_Model/pdp_data/pdp_sp_sec_a_c_rf_add.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_wd_sec_a_c, "ML_Model/pdp_data/pdp_wd_sec_a_c_rf_add.csv", row.names = FALSE)

### z 
pdp_model_z_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_z_sec_a_c, "ML_Model/pdp_data/pdp_z_sec_a_c_rf_add.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_dist_sec_a_c, "ML_Model/pdp_data/pdp_dist_sec_a_c_rf_add.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cv_sec_a_c, "ML_Model/pdp_data/pdp_cv_sec_a_c_rf_add.csv", row.names = FALSE)

### alg_cover
pdp_model_ac_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ac_sec_a_c, "ML_Model/pdp_data/pdp_ac_sec_a_c_rf_add.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_mc_sec_a_c, "ML_Model/pdp_data/pdp_mc_sec_a_c_rf_add.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cc_sec_a_c, "ML_Model/pdp_data/pdp_cc_sec_a_c_rf_add.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_clog_3_sec_a_c, "ML_Model/pdp_data/pdp_clog_3_sec_a_c_rf_add.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_clog_6_sec_a_c, "ML_Model/pdp_data/pdp_clog_6_sec_a_c_rf_add.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_sub_sec_a_c, "ML_Model/pdp_data/pdp_sub_sec_a_c_rf_add.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "pH_before") |>
  mutate(predictors = "pH_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_phb_sec_a_c, "ML_Model/pdp_data/pdp_phb_sec_a_c_rf_add.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "pH_during") |>
  mutate(predictors = "pH_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_phd_sec_a_c, "ML_Model/pdp_data/pdp_phd_sec_a_c_rf_add.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "pH_after") |>
  mutate(predictors = "pH_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_pha_sec_a_c, "ML_Model/pdp_data/pdp_pha_sec_a_c_rf_add.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "conduct_before") |>
  mutate(predictors = "conduct_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cb_sec_a_c, "ML_Model/pdp_data/pdp_cb_sec_a_c_rf_add.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "conduct_during") |>
  mutate(predictors = "conduct_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cd_sec_a_c, "ML_Model/pdp_data/pdp_cd_sec_a_c_rf_add.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "conduct_after") |>
  mutate(predictors = "conduct_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ca_sec_a_c, "ML_Model/pdp_data/pdp_ca_sec_a_c_rf_add.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "ox_before") |>
  mutate(predictors = "ox_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ob_sec_a_c, "ML_Model/pdp_data/pdp_ob_sec_a_c_rf_add.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "ox_during") |>
  mutate(predictors = "ox_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_od_sec_a_c, "ML_Model/pdp_data/pdp_od_sec_a_c_rf_add.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "ox_after") |>
  mutate(predictors = "ox_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_oa_sec_a_c, "ML_Model/pdp_data/pdp_oa_sec_a_c_rf_add.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "turb_before") |>
  mutate(predictors = "turb_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_tb_sec_a_c, "ML_Model/pdp_data/pdp_tb_sec_a_c_rf_add.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "turb_during") |>
  mutate(predictors = "turb_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_td_sec_a_c, "ML_Model/pdp_data/pdp_td_sec_a_c_rf_add.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "turb_after") |>
  mutate(predictors = "turb_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ta_sec_a_c, "ML_Model/pdp_data/pdp_ta_sec_a_c_rf_add.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "temp_before") |>
  mutate(predictors = "temp_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_teb_sec_a_c, "ML_Model/pdp_data/pdp_teb_sec_a_c_rf_add.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "temp_during") |>
  mutate(predictors = "temp_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ted_sec_a_c, "ML_Model/pdp_data/pdp_ted_sec_a_c_rf_add.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "temp_after") |>
  mutate(predictors = "temp_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_tea_sec_a_c, "ML_Model/pdp_data/pdp_tea_sec_a_c_rf_add.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "q_before") |>
  mutate(predictors = "q_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_qb_sec_a_c, "ML_Model/pdp_data/pdp_qb_sec_a_c_rf_add.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "q_during") |>
  mutate(predictors = "q_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_qd_sec_a_c, "ML_Model/pdp_data/pdp_qd_sec_a_c_rf_add.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "q_after") |>
  mutate(predictors = "q_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_qa_sec_a_c, "ML_Model/pdp_data/pdp_qa_sec_a_c_rf_add.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "gaug_before") |>
  mutate(predictors = "gaug_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_gb_sec_a_c, "ML_Model/pdp_data/pdp_gb_sec_a_c_rf_add.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "gaug_during") |>
  mutate(predictors = "gaug_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_gd_sec_a_c, "ML_Model/pdp_data/pdp_gd_sec_a_c_rf_add.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "gaug_after") |>
  mutate(predictors = "gaug_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ga_sec_a_c, "ML_Model/pdp_data/pdp_ga_sec_a_c_rf_add.csv", row.names = FALSE)

# With relative abundance as response -----------------------------------------
### velocity 
pdp_model_v_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_sec_ra_c, "ML_Model/pdp_data/pdp_v_sec_ra_c_rf_add.csv", row.names = FALSE)

### froude
pdp_model_f_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "froude")|>
  mutate(predictors = "froude",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_f_sec_ra_c, "ML_Model/pdp_data/pdp_f_sec_ra_c_rf_add.csv", row.names = FALSE)

### shear_stress
pdp_model_s_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "shear_stress")|>
  mutate(predictors = "shear_stress",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_s_sec_ra_c, "ML_Model/pdp_data/pdp_s_sec_ra_c_rf_add.csv", row.names = FALSE)

### stream_power
pdp_model_sp_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "stream_power")|>
  mutate(predictors = "stream_power",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_sp_sec_ra_c, "ML_Model/pdp_data/pdp_sp_sec_ra_c_rf_add.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_wd_sec_ra_c, "ML_Model/pdp_data/pdp_wd_sec_ra_c_rf_add.csv", row.names = FALSE)

### z 
pdp_model_z_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_z_sec_ra_c, "ML_Model/pdp_data/pdp_z_sec_ra_c_rf_add.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_dist_sec_ra_c, "ML_Model/pdp_data/pdp_dist_sec_ra_c_rf_add.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cv_sec_ra_c, "ML_Model/pdp_data/pdp_cv_sec_ra_c_rf_add.csv", row.names = FALSE)

### alg_cover
pdp_model_ac_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ac_sec_ra_c, "ML_Model/pdp_data/pdp_ac_sec_ra_c_rf_add.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_mc_sec_ra_c, "ML_Model/pdp_data/pdp_mc_sec_ra_c_rf_add.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cc_sec_ra_c, "ML_Model/pdp_data/pdp_cc_sec_ra_c_rf_add.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_3_sec_ra_c, "ML_Model/pdp_data/pdp_clog_3_sec_ra_c_rf_add.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_6_sec_ra_c, "ML_Model/pdp_data/pdp_clog_6_sec_ra_c_rf_add.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_sub_sec_ra_c, "ML_Model/pdp_data/pdp_sub_sec_ra_c_rf_add.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "pH_before") |>
  mutate(predictors = "pH_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_phb_sec_ra_c, "ML_Model/pdp_data/pdp_phb_sec_ra_c_rf_add.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "pH_during") |>
  mutate(predictors = "pH_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_phd_sec_ra_c, "ML_Model/pdp_data/pdp_phd_sec_ra_c_rf_add.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "pH_after") |>
  mutate(predictors = "pH_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_pha_sec_ra_c, "ML_Model/pdp_data/pdp_pha_sec_ra_c_rf_add.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "conduct_before") |>
  mutate(predictors = "conduct_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cb_sec_ra_c, "ML_Model/pdp_data/pdp_cb_sec_ra_c_rf_add.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "conduct_during") |>
  mutate(predictors = "conduct_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cd_sec_ra_c, "ML_Model/pdp_data/pdp_cd_sec_ra_c_rf_add.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "conduct_after") |>
  mutate(predictors = "conduct_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ca_sec_ra_c, "ML_Model/pdp_data/pdp_ca_sec_ra_c_rf_add.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "ox_before") |>
  mutate(predictors = "ox_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ob_sec_ra_c, "ML_Model/pdp_data/pdp_ob_sec_ra_c_rf_add.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "ox_during") |>
  mutate(predictors = "ox_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_od_sec_ra_c, "ML_Model/pdp_data/pdp_od_sec_ra_c_rf_add.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "ox_after") |>
  mutate(predictors = "ox_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_oa_sec_ra_c, "ML_Model/pdp_data/pdp_oa_sec_ra_c_rf_add.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "turb_before") |>
  mutate(predictors = "turb_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_tb_sec_ra_c, "ML_Model/pdp_data/pdp_tb_sec_ra_c_rf_add.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "turb_during") |>
  mutate(predictors = "turb_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_td_sec_ra_c, "ML_Model/pdp_data/pdp_td_sec_ra_c_rf_add.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "turb_after") |>
  mutate(predictors = "turb_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ta_sec_ra_c, "ML_Model/pdp_data/pdp_ta_sec_ra_c_rf_add.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "temp_before") |>
  mutate(predictors = "temp_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_teb_sec_ra_c, "ML_Model/pdp_data/pdp_teb_sec_ra_c_rf_add.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "temp_during") |>
  mutate(predictors = "temp_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ted_sec_ra_c, "ML_Model/pdp_data/pdp_ted_sec_ra_c_rf_add.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "temp_after") |>
  mutate(predictors = "temp_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_tea_sec_ra_c, "ML_Model/pdp_data/pdp_tea_sec_ra_c_rf_add.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "q_before") |>
  mutate(predictors = "q_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_qb_sec_ra_c, "ML_Model/pdp_data/pdp_qb_sec_ra_c_rf_add.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "q_during") |>
  mutate(predictors = "q_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_qd_sec_ra_c, "ML_Model/pdp_data/pdp_qd_sec_ra_c_rf_add.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "q_after") |>
  mutate(predictors = "q_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_qa_sec_ra_c, "ML_Model/pdp_data/pdp_qa_sec_ra_c_rf_add.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "gaug_before") |>
  mutate(predictors = "gaug_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_gb_sec_ra_c, "ML_Model/pdp_data/pdp_gb_sec_ra_c_rf_add.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "gaug_during") |>
  mutate(predictors = "gaug_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_gd_sec_ra_c, "ML_Model/pdp_data/pdp_gd_sec_ra_c_rf_add.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "gaug_after") |>
  mutate(predictors = "gaug_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ga_sec_ra_c, "ML_Model/pdp_data/pdp_ga_sec_ra_c_rf_add.csv", row.names = FALSE)
```


## Obs and Pred
```{r}
### PREDICTED VALUES ### ------------------------------------------------------
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
rf_pred_model_v_k_c <- predict(rf_model_v_k_c, data = test_v_k_c)$predictions

# With shannon index as response
rf_pred_model_v_s_c <- predict(rf_model_v_s_c, data = test_v_s_c)$predictions

# With abundance as response
rf_pred_model_v_a_c <- predict(rf_model_v_a_c, data = test_v_a_c)$predictions

# With rel_abundance as response
rf_pred_model_v_ra_c <- predict(rf_model_v_ra_c, data = test_v_ra_c)$predictions

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
rf_pred_model_wd_k_c <- predict(rf_model_wd_k_c, data = test_wd_k_c)$predictions

# With shannon index as response
rf_pred_model_wd_s_c <- predict(rf_model_wd_s_c, data = test_wd_s_c)$predictions

# With abundance as response
rf_pred_model_wd_a_c <- predict(rf_model_wd_a_c, data = test_wd_a_c)$predictions

# With rel_abundance as response
rf_pred_model_wd_ra_c <- predict(rf_model_wd_ra_c, data = test_wd_ra_c)$predictions

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
rf_pred_model_samp_k_c <- predict(rf_model_samp_k_c, data = test_samp_k_c)$predictions

# With shannon index as response
rf_pred_model_samp_s_c <- predict(rf_model_samp_s_c, data = test_samp_s_c)$predictions

# With abundance as response
rf_pred_model_samp_a_c <- predict(rf_model_samp_a_c, data = test_samp_a_c)$predictions

# With rel_abundance as response
rf_pred_model_samp_ra_c <- predict(rf_model_samp_ra_c, data = test_samp_ra_c)$predictions

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
rf_pred_model_sec_k_c <- predict(rf_model_sec_k_c, data = test_sec_k_c)$predictions

# With shannon index as response
rf_pred_model_sec_s_c <- predict(rf_model_sec_s_c, data = test_sec_s_c)$predictions

# With abundance as response
rf_pred_model_sec_a_c <- predict(rf_model_sec_a_c, data = test_sec_a_c)$predictions

# With rel_abundance as response
rf_pred_model_sec_ra_c <- predict(rf_model_sec_ra_c, data = test_sec_ra_c)$predictions

### OBSERVED VALUES ### -------------------------------------------------------
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
responses_v_k <- test_v_k$k_index

# With shannon index as response
responses_v_s <- test_v_s$shannon

# With abundance as response
responses_v_a <- test_v_a$abundance

# With rel_abundance as response
responses_v_ra <- test_v_ra$rel_abundance

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
responses_wd_k <- test_wd_k$k_index

# With shannon index as response
responses_wd_s <- test_wd_s$shannon

# With abundance as response
responses_wd_a <- test_wd_a$abundance

# With rel_abundance as response
responses_wd_ra <- test_wd_ra$rel_abundance

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
responses_samp_k <- test_samp_k$k_index

# With shannon index as response
responses_samp_s <- test_samp_s$shannon

# With abundance as response
responses_samp_a <- test_samp_a$abundance

# With rel_abundance as response
responses_samp_ra <- test_samp_ra$rel_abundance

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
responses_sec_k <- test_sec_k$k_index

# With shannon index as response
responses_sec_s <- test_sec_s$shannon

# With abundance as response
responses_sec_a <- test_sec_a$abundance

# With rel_abundance as response
responses_sec_ra <- test_sec_ra$rel_abundance
```

## Deviance explained (R2)
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# With k_index as response
r2_v_k <- R2(pred = rf_pred_model_v_k_c, obs = responses_v_k)

# With shannon index as response 
r2_v_s <- R2(pred = rf_pred_model_v_s_c, obs = responses_v_s)

# With abundance as response
r2_v_a <- R2(pred = rf_pred_model_v_a_c, obs = responses_v_a)

# With rel_abundance as response 
r2_v_ra <- R2(pred = rf_pred_model_v_ra_c, obs = responses_v_ra)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
r2_wd_k <- R2(pred = rf_pred_model_wd_k_c, obs = responses_wd_k)

# With shannon index as response
r2_wd_s <- R2(pred = rf_pred_model_wd_s_c, obs = responses_wd_s)

# With abundance as response
r2_wd_a <- R2(pred = rf_pred_model_wd_a_c, obs = responses_wd_a)

# With rel_abundance as response
r2_wd_ra <- R2(pred = rf_pred_model_wd_ra_c, obs = responses_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
r2_samp_k <- R2(pred = rf_pred_model_samp_k_c, obs = responses_samp_k)

# With shannon index as response
r2_samp_s <- R2(pred = rf_pred_model_samp_s_c, obs = responses_samp_s)

# With abundance as response
r2_samp_a <- R2(pred = rf_pred_model_samp_a_c, obs = responses_samp_a)

# With rel_abundance as response
r2_samp_ra <- R2(pred = rf_pred_model_samp_ra_c, obs = responses_samp_ra)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
r2_sec_k <- R2(pred = rf_pred_model_sec_k_c, obs = responses_sec_k)

# With shannon index as response
r2_sec_s <- R2(pred = rf_pred_model_sec_s_c, obs = responses_sec_s)

# With abundance as response
r2_sec_a <- R2(pred = rf_pred_model_sec_a_c, obs = responses_sec_a)

# With rel_abundance as response
r2_sec_ra <- R2(pred = rf_pred_model_sec_ra_c, obs = responses_sec_ra)
```

## RMSE & MAE
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
rmse_model_v_k_c <- Metrics::rmse(actual = responses_v_k, predicted = rf_pred_model_v_k_c)

mae_model_v_k_c <- Metrics::mae(actual = responses_v_k, predicted = rf_pred_model_v_k_c)

# With shannon index as response
rmse_model_v_s_c <- Metrics::rmse(actual = responses_v_s, predicted = rf_pred_model_v_s_c)

mae_model_v_s_c <- Metrics::mae(actual = responses_v_s, predicted = rf_pred_model_v_s_c)

# With abundance as response
rmse_model_v_a_c <- Metrics::rmse(actual = responses_v_a, predicted = rf_pred_model_v_a_c)

mae_model_v_a_c <- Metrics::mae(actual = responses_v_a, predicted = rf_pred_model_v_a_c)

# With rel_abundance as response
rmse_model_v_ra_c <- Metrics::rmse(actual = responses_v_ra, predicted = rf_pred_model_v_ra_c)

mae_model_v_ra_c <- Metrics::mae(actual = responses_v_ra, predicted = rf_pred_model_v_ra_c)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
rmse_model_wd_k_c <- Metrics::rmse(actual = responses_wd_k, predicted = rf_pred_model_wd_k_c)

mae_model_wd_k_c <- Metrics::mae(actual = responses_wd_k, predicted = rf_pred_model_wd_k_c)

# With shannon index as response
rmse_model_wd_s_c <- Metrics::rmse(actual = responses_wd_s, predicted = rf_pred_model_wd_s_c)

mae_model_wd_s_c <- Metrics::mae(actual = responses_wd_s, predicted = rf_pred_model_wd_s_c)

# With abundance as response
rmse_model_wd_a_c <- Metrics::rmse(actual = responses_wd_a, predicted = rf_pred_model_wd_a_c)

mae_model_wd_a_c <- Metrics::mae(actual = responses_wd_a, predicted = rf_pred_model_wd_a_c)

# With rel_abundance as response
rmse_model_wd_ra_c <- Metrics::rmse(actual = responses_wd_ra, predicted = rf_pred_model_wd_ra_c)

mae_model_wd_ra_c <- Metrics::mae(actual = responses_wd_ra, predicted = rf_pred_model_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
rmse_model_samp_k_c <- Metrics::rmse(actual = responses_samp_k, predicted = rf_pred_model_samp_k_c)

mae_model_samp_k_c <- Metrics::mae(actual = responses_samp_k, predicted = rf_pred_model_samp_k_c)

# With shannon index as response
rmse_model_samp_s_c <- Metrics::rmse(actual = responses_samp_s, predicted = rf_pred_model_samp_s_c)

mae_model_samp_s_c <- Metrics::mae(actual = responses_samp_s, predicted = rf_pred_model_samp_s_c)

# With abundance as response
rmse_model_samp_a_c <- Metrics::rmse(actual = responses_samp_a, predicted = rf_pred_model_samp_a_c)

mae_model_samp_a_c <- Metrics::mae(actual = responses_samp_a, predicted = rf_pred_model_samp_a_c)

# With rel_abundance as response
rmse_model_samp_ra_c <- Metrics::rmse(actual = responses_samp_ra, predicted = rf_pred_model_samp_ra_c)

mae_model_samp_ra_c <- Metrics::mae(actual = responses_samp_ra, predicted = rf_pred_model_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
rmse_model_sec_k_c <- Metrics::rmse(actual = responses_sec_k, predicted = rf_pred_model_sec_k_c)

mae_model_sec_k_c <- Metrics::mae(actual = responses_sec_k, predicted = rf_pred_model_sec_k_c)

# With shannon index as response
rmse_model_sec_s_c <- Metrics::rmse(actual = responses_sec_s, predicted = rf_pred_model_sec_s_c)

mae_model_sec_s_c <- Metrics::mae(actual = responses_sec_s, predicted = rf_pred_model_sec_s_c)

# With abundance as response
rmse_model_sec_a_c <- Metrics::rmse(actual = responses_sec_a, predicted = rf_pred_model_sec_a_c)

mae_model_sec_a_c <- Metrics::mae(actual = responses_sec_a, predicted = rf_pred_model_sec_a_c)

# With rel_abundance as response
rmse_model_sec_ra_c <- Metrics::rmse(actual = responses_sec_ra, predicted = rf_pred_model_sec_ra_c)

mae_model_sec_ra_c <- Metrics::mae(actual = responses_sec_ra, predicted = rf_pred_model_sec_ra_c)
```

## Bias 
```{r}
### ONLY VELOCITY AS PREDICTOR ### --------------------------------------------
# With k_index as response
bias_model_v_k_c <- bias(observados = responses_v_k, estimados = rf_pred_model_v_k_c)

# With shannon index as response
bias_model_v_s_c <- bias(observados = responses_v_s, estimados = rf_pred_model_v_s_c)

# With abundance as response
bias_model_v_a_c <- bias(observados = responses_v_a, estimados = rf_pred_model_v_a_c)

# With rel_abundance as response
bias_model_v_ra_c <- bias(observados = responses_v_ra, estimados = rf_pred_model_v_ra_c)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
bias_model_wd_k_c <- bias(observados = responses_wd_k, estimados = rf_pred_model_wd_k_c)

# With shannon index as response
bias_model_wd_s_c <- bias(observados = responses_wd_s, estimados = rf_pred_model_wd_s_c)

# With abundance as response
bias_model_wd_a_c <- bias(observados = responses_wd_a, estimados = rf_pred_model_wd_a_c)

# With rel_abundance as response
bias_model_wd_ra_c <- bias(observados = responses_wd_ra, estimados = rf_pred_model_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
bias_model_samp_k_c <- bias(observados = responses_samp_k, estimados = rf_pred_model_samp_k_c)

# With shannon index as response
bias_model_samp_s_c <- bias(observados = responses_samp_s, estimados = rf_pred_model_samp_s_c)

# With abundance as response
bias_model_samp_a_c <- bias(observados = responses_samp_a, estimados = rf_pred_model_samp_a_c)

# With rel_abundance as response
bias_model_samp_ra_c <- bias(observados = responses_samp_ra, estimados = rf_pred_model_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
bias_model_sec_k_c <- bias(observados = responses_sec_k, estimados = rf_pred_model_sec_k_c)

# With shannon index as response
bias_model_sec_s_c <- bias(observados = responses_sec_s, estimados = rf_pred_model_sec_s_c)

# With abundance as response
bias_model_sec_a_c <- bias(observados = responses_sec_a, estimados = rf_pred_model_sec_a_c)

# With rel_abundance as response
bias_model_sec_ra_c <- bias(observados = responses_sec_ra, estimados = rf_pred_model_sec_ra_c)
```

## Nash-Sutcliffe efficiency (NSE) 
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
nse_model_v_k_c <- NSE(sim = rf_pred_model_v_k_c, obs = responses_v_k)

# With shannon index as response
nse_model_v_s_c <- NSE(sim = rf_pred_model_v_s_c, obs = responses_v_s)

# With abundance as response
nse_model_v_a_c <- NSE(sim = rf_pred_model_v_a_c, obs = responses_v_a)

# With rel_abundance as response
nse_model_v_ra_c <- NSE(sim = rf_pred_model_v_ra_c, obs = responses_v_ra)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
nse_model_wd_k_c <- NSE(sim = rf_pred_model_wd_k_c, obs = responses_wd_k)

# With shannon index as response
nse_model_wd_s_c <- NSE(sim = rf_pred_model_wd_s_c, obs = responses_wd_s)

# With abundance as response
nse_model_wd_a_c <- NSE(sim = rf_pred_model_wd_a_c, obs = responses_wd_a)

# With rel_abundance as response
nse_model_wd_ra_c <- NSE(sim = rf_pred_model_wd_ra_c, obs = responses_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
nse_model_samp_k_c <- NSE(sim = rf_pred_model_samp_k_c, obs = responses_samp_k)

# With shannon index as response
nse_model_samp_s_c <- NSE(sim = rf_pred_model_samp_s_c, obs = responses_samp_s)

# With abundance as response
nse_model_samp_a_c <- NSE(sim = rf_pred_model_samp_a_c, obs = responses_samp_a)

# With rel_abundance as response
nse_model_samp_ra_c <- NSE(sim = rf_pred_model_samp_ra_c, obs = responses_samp_ra)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
nse_model_sec_k_c <- NSE(sim = rf_pred_model_sec_k_c, obs = responses_sec_k)

# With shannon index as response
nse_model_sec_s_c <- NSE(sim = rf_pred_model_sec_s_c, obs = responses_sec_s)

# With abundance as response
nse_model_sec_a_c <- NSE(sim = rf_pred_model_sec_a_c, obs = responses_sec_a)

# With rel_abundance as response
nse_model_sec_ra_c <- NSE(sim = rf_pred_model_sec_ra_c, obs = responses_sec_ra)
```

## Write Evaluation Results 
```{r}
# write evaluation metrics into df
metric_results <- data.frame(nse = c(nse_model_v_k_c, nse_model_v_s_c, nse_model_v_a_c, nse_model_v_ra_c, nse_model_wd_k_c, nse_model_wd_s_c, nse_model_wd_a_c, nse_model_wd_ra_c, nse_model_samp_k_c, nse_model_samp_s_c, nse_model_samp_a_c, nse_model_samp_ra_c, nse_model_sec_k_c, nse_model_sec_s_c, nse_model_sec_a_c, nse_model_sec_ra_c),

bias = c(bias_model_v_k_c, bias_model_v_s_c, bias_model_v_a_c, bias_model_v_ra_c, bias_model_wd_k_c,bias_model_wd_s_c, bias_model_wd_a_c, bias_model_wd_ra_c, bias_model_samp_k_c, bias_model_samp_s_c, bias_model_samp_a_c, bias_model_samp_ra_c, bias_model_sec_k_c, bias_model_sec_s_c, bias_model_sec_a_c, bias_model_sec_ra_c),

mae = c(mae_model_v_k_c, mae_model_v_s_c, mae_model_v_a_c, mae_model_v_ra_c, mae_model_wd_k_c, mae_model_wd_s_c, mae_model_wd_a_c, mae_model_wd_ra_c, mae_model_samp_k_c, mae_model_samp_s_c, mae_model_samp_a_c, mae_model_samp_ra_c, mae_model_sec_k_c, mae_model_sec_s_c, mae_model_sec_a_c, mae_model_sec_ra_c), 

rmse = c(rmse_model_v_k_c, rmse_model_v_s_c, rmse_model_v_a_c, rmse_model_v_ra_c, rmse_model_wd_k_c, rmse_model_wd_s_c, rmse_model_wd_a_c, rmse_model_wd_ra_c, rmse_model_samp_k_c, rmse_model_samp_s_c, rmse_model_samp_a_c, rmse_model_samp_ra_c, rmse_model_sec_k_c, rmse_model_sec_s_c, rmse_model_sec_a_c, rmse_model_sec_ra_c),

r2 = c(r2_v_k, r2_v_s, r2_v_a, r2_v_ra, r2_wd_k, r2_wd_s, r2_wd_a, r2_wd_ra, r2_samp_k, r2_samp_s, r2_samp_a, r2_samp_ra, r2_sec_k, r2_sec_s, r2_sec_a, r2_sec_ra), 

index = c("k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance"),

predictor = c("v + add", "v + add", "v + add", "v + add", 
              "v + wd + add", "v + wd + add", "v + wd + add", "v + wd + add",  
              "samp + add", "samp + add", "samp + add", "samp + add", 
              "all + add", "all + add", "all + add", "all + add"),

model = c("rf", "rf", "rf", "rf", 
          "rf", "rf", "rf", "rf", 
          "rf", "rf", "rf", "rf",
          "rf", "rf", "rf", "rf"))

# write results into a .csv 
write.csv(metric_results, "Stat_Analysis/ml_evaluation_metrics_rf_add.csv", row.names = FALSE)
```
 
 
# Extract 
## Read rasters
```{r}
# read rasters containing wd and velocity 
GL1_ezg <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg.grd")
GL1_v_ezg <- stack("Pre_Processing/raster_files/GL1_v_2_56_ezg.tif")
#GL1_q <- stack("Pre_Processing/rasters_stacked/GL1_3_28.grd")

GL2_ezg <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg.grd")
GL2_v_ezg <- stack("Pre_Processing/raster_files/GL2_v_2_37_ezg.tif")
#GL2_q <- stack("Pre_Processing/rasters_stacked/GL2_3_21.grd")

L2_ezg <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg.grd")
L2_v_ezg <- stack("Pre_Processing/raster_files/L2_v_9_54_ezg.tif")
#L2_q <- stack("Pre_Processing/rasters_stacked/L2_2_40.grd")

M1_ezg <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg.grd")
M1_v_ezg <- stack("Pre_Processing/raster_files/M1_v_1_50_ezg.tif")
#M1_q <- stack("Pre_Processing/rasters_stacked/M1_0_47.grd")

S1_ezg <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg.grd")
S1_v_ezg <- stack("Pre_Processing/raster_files/S1_v_1_94_ezg.tif")
#S1_q <- stack("Pre_Processing/rasters_stacked/S1_2_00.grd")

S2_ezg <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg.grd")
S2_v_ezg <- stack("Pre_Processing/raster_files/S2_v_1_93_ezg.tif")
#S2_q <- stack("Pre_Processing/rasters_stacked/S2_2_00.grd")

TH4_ezg <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg.grd")
TH4_v_ezg <- stack("Pre_Processing/raster_files/TH4_v_35_12_ezg.tif")
#TH4_q <- stack("Pre_Processing/rasters_stacked/TH4_11_45.grd")

VR3_ezg <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg.grd")
VR3_v_ezg <- stack("Pre_Processing/raster_files/VR3_v_21_51_ezg.tif")
#VR3_q <- stack("Pre_Processing/rasters_stacked/VR3_2_90.grd")

# rename rasters in stacks for extraction 
names(GL1_ezg) <- c("velocity", "wd_m")  
names(GL1_v_ezg) <- c("velocity")
#names(GL1_q) <- c("velocity", "wd_m") 

names(GL2_ezg) <- c("velocity", "wd_m") 
names(GL2_v_ezg) <- c("velocity")
#names(GL2_q) <- c("velocity", "wd_m")

names(L2_ezg) <- c("velocity", "wd_m")
names(L2_v_ezg) <- c("velocity")
#names(L2_q) <- c("velocity", "wd_m")

names(M1_ezg) <- c("velocity", "wd_m") 
names(M1_v_ezg) <- c("velocity")
#names(M1_q) <- c("velocity", "wd_m") 

names(S1_ezg) <- c("velocity", "wd_m") 
names(S1_v_ezg) <- c("velocity")
#names(S1_q) <- c("velocity", "wd_m")  

names(S2_ezg) <- c("velocity", "wd_m")
names(S2_v_ezg) <- c("velocity")
#names(S2_q) <- c("velocity", "wd_m") 

names(TH4_ezg) <- c("velocity", "wd_m") 
names(TH4_v_ezg) <- c("velocity")
#names(TH4_q) <- c("velocity", "wd_m") 

names(VR3_ezg) <- c("velocity", "wd_m")
names(VR3_v_ezg) <- c("velocity")
#names(VR3_q) <- c("velocity", "wd_m") 

# assign coordinate system 
crs(GL1_ezg) <- "EPSG: 2056"
#crs(GL1_q) <- "EPSG: 2056"

crs(GL2_ezg) <- "EPSG: 2056"
#crs(GL2_q) <- "EPSG: 2056"

crs(L2_ezg) <- "EPSG: 2056"
#crs(L2_q) <- "EPSG: 2056"

crs(M1_ezg) <- "EPSG: 2056"
#crs(M1_q) <- "EPSG: 2056"

crs(S1_ezg) <- "EPSG: 2056"
#crs(S1_q) <- "EPSG: 2056"

crs(S2_ezg) <- "EPSG: 2056"
#crs(S2_q) <- "EPSG: 2056"

crs(TH4_ezg) <- "EPSG: 2056"
#crs(TH4_q) <- "EPSG: 2056"

crs(VR3_ezg) <- "EPSG: 2056"
#crs(VR3_q) <- "EPSG: 2056"
```

## Predict Models to Maps 
```{r}
# predict ML model to rasters with velocity and wd 
# GL1 - predictors: v + wd ----------------------------------------------------
GL1_ezg_m2_wd_k <- raster::predict(GL1_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_m2_wd_s <- raster::predict(GL1_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_m2_wd_a <- raster::predict(GL1_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_m2_wd_ra <- raster::predict(GL1_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL1_q_m2_wd_k <- raster::predict(GL1_q, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL1_q_m2_wd_s <- raster::predict(GL1_q, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL1_q_m2_wd_a <- raster::predict(GL1_q, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL1_q_m2_wd_ra <- raster::predict(GL1_q, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# GL1 - predictor: velocity ---------------------------------------------------
GL1_ezg_m2_v_k <- raster::predict(GL1_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_m2_v_s <- raster::predict(GL1_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_m2_v_a <- raster::predict(GL1_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_m2_v_ra <- raster::predict(GL1_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL1_q_m2_v_k <- raster::predict(GL1_v_q, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL1_q_m2_v_s <- raster::predict(GL1_v_q, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL1_q_m2_v_a <- raster::predict(GL1_v_q, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL1_q_m2_v_ra <- raster::predict(GL1_v_q, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# GL2 - predictors: v + wd ----------------------------------------------------
GL2_ezg_m2_wd_k <- raster::predict(GL2_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_m2_wd_s <- raster::predict(GL2_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_m2_wd_a <- raster::predict(GL2_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_m2_wd_ra <- raster::predict(GL2_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL2_q_m2_wd_k <- raster::predict(GL2_q, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL2_q_m2_wd_s <- raster::predict(GL2_q, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL2_q_m2_wd_a <- raster::predict(GL2_q, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL2_q_m2_wd_ra <- raster::predict(GL2_q, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# GL2 - predictor: velocity ---------------------------------------------------
GL2_ezg_m2_v_k <- raster::predict(GL2_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_m2_v_s <- raster::predict(GL2_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_m2_v_a <- raster::predict(GL2_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_m2_v_ra <- raster::predict(GL2_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL2_q_m2_v_k <- raster::predict(GL2_v_q, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL2_q_m2_v_s <- raster::predict(GL2_v_q, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL2_q_m2_v_a <- raster::predict(GL2_v_q, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#GL2_q_m2_v_ra <- raster::predict(GL2_v_q, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# L2 - predictors: v + wd -----------------------------------------------------
L2_ezg_m2_wd_k <- raster::predict(L2_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_m2_wd_s <- raster::predict(L2_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_m2_wd_a <- raster::predict(L2_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_m2_wd_ra <- raster::predict(L2_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)


#L2_q_m2_wd_k <- raster::predict(L2_q, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#L2_q_m2_wd_s <- raster::predict(L2_q, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#L2_q_m2_wd_a <- raster::predict(L2_q, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#L2_q_m2_wd_ra <- raster::predict(L2_q, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# L2 - predictor: velocity ----------------------------------------------------
L2_ezg_m2_v_k <- raster::predict(L2_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_m2_v_s <- raster::predict(L2_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_m2_v_a <- raster::predict(L2_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_m2_v_ra <- raster::predict(L2_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)


#L2_q_m2_v_k <- raster::predict(L2_v_q, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#L2_q_m2_v_s <- raster::predict(L2_v_q, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#L2_q_m2_v_a <- raster::predict(L2_v_q, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#L2_q_m2_v_ra <- raster::predict(L2_v_q, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# M1  - predictors: v + wd -----------------------------------------------------
M1_ezg_m2_wd_k <- raster::predict(M1_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_m2_wd_s <- raster::predict(M1_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_m2_wd_a <- raster::predict(M1_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_m2_wd_ra <- raster::predict(M1_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#M1_q_m2_wd_k <- raster::predict(M1_q, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#M1_q_m2_wd_s <- raster::predict(M1_q, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#M1_q_m2_wd_a <- raster::predict(M1_q, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#M1_q_m2_wd_ra <- raster::predict(M1_q, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# M1  - predictor: velocity ---------------------------------------------------
M1_ezg_m2_v_k <- raster::predict(M1_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_m2_v_s <- raster::predict(M1_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_m2_v_a <- raster::predict(M1_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_m2_v_ra <- raster::predict(M1_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)


#M1_q_m2_v_k <- raster::predict(M1_v_q, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#M1_q_m2_v_s <- raster::predict(M1_v_q, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#M1_q_m2_v_a <- raster::predict(M1_v_q, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#M1_q_m2_v_ra <- raster::predict(M1_v_q, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# S1  - predictors: v + wd ----------------------------------------------------
S1_ezg_m2_wd_k <- raster::predict(S1_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_m2_wd_s <- raster::predict(S1_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_m2_wd_a <- raster::predict(S1_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_m2_wd_ra <- raster::predict(S1_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S1_q_m2_wd_k <- raster::predict(S1_q, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S1_q_m2_wd_s <- raster::predict(S1_q, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S1_q_m2_wd_a <- raster::predict(S1_q, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S1_q_m2_wd_ra <- raster::predict(S1_q, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# S1  - predictor: velocity ---------------------------------------------------
S1_ezg_m2_v_k <- raster::predict(S1_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_m2_v_s <- raster::predict(S1_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_m2_v_a <- raster::predict(S1_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_m2_v_ra <- raster::predict(S1_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S1_q_m2_v_k <- raster::predict(S1_v_q, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S1_q_m2_v_s <- raster::predict(S1_v_q, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S1_q_m2_v_a <- raster::predict(S1_v_q, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S1_q_m2_v_ra <- raster::predict(S1_v_q, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# S2  - predictors: v + wd ----------------------------------------------------
S2_ezg_m2_wd_k <- raster::predict(S2_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_m2_wd_s <- raster::predict(S2_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_m2_wd_a <- raster::predict(S2_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_m2_wd_ra <- raster::predict(S2_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S2_q_m2_wd_k <- raster::predict(S2_q, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S2_q_m2_wd_s <- raster::predict(S2_q, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S2_q_m2_wd_a <- raster::predict(S2_q, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S2_q_m2_wd_ra <- raster::predict(S2_q, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# S2  - predictor: velocity ---------------------------------------------------
S2_ezg_m2_v_k <- raster::predict(S2_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_m2_v_s <- raster::predict(S2_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_m2_v_a <- raster::predict(S2_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_m2_v_ra <- raster::predict(S2_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S2_q_m2_v_k <- raster::predict(S2_v_q, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S2_q_m2_v_s <- raster::predict(S2_v_q, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S2_q_m2_v_a <- raster::predict(S2_v_q, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#S2_q_m2_v_ra <- raster::predict(S2_v_q, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# TH4  - predictors: v + wd ---------------------------------------------------
TH4_ezg_m2_wd_k <- raster::predict(TH4_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_m2_wd_s <- raster::predict(TH4_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_m2_wd_a <- raster::predict(TH4_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_m2_wd_ra <- raster::predict(TH4_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#TH4_q_m2_wd_k <- raster::predict(TH4_q, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#TH4_q_m2_wd_s <- raster::predict(TH4_q, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#TH4_q_m2_wd_a <- raster::predict(TH4_q, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#TH4_q_m2_wd_ra <- raster::predict(TH4_q, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# TH4  - predictor: velocity --------------------------------------------------
TH4_ezg_m2_v_k <- raster::predict(TH4_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_m2_v_s <- raster::predict(TH4_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_m2_v_a <- raster::predict(TH4_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_m2_v_ra <- raster::predict(TH4_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#TH4_q_m2_v_k <- raster::predict(TH4_v_q, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#TH4_q_m2_v_s <- raster::predict(TH4_v_q, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#TH4_q_m2_v_a <- raster::predict(TH4_v_q, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#TH4_q_m2_v_ra <- raster::predict(TH4_v_q, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# VR3  - predictors: v + wd ---------------------------------------------------
VR3_ezg_m2_wd_k <- raster::predict(VR3_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_m2_wd_s <- raster::predict(VR3_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_m2_wd_a <- raster::predict(VR3_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_m2_wd_ra <- raster::predict(VR3_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#VR3_q_m2_wd_k <- raster::predict(VR3_q, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#VR3_q_m2_wd_s <- raster::predict(VR3_q, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#VR3_q_m2_wd_a <- raster::predict(VR3_q, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#VR3_q_m2_wd_ra <- raster::predict(VR3_q, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# VR3  - predictor: velocity --------------------------------------------------
VR3_ezg_m2_v_k <- raster::predict(VR3_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_m2_v_s <- raster::predict(VR3_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_m2_v_a <- raster::predict(VR3_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_m2_v_ra <- raster::predict(VR3_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#VR3_q_m2_v_k <- raster::predict(VR3_v_q, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#VR3_q_m2_v_s <- raster::predict(VR3_v_q, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#VR3_q_m2_v_a <- raster::predict(VR3_v_q, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

#VR3_q_m2_v_ra <- raster::predict(VR3_v_q, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### Read data
```{r}
# read all raster results (one time flow velocity classes and one time for habitat suitability)
# prep extraction data 
## GL1
coord_GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1") |>
  dplyr::select(x, y) 

GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1")

## GL2
coord_GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2") |>
  dplyr::select(x, y) 

GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2")

## L2
coord_L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2") |>
  dplyr::select(x, y) 

L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2")

## M1
coord_M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1") |>
  dplyr::select(x, y) 

M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1")

## S1
coord_S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1") |>
  dplyr::select(x, y) 

S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1")

## S2
coord_S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2") |>
  dplyr::select(x, y) 

S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2")

## TH4
coord_TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4") |>
  dplyr::select(x, y) 

TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4")

## VR3
coord_VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3") |>
  dplyr::select(x, y) 

VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3")
```

## Extract Results
```{r}
# extract raster information for regression analysis later
# GL1 -------------------------------------------------------------------------
regr_m2_GL1_wd_k <- raster::extract(GL1_ezg_m2_wd_k, coord_GL1) 
regr_m2_GL1_wd_s <- raster::extract(GL1_ezg_m2_wd_s, coord_GL1) 
regr_m2_GL1_wd_a <- raster::extract(GL1_ezg_m2_wd_a, coord_GL1) 
regr_m2_GL1_wd_ra <- raster::extract(GL1_ezg_m2_wd_ra, coord_GL1) 

regr_m2_GL1_v_k <- raster::extract(GL1_ezg_m2_v_k, coord_GL1) 
regr_m2_GL1_v_s <- raster::extract(GL1_ezg_m2_v_s, coord_GL1) 
regr_m2_GL1_v_a <- raster::extract(GL1_ezg_m2_v_a, coord_GL1) 
regr_m2_GL1_v_ra <- raster::extract(GL1_ezg_m2_v_ra, coord_GL1)

# GL2 -------------------------------------------------------------------------
regr_m2_GL2_wd_k <- raster::extract(GL2_ezg_m2_wd_k, coord_GL2) 
regr_m2_GL2_wd_s <- raster::extract(GL2_ezg_m2_wd_s, coord_GL2) 
regr_m2_GL2_wd_a <- raster::extract(GL2_ezg_m2_wd_a, coord_GL2) 
regr_m2_GL2_wd_ra <- raster::extract(GL2_ezg_m2_wd_ra, coord_GL2)

regr_m2_GL2_v_k <- raster::extract(GL2_ezg_m2_v_k, coord_GL2) 
regr_m2_GL2_v_s <- raster::extract(GL2_ezg_m2_v_s, coord_GL2) 
regr_m2_GL2_v_a <- raster::extract(GL2_ezg_m2_v_a, coord_GL2)
regr_m2_GL2_v_ra <- raster::extract(GL2_ezg_m2_v_ra, coord_GL2)

# L2 --------------------------------------------------------------------------
regr_m2_L2_wd_k <- raster::extract(L2_ezg_m2_wd_k, coord_L2) 
regr_m2_L2_wd_s <- raster::extract(L2_ezg_m2_wd_s, coord_L2) 
regr_m2_L2_wd_a <- raster::extract(L2_ezg_m2_wd_a, coord_L2) 
regr_m2_L2_wd_ra <- raster::extract(L2_ezg_m2_wd_ra, coord_L2) 

regr_m2_L2_v_k <- raster::extract(L2_ezg_m2_v_k, coord_L2) 
regr_m2_L2_v_s <- raster::extract(L2_ezg_m2_v_s, coord_L2) 
regr_m2_L2_v_a <- raster::extract(L2_ezg_m2_v_a, coord_L2)
regr_m2_L2_v_ra <- raster::extract(L2_ezg_m2_v_ra, coord_L2)

# M1 --------------------------------------------------------------------------
regr_m2_M1_wd_k <- raster::extract(M1_ezg_m2_wd_k, coord_M1) 
regr_m2_M1_wd_s <- raster::extract(M1_ezg_m2_wd_s, coord_M1) 
regr_m2_M1_wd_a <- raster::extract(M1_ezg_m2_wd_a, coord_M1) 
regr_m2_M1_wd_ra <- raster::extract(M1_ezg_m2_wd_ra, coord_M1) 

regr_m2_M1_v_k <- raster::extract(M1_ezg_m2_v_k, coord_M1) 
regr_m2_M1_v_s <- raster::extract(M1_ezg_m2_v_s, coord_M1) 
regr_m2_M1_v_a <- raster::extract(M1_ezg_m2_v_a, coord_M1)
regr_m2_M1_v_ra <- raster::extract(M1_ezg_m2_v_ra, coord_M1)

# S1 --------------------------------------------------------------------------
regr_m2_S1_wd_k <- raster::extract(S1_ezg_m2_wd_k, coord_S1) 
regr_m2_S1_wd_s <- raster::extract(S1_ezg_m2_wd_s, coord_S1) 
regr_m2_S1_wd_a <- raster::extract(S1_ezg_m2_wd_a, coord_S1) 
regr_m2_S1_wd_ra <- raster::extract(S1_ezg_m2_wd_ra, coord_S1) 

regr_m2_S1_v_k <- raster::extract(S1_ezg_m2_v_k, coord_S1) 
regr_m2_S1_v_s <- raster::extract(S1_ezg_m2_v_s, coord_S1) 
regr_m2_S1_v_a <- raster::extract(S1_ezg_m2_v_a, coord_S1)
regr_m2_S1_v_ra <- raster::extract(S1_ezg_m2_v_ra, coord_S1)

# S2 --------------------------------------------------------------------------
regr_m2_S2_wd_k <- raster::extract(S2_ezg_m2_wd_k, coord_S2) 
regr_m2_S2_wd_s <- raster::extract(S2_ezg_m2_wd_s, coord_S2) 
regr_m2_S2_wd_a <- raster::extract(S2_ezg_m2_wd_a, coord_S2) 
regr_m2_S2_wd_ra <- raster::extract(S2_ezg_m2_wd_ra, coord_S2)

regr_m2_S2_v_k <- raster::extract(S2_ezg_m2_v_k, coord_S2) 
regr_m2_S2_v_s <- raster::extract(S2_ezg_m2_v_s, coord_S2) 
regr_m2_S2_v_a <- raster::extract(S2_ezg_m2_v_a, coord_S2)
regr_m2_S2_v_ra <- raster::extract(S2_ezg_m2_v_ra, coord_S2)

# TH4 -------------------------------------------------------------------------
regr_m2_TH4_wd_k <- raster::extract(TH4_ezg_m2_wd_k, coord_TH4) 
regr_m2_TH4_wd_s <- raster::extract(TH4_ezg_m2_wd_s, coord_TH4) 
regr_m2_TH4_wd_a <- raster::extract(TH4_ezg_m2_wd_a, coord_TH4) 
regr_m2_TH4_wd_ra <- raster::extract(TH4_ezg_m2_wd_ra, coord_TH4) 

regr_m2_TH4_v_k <- raster::extract(TH4_ezg_m2_v_k, coord_TH4) 
regr_m2_TH4_v_s <- raster::extract(TH4_ezg_m2_v_s, coord_TH4) 
regr_m2_TH4_v_a <- raster::extract(TH4_ezg_m2_v_a, coord_TH4)
regr_m2_TH4_v_ra <- raster::extract(TH4_ezg_m2_v_ra, coord_TH4)

# VR3 -------------------------------------------------------------------------
regr_m2_VR3_wd_k <- raster::extract(VR3_ezg_m2_wd_k, coord_VR3) 
regr_m2_VR3_wd_s <- raster::extract(VR3_ezg_m2_wd_s, coord_VR3) 
regr_m2_VR3_wd_a <- raster::extract(VR3_ezg_m2_wd_a, coord_VR3) 
regr_m2_VR3_wd_ra <- raster::extract(VR3_ezg_m2_wd_ra, coord_VR3)

regr_m2_VR3_v_k <- raster::extract(VR3_ezg_m2_v_k, coord_VR3) 
regr_m2_VR3_v_s <- raster::extract(VR3_ezg_m2_v_s, coord_VR3) 
regr_m2_VR3_v_a <- raster::extract(VR3_ezg_m2_v_a, coord_VR3)
regr_m2_VR3_v_ra <- raster::extract(VR3_ezg_m2_v_ra, coord_VR3)
```

## Combine into DF
```{r}
# combine all results into dataframe
# GL1 -------------------------------------------------------------------------
data_GL1 <- cbind(regr_m2_GL1_wd_k, regr_m2_GL1_wd_s, regr_m2_GL1_wd_a, regr_m2_GL1_wd_ra, regr_m2_GL1_v_k, regr_m2_GL1_v_s, regr_m2_GL1_v_a, regr_m2_GL1_v_ra, GL1) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_GL1_wd_k,
         m2_shannon_wd = regr_m2_GL1_wd_s,
         m2_abundance_wd = regr_m2_GL1_wd_a,
         m2_rel_abundance_wd = regr_m2_GL1_wd_ra,
         m2_k_index_v = regr_m2_GL1_v_k,
         m2_shannon_v = regr_m2_GL1_v_s,
         m2_abundance_v = regr_m2_GL1_v_a,
         m2_rel_abundance_v = regr_m2_GL1_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# GL2 -------------------------------------------------------------------------
data_GL2 <- cbind(regr_m2_GL2_wd_k, regr_m2_GL2_wd_s, regr_m2_GL2_wd_a, regr_m2_GL2_wd_ra, regr_m2_GL2_v_k, regr_m2_GL2_v_s, regr_m2_GL2_v_a, regr_m2_GL2_v_ra, GL2) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_GL2_wd_k,
         m2_shannon_wd = regr_m2_GL2_wd_s,
         m2_abundance_wd = regr_m2_GL2_wd_a,
         m2_rel_abundance_wd = regr_m2_GL2_wd_ra,
         m2_k_index_v = regr_m2_GL2_v_k,
         m2_shannon_v = regr_m2_GL2_v_s,
         m2_abundance_v = regr_m2_GL2_v_a,
         m2_rel_abundance_v = regr_m2_GL2_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# L2 --------------------------------------------------------------------------
data_L2 <- cbind(regr_m2_L2_wd_k, regr_m2_L2_wd_s, regr_m2_L2_wd_a, regr_m2_L2_wd_ra, regr_m2_L2_v_k, regr_m2_L2_v_s, regr_m2_L2_v_a, regr_m2_L2_v_ra, L2) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_L2_wd_k,
         m2_shannon_wd = regr_m2_L2_wd_s,
         m2_abundance_wd = regr_m2_L2_wd_a,
         m2_rel_abundance_wd = regr_m2_L2_wd_ra,
         m2_k_index_v = regr_m2_L2_v_k,
         m2_shannon_v = regr_m2_L2_v_s,
         m2_abundance_v = regr_m2_L2_v_a,
         m2_rel_abundance_v = regr_m2_L2_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# M1 --------------------------------------------------------------------------
data_M1 <- cbind(regr_m2_M1_wd_k, regr_m2_M1_wd_s, regr_m2_M1_wd_a, regr_m2_M1_wd_ra, regr_m2_M1_v_k, regr_m2_M1_v_s, regr_m2_M1_v_a, regr_m2_M1_v_ra, M1) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_M1_wd_k,
         m2_shannon_wd = regr_m2_M1_wd_s,
         m2_abundance_wd = regr_m2_M1_wd_a,
         m2_rel_abundance_wd = regr_m2_M1_wd_ra,
         m2_k_index_v = regr_m2_M1_v_k,
         m2_shannon_v = regr_m2_M1_v_s,
         m2_abundance_v = regr_m2_M1_v_a,
         m2_rel_abundance_v = regr_m2_M1_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# S1 --------------------------------------------------------------------------
data_S1 <- cbind(regr_m2_S1_wd_k, regr_m2_S1_wd_s, regr_m2_S1_wd_a, regr_m2_S1_wd_ra, regr_m2_S1_v_k, regr_m2_S1_v_s, regr_m2_S1_v_a, regr_m2_S1_v_ra, S1) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_S1_wd_k,
         m2_shannon_wd = regr_m2_S1_wd_s,
         m2_abundance_wd = regr_m2_S1_wd_a,
         m2_rel_abundance_wd = regr_m2_S1_wd_ra,
         m2_k_index_v = regr_m2_S1_v_k,
         m2_shannon_v = regr_m2_S1_v_s,
         m2_abundance_v = regr_m2_S1_v_a,
         m2_rel_abundance_v = regr_m2_S1_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# S2 --------------------------------------------------------------------------
data_S2 <- cbind(regr_m2_S2_wd_k, regr_m2_S2_wd_s, regr_m2_S2_wd_a, regr_m2_S2_wd_ra, regr_m2_S2_v_k, regr_m2_S2_v_s, regr_m2_S2_v_a, regr_m2_S2_v_ra, S2) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_S2_wd_k,
         m2_shannon_wd = regr_m2_S2_wd_s,
         m2_abundance_wd = regr_m2_S2_wd_a,
         m2_rel_abundance_wd = regr_m2_S2_wd_ra,
         m2_k_index_v = regr_m2_S2_v_k,
         m2_shannon_v = regr_m2_S2_v_s,
         m2_abundance_v = regr_m2_S2_v_a,
         m2_rel_abundance_v = regr_m2_S2_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)


# TH4 -------------------------------------------------------------------------
data_TH4 <- cbind(regr_m2_TH4_wd_k, regr_m2_TH4_wd_s, regr_m2_TH4_wd_a, regr_m2_TH4_wd_ra, regr_m2_TH4_v_k, regr_m2_TH4_v_s, regr_m2_TH4_v_a, regr_m2_TH4_v_ra, TH4) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_TH4_wd_k,
         m2_shannon_wd = regr_m2_TH4_wd_s,
         m2_abundance_wd = regr_m2_TH4_wd_a,
         m2_rel_abundance_wd = regr_m2_TH4_wd_ra,
         m2_k_index_v = regr_m2_TH4_v_k,
         m2_shannon_v = regr_m2_TH4_v_s,
         m2_abundance_v = regr_m2_TH4_v_a,
         m2_rel_abundance_v = regr_m2_TH4_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)


# VR3 -------------------------------------------------------------------------
data_VR3 <- cbind(regr_m2_VR3_wd_k, regr_m2_VR3_wd_s, regr_m2_VR3_wd_a, regr_m2_VR3_wd_ra, regr_m2_VR3_v_k, regr_m2_VR3_v_s, regr_m2_VR3_v_a, regr_m2_VR3_v_ra, VR3) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_VR3_wd_k,
         m2_shannon_wd = regr_m2_VR3_wd_s,
         m2_abundance_wd = regr_m2_VR3_wd_a,
         m2_rel_abundance_wd = regr_m2_VR3_wd_ra,
         m2_k_index_v = regr_m2_VR3_v_k,
         m2_shannon_v = regr_m2_VR3_v_s,
         m2_abundance_v = regr_m2_VR3_v_a,
         m2_rel_abundance_v = regr_m2_VR3_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)
```

## Results from Extraction 
```{r}
# bind results together 
# data_TH4 fehlt noch
regr_analysis <- rbind(data_GL1, data_GL2, data_L2, data_M1, data_S1, data_S2, data_TH4, data_VR3)

# export to .csv file
write.csv(regr_analysis, "Stat_Analysis/stat_analysis_data/regr_analysis_rf_add.csv", row.names = FALSE)
```