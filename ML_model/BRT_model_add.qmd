---
title: "BRT_model"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
pkgCheck("Fgmutils") # for bias calculation (bias() function)
pkgCheck("hydroGOF") # for NSE calculation with NSE() function 
```


# Load & prepare data 
```{r}
# Load data containing velocity as predictor variable 
data_v <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_v_add.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing velocity and wd as predictors 
data_wd <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_wd_add.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing all variables measured at each sampling locations and remove all other "chr" variables
data_sampling <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_sampling_add.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type) |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing all variables measured at each river section and remove all other "chr" variables
# Additionally, remove ox_sat columns, as they contain NA values
data_section <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_section_add.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type, -Hydropeaking_river_type, -Hydrokeaking_residual_flow_natural_near_natural, -date, -time, -time_before, -time_during, -time_after, -Category_Water_depth, -Number_Taxa, -EPT_Taxa, -ox_sat_after, -ox_sat_before, -ox_sat_during, -hydr_type_int, -hydr_int) |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)
```
    
```{r}
### TRAINING SETS ###
# w/o hydr. models "GL1", "GL2", "L2", "M1", "S1", "S2", "TH4", "VR3"
# training set containing velocity 
training_v <- data_v |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing velocity + wd
training_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location 
training_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location and overall river section 
training_section <- data_section |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

### TEST SETS ###
# test set containing velocity 
test_v <- data_v |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing velocity + wd
test_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" |  
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location 
test_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location and overall river section 
test_section <- data_section |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")
```

## Training Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response 
training_v_k <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance)

# With shannon index as response 
training_v_s <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance)

# With abundance as response 
training_v_a <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance)

# With relative abundance as response  
training_v_ra <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index)

### PREDICTOR: VELOCITY AND WD ### ---------------------------------------------
# With k_index as response 
training_wd_k <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance)

# With shannon index as response 
training_wd_s <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance)

# With abundance index as response 
training_wd_a <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance)

# With relative abundance index as response 
training_wd_ra <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index)

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response 
training_samp_k <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_samp_a <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_samp_ra <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response 
training_sec_k <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_sec_a <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_sec_ra <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Training Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response 
training_v_k_c <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance, -x, -y)

# With shannon index as response
training_v_s_c <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance, -x, -y)

# With abundance as response
training_v_a_c <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance, -x, -y)

# With rel_abundance as response
training_v_ra_c <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index, -x, -y)

### PREDICTOR: VELOCITY AND WD ### ----------------------------------
# With k_index as response 
training_wd_k_c <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance, -x, -y)

# With shannon index as response 
training_wd_s_c <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance, -x, -y)

# With abundance as response 
training_wd_a_c <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance, -x, -y)

# With rel_abundance as response 
training_wd_ra_c <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index, -x, -y)

### PREDICTOR: SAMPLING LOCATIONS ### --------------------------------
# With k_index as response 
training_samp_k_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s_c <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_samp_a_c <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_samp_ra_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### ----------------------------------
# With k_index as response 
training_sec_k_c <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s_c <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_sec_a_c <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_sec_ra_c <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)
```

## Test Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ------------------------------------------
# With k_index as response
test_v_k <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance)

# With shannon index as response
test_v_s <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance)

# With abundance as response 
test_v_a <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance)

# With relative abundance as response 
test_v_ra <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance)

# With shannon index as response 
test_wd_s <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance)

# With abundance as response 
test_wd_a <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance)

# With relative abundance as response 
test_wd_ra <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response
test_samp_a <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_samp_ra <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
test_sec_s <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
test_sec_a <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_sec_ra <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Test Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response
test_v_k_c <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance, -x, -y)

# With shannon index as response
test_v_s_c <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance, -x, -y) 

# With abundance as response
test_v_a_c <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance, -x, -y) 

# With rel_abundance as response
test_v_ra_c <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index, -x, -y)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k_c <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance, -x, -y) 

# With shannon index as response 
test_wd_s_c <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance, -x, -y)

# With abundance as response 
test_wd_a_c <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance, -x, -y)

# With rel_abundance as response 
test_wd_ra_c <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index, -x, -y)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s_c <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
test_samp_a_c <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
test_samp_ra_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k_c <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response
test_sec_s_c <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response
test_sec_a_c <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response
test_sec_ra_c <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)
```

# Boosted Regression Tree
## Hyperparameter tuning 
```{r}
# convert dataframes into spatial objects for mlr3 spatial hyperparameter tuning
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
data_v_k_sp <-  st_as_sf(training_v_k, coords =  c("x", "y"))
st_crs(data_v_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_v_s_sp <-  st_as_sf(training_v_s, coords =  c("x", "y"))
st_crs(data_v_s_sp) <- "EPSG: 2056"

# With abundance as response
data_v_a_sp <-  st_as_sf(training_v_a, coords =  c("x", "y"))
st_crs(data_v_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_v_ra_sp <-  st_as_sf(training_v_ra, coords =  c("x", "y"))
st_crs(data_v_ra_sp) <- "EPSG: 2056"

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# With k_index as response
data_wd_k_sp <-  st_as_sf(training_wd_k, coords =  c("x", "y"))
st_crs(data_wd_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_wd_s_sp <-  st_as_sf(training_wd_s, coords =  c("x", "y"))
st_crs(data_wd_s_sp) <- "EPSG: 2056"

# With abundance as response
data_wd_a_sp <-  st_as_sf(training_wd_a, coords =  c("x", "y"))
st_crs(data_wd_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_wd_ra_sp <-  st_as_sf(training_wd_ra, coords =  c("x", "y"))
st_crs(data_wd_ra_sp) <- "EPSG: 2056"

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response
data_samp_k_sp <-  st_as_sf(training_samp_k, coords =  c("x", "y"))
st_crs(data_samp_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_samp_s_sp <-  st_as_sf(training_samp_s, coords =  c("x", "y"))
st_crs(data_samp_s_sp) <- "EPSG: 2056"

# With abundance as response
data_samp_a_sp <-  st_as_sf(training_samp_a, coords =  c("x", "y"))
st_crs(data_samp_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_samp_ra_sp <-  st_as_sf(training_samp_ra, coords =  c("x", "y"))
st_crs(data_samp_ra_sp) <- "EPSG: 2056"

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response
data_sec_k_sp <-  st_as_sf(training_sec_k, coords =  c("x", "y"))
st_crs(data_sec_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_sec_s_sp <-  st_as_sf(training_sec_s, coords =  c("x", "y"))
st_crs(data_sec_s_sp) <- "EPSG: 2056"

# With abundance as response
data_sec_a_sp <-  st_as_sf(training_sec_a, coords =  c("x", "y"))
st_crs(data_sec_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_sec_ra_sp <-  st_as_sf(training_sec_ra, coords =  c("x", "y"))
st_crs(data_sec_ra_sp) <- "EPSG: 2056"
```

### Create Task & Learner
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
task_xbrt_v_k <- mlr3spatiotempcv::as_task_regr_st(data_v_k_sp,
  id = "velocity_k_index", target = "k_index")

# With shannon index as response
task_xbrt_v_s <- mlr3spatiotempcv::as_task_regr_st(data_v_s_sp,
  id = "velocity_shannon", target = "shannon")

# With abundance as response 
task_xbrt_v_a <- mlr3spatiotempcv::as_task_regr_st(data_v_a_sp,
  id = "velocity_abundance", target = "abundance")

# With rel_abundance as response 
task_xbrt_v_ra <- mlr3spatiotempcv::as_task_regr_st(data_v_ra_sp,
  id = "velocity_rel_abundance", target = "rel_abundance")

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# With k_index as response
task_xbrt_wd_k <- mlr3spatiotempcv::as_task_regr_st(data_wd_k_sp,
  id = "water_depth_k_index", target = "k_index")

# With shannon index as response
task_xbrt_wd_s <- mlr3spatiotempcv::as_task_regr_st(data_wd_s_sp,
  id = "water_depth_shannon", target = "shannon")

# With abundance as response
task_xbrt_wd_a <- mlr3spatiotempcv::as_task_regr_st(data_wd_a_sp,
  id = "water_depth_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_wd_ra <- mlr3spatiotempcv::as_task_regr_st(data_wd_ra_sp,
  id = "water_depth_rel_abundance", target = "rel_abundance")

### PREDICTORS: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response
task_xbrt_samp_k <- mlr3spatiotempcv::as_task_regr_st(data_samp_k_sp,
  id = "sampling_k_index", target = "k_index")

# With shannon index as response
task_xbrt_samp_s <- mlr3spatiotempcv::as_task_regr_st(data_samp_s_sp,
  id = "sampling_shannon", target = "shannon")

# With abundance as response
task_xbrt_samp_a <- mlr3spatiotempcv::as_task_regr_st(data_samp_a_sp,
  id = "sampling_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_samp_ra <- mlr3spatiotempcv::as_task_regr_st(data_samp_ra_sp,
  id = "sampling_rel_abundance", target = "rel_abundance")

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# With k_index as response
task_xbrt_sec_k <- mlr3spatiotempcv::as_task_regr_st(data_sec_k_sp,
  id = "section_k_index", target = "k_index")

# With shannon index as response
task_xbrt_sec_s <- mlr3spatiotempcv::as_task_regr_st(data_sec_s_sp,
  id = "section_shannon", target = "shannon")

# With abundance as response
task_xbrt_sec_a <- mlr3spatiotempcv::as_task_regr_st(data_sec_a_sp,
  id = "section_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_sec_ra <- mlr3spatiotempcv::as_task_regr_st(data_sec_ra_sp,
  id = "section_rel_abundance", target = "rel_abundance")

### LEARNER ### ----------------------------------------------------------------
# learner for random forest valid for all models
lrn_xbrt <- lrn("regr.xgboost", predict_type = "response")
```

### Specify Search Space
```{r}
# specifying the search space for all response variables and predictors 
search_space_xbrt <- paradox::ps(
  eta = p_dbl(lower = 0.01, upper = 1.0), # learning rate
  nrounds = p_int(lower = 100, upper = 1000),
  max_depth = p_int(lower = 3, upper = 10), # tree complexity
  subsample = p_dbl(lower = 0.5, upper = 0.75) # bag fraction 
)
```

### Specify Autotuner  
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
autotuner_xbrt_v_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_v_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_v_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_v_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
autotuner_xbrt_wd_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_wd_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_wd_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_wd_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
autotuner_xbrt_samp_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_samp_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_samp_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_samp_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
autotuner_xbrt_sec_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_sec_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_sec_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_sec_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning 
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)
```

### Train Autotuner
```{r}
# set seed to obtain the same results with each run
set.seed(0412022)

### PREDICTOR: VELOCITY ### --------------------------------------------------
# With k_index as response
autotuner_xbrt_v_k$train(task_xbrt_v_k)

# With shannon index as response
autotuner_xbrt_v_s$train(task_xbrt_v_s)

# With abundance as response
autotuner_xbrt_v_a$train(task_xbrt_v_a)

# With rel_abundance as response
autotuner_xbrt_v_ra$train(task_xbrt_v_ra)

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response
autotuner_xbrt_wd_k$train(task_xbrt_wd_k)

# With shannon index as response
autotuner_xbrt_wd_s$train(task_xbrt_wd_s)

# With abundance as response
autotuner_xbrt_wd_a$train(task_xbrt_wd_a)

# With rel_abundance as response
autotuner_xbrt_wd_ra$train(task_xbrt_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response
autotuner_xbrt_samp_k$train(task_xbrt_samp_k)

# With shannon index as response
autotuner_xbrt_samp_s$train(task_xbrt_samp_s)

# With abundance as response
autotuner_xbrt_samp_a$train(task_xbrt_samp_a)

# With rel_abundance as response
autotuner_xbrt_samp_ra$train(task_xbrt_samp_ra)

### PREDICTORS: ALL PREDICTORS ### -------------------------------------------
# With k_index as response
autotuner_xbrt_sec_k$train(task_xbrt_sec_k)

# With shannon index as response
autotuner_xbrt_sec_s$train(task_xbrt_sec_s)

# With abundance as response
autotuner_xbrt_sec_a$train(task_xbrt_sec_a)

# With rel_abundance as response
autotuner_xbrt_sec_ra$train(task_xbrt_sec_ra)
```

### Tuned Hyperparameters
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
autotuner_xbrt_v_k$tuning_result

# With shannon index as response
autotuner_xbrt_v_s$tuning_result

# With abundance as response
autotuner_xbrt_v_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_v_ra$tuning_result

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
autotuner_xbrt_wd_k$tuning_result

# With shannon index as response
autotuner_xbrt_wd_s$tuning_result

# With abundance as response
autotuner_xbrt_wd_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_wd_ra$tuning_result

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
autotuner_xbrt_samp_k$tuning_result

# With shannon index as response
autotuner_xbrt_samp_s$tuning_result

# With abundance as response 
autotuner_xbrt_samp_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_samp_ra$tuning_result

### PREDICTORS: ALL PREDICTORS ### -------------------------------------------
# With k_index as response
autotuner_xbrt_sec_k$tuning_result

# With shannon index as response
autotuner_xbrt_sec_s$tuning_result

# With abundance as response
autotuner_xbrt_sec_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_sec_ra$tuning_result
```

# Xgboost models 
## Specify Matrix
### Training Sets
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
trainx_v_k_c <- model.matrix(k_index ~ ., data = training_v_k_c)

# With shannon index as response
trainx_v_s_c <- model.matrix(shannon ~ ., data = training_v_s_c)

# With abundance as response 
trainx_v_a_c <- model.matrix(abundance ~ ., data = training_v_a_c)

# With rel_abundance as response 
trainx_v_ra_c <- model.matrix(rel_abundance ~ ., data = training_v_ra_c)

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response
trainx_wd_k_c <- model.matrix(k_index ~ ., data = training_wd_k_c)

# With shannon index as response
trainx_wd_s_c <- model.matrix(shannon ~ ., data = training_wd_s_c)

# With abundance as response
trainx_wd_a_c <- model.matrix(abundance ~ ., data = training_wd_a_c)

# With rel_abundance as response
trainx_wd_ra_c <- model.matrix(rel_abundance ~ ., data = training_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
trainx_samp_k_c <- model.matrix(k_index ~ ., data = training_samp_k_c)

# With shannon index as response
trainx_samp_s_c <- model.matrix(shannon ~ ., data = training_samp_s_c)

# With abundance as response
trainx_samp_a_c <- model.matrix(abundance ~ ., data = training_samp_a_c)

# With rel_abundance as response
trainx_samp_ra_c <- model.matrix(rel_abundance ~ ., data = training_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### ----------------------------------------
# With k_index as response
trainx_sec_k_c <- model.matrix(k_index ~ ., data = training_sec_k_c)

# With shannon index as response
trainx_sec_s_c <- model.matrix(shannon ~ ., data = training_sec_s_c)

# With abundance as response
trainx_sec_a_c <- model.matrix(abundance ~ ., data = training_sec_a_c)

# With rel_abundance as response
trainx_sec_ra_c <- model.matrix(rel_abundance ~ ., data = training_sec_ra_c)
```

### Test Sets
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
testx_v_k_c <- model.matrix(k_index ~ ., data = test_v_k_c)
testx_v_k_c <- as.matrix(testx_v_k_c[ ,-1])

# With shannon index as response
testx_v_s_c <- model.matrix(shannon ~ ., data = test_v_s_c)
testx_v_s_c <- as.matrix(testx_v_s_c[ ,-1])

# With abundance as response
testx_v_a_c <- model.matrix(abundance ~ ., data = test_v_a_c)
testx_v_a_c <- as.matrix(testx_v_a_c[ ,-1])

# With rel_abundance as response
testx_v_ra_c <- model.matrix(rel_abundance ~ ., data = test_v_ra_c)
testx_v_ra_c <- as.matrix(testx_v_ra_c[ ,-1])

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
testx_wd_k_c <- model.matrix(k_index ~ ., data = test_wd_k_c)

# With shannon index as response
testx_wd_s_c <- model.matrix(shannon ~ ., data = test_wd_s_c)

# With abundance as response
testx_wd_a_c <- model.matrix(abundance ~ ., data = test_wd_a_c)

# With rel_abundance as response
testx_wd_ra_c <- model.matrix(rel_abundance ~ ., data = test_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
testx_samp_k_c <- model.matrix(k_index ~ ., data = test_samp_k_c)

# With shannon index as response
testx_samp_s_c <- model.matrix(shannon ~ ., data = test_samp_s_c)

# With abundance as response
testx_samp_a_c <- model.matrix(abundance ~ ., data = test_samp_a_c)

# With rel_abundance as response
testx_samp_ra_c <- model.matrix(rel_abundance ~ ., data = test_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ###
# With k_index as response
testx_sec_k_c <- model.matrix(k_index ~ ., data = test_sec_k_c)

# With shannon index as response
testx_sec_s_c <- model.matrix(shannon ~ ., data = test_sec_s_c)

# With abundance as response
testx_sec_a_c <- model.matrix(abundance ~ ., data = test_sec_a_c)

# With rel_abundance as response
testx_sec_ra_c <- model.matrix(rel_abundance ~ ., data = test_sec_ra_c)
```

## Xgboost w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
#          eta nrounds max_depth subsample 
#1: 0.01838576     922         3 0.6312782  
xgb_v_k_c <- xgboost(data = data.matrix(trainx_v_k_c[ ,-1]),
                     label = as.numeric(as.character(training_v_k_c$k_index)),
                     eta = 0.01838576,
                     max_depth = 3,
                     nrounds = 922,
                     subsample = 0.6312782,
                     objective = "reg:linear")

# With shannon index as response
#          eta nrounds max_depth subsample 
#1: 0.02051284     842         3 0.5546174 
xgb_v_s_c <- xgboost(data = data.matrix(trainx_v_s_c[ ,-1]),
                     label = as.numeric(as.character(training_v_s_c$shannon)),
                     eta = 0.02051284,
                     max_depth = 3,
                     nrounds = 842,
                     subsample = 0.5546174,
                     objective = "reg:linear")

# With abundance as response
#          eta nrounds max_depth subsample 
#1: 0.01744147     167         5 0.7081337
xgb_v_a_c <- xgboost(data = data.matrix(trainx_v_a_c[ ,-1]),
                     label = as.numeric(as.character(training_v_a_c$abundance)),
                     eta = 0.01744147,
                     max_depth = 5,
                     nrounds = 167,
                     subsample = 0.7081337,
                     objective = "reg:linear")

# With rel_abundance as response
#          eta nrounds max_depth subsample 
#1: 0.1571109     304         3 0.6066233 
xgb_v_ra_c <- xgboost(data = data.matrix(trainx_v_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_v_ra_c$rel_abundance)),
                     eta = 0.1571109,
                     max_depth = 3,
                     nrounds = 304,
                     subsample = 0.6066233,
                     objective = "reg:linear")

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
#          eta nrounds max_depth subsample 
#1: 0.01828801     322        10 0.7039692 
xgb_wd_k_c <- xgboost(data = data.matrix(trainx_wd_k_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_k_c$k_index)),
                     eta = 0.01828801,
                     max_depth = 10,
                     nrounds = 322,
                     subsample = 0.7039692,
                     objective = "reg:linear")

# With shannon index as response
#         eta nrounds max_depth subsample 
#1: 0.04499585     376         3 0.5814768   
xgb_wd_s_c <- xgboost(data = data.matrix(trainx_wd_s_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_s_c$shannon)),
                     eta = 0.04499585,
                     max_depth = 3,
                     nrounds = 376,
                     subsample = 0.5814768,
                     objective = "reg:linear")

# With abundance as response
#          eta nrounds max_depth subsample 
#1: 0.1800055     277         5 0.7339144 
xgb_wd_a_c <- xgboost(data = data.matrix(trainx_wd_a_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_a_c$abundance)),
                     eta = 0.1800055,
                     max_depth = 5,
                     nrounds = 277,
                     subsample = 0.7339144,
                     objective = "reg:linear")

# With rel_abundance as response
#          eta nrounds max_depth subsample 
#1: 0.1606578     325         7 0.6312232             
xgb_wd_ra_c <- xgboost(data = data.matrix(trainx_wd_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_ra_c$rel_abundance)),
                     eta = 0.1606578,
                     max_depth = 7,
                     nrounds = 325,
                     subsample = 0.6312232,
                     objective = "reg:linear")

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response 
#         eta nrounds max_depth subsample 
#1: 0.02039068     970         4   0.57129                
xgb_samp_k_c <- xgboost(data = data.matrix(trainx_samp_k_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_k_c$k_index)),
                     eta = 0.02039068,
                     max_depth = 4,
                     nrounds = 970,
                     subsample = 0.57129,
                     objective = "reg:linear")

# With shannon index as response
#         eta nrounds max_depth subsample 
#1: 0.1461828     387         7 0.7189186              
xgb_samp_s_c <- xgboost(data = data.matrix(trainx_samp_s_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_s_c$shannon)),
                     eta = 0.1461828,
                     max_depth = 7,
                     nrounds = 387,
                     subsample = 0.7189186,
                     objective = "reg:linear")

# With abundance as response
#         eta nrounds max_depth subsample 
#1: 0.1325823     646         3  0.745424               
xgb_samp_a_c <- xgboost(data = data.matrix(trainx_samp_a_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_a_c$abundance)),
                     eta = 0.1325823,
                     max_depth = 3,
                     nrounds = 646,
                     subsample = 0.745424,
                     objective = "reg:linear")

# With rel_abundance as response 
#          eta nrounds max_depth subsample 
#1: 0.2120678     536         9 0.5065179              
xgb_samp_ra_c <- xgboost(data = data.matrix(trainx_samp_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_ra_c$rel_abundance)),
                     eta = 0.2120678,
                     max_depth = 9,
                     nrounds = 536,
                     subsample = 0.5065179,
                     objective = "reg:linear")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
#         eta nrounds max_depth subsample 
#1: 0.0905284     767        10  0.687448              
xgb_sec_k_c <- xgboost(data = data.matrix(trainx_sec_k_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_k_c$k_index)),
                     eta = 0.0905284,
                     max_depth = 10,
                     nrounds = 767,
                     subsample = 0.687448,
                     objective = "reg:linear")

# With shannon index as response 
#         eta nrounds max_depth subsample 
#1: 0.03126577     226         5 0.6180107              
xgb_sec_s_c <- xgboost(data = data.matrix(trainx_sec_s_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_s_c$shannon)),
                     eta = 0.03126577,
                     max_depth = 5,
                     nrounds = 226,
                     subsample = 0.6180107,
                     objective = "reg:linear")

# With abundance as response
#         eta nrounds max_depth subsample 
#1: 0.2012684     113         6   0.57472                
xgb_sec_a_c <- xgboost(data = data.matrix(trainx_sec_a_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_a_c$abundance)),
                     eta = 0.2012684,
                     max_depth = 6,
                     nrounds = 113,
                     subsample = 0.57472,
                     objective = "reg:linear")

# With rel_abundance as response 
#        eta nrounds max_depth subsample 
#1: 0.2629999     650        10 0.7065455               
xgb_sec_ra_c <- xgboost(data = data.matrix(trainx_sec_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_ra_c$rel_abundance)),
                     eta = 0.2629999,
                     max_depth = 10,
                     nrounds = 650,
                     subsample = 0.7065455,
                     objective = "reg:linear")
```

# Model Evaluation 
## Obs and Pred 
```{r}
### OBSERVED VALUES ### ------------------------------------------------------
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
responses_v_k <- test_v_k$k_index

# With shannon index as response
responses_v_s <- test_v_s$shannon

# With abundance as response
responses_v_a <- test_v_a$abundance

# With rel_abundance as response
responses_v_ra <- test_v_ra$rel_abundance

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
responses_wd_k <- test_wd_k$k_index

# With shannon index as response
responses_wd_s <- test_wd_s$shannon

# With abundance as response
responses_wd_a <- test_wd_a$abundance

# With rel_abundance as response
responses_wd_ra <- test_wd_ra$rel_abundance

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response
responses_samp_k <- test_samp_k$k_index

# With shannon index as response
responses_samp_s <- test_samp_s$shannon

# With abundance as response
responses_samp_a <- test_samp_a$abundance

# With rel_abundance as response
responses_samp_ra <- test_samp_ra$rel_abundance

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
responses_sec_k <- test_sec_k$k_index

# With shannon index as response
responses_sec_s <- test_sec_s$shannon

# With abundance as response
responses_sec_a <- test_sec_a$abundance

# With rel_abundance as response
responses_sec_ra <- test_sec_ra$rel_abundance

### PREDICTED VALUES ### ------------------------------------------------------
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
brt_pred_model_v_k_c <- predict(xgb_v_k_c, newdata = testx_v_k_c)

# With shannon index as response
brt_pred_model_v_s_c <- predict(xgb_v_s_c, newdata = testx_v_s_c)

# With abundance as response 
brt_pred_model_v_a_c <- predict(xgb_v_a_c, newdata = testx_v_a_c)

# With rel_abundance as response
brt_pred_model_v_ra_c <- predict(xgb_v_ra_c, newdata = testx_v_ra_c)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
brt_pred_model_wd_k_c <- predict(xgb_wd_k_c, newdata = testx_wd_k_c[ ,-1])

# With shannon index as response
brt_pred_model_wd_s_c <- predict(xgb_wd_s_c, newdata = testx_wd_s_c[ ,-1])

# With abundance as response
brt_pred_model_wd_a_c <- predict(xgb_wd_a_c, newdata = testx_wd_a_c[ ,-1])

# With rel_abundance as response
brt_pred_model_wd_ra_c <- predict(xgb_wd_ra_c, newdata = testx_wd_ra_c[ ,-1])

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
brt_pred_model_samp_k_c <- predict(xgb_samp_k_c, newdata = testx_samp_k_c[ ,-1])

# With shannon index as response
brt_pred_model_samp_s_c <- predict(xgb_samp_s_c, newdata = testx_samp_s_c[ ,-1])

# With abundance as response
brt_pred_model_samp_a_c <- predict(xgb_samp_a_c, newdata = testx_samp_a_c[ ,-1])

# With rel_abundance as response
brt_pred_model_samp_ra_c <- predict(xgb_samp_ra_c, newdata = testx_samp_ra_c[ ,-1])

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
brt_pred_model_sec_k_c <- predict(xgb_sec_k_c, newdata = testx_sec_k_c[ ,-1])

# With shannon index as response
brt_pred_model_sec_s_c <- predict(xgb_sec_s_c, newdata = testx_sec_s_c[ ,-1])

# With abundance as response
brt_pred_model_sec_a_c <- predict(xgb_sec_a_c, newdata = testx_sec_a_c[ ,-1])

# With rel_abundance as response
brt_pred_model_sec_ra_c <- predict(xgb_sec_ra_c, newdata = testx_sec_ra_c[ ,-1])
```

## Deviance explained (R2)
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response 
r2_model_v_k_c <- R2(pred = brt_pred_model_v_k_c, obs = responses_v_k)

# With shannon index as response 
r2_model_v_s_c <- R2(pred = brt_pred_model_v_s_c, obs = responses_v_s)

# With abundance as response
r2_model_v_a_c <- R2(pred = brt_pred_model_v_a_c, obs = responses_v_a)

# With rel_abundance as response 
r2_model_v_ra_c <- R2(pred = brt_pred_model_v_ra_c, obs = responses_v_ra)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
r2_model_wd_k_c <- R2(pred = brt_pred_model_wd_k_c, obs = responses_wd_k)

# With shannon index as response
r2_model_wd_s_c <- R2(pred = brt_pred_model_wd_s_c, obs = responses_wd_s)

# With abundance as response
r2_model_wd_a_c <- R2(pred = brt_pred_model_wd_a_c, obs = responses_wd_a)

# With rel_abundance as response 
r2_model_wd_ra_c <- R2(pred = brt_pred_model_wd_ra_c, obs = responses_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
r2_model_samp_k_c <- R2(pred = brt_pred_model_samp_k_c, obs = responses_samp_k)

# With shannon index as response
r2_model_samp_s_c <- R2(pred = brt_pred_model_samp_s_c, obs = responses_samp_s)

# With abundance as response 
r2_model_samp_a_c <- R2(pred = brt_pred_model_samp_a_c, obs = responses_samp_a)

# With rel_abundance as response
r2_model_samp_ra_c <- R2(pred = brt_pred_model_samp_ra_c, obs = responses_samp_ra)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
r2_model_sec_k_c <- R2(pred = brt_pred_model_sec_k_c, obs = responses_sec_k)

# With shannon index as response 
r2_model_sec_s_c <- R2(pred = brt_pred_model_sec_s_c, obs = responses_sec_s)

# With abundance as response
r2_model_sec_a_c <- R2(pred = brt_pred_model_sec_a_c, obs = responses_sec_a)

# With rel_abundance as response
r2_model_sec_ra_c <- R2(pred = brt_pred_model_sec_ra_c, obs = responses_sec_ra)
```

## RMSE & MAE
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
rmse_model_v_k_c <- Metrics::rmse(actual = responses_v_k, predicted = brt_pred_model_v_k_c)

mae_model_v_k_c <- Metrics::mae(actual = responses_v_k, predicted = brt_pred_model_v_k_c)

# With shannon index as response
rmse_model_v_s_c <- Metrics::rmse(actual = responses_v_s, predicted = brt_pred_model_v_s_c)

mae_model_v_s_c <- Metrics::mae(actual = responses_v_s, predicted = brt_pred_model_v_s_c)

# With abundance as response
rmse_model_v_a_c <- Metrics::rmse(actual = responses_v_a, predicted = brt_pred_model_v_a_c)

mae_model_v_a_c <- Metrics::mae(actual = responses_v_a, predicted = brt_pred_model_v_a_c)

# With rel_abundance as response
rmse_model_v_ra_c <- Metrics::rmse(actual = responses_v_ra, predicted = brt_pred_model_v_ra_c)

mae_model_v_ra_c <- Metrics::mae(actual = responses_v_ra, predicted = brt_pred_model_v_ra_c)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
rmse_model_wd_k_c <- Metrics::rmse(actual = responses_wd_k, predicted = brt_pred_model_wd_k_c)

mae_model_wd_k_c <- Metrics::mae(actual = responses_wd_k, predicted = brt_pred_model_wd_k_c)

# With shannon index as response
rmse_model_wd_s_c <- Metrics::rmse(actual = responses_wd_s, predicted = brt_pred_model_wd_s_c)

mae_model_wd_s_c <- Metrics::mae(actual = responses_wd_s, predicted = brt_pred_model_wd_s_c)

# With abundance as response
rmse_model_wd_a_c <- Metrics::rmse(actual = responses_wd_a, predicted = brt_pred_model_wd_a_c)

mae_model_wd_a_c <- Metrics::mae(actual = responses_wd_a, predicted = brt_pred_model_wd_a_c)

# With rel_abundance as response
rmse_model_wd_ra_c <- Metrics::rmse(actual = responses_wd_ra, predicted = brt_pred_model_wd_ra_c)

mae_model_wd_ra_c <- Metrics::mae(actual = responses_wd_ra, predicted = brt_pred_model_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
rmse_model_samp_k_c <- Metrics::rmse(actual = responses_samp_k, predicted = brt_pred_model_samp_k_c)

mae_model_samp_k_c <- Metrics::mae(actual = responses_samp_k, predicted = brt_pred_model_samp_k_c)

# With shannon index as response
rmse_model_samp_s_c <- Metrics::rmse(actual = responses_samp_s, predicted = brt_pred_model_samp_s_c)

mae_model_samp_s_c <- Metrics::mae(actual = responses_samp_s, predicted = brt_pred_model_samp_s_c)

# With abundance as response
rmse_model_samp_a_c <- Metrics::rmse(actual = responses_samp_a, predicted = brt_pred_model_samp_a_c)

mae_model_samp_a_c <- Metrics::mae(actual = responses_samp_a, predicted = brt_pred_model_samp_a_c)

# With rel_abundance as response
rmse_model_samp_ra_c <- Metrics::rmse(actual = responses_samp_ra, predicted = brt_pred_model_samp_ra_c)

mae_model_samp_ra_c <- Metrics::mae(actual = responses_samp_ra, predicted = brt_pred_model_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
rmse_model_sec_k_c <- Metrics::rmse(actual = responses_sec_k, predicted = brt_pred_model_sec_k_c)

mae_model_sec_k_c <- Metrics::mae(actual = responses_sec_k, predicted = brt_pred_model_sec_k_c)

# With shannon index as response
rmse_model_sec_s_c <- Metrics::rmse(actual = responses_sec_s, predicted = brt_pred_model_sec_s_c)

mae_model_sec_s_c <- Metrics::mae(actual = responses_sec_s, predicted = brt_pred_model_sec_s_c)

# With abundance as response
rmse_model_sec_a_c <- Metrics::rmse(actual = responses_sec_a, predicted = brt_pred_model_sec_a_c)

mae_model_sec_a_c <- Metrics::mae(actual = responses_sec_a, predicted = brt_pred_model_sec_a_c)

# With rel_abundance as response
rmse_model_sec_ra_c <- Metrics::rmse(actual = responses_sec_ra, predicted = brt_pred_model_sec_ra_c)

mae_model_sec_ra_c <- Metrics::mae(actual = responses_sec_ra, predicted = brt_pred_model_sec_ra_c)
```

## Bias
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
bias_model_v_k_c <- bias(observados = responses_v_k, estimados = brt_pred_model_v_k_c)

# With shannon index as response
bias_model_v_s_c <- bias(observados = responses_v_s, estimados = brt_pred_model_v_s_c)

# With abundance as response
bias_model_v_a_c <- bias(observados = responses_v_a, estimados = brt_pred_model_v_a_c)

# With rel_abundance as response
bias_model_v_ra_c <- bias(observados = responses_v_ra, estimados = brt_pred_model_v_ra_c)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
bias_model_wd_k_c <- bias(observados = responses_wd_k, estimados = brt_pred_model_wd_k_c)

# With shannon index as response
bias_model_wd_s_c <- bias(observados = responses_wd_s, estimados = brt_pred_model_wd_s_c)

# With abundance as response
bias_model_wd_a_c <- bias(observados = responses_wd_a, estimados = brt_pred_model_wd_a_c)

# With rel_abundance as response
bias_model_wd_ra_c <- bias(observados = responses_wd_ra, estimados = brt_pred_model_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
bias_model_samp_k_c <- bias(observados = responses_samp_k, estimados = brt_pred_model_samp_k_c)

# With shannon index as response
bias_model_samp_s_c <- bias(observados = responses_samp_s, estimados = brt_pred_model_samp_s_c)

# With abundance as response
bias_model_samp_a_c <- bias(observados = responses_samp_a, estimados = brt_pred_model_samp_a_c)

# With rel_abundance as response
bias_model_samp_ra_c <- bias(observados = responses_samp_ra, estimados = brt_pred_model_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
bias_model_sec_k_c <- bias(observados = responses_sec_k, estimados = brt_pred_model_sec_k_c)

# With shannon index as response
bias_model_sec_s_c <- bias(observados = responses_sec_s, estimados = brt_pred_model_sec_s_c)

# With abundance as response
bias_model_sec_a_c <- bias(observados = responses_sec_a, estimados = brt_pred_model_sec_a_c)

# With rel_abundance as response
bias_model_sec_ra_c <- bias(observados = responses_sec_ra, estimados = brt_pred_model_sec_ra_c)
```

## Nash-Sutcliffe efficiency (NSE) 
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
nse_model_v_k_c <- NSE(sim = brt_pred_model_v_k_c, obs = responses_v_k)

# With shannon index as response
nse_model_v_s_c <- NSE(sim = brt_pred_model_v_s_c, obs = responses_v_s)

# With abundance as response
nse_model_v_a_c <- NSE(sim = brt_pred_model_v_a_c, obs = responses_v_a)

# With rel_abundance as response
nse_model_v_ra_c <- NSE(sim = brt_pred_model_v_ra_c, obs = responses_v_ra)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
nse_model_wd_k_c <- NSE(sim = brt_pred_model_wd_k_c, obs = responses_wd_k)

# With shannon index as response
nse_model_wd_s_c <- NSE(sim = brt_pred_model_wd_s_c, obs = responses_wd_s)

# With abundance as response
nse_model_wd_a_c <- NSE(sim = brt_pred_model_wd_a_c, obs = responses_wd_a)

# With rel_abundance as response
nse_model_wd_ra_c <- NSE(sim = brt_pred_model_wd_ra_c, obs = responses_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
nse_model_samp_k_c <- NSE(sim = brt_pred_model_samp_k_c, obs = responses_samp_k)

# With shannon index as response
nse_model_samp_s_c <- NSE(sim = brt_pred_model_samp_s_c, obs = responses_samp_s)

# With abundance as response
nse_model_samp_a_c <- NSE(sim = brt_pred_model_samp_a_c, obs = responses_samp_a)

# With rel_abundance as response
nse_model_samp_ra_c <- NSE(sim = brt_pred_model_samp_ra_c, obs = responses_samp_ra)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
nse_model_sec_k_c <- NSE(sim = brt_pred_model_sec_k_c, obs = responses_sec_k)

# With shannon index as response
nse_model_sec_s_c <- NSE(sim = brt_pred_model_sec_s_c, obs = responses_sec_s)

# With abundance as response
nse_model_sec_a_c <- NSE(sim = brt_pred_model_sec_a_c, obs = responses_sec_a)

# With rel_abundance as response
nse_model_sec_ra_c <- NSE(sim = brt_pred_model_sec_ra_c, obs = responses_sec_ra)
```

## Write Evaluation Results 
```{r}
# write evaluation metrics into df
metric_results <- data.frame(nse = c(nse_model_v_k_c, nse_model_v_s_c, nse_model_v_a_c, nse_model_v_ra_c, nse_model_wd_k_c, nse_model_wd_s_c, nse_model_wd_a_c, nse_model_wd_ra_c, nse_model_samp_k_c, nse_model_samp_s_c, nse_model_samp_a_c, nse_model_samp_ra_c, nse_model_sec_k_c, nse_model_sec_s_c, nse_model_sec_a_c, nse_model_sec_ra_c),

bias = c(bias_model_v_k_c, bias_model_v_s_c, bias_model_v_a_c, bias_model_v_ra_c, bias_model_wd_k_c,bias_model_wd_s_c, bias_model_wd_a_c, bias_model_wd_ra_c, bias_model_samp_k_c, bias_model_samp_s_c, bias_model_samp_a_c, bias_model_samp_ra_c, bias_model_sec_k_c, bias_model_sec_s_c, bias_model_sec_a_c, bias_model_sec_ra_c),

mae = c(mae_model_v_k_c, mae_model_v_s_c, mae_model_v_a_c, mae_model_v_ra_c, mae_model_wd_k_c, mae_model_wd_s_c, mae_model_wd_a_c, mae_model_wd_ra_c, mae_model_samp_k_c, mae_model_samp_s_c, mae_model_samp_a_c, mae_model_samp_ra_c, mae_model_sec_k_c, mae_model_sec_s_c, mae_model_sec_a_c, mae_model_sec_ra_c), 

rmse = c(rmse_model_v_k_c, rmse_model_v_s_c, rmse_model_v_a_c, rmse_model_v_ra_c, rmse_model_wd_k_c, rmse_model_wd_s_c, rmse_model_wd_a_c, rmse_model_wd_ra_c, rmse_model_samp_k_c, rmse_model_samp_s_c, rmse_model_samp_a_c, rmse_model_samp_ra_c, rmse_model_sec_k_c, rmse_model_sec_s_c, rmse_model_sec_a_c, rmse_model_sec_ra_c),

r2 = c(r2_model_v_k_c, r2_model_v_s_c, r2_model_v_a_c, r2_model_v_ra_c, r2_model_wd_k_c, r2_model_wd_s_c, r2_model_wd_a_c, r2_model_wd_ra_c, r2_model_samp_k_c, r2_model_samp_s_c, r2_model_samp_a_c, r2_model_samp_ra_c, r2_model_sec_k_c, r2_model_sec_s_c, r2_model_sec_a_c, r2_model_sec_ra_c), 

index = c("k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance"),

predictor = c("v + add", "v + add", "v + add", "v + add", 
              "v + wd + add", "v + wd + add", "v + wd + add", "v + wd + add",  
              "samp + add", "samp + add", "samp + add", "samp + add", 
              "all + add", "all + add", "all + add", "all + add"),

model = c("brt", "brt", "brt", "brt", 
          "brt", "brt", "brt", "brt", 
          "brt", "brt", "brt", "brt",
          "brt", "brt", "brt", "brt"))

# write results into a .csv 
write.csv(metric_results, "Stat_Analysis/stat_analysis_data/ml_evaluation_metrics_brt_add.csv", row.names = FALSE)
```
 
 
# Extract 
## Read rasters
```{r}
# read rasters containing wd and velocity 
GL1_ezg <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg_add.grd")
GL1_v_ezg <- dropLayer(GL1_ezg, i = 2)

GL2_ezg <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg_add.grd")
GL2_v_ezg <- dropLayer(GL2_ezg, i = 2)

L2_ezg <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg_add.grd")
L2_v_ezg <- dropLayer(L2_ezg, i = 2)

M1_ezg <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg_add.grd")
M1_v_ezg <- dropLayer(M1_ezg, i = 2)

S1_ezg <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg_add.grd")
S1_v_ezg <- dropLayer(S1_ezg, i = 2)

S2_ezg <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg_add.grd")
S2_v_ezg <- dropLayer(S2_ezg, i = 2)

TH4_ezg <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg_add.grd")
TH4_v_ezg <- dropLayer(TH4_ezg, i = 2)

VR3_ezg <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg_add.grd")
VR3_v_ezg <- dropLayer(VR3_ezg, i = 2)

# rename rasters in stacks for extraction 
names(GL1_ezg) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power") 
names(GL1_v_ezg) <- c("velocity", "froude", "shear_stress", "stream_power")
#names(GL1_q) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power") 

names(GL2_ezg) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power")
names(GL2_v_ezg) <- c("velocity", "froude", "shear_stress", "stream_power")
#names(GL2_q) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power")

names(L2_ezg) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power")
names(L2_v_ezg) <- c("velocity", "froude", "shear_stress", "stream_power")
#names(L2_q) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power")

names(M1_ezg) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power") 
names(M1_v_ezg) <- c("velocity", "froude", "shear_stress", "stream_power")
#names(M1_q) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power") 

names(S1_ezg) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power")
names(S1_v_ezg) <- c("velocity", "froude", "shear_stress", "stream_power")
#names(S1_q) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power")  

names(S2_ezg) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power") 
names(S2_v_ezg) <- c("velocity", "froude", "shear_stress", "stream_power")
#names(S2_q) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power") 

names(TH4_ezg) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power")
names(TH4_v_ezg) <- c("velocity", "froude", "shear_stress", "stream_power")
#names(TH4_q) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power") 

names(VR3_ezg) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power")
names(VR3_v_ezg) <- c("velocity", "froude", "shear_stress", "stream_power")
#names(VR3_q) <- c("velocity", "wd_m", "froude", "shear_stress", "stream_power") 
```

## Predict Models to Maps 
```{r}
# predict ML model to rasters with velocity and wd 
# The work-around is to write a prediction function that first coerces the data.frame with "new data" to a matrix. We can use that function with predict<SpatRaster>
xgbpred <- function(model, data, ...) {
    predict(model, newdata=as.matrix(data), ...)
}

# GL1 - predictors: v + wd ----------------------------------------------------
GL1_ezg_m2_wd_k <- terra::predict(GL1_ezg, model = xgb_wd_k_c, fun = xgbpred)
GL1_ezg_m2_wd_s <- terra::predict(GL1_ezg, model = xgb_wd_s_c, fun = xgbpred)
GL1_ezg_m2_wd_a <- terra::predict(GL1_ezg, model = xgb_wd_a_c, fun = xgbpred)
GL1_ezg_m2_wd_ra <- terra::predict(GL1_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# GL1 - predictor: velocity ---------------------------------------------------
GL1_ezg_m2_v_k <- terra::predict(GL1_v_ezg, model = xgb_v_k_c, fun = xgbpred)
GL1_ezg_m2_v_s <- terra::predict(GL1_v_ezg, model = xgb_v_s_c, fun = xgbpred)
GL1_ezg_m2_v_a <- terra::predict(GL1_v_ezg, model = xgb_v_a_c, fun = xgbpred)
GL1_ezg_m2_v_ra <- terra::predict(GL1_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# GL2 - predictors: v + wd ----------------------------------------------------
GL2_ezg_m2_wd_k <- terra::predict(GL2_ezg, model = xgb_wd_k_c, fun = xgbpred)
GL2_ezg_m2_wd_s <- terra::predict(GL2_ezg, model = xgb_wd_s_c, fun = xgbpred)
GL2_ezg_m2_wd_a <- terra::predict(GL2_ezg, model = xgb_wd_a_c, fun = xgbpred)
GL2_ezg_m2_wd_ra <- terra::predict(GL2_ezg, model = xgb_wd_ra_c, fun = xgbpred)


# GL2 - predictor: velocity ---------------------------------------------------
GL2_ezg_m2_v_k <- terra::predict(GL2_v_ezg, model = xgb_v_k_c, fun = xgbpred)
GL2_ezg_m2_v_s <- terra::predict(GL2_v_ezg, model = xgb_v_s_c, fun = xgbpred)
GL2_ezg_m2_v_a <- terra::predict(GL2_v_ezg, model = xgb_v_a_c, fun = xgbpred)
GL2_ezg_m2_v_ra <- terra::predict(GL2_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# L2 - predictors: v + wd -----------------------------------------------------
L2_ezg_m2_wd_k <- terra::predict(L2_ezg, model = xgb_wd_k_c, fun = xgbpred)
L2_ezg_m2_wd_s <- terra::predict(L2_ezg, model = xgb_wd_s_c, fun = xgbpred)
L2_ezg_m2_wd_a <- terra::predict(L2_ezg, model = xgb_wd_a_c, fun = xgbpred)
L2_ezg_m2_wd_ra <- terra::predict(L2_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# L2 - predictor: velocity ----------------------------------------------------
L2_ezg_m2_v_k <- terra::predict(L2_v_ezg, model = xgb_v_k_c, fun = xgbpred)
L2_ezg_m2_v_s <- terra::predict(L2_v_ezg, model = xgb_v_s_c, fun = xgbpred)
L2_ezg_m2_v_a <- terra::predict(L2_v_ezg, model = xgb_v_a_c, fun = xgbpred)
L2_ezg_m2_v_ra <- terra::predict(L2_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# M1  - predictors: v + wd -----------------------------------------------------
M1_ezg_m2_wd_k <- terra::predict(M1_ezg, model = xgb_wd_k_c, fun = xgbpred)
M1_ezg_m2_wd_s <- terra::predict(M1_ezg, model = xgb_wd_s_c, fun = xgbpred)
M1_ezg_m2_wd_a <- terra::predict(M1_ezg, model = xgb_wd_a_c, fun = xgbpred)
M1_ezg_m2_wd_ra <- terra::predict(M1_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# M1  - predictor: velocity ---------------------------------------------------
M1_ezg_m2_v_k <- terra::predict(M1_v_ezg, model = xgb_v_k_c, fun = xgbpred)
M1_ezg_m2_v_s <- terra::predict(M1_v_ezg, model = xgb_v_s_c, fun = xgbpred)
M1_ezg_m2_v_a <- terra::predict(M1_v_ezg, model = xgb_v_a_c, fun = xgbpred)
M1_ezg_m2_v_ra <- terra::predict(M1_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# S1  - predictors: v + wd ----------------------------------------------------
S1_ezg_m2_wd_k <- terra::predict(S1_ezg, model = xgb_wd_k_c, fun = xgbpred)
S1_ezg_m2_wd_s <- terra::predict(S1_ezg, model = xgb_wd_s_c, fun = xgbpred)
S1_ezg_m2_wd_a <- terra::predict(S1_ezg, model = xgb_wd_a_c, fun = xgbpred)
S1_ezg_m2_wd_ra <- terra::predict(S1_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# S1  - predictor: velocity ---------------------------------------------------
S1_ezg_m2_v_k <- terra::predict(S1_v_ezg, model = xgb_v_k_c, fun = xgbpred)
S1_ezg_m2_v_s <- terra::predict(S1_v_ezg, model = xgb_v_s_c, fun = xgbpred)
S1_ezg_m2_v_a <- terra::predict(S1_v_ezg, model = xgb_v_a_c, fun = xgbpred)
S1_ezg_m2_v_ra <- terra::predict(S1_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# S2  - predictors: v + wd ----------------------------------------------------
S2_ezg_m2_wd_k <- terra::predict(S2_ezg, model = xgb_wd_k_c, fun = xgbpred)
S2_ezg_m2_wd_s <- terra::predict(S2_ezg, model = xgb_wd_s_c, fun = xgbpred)
S2_ezg_m2_wd_a <- terra::predict(S2_ezg, model = xgb_wd_a_c, fun = xgbpred)
S2_ezg_m2_wd_ra <- terra::predict(S2_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# S2  - predictor: velocity ---------------------------------------------------
S2_ezg_m2_v_k <- terra::predict(S2_v_ezg, model = xgb_v_k_c, fun = xgbpred)
S2_ezg_m2_v_s <- terra::predict(S2_v_ezg, model = xgb_v_s_c, fun = xgbpred)
S2_ezg_m2_v_a <- terra::predict(S2_v_ezg, model = xgb_v_a_c, fun = xgbpred)
S2_ezg_m2_v_ra <- terra::predict(S2_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# TH4  - predictors: v + wd ---------------------------------------------------
TH4_ezg_m2_wd_k <- terra::predict(TH4_ezg, model = xgb_wd_k_c, fun = xgbpred)
TH4_ezg_m2_wd_s <- terra::predict(TH4_ezg, model = xgb_wd_s_c, fun = xgbpred)
TH4_ezg_m2_wd_a <- terra::predict(TH4_ezg, model = xgb_wd_a_c, fun = xgbpred)
TH4_ezg_m2_wd_ra <- terra::predict(TH4_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# TH4  - predictor: velocity --------------------------------------------------
TH4_ezg_m2_v_k <- terra::predict(TH4_v_ezg, model =  xgb_v_k_c, fun = xgbpred)
TH4_ezg_m2_v_s <- terra::predict(TH4_v_ezg, model = xgb_v_s_c, fun = xgbpred)
TH4_ezg_m2_v_a <- terra::predict(TH4_v_ezg, model = xgb_v_a_c, fun = xgbpred)
TH4_ezg_m2_v_ra <- terra::predict(TH4_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# VR3  - predictors: v + wd ---------------------------------------------------
VR3_ezg_m2_wd_k <- terra::predict(VR3_ezg, model = xgb_wd_k_c, fun = xgbpred)
VR3_ezg_m2_wd_s <- terra::predict(VR3_ezg, model = xgb_wd_s_c, fun = xgbpred)
VR3_ezg_m2_wd_a <- terra::predict(VR3_ezg, model = xgb_wd_a_c, fun = xgbpred)
VR3_ezg_m2_wd_ra <- terra::predict(VR3_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# VR3  - predictor: velocity --------------------------------------------------
VR3_ezg_m2_v_k <- terra::predict(VR3_v_ezg, model = xgb_v_k_c, fun = xgbpred)
VR3_ezg_m2_v_s <- terra::predict(VR3_v_ezg, model = xgb_v_s_c, fun = xgbpred)
VR3_ezg_m2_v_a <- terra::predict(VR3_v_ezg, model = xgb_v_a_c, fun = xgbpred)
VR3_ezg_m2_v_ra <- terra::predict(VR3_v_ezg, model = xgb_v_ra_c, fun = xgbpred)
```

### Read data
```{r}
# read all raster results (one time flow velocity classes and one time for habitat suitability)
# prep extraction data 
## GL1
coord_GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1") |>
  dplyr::select(x, y) 

GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1")

## GL2
coord_GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2") |>
  dplyr::select(x, y) 

GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2")

## L2
coord_L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2") |>
  dplyr::select(x, y) 

L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2")

## M1
coord_M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1") |>
  dplyr::select(x, y) 

M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1")

## S1
coord_S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1") |>
  dplyr::select(x, y) 

S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1")

## S2
coord_S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2") |>
  dplyr::select(x, y) 

S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2")

## TH4
coord_TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4") |>
  dplyr::select(x, y) 

TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4")

## VR3
coord_VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3") |>
  dplyr::select(x, y) 

VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3")
```

## Extract Results
```{r}
# extract raster information for regression analysis later
# GL1 -------------------------------------------------------------------------
regr_m2_GL1_wd_k <- raster::extract(GL1_ezg_m2_wd_k, coord_GL1) 
regr_m2_GL1_wd_s <- raster::extract(GL1_ezg_m2_wd_s, coord_GL1) 
regr_m2_GL1_wd_a <- raster::extract(GL1_ezg_m2_wd_a, coord_GL1) 
regr_m2_GL1_wd_ra <- raster::extract(GL1_ezg_m2_wd_ra, coord_GL1) 

regr_m2_GL1_v_k <- raster::extract(GL1_ezg_m2_v_k, coord_GL1) 
regr_m2_GL1_v_s <- raster::extract(GL1_ezg_m2_v_s, coord_GL1) 
regr_m2_GL1_v_a <- raster::extract(GL1_ezg_m2_v_a, coord_GL1) 
regr_m2_GL1_v_ra <- raster::extract(GL1_ezg_m2_v_ra, coord_GL1)

# GL2 -------------------------------------------------------------------------
regr_m2_GL2_wd_k <- raster::extract(GL2_ezg_m2_wd_k, coord_GL2) 
regr_m2_GL2_wd_s <- raster::extract(GL2_ezg_m2_wd_s, coord_GL2) 
regr_m2_GL2_wd_a <- raster::extract(GL2_ezg_m2_wd_a, coord_GL2) 
regr_m2_GL2_wd_ra <- raster::extract(GL2_ezg_m2_wd_ra, coord_GL2)

regr_m2_GL2_v_k <- raster::extract(GL2_ezg_m2_v_k, coord_GL2) 
regr_m2_GL2_v_s <- raster::extract(GL2_ezg_m2_v_s, coord_GL2) 
regr_m2_GL2_v_a <- raster::extract(GL2_ezg_m2_v_a, coord_GL2)
regr_m2_GL2_v_ra <- raster::extract(GL2_ezg_m2_v_ra, coord_GL2)

# L2 --------------------------------------------------------------------------
regr_m2_L2_wd_k <- raster::extract(L2_ezg_m2_wd_k, coord_L2) 
regr_m2_L2_wd_s <- raster::extract(L2_ezg_m2_wd_s, coord_L2) 
regr_m2_L2_wd_a <- raster::extract(L2_ezg_m2_wd_a, coord_L2) 
regr_m2_L2_wd_ra <- raster::extract(L2_ezg_m2_wd_ra, coord_L2) 

regr_m2_L2_v_k <- raster::extract(L2_ezg_m2_v_k, coord_L2) 
regr_m2_L2_v_s <- raster::extract(L2_ezg_m2_v_s, coord_L2) 
regr_m2_L2_v_a <- raster::extract(L2_ezg_m2_v_a, coord_L2)
regr_m2_L2_v_ra <- raster::extract(L2_ezg_m2_v_ra, coord_L2)

# M1 --------------------------------------------------------------------------
regr_m2_M1_wd_k <- raster::extract(M1_ezg_m2_wd_k, coord_M1) 
regr_m2_M1_wd_s <- raster::extract(M1_ezg_m2_wd_s, coord_M1) 
regr_m2_M1_wd_a <- raster::extract(M1_ezg_m2_wd_a, coord_M1) 
regr_m2_M1_wd_ra <- raster::extract(M1_ezg_m2_wd_ra, coord_M1) 

regr_m2_M1_v_k <- raster::extract(M1_ezg_m2_v_k, coord_M1) 
regr_m2_M1_v_s <- raster::extract(M1_ezg_m2_v_s, coord_M1) 
regr_m2_M1_v_a <- raster::extract(M1_ezg_m2_v_a, coord_M1)
regr_m2_M1_v_ra <- raster::extract(M1_ezg_m2_v_ra, coord_M1)

# S1 --------------------------------------------------------------------------
regr_m2_S1_wd_k <- raster::extract(S1_ezg_m2_wd_k, coord_S1) 
regr_m2_S1_wd_s <- raster::extract(S1_ezg_m2_wd_s, coord_S1) 
regr_m2_S1_wd_a <- raster::extract(S1_ezg_m2_wd_a, coord_S1) 
regr_m2_S1_wd_ra <- raster::extract(S1_ezg_m2_wd_ra, coord_S1) 

regr_m2_S1_v_k <- raster::extract(S1_ezg_m2_v_k, coord_S1) 
regr_m2_S1_v_s <- raster::extract(S1_ezg_m2_v_s, coord_S1) 
regr_m2_S1_v_a <- raster::extract(S1_ezg_m2_v_a, coord_S1)
regr_m2_S1_v_ra <- raster::extract(S1_ezg_m2_v_ra, coord_S1)

# S2 --------------------------------------------------------------------------
regr_m2_S2_wd_k <- raster::extract(S2_ezg_m2_wd_k, coord_S2) 
regr_m2_S2_wd_s <- raster::extract(S2_ezg_m2_wd_s, coord_S2) 
regr_m2_S2_wd_a <- raster::extract(S2_ezg_m2_wd_a, coord_S2) 
regr_m2_S2_wd_ra <- raster::extract(S2_ezg_m2_wd_ra, coord_S2)

regr_m2_S2_v_k <- raster::extract(S2_ezg_m2_v_k, coord_S2) 
regr_m2_S2_v_s <- raster::extract(S2_ezg_m2_v_s, coord_S2) 
regr_m2_S2_v_a <- raster::extract(S2_ezg_m2_v_a, coord_S2)
regr_m2_S2_v_ra <- raster::extract(S2_ezg_m2_v_ra, coord_S2)

# TH4 -------------------------------------------------------------------------
regr_m2_TH4_wd_k <- raster::extract(TH4_ezg_m2_wd_k, coord_TH4) 
regr_m2_TH4_wd_s <- raster::extract(TH4_ezg_m2_wd_s, coord_TH4) 
regr_m2_TH4_wd_a <- raster::extract(TH4_ezg_m2_wd_a, coord_TH4) 
regr_m2_TH4_wd_ra <- raster::extract(TH4_ezg_m2_wd_ra, coord_TH4) 

regr_m2_TH4_v_k <- raster::extract(TH4_ezg_m2_v_k, coord_TH4) 
regr_m2_TH4_v_s <- raster::extract(TH4_ezg_m2_v_s, coord_TH4) 
regr_m2_TH4_v_a <- raster::extract(TH4_ezg_m2_v_a, coord_TH4)
regr_m2_TH4_v_ra <- raster::extract(TH4_ezg_m2_v_ra, coord_TH4)

# VR3 -------------------------------------------------------------------------
regr_m2_VR3_wd_k <- raster::extract(VR3_ezg_m2_wd_k, coord_VR3) 
regr_m2_VR3_wd_s <- raster::extract(VR3_ezg_m2_wd_s, coord_VR3) 
regr_m2_VR3_wd_a <- raster::extract(VR3_ezg_m2_wd_a, coord_VR3) 
regr_m2_VR3_wd_ra <- raster::extract(VR3_ezg_m2_wd_ra, coord_VR3)

regr_m2_VR3_v_k <- raster::extract(VR3_ezg_m2_v_k, coord_VR3) 
regr_m2_VR3_v_s <- raster::extract(VR3_ezg_m2_v_s, coord_VR3) 
regr_m2_VR3_v_a <- raster::extract(VR3_ezg_m2_v_a, coord_VR3)
regr_m2_VR3_v_ra <- raster::extract(VR3_ezg_m2_v_ra, coord_VR3)
```

## Combine into DF
```{r}
# combine all results into dataframe
# GL1 -------------------------------------------------------------------------
data_GL1 <- cbind(regr_m2_GL1_wd_k, regr_m2_GL1_wd_s, regr_m2_GL1_wd_a, regr_m2_GL1_wd_ra, regr_m2_GL1_v_k, regr_m2_GL1_v_s, regr_m2_GL1_v_a, regr_m2_GL1_v_ra, GL1) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_GL1_wd_k,
         m2_shannon_wd = regr_m2_GL1_wd_s,
         m2_abundance_wd = regr_m2_GL1_wd_a,
         m2_rel_abundance_wd = regr_m2_GL1_wd_ra,
         m2_k_index_v = regr_m2_GL1_v_k,
         m2_shannon_v = regr_m2_GL1_v_s,
         m2_abundance_v = regr_m2_GL1_v_a,
         m2_rel_abundance_v = regr_m2_GL1_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# GL2 -------------------------------------------------------------------------
data_GL2 <- cbind(regr_m2_GL2_wd_k, regr_m2_GL2_wd_s, regr_m2_GL2_wd_a, regr_m2_GL2_wd_ra, regr_m2_GL2_v_k, regr_m2_GL2_v_s, regr_m2_GL2_v_a, regr_m2_GL2_v_ra, GL2) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_GL2_wd_k,
         m2_shannon_wd = regr_m2_GL2_wd_s,
         m2_abundance_wd = regr_m2_GL2_wd_a,
         m2_rel_abundance_wd = regr_m2_GL2_wd_ra,
         m2_k_index_v = regr_m2_GL2_v_k,
         m2_shannon_v = regr_m2_GL2_v_s,
         m2_abundance_v = regr_m2_GL2_v_a,
         m2_rel_abundance_v = regr_m2_GL2_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# L2 --------------------------------------------------------------------------
data_L2 <- cbind(regr_m2_L2_wd_k, regr_m2_L2_wd_s, regr_m2_L2_wd_a, regr_m2_L2_wd_ra, regr_m2_L2_v_k, regr_m2_L2_v_s, regr_m2_L2_v_a, regr_m2_L2_v_ra, L2) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_L2_wd_k,
         m2_shannon_wd = regr_m2_L2_wd_s,
         m2_abundance_wd = regr_m2_L2_wd_a,
         m2_rel_abundance_wd = regr_m2_L2_wd_ra,
         m2_k_index_v = regr_m2_L2_v_k,
         m2_shannon_v = regr_m2_L2_v_s,
         m2_abundance_v = regr_m2_L2_v_a,
         m2_rel_abundance_v = regr_m2_L2_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# M1 --------------------------------------------------------------------------
data_M1 <- cbind(regr_m2_M1_wd_k, regr_m2_M1_wd_s, regr_m2_M1_wd_a, regr_m2_M1_wd_ra, regr_m2_M1_v_k, regr_m2_M1_v_s, regr_m2_M1_v_a, regr_m2_M1_v_ra, M1) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_M1_wd_k,
         m2_shannon_wd = regr_m2_M1_wd_s,
         m2_abundance_wd = regr_m2_M1_wd_a,
         m2_rel_abundance_wd = regr_m2_M1_wd_ra,
         m2_k_index_v = regr_m2_M1_v_k,
         m2_shannon_v = regr_m2_M1_v_s,
         m2_abundance_v = regr_m2_M1_v_a,
         m2_rel_abundance_v = regr_m2_M1_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# S1 --------------------------------------------------------------------------
data_S1 <- cbind(regr_m2_S1_wd_k, regr_m2_S1_wd_s, regr_m2_S1_wd_a, regr_m2_S1_wd_ra, regr_m2_S1_v_k, regr_m2_S1_v_s, regr_m2_S1_v_a, regr_m2_S1_v_ra, S1) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_S1_wd_k,
         m2_shannon_wd = regr_m2_S1_wd_s,
         m2_abundance_wd = regr_m2_S1_wd_a,
         m2_rel_abundance_wd = regr_m2_S1_wd_ra,
         m2_k_index_v = regr_m2_S1_v_k,
         m2_shannon_v = regr_m2_S1_v_s,
         m2_abundance_v = regr_m2_S1_v_a,
         m2_rel_abundance_v = regr_m2_S1_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# S2 --------------------------------------------------------------------------
data_S2 <- cbind(regr_m2_S2_wd_k, regr_m2_S2_wd_s, regr_m2_S2_wd_a, regr_m2_S2_wd_ra, regr_m2_S2_v_k, regr_m2_S2_v_s, regr_m2_S2_v_a, regr_m2_S2_v_ra, S2) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_S2_wd_k,
         m2_shannon_wd = regr_m2_S2_wd_s,
         m2_abundance_wd = regr_m2_S2_wd_a,
         m2_rel_abundance_wd = regr_m2_S2_wd_ra,
         m2_k_index_v = regr_m2_S2_v_k,
         m2_shannon_v = regr_m2_S2_v_s,
         m2_abundance_v = regr_m2_S2_v_a,
         m2_rel_abundance_v = regr_m2_S2_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)


# TH4 -------------------------------------------------------------------------
data_TH4 <- cbind(regr_m2_TH4_wd_k, regr_m2_TH4_wd_s, regr_m2_TH4_wd_a, regr_m2_TH4_wd_ra, regr_m2_TH4_v_k, regr_m2_TH4_v_s, regr_m2_TH4_v_a, regr_m2_TH4_v_ra, TH4) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_TH4_wd_k,
         m2_shannon_wd = regr_m2_TH4_wd_s,
         m2_abundance_wd = regr_m2_TH4_wd_a,
         m2_rel_abundance_wd = regr_m2_TH4_wd_ra,
         m2_k_index_v = regr_m2_TH4_v_k,
         m2_shannon_v = regr_m2_TH4_v_s,
         m2_abundance_v = regr_m2_TH4_v_a,
         m2_rel_abundance_v = regr_m2_TH4_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)


# VR3 -------------------------------------------------------------------------
data_VR3 <- cbind(regr_m2_VR3_wd_k, regr_m2_VR3_wd_s, regr_m2_VR3_wd_a, regr_m2_VR3_wd_ra, regr_m2_VR3_v_k, regr_m2_VR3_v_s, regr_m2_VR3_v_a, regr_m2_VR3_v_ra, VR3) |>
  dplyr::rename(
         m2_k_index_wd = regr_m2_VR3_wd_k,
         m2_shannon_wd = regr_m2_VR3_wd_s,
         m2_abundance_wd = regr_m2_VR3_wd_a,
         m2_rel_abundance_wd = regr_m2_VR3_wd_ra,
         m2_k_index_v = regr_m2_VR3_v_k,
         m2_shannon_v = regr_m2_VR3_v_s,
         m2_abundance_v = regr_m2_VR3_v_a,
         m2_rel_abundance_v = regr_m2_VR3_v_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)
```

## Results from Extraction 
```{r}
# bind results together 
# data_TH4 fehlt noch
regr_analysis <- rbind(data_GL1, data_GL2, data_L2, data_M1, data_S1, data_S2, data_TH4, data_VR3)

# export to .csv file
write.csv(regr_analysis, "Stat_Analysis/stat_analysis_data/regr_analysis_brt_add.csv", row.names = FALSE)
```
