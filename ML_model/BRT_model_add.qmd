---
title: "BRT_model"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
pkgCheck("Fgmutils") # for bias calculation (bias() function)
pkgCheck("hydroGOF") # for NSE calculation with NSE() function 
```


# Load & prepare data 
```{r}
# Load data containing velocity as predictor variable 
data_v <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_v_add.csv") 

# Load data containing velocity and wd as predictors 
data_wd <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_wd_add.csv") 

# Load data containing all variables measured at each sampling locations and remove all other "chr" variables
data_sampling <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_sampling_add.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type)

# Load data containing all variables measured at each river section and remove all other "chr" variables
# Additionally, remove ox_sat columns, as they contain NA values
data_section <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_section_add.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type, -Hydropeaking_river_type, -Hydrokeaking_residual_flow_natural_near_natural, -date, -time, -time_before, -time_during, -time_after, -Category_Water_depth, -Number_Taxa, -EPT_Taxa, -ox_sat_after, -ox_sat_before, -ox_sat_during)
```
    
```{r}
### TRAINING SETS ###
# w/o hydr. models "GL1", "GL2", "L2", "M1", "S1", "S2", "TH4", "VR3"
# training set containing velocity 
training_v <- data_v |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

# training set containing velocity + wd
training_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location 
training_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location and overall river section 
training_section <- data_section |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

### TEST SETS ###
# test set containing velocity 
test_v <- data_v |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")

# test set containing velocity + wd
test_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location 
test_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location and overall river section 
test_section <- data_section |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")
```

## Training Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response 
training_v_k <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance)

# With shannon index as response 
training_v_s <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance)

# With abundance as response 
training_v_a <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance)

# With relative abundance as response  
training_v_ra <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index)

### PREDICTOR: VELOCITY AND WD ### ---------------------------------------------
# With k_index as response 
training_wd_k <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance)

# With shannon index as response 
training_wd_s <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance)

# With abundance index as response 
training_wd_a <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance)

# With relative abundance index as response 
training_wd_ra <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index)

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response 
training_samp_k <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_samp_a <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_samp_ra <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response 
training_sec_k <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_sec_a <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_sec_ra <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Training Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response 
training_v_k_c <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance, -x, -y)

# With shannon index as response
training_v_s_c <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance, -x, -y)

# With abundance as response
training_v_a_c <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance, -x, -y)

# With rel_abundance as response
training_v_ra_c <- training_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index, -x, -y)

### PREDICTOR: VELOCITY AND WD ### ----------------------------------
# With k_index as response 
training_wd_k_c <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance, -x, -y)

# With shannon index as response 
training_wd_s_c <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance, -x, -y)

# With abundance as response 
training_wd_a_c <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance, -x, -y)

# With rel_abundance as response 
training_wd_ra_c <- training_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index, -x, -y)

### PREDICTOR: SAMPLING LOCATIONS ### --------------------------------
# With k_index as response 
training_samp_k_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s_c <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_samp_a_c <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_samp_ra_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### ----------------------------------
# With k_index as response 
training_sec_k_c <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s_c <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_sec_a_c <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_sec_ra_c <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)
```

## Test Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ------------------------------------------
# With k_index as response
test_v_k <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance)

# With shannon index as response
test_v_s <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance)

# With abundance as response 
test_v_a <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance)

# With relative abundance as response 
test_v_ra <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance)

# With shannon index as response 
test_wd_s <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance)

# With abundance as response 
test_wd_a <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance)

# With relative abundance as response 
test_wd_ra <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response
test_samp_a <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_samp_ra <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
test_sec_s <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
test_sec_a <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_sec_ra <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Test Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response
test_v_k_c <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance, -x, -y)

# With shannon index as response
test_v_s_c <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance, -x, -y) 

# With abundance as response
test_v_a_c <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance, -x, -y) 

# With rel_abundance as response
test_v_ra_c <- test_v |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index, -x, -y)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k_c <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -rel_abundance, -x, -y) 

# With shannon index as response 
test_wd_s_c <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -k_index, -abundance, -rel_abundance, -x, -y)

# With abundance as response 
test_wd_a_c <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -k_index, -rel_abundance, -x, -y)

# With rel_abundance as response 
test_wd_ra_c <- test_wd |>
  dplyr::select(-Reach_Untersuchungsstelle, -shannon, -abundance, -k_index, -x, -y)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s_c <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
test_samp_a_c <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
test_samp_ra_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k_c <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response
test_sec_s_c <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response
test_sec_a_c <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response
test_sec_ra_c <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)
```

# Boosted Regression Tree
## Hyperparameter tuning 
```{r}
# convert dataframes into spatial objects for mlr3 spatial hyperparameter tuning
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
data_v_k_sp <-  st_as_sf(training_v_k, coords =  c("x", "y"))
st_crs(data_v_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_v_s_sp <-  st_as_sf(training_v_s, coords =  c("x", "y"))
st_crs(data_v_s_sp) <- "EPSG: 2056"

# With abundance as response
data_v_a_sp <-  st_as_sf(training_v_a, coords =  c("x", "y"))
st_crs(data_v_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_v_ra_sp <-  st_as_sf(training_v_ra, coords =  c("x", "y"))
st_crs(data_v_ra_sp) <- "EPSG: 2056"

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# With k_index as response
data_wd_k_sp <-  st_as_sf(training_wd_k, coords =  c("x", "y"))
st_crs(data_wd_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_wd_s_sp <-  st_as_sf(training_wd_s, coords =  c("x", "y"))
st_crs(data_wd_s_sp) <- "EPSG: 2056"

# With abundance as response
data_wd_a_sp <-  st_as_sf(training_wd_a, coords =  c("x", "y"))
st_crs(data_wd_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_wd_ra_sp <-  st_as_sf(training_wd_ra, coords =  c("x", "y"))
st_crs(data_wd_ra_sp) <- "EPSG: 2056"

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response
data_samp_k_sp <-  st_as_sf(training_samp_k, coords =  c("x", "y"))
st_crs(data_samp_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_samp_s_sp <-  st_as_sf(training_samp_s, coords =  c("x", "y"))
st_crs(data_samp_s_sp) <- "EPSG: 2056"

# With abundance as response
data_samp_a_sp <-  st_as_sf(training_samp_a, coords =  c("x", "y"))
st_crs(data_samp_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_samp_ra_sp <-  st_as_sf(training_samp_ra, coords =  c("x", "y"))
st_crs(data_samp_ra_sp) <- "EPSG: 2056"

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response
data_sec_k_sp <-  st_as_sf(training_sec_k, coords =  c("x", "y"))
st_crs(data_sec_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_sec_s_sp <-  st_as_sf(training_sec_s, coords =  c("x", "y"))
st_crs(data_sec_s_sp) <- "EPSG: 2056"

# With abundance as response
data_sec_a_sp <-  st_as_sf(training_sec_a, coords =  c("x", "y"))
st_crs(data_sec_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_sec_ra_sp <-  st_as_sf(training_sec_ra, coords =  c("x", "y"))
st_crs(data_sec_ra_sp) <- "EPSG: 2056"
```

### Create Task & Learner
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
task_xbrt_v_k <- mlr3spatiotempcv::as_task_regr_st(data_v_k_sp,
  id = "velocity_k_index", target = "k_index")

# With shannon index as response
task_xbrt_v_s <- mlr3spatiotempcv::as_task_regr_st(data_v_s_sp,
  id = "velocity_shannon", target = "shannon")

# With abundance as response 
task_xbrt_v_a <- mlr3spatiotempcv::as_task_regr_st(data_v_a_sp,
  id = "velocity_abundance", target = "abundance")

# With rel_abundance as response 
task_xbrt_v_ra <- mlr3spatiotempcv::as_task_regr_st(data_v_ra_sp,
  id = "velocity_rel_abundance", target = "rel_abundance")

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# With k_index as response
task_xbrt_wd_k <- mlr3spatiotempcv::as_task_regr_st(data_wd_k_sp,
  id = "water_depth_k_index", target = "k_index")

# With shannon index as response
task_xbrt_wd_s <- mlr3spatiotempcv::as_task_regr_st(data_wd_s_sp,
  id = "water_depth_shannon", target = "shannon")

# With abundance as response
task_xbrt_wd_a <- mlr3spatiotempcv::as_task_regr_st(data_wd_a_sp,
  id = "water_depth_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_wd_ra <- mlr3spatiotempcv::as_task_regr_st(data_wd_ra_sp,
  id = "water_depth_rel_abundance", target = "rel_abundance")

### PREDICTORS: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response
task_xbrt_samp_k <- mlr3spatiotempcv::as_task_regr_st(data_samp_k_sp,
  id = "sampling_k_index", target = "k_index")

# With shannon index as response
task_xbrt_samp_s <- mlr3spatiotempcv::as_task_regr_st(data_samp_s_sp,
  id = "sampling_shannon", target = "shannon")

# With abundance as response
task_xbrt_samp_a <- mlr3spatiotempcv::as_task_regr_st(data_samp_a_sp,
  id = "sampling_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_samp_ra <- mlr3spatiotempcv::as_task_regr_st(data_samp_ra_sp,
  id = "sampling_rel_abundance", target = "rel_abundance")

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# With k_index as response
task_xbrt_sec_k <- mlr3spatiotempcv::as_task_regr_st(data_sec_k_sp,
  id = "section_k_index", target = "k_index")

# With shannon index as response
task_xbrt_sec_s <- mlr3spatiotempcv::as_task_regr_st(data_sec_s_sp,
  id = "section_shannon", target = "shannon")

# With abundance as response
task_xbrt_sec_a <- mlr3spatiotempcv::as_task_regr_st(data_sec_a_sp,
  id = "section_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_sec_ra <- mlr3spatiotempcv::as_task_regr_st(data_sec_ra_sp,
  id = "section_rel_abundance", target = "rel_abundance")

### LEARNER ### ----------------------------------------------------------------
# learner for random forest valid for all models
lrn_xbrt <- lrn("regr.xgboost", predict_type = "response")
```

### Specify Search Space
```{r}
# specifying the search space for all response variables and predictors 
search_space_xbrt <- paradox::ps(
  eta = p_dbl(lower = 0.01, upper = 1.0), # learning rate
  nrounds = p_int(lower = 100, upper = 1000),
  max_depth = p_int(lower = 3, upper = 10), # tree complexity
  subsample = p_dbl(lower = 0.5, upper = 0.75) # bag fraction 
)
```

### Specify Autotuner  
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
autotuner_xbrt_v_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_v_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_v_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_v_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
autotuner_xbrt_wd_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_wd_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_wd_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_wd_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
autotuner_xbrt_samp_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_samp_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_samp_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_samp_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
autotuner_xbrt_sec_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_sec_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_sec_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_sec_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning 
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)
```

### Train Autotuner
```{r}
# set seed to obtain the same results with each run
set.seed(0412022)

### PREDICTOR: VELOCITY ### --------------------------------------------------
# With k_index as response
autotuner_xbrt_v_k$train(task_xbrt_v_k)

# With shannon index as response
autotuner_xbrt_v_s$train(task_xbrt_v_s)

# With abundance as response
autotuner_xbrt_v_a$train(task_xbrt_v_a)

# With rel_abundance as response
autotuner_xbrt_v_ra$train(task_xbrt_v_ra)

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response
autotuner_xbrt_wd_k$train(task_xbrt_wd_k)

# With shannon index as response
autotuner_xbrt_wd_s$train(task_xbrt_wd_s)

# With abundance as response
autotuner_xbrt_wd_a$train(task_xbrt_wd_a)

# With rel_abundance as response
autotuner_xbrt_wd_ra$train(task_xbrt_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response
autotuner_xbrt_samp_k$train(task_xbrt_samp_k)

# With shannon index as response
autotuner_xbrt_samp_s$train(task_xbrt_samp_s)

# With abundance as response
autotuner_xbrt_samp_a$train(task_xbrt_samp_a)

# With rel_abundance as response
autotuner_xbrt_samp_ra$train(task_xbrt_samp_ra)

### PREDICTORS: ALL PREDICTORS ### -------------------------------------------
# With k_index as response
autotuner_xbrt_sec_k$train(task_xbrt_sec_k)

# With shannon index as response
autotuner_xbrt_sec_s$train(task_xbrt_sec_s)

# With abundance as response
autotuner_xbrt_sec_a$train(task_xbrt_sec_a)

# With rel_abundance as response
autotuner_xbrt_sec_ra$train(task_xbrt_sec_ra)
```

### Tuned Hyperparameters
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
autotuner_xbrt_v_k$tuning_result

# With shannon index as response
autotuner_xbrt_v_s$tuning_result

# With abundance as response
autotuner_xbrt_v_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_v_ra$tuning_result

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
autotuner_xbrt_wd_k$tuning_result

# With shannon index as response
autotuner_xbrt_wd_s$tuning_result

# With abundance as response
autotuner_xbrt_wd_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_wd_ra$tuning_result

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
autotuner_xbrt_samp_k$tuning_result

# With shannon index as response
autotuner_xbrt_samp_s$tuning_result

# With abundance as response 
autotuner_xbrt_samp_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_samp_ra$tuning_result

### PREDICTORS: ALL PREDICTORS ### -------------------------------------------
# With k_index as response
autotuner_xbrt_sec_k$tuning_result

# With shannon index as response
autotuner_xbrt_sec_s$tuning_result

# With abundance as response
autotuner_xbrt_sec_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_sec_ra$tuning_result
```

# Xgboost models 
## Specify Matrix
### Training Sets
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
trainx_v_k <- model.matrix(k_index ~ ., data = training_v_k)
trainx_v_k_c <- model.matrix(k_index ~ ., data = training_v_k_c)

# With shannon index as response
trainx_v_s <- model.matrix(shannon ~ ., data = training_v_s)
trainx_v_s_c <- model.matrix(shannon ~ ., data = training_v_s_c)

# With abundance as response 
trainx_v_a <- model.matrix(abundance ~ ., data = training_v_a)
trainx_v_a_c <- model.matrix(abundance ~ ., data = training_v_a_c)

# With rel_abundance as response 
trainx_v_ra <- model.matrix(rel_abundance ~ ., data = training_v_ra)
trainx_v_ra_c <- model.matrix(rel_abundance ~ ., data = training_v_ra_c)

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response
trainx_wd_k <- model.matrix(k_index ~ ., data = training_wd_k)
trainx_wd_k_c <- model.matrix(k_index ~ ., data = training_wd_k_c)

# With shannon index as response
trainx_wd_s <- model.matrix(shannon ~ ., data = training_wd_s)
trainx_wd_s_c <- model.matrix(shannon ~ ., data = training_wd_s_c)

# With abundance as response
trainx_wd_a <- model.matrix(abundance ~ ., data = training_wd_a)
trainx_wd_a_c <- model.matrix(abundance ~ ., data = training_wd_a_c)

# With rel_abundance as response
trainx_wd_ra <- model.matrix(rel_abundance ~ ., data = training_wd_ra)
trainx_wd_ra_c <- model.matrix(rel_abundance ~ ., data = training_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
trainx_samp_k <- model.matrix(k_index ~ ., data = training_samp_k)
trainx_samp_k_c <- model.matrix(k_index ~ ., data = training_samp_k_c)

# With shannon index as response
trainx_samp_s <- model.matrix(shannon ~ ., data = training_samp_s)
trainx_samp_s_c <- model.matrix(shannon ~ ., data = training_samp_s_c)

# With abundance as response
trainx_samp_a <- model.matrix(abundance ~ ., data = training_samp_a)
trainx_samp_a_c <- model.matrix(abundance ~ ., data = training_samp_a_c)

# With rel_abundance as response
trainx_samp_ra <- model.matrix(rel_abundance ~ ., data = training_samp_ra)
trainx_samp_ra_c <- model.matrix(rel_abundance ~ ., data = training_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### -------------------------------------------
# With k_index as response
trainx_sec_k <- model.matrix(k_index ~ ., data = training_sec_k)
trainx_sec_k_c <- model.matrix(k_index ~ ., data = training_sec_k_c)

# With shannon index as response
trainx_sec_s <- model.matrix(shannon ~ ., data = training_sec_s)
trainx_sec_s_c <- model.matrix(shannon ~ ., data = training_sec_s_c)

# With abundance as response
trainx_sec_a <- model.matrix(abundance ~ ., data = training_sec_a)
trainx_sec_a_c <- model.matrix(abundance ~ ., data = training_sec_a_c)

# With rel_abundance as response
trainx_sec_ra <- model.matrix(rel_abundance ~ ., data = training_sec_ra)
trainx_sec_ra_c <- model.matrix(rel_abundance ~ ., data = training_sec_ra_c)
```

### Test Sets
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
testx_v_k <- model.matrix(k_index ~ ., data = test_v_k)
testx_v_k_c <- model.matrix(k_index ~ ., data = test_v_k_c)
testx_v_k_c <- as.matrix(testx_v_k_c[ ,-1])

# With shannon index as response
testx_v_s <- model.matrix(shannon ~ ., data = test_v_s)
testx_v_s_c <- model.matrix(shannon ~ ., data = test_v_s_c)
testx_v_s_c <- as.matrix(testx_v_s_c[ ,-1])

# With abundance as response
testx_v_a <- model.matrix(abundance ~ ., data = test_v_a)
testx_v_a_c <- model.matrix(abundance ~ ., data = test_v_a_c)
testx_v_a_c <- as.matrix(testx_v_a_c[ ,-1])

# With rel_abundance as response
testx_v_ra <- model.matrix(rel_abundance ~ ., data = test_v_ra)
testx_v_ra_c <- model.matrix(rel_abundance ~ ., data = test_v_ra_c)
testx_v_ra_c <- as.matrix(testx_v_ra_c[ ,-1])

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
testx_wd_k <- model.matrix(k_index ~ ., data = test_wd_k)
testx_wd_k_c <- model.matrix(k_index ~ ., data = test_wd_k_c)

# With shannon index as response
testx_wd_s <- model.matrix(shannon ~ ., data = test_wd_s)
testx_wd_s_c <- model.matrix(shannon ~ ., data = test_wd_s_c)

# With abundance as response
testx_wd_a <- model.matrix(abundance ~ ., data = test_wd_a)
testx_wd_a_c <- model.matrix(abundance ~ ., data = test_wd_a_c)

# With rel_abundance as response
testx_wd_ra <- model.matrix(rel_abundance ~ ., data = test_wd_ra)
testx_wd_ra_c <- model.matrix(rel_abundance ~ ., data = test_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
testx_samp_k <- model.matrix(k_index ~ ., data = test_samp_k)
testx_samp_k_c <- model.matrix(k_index ~ ., data = test_samp_k_c)

# With shannon index as response
testx_samp_s <- model.matrix(shannon ~ ., data = test_samp_s)
testx_samp_s_c <- model.matrix(shannon ~ ., data = test_samp_s_c)

# With abundance as response
testx_samp_a <- model.matrix(abundance ~ ., data = test_samp_a)
testx_samp_a_c <- model.matrix(abundance ~ ., data = test_samp_a_c)

# With rel_abundance as response
testx_samp_ra <- model.matrix(rel_abundance ~ ., data = test_samp_ra)
testx_samp_ra_c <- model.matrix(rel_abundance ~ ., data = test_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ###
# With k_index as response
testx_sec_k <- model.matrix(k_index ~ ., data = test_sec_k)
testx_sec_k_c <- model.matrix(k_index ~ ., data = test_sec_k_c)

# With shannon index as response
testx_sec_s <- model.matrix(shannon ~ ., data = test_sec_s)
testx_sec_s_c <- model.matrix(shannon ~ ., data = test_sec_s_c)

# With abundance as response
testx_sec_a <- model.matrix(abundance ~ ., data = test_sec_a)
testx_sec_a_c <- model.matrix(abundance ~ ., data = test_sec_a_c)

# With rel_abundance as response
testx_sec_ra <- model.matrix(rel_abundance ~ ., data = test_sec_ra)
testx_sec_ra_c <- model.matrix(rel_abundance ~ ., data = test_sec_ra_c)
```

## Xgboost w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
#          eta nrounds max_depth subsample 
#1: 0.01838576     922         3 0.6312782             
xgb_v_k <- xgboost(data = data.matrix(trainx_v_k[ ,-1]),
                     label = as.numeric(as.character(training_v_k$k_index)),
                     eta = 0.01838576,
                     max_depth = 3,
                     nrounds = 922,
                     subsample = 0.6312782,
                     objective = "reg:linear")

# With shannon index as response
#          eta nrounds max_depth subsample 
#1: 0.06108969     117         4 0.6531705           
xgb_v_s <- xgboost(data = data.matrix(trainx_v_s[ ,-1]),
                     label = as.numeric(as.character(training_v_s$shannon)),
                     eta = 0.06108969,
                     max_depth = 4,
                     nrounds = 117,
                     subsample = 0.6531705,
                     objective = "reg:linear")

# With abundance as response
#          eta nrounds max_depth subsample 
#1: 0.06943808     314         4 0.7209312          
xgb_v_a <- xgboost(data = data.matrix(trainx_v_a[ ,-1]),
                     label = as.numeric(as.character(training_v_a$abundance)),
                     eta = 0.06943808,
                     max_depth = 4,
                     nrounds = 314,
                     subsample = 0.7209312,
                     objective = "reg:linear")

# With rel_abundance as response
#          eta nrounds max_depth subsample 
#1: 0.01598317     563         5 0.6270098          
xgb_v_ra <- xgboost(data = data.matrix(trainx_v_ra[ ,-1]),
                     label = as.numeric(as.character(training_v_ra$rel_abundance)),
                     eta = 0.01598317,
                     max_depth = 5,
                     nrounds = 563,
                     subsample = 0.6270098,
                     objective = "reg:linear")

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
#          eta nrounds max_depth subsample 
#1: 0.04028586     240        10 0.5747886          
xgb_wd_k <- xgboost(data = data.matrix(trainx_wd_k[ ,-1]),
                     label = as.numeric(as.character(training_wd_k$k_index)),
                     eta = 0.04028586,
                     max_depth = 10,
                     nrounds = 240,
                     subsample = 0.5747886,
                     objective = "reg:linear")

# With shannon index as response
#         eta nrounds max_depth subsample 
#1: 0.1409998     605        10  0.731911              
xgb_wd_s <- xgboost(data = data.matrix(trainx_wd_s[ ,-1]),
                     label = as.numeric(as.character(training_wd_s$shannon)),
                     eta = 0.1409998,
                     max_depth = 10,
                     nrounds = 605,
                     subsample = 0.731911,
                     objective = "reg:linear")

# With abundance as response
#          eta nrounds max_depth subsample 
#1: 0.03123928     226         4  0.700416               
xgb_wd_a <- xgboost(data = data.matrix(trainx_wd_a[ ,-1]),
                     label = as.numeric(as.character(training_wd_a$abundance)),
                     eta = 0.03123928,
                     max_depth = 4,
                     nrounds = 226,
                     subsample = 0.700416,
                     objective = "reg:linear")

# With rel_abundance as response
#          eta nrounds max_depth subsample 
#1: 0.02019605     448         4 0.6486529             
xgb_wd_ra <- xgboost(data = data.matrix(trainx_wd_ra[ ,-1]),
                     label = as.numeric(as.character(training_wd_ra$rel_abundance)),
                     eta = 0.02019605,
                     max_depth = 4,
                     nrounds = 448,
                     subsample = 0.6486529,
                     objective = "reg:linear")

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response 
#         eta nrounds max_depth subsample 
#1: 0.3036988     380         6 0.6041682                
xgb_samp_k <- xgboost(data = data.matrix(trainx_samp_k[ ,-1]),
                     label = as.numeric(as.character(training_samp_k$k_index)),
                     eta = 0.3036988,
                     max_depth = 6,
                     nrounds = 380,
                     subsample = 0.6041682,
                     objective = "reg:linear")

# With shannon index as response
#         eta nrounds max_depth subsample 
#1: 0.4003405     337         4 0.6988528              
xgb_samp_s <- xgboost(data = data.matrix(trainx_samp_s[ ,-1]),
                     label = as.numeric(as.character(training_samp_s$shannon)),
                     eta = 0.4003405,
                     max_depth = 4,
                     nrounds = 337,
                     subsample = 0.6988528,
                     objective = "reg:linear")

# With abundance as response
#         eta nrounds max_depth subsample 
#1: 0.2813937     725         9 0.5863177               
xgb_samp_a <- xgboost(data = data.matrix(trainx_samp_a[ ,-1]),
                     label = as.numeric(as.character(training_samp_a$abundance)),
                     eta = 0.2813937,
                     max_depth = 9,
                     nrounds = 725,
                     subsample = 0.5863177,
                     objective = "reg:linear")

# With rel_abundance as response 
#          eta nrounds max_depth subsample 
#1: 0.07668215     163         8 0.5359887             
xgb_samp_ra <- xgboost(data = data.matrix(trainx_samp_ra[ ,-1]),
                     label = as.numeric(as.character(training_samp_ra$rel_abundance)),
                     eta = 0.07668215,
                     max_depth = 8,
                     nrounds = 163,
                     subsample = 0.5359887,
                     objective = "reg:linear")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
#         eta nrounds max_depth subsample 
#1: 0.8963767     336         9 0.6946889            
xgb_sec_k <- xgboost(data = data.matrix(trainx_sec_k[ ,-1]),
                     label = as.numeric(as.character(training_sec_k$k_index)),
                     eta = 0.8963767,
                     max_depth = 9,
                     nrounds = 336,
                     subsample = 0.6946889,
                     objective = "reg:linear")

# With shannon index as response 
#         eta nrounds max_depth subsample 
#1: 0.5390005     122         6 0.5618456              
xgb_sec_s <- xgboost(data = data.matrix(trainx_sec_s[ ,-1]),
                     label = as.numeric(as.character(training_sec_s$shannon)),
                     eta = 0.5390005,
                     max_depth = 6,
                     nrounds = 122,
                     subsample = 0.5618456,
                     objective = "reg:linear")

# With abundance as response
#         eta nrounds max_depth subsample 
#1: 0.4810083     506        10  0.553183                
xgb_sec_a <- xgboost(data = data.matrix(trainx_sec_a[ ,-1]),
                     label = as.numeric(as.character(training_sec_a$abundance)),
                     eta = 0.4810083,
                     max_depth = 10,
                     nrounds = 506,
                     subsample = 0.553183,
                     objective = "reg:linear")

# With rel_abundance as response 
#        eta nrounds max_depth subsample 
#1: 0.120015     277         9  0.544253               
xgb_sec_ra <- xgboost(data = data.matrix(trainx_sec_ra[ ,-1]),
                     label = as.numeric(as.character(training_sec_ra$rel_abundance)),
                     eta = 0.120015,
                     max_depth = 9,
                     nrounds = 277,
                     subsample = 0.544253,
                     objective = "reg:linear")
```

## Xgboost w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
#          eta nrounds max_depth subsample 
#1: 0.01838576     922         3 0.6312782 
xgb_v_k_c <- xgboost(data = data.matrix(trainx_v_k_c[ ,-1]),
                     label = as.numeric(as.character(training_v_k_c$k_index)),
                     eta = 0.01838576,
                     max_depth = 3,
                     nrounds = 922,
                     subsample = 0.6312782,
                     objective = "reg:linear")

# With shannon index as response
#          eta nrounds max_depth subsample 
#1: 0.06108969     117         4 0.6531705 
xgb_v_s_c <- xgboost(data = data.matrix(trainx_v_s_c[ ,-1]),
                     label = as.numeric(as.character(training_v_s_c$shannon)),
                     eta = 0.06108969,
                     max_depth = 4,
                     nrounds = 117,
                     subsample = 0.6531705,
                     objective = "reg:linear")

# With abundance as response
#          eta nrounds max_depth subsample 
#1: 0.06943808     314         4 0.7209312
xgb_v_a_c <- xgboost(data = data.matrix(trainx_v_a_c[ ,-1]),
                     label = as.numeric(as.character(training_v_a_c$abundance)),
                     eta = 0.06943808,
                     max_depth = 4,
                     nrounds = 314,
                     subsample = 0.7209312,
                     objective = "reg:linear")

# With rel_abundance as response
#          eta nrounds max_depth subsample 
#1: 0.01598317     563         5 0.6270098 
xgb_v_ra_c <- xgboost(data = data.matrix(trainx_v_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_v_ra_c$rel_abundance)),
                     eta = 0.01598317,
                     max_depth = 5,
                     nrounds = 563,
                     subsample = 0.6270098,
                     objective = "reg:linear")

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
#          eta nrounds max_depth subsample 
#1: 0.04028586     240        10 0.5747886 
xgb_wd_k_c <- xgboost(data = data.matrix(trainx_wd_k_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_k_c$k_index)),
                     eta = 0.04028586,
                     max_depth = 10,
                     nrounds = 240,
                     subsample = 0.5747886,
                     objective = "reg:linear")

# With shannon index as response
#         eta nrounds max_depth subsample 
#1: 0.1409998     605        10  0.731911   
xgb_wd_s_c <- xgboost(data = data.matrix(trainx_wd_s_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_s_c$shannon)),
                     eta = 0.1409998,
                     max_depth = 10,
                     nrounds = 605,
                     subsample = 0.731911,
                     objective = "reg:linear")

# With abundance as response
#          eta nrounds max_depth subsample 
#1: 0.03123928     226         4  0.700416 
xgb_wd_a_c <- xgboost(data = data.matrix(trainx_wd_a_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_a_c$abundance)),
                     eta = 0.03123928,
                     max_depth = 4,
                     nrounds = 226,
                     subsample = 0.700416,
                     objective = "reg:linear")

# With rel_abundance as response
#          eta nrounds max_depth subsample 
#1: 0.02019605     448         4 0.6486529             
xgb_wd_ra_c <- xgboost(data = data.matrix(trainx_wd_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_ra_c$rel_abundance)),
                     eta = 0.02019605,
                     max_depth = 4,
                     nrounds = 448,
                     subsample = 0.6486529,
                     objective = "reg:linear")

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response 
#         eta nrounds max_depth subsample 
#1: 0.3036988     380         6 0.6041682                
xgb_samp_k_c <- xgboost(data = data.matrix(trainx_samp_k_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_k_c$k_index)),
                     eta = 0.3036988,
                     max_depth = 6,
                     nrounds = 380,
                     subsample = 0.6041682,
                     objective = "reg:linear")

# With shannon index as response
#         eta nrounds max_depth subsample 
#1: 0.4003405     337         4 0.6988528              
xgb_samp_s_c <- xgboost(data = data.matrix(trainx_samp_s_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_s_c$shannon)),
                     eta = 0.4003405,
                     max_depth = 4,
                     nrounds = 337,
                     subsample = 0.6988528,
                     objective = "reg:linear")

# With abundance as response
#         eta nrounds max_depth subsample 
#1: 0.2813937     725         9 0.5863177               
xgb_samp_a_c <- xgboost(data = data.matrix(trainx_samp_a_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_a_c$abundance)),
                     eta = 0.2813937,
                     max_depth = 9,
                     nrounds = 725,
                     subsample = 0.5863177,
                     objective = "reg:linear")

# With rel_abundance as response 
#          eta nrounds max_depth subsample 
#1: 0.07668215     163         8 0.5359887             
xgb_samp_ra_c <- xgboost(data = data.matrix(trainx_samp_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_ra_c$rel_abundance)),
                     eta = 0.07668215,
                     max_depth = 8,
                     nrounds = 163,
                     subsample = 0.5359887,
                     objective = "reg:linear")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
#         eta nrounds max_depth subsample 
#1: 0.8963767     336         9 0.6946889            
xgb_sec_k_c <- xgboost(data = data.matrix(trainx_sec_k_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_k_c$k_index)),
                     eta = 0.8963767,
                     max_depth = 9,
                     nrounds = 336,
                     subsample = 0.6946889,
                     objective = "reg:linear")

# With shannon index as response 
#         eta nrounds max_depth subsample 
#1: 0.5390005     122         6 0.5618456              
xgb_sec_s_c <- xgboost(data = data.matrix(trainx_sec_s_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_s_c$shannon)),
                     eta = 0.5390005,
                     max_depth = 6,
                     nrounds = 122,
                     subsample = 0.5618456,
                     objective = "reg:linear")

# With abundance as response
#         eta nrounds max_depth subsample 
#1: 0.4810083     506        10  0.553183                
xgb_sec_a_c <- xgboost(data = data.matrix(trainx_sec_a_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_a_c$abundance)),
                     eta = 0.4810083,
                     max_depth = 10,
                     nrounds = 506,
                     subsample = 0.553183,
                     objective = "reg:linear")

# With rel_abundance as response 
#        eta nrounds max_depth subsample 
#1: 0.120015     277         9  0.544253               
xgb_sec_ra_c <- xgboost(data = data.matrix(trainx_sec_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_ra_c$rel_abundance)),
                     eta = 0.120015,
                     max_depth = 9,
                     nrounds = 277,
                     subsample = 0.544253,
                     objective = "reg:linear")
```

# ! Model Evaluation 
## Variable Importance
best_learner <- autotuner_xbrt_v_k$learner[[1]]
xgb_model <- autotuner_xbrt_v_k$model
feature_importance <- xgb.importance(model = xgb_model)
```{r}
### PREDICTORS: VELOCITY ### -------------------------------------------------
# w/ coordinates
vi_v_k <- xgb.importance(model = xgb_v_k) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/ coordinates")

vi_v_s <- xgb.importance(model = xgb_v_s) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/ coordinates")

vi_v_a <- xgb.importance(model = xgb_v_a) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/ coordinates")

vi_v_ra <- xgb.importance(model = xgb_v_ra) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/ coordinates")

# w/o coordinates
vi_v_k_c <- xgb.importance(model = xgb_v_k_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/o coordinates")

vi_v_s_c <- xgb.importance(model = xgb_v_s_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/o coordinates")

vi_v_a_c <- xgb.importance(model = xgb_v_a_c)|>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/o coordinates")

vi_v_ra_c <- xgb.importance(model = xgb_v_ra_c)|>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/o coordinates")


### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# w/ coordinates
vi_wd_k <- xgb.importance(model = xgb_wd_k) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/ coordinates")

vi_wd_s <- xgb.importance(model = xgb_wd_s) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/ coordinates")

vi_wd_a <- xgb.importance(model = xgb_wd_a) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/ coordinates")

vi_wd_ra <- xgb.importance(model = xgb_wd_ra) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/ coordinates")

# w/o coordinates
vi_wd_k_c <- xgb.importance(model = xgb_wd_k_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/o coordinates")

vi_wd_s_c <- xgb.importance(model = xgb_wd_s_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/o coordinates")

vi_wd_a_c <- xgb.importance(model = xgb_wd_a_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/o coordinates")

vi_wd_ra_c <- xgb.importance(model = xgb_wd_ra_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/o coordinates")

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# w/ coordinates
vi_samp_k <- xgb.importance(model = xgb_samp_k) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/ coordinates")

vi_samp_s <- xgb.importance(model = xgb_samp_s) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/ coordinates")

vi_samp_a <- xgb.importance(model = xgb_samp_a) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/ coordinates")

vi_samp_ra <- xgb.importance(model = xgb_samp_ra) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/ coordinates")

# w/o coordinates
vi_samp_k_c <- xgb.importance(model = xgb_samp_k_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/o coordinates")

vi_samp_s_c <- xgb.importance(model = xgb_samp_s_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/o coordinates")

vi_samp_a_c <- xgb.importance(model = xgb_samp_a_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/o coordinates")

vi_samp_ra_c <- xgb.importance(model = xgb_samp_ra_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/o coordinates")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# w/ coordinates
vi_sec_k <- xgb.importance(model = xgb_sec_k) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/ coordinates")

vi_sec_s <- xgb.importance(model = xgb_sec_s) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/ coordinates")

vi_sec_a <- xgb.importance(model = xgb_sec_a) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/ coordinates")

vi_sec_ra <- xgb.importance(model = xgb_sec_ra) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/ coordinates")

# w/o coordinates
vi_sec_k_c <- xgb.importance(model = xgb_sec_k_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/o coordinates")

vi_sec_s_c <- xgb.importance(model = xgb_sec_s_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/o coordinates")

vi_sec_a_c <- xgb.importance(model = xgb_sec_a_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/o coordinates")

vi_sec_ra_c <- xgb.importance(model = xgb_sec_ra_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/o coordinates")

# bind results together -------------------------------------------------------
vi_brt_model_v <- rbind(vi_v_k, vi_v_s, vi_v_a, vi_v_ra) 
vi_brt_model_v_c <- rbind(vi_v_k_c, vi_v_s_c, vi_v_a_c, vi_v_ra_c)
vi_brt_model_wd <- rbind(vi_wd_k, vi_wd_s, vi_wd_a, vi_wd_ra) 
vi_brt_model_wd_c <- rbind(vi_wd_k_c, vi_wd_s_c, vi_wd_a_c, vi_wd_ra_c) 
vi_brt_model_samp <- rbind(vi_samp_k, vi_samp_s, vi_samp_a, vi_samp_ra) 
vi_brt_model_samp_c <- rbind(vi_samp_k_c, vi_samp_s_c, vi_samp_a_c, vi_samp_ra_c) 
vi_brt_model_sec <- rbind(vi_sec_k, vi_sec_s, vi_sec_a, vi_sec_ra)
vi_brt_model_sec_c <- rbind(vi_sec_k_c, vi_sec_s_c, vi_sec_a_c, vi_sec_ra_c) 

# write results into .csv ----------------------------------------------------
write.csv(vi_brt_model_v, "ML_model/var_imp/vi_brt_model_v_add.csv", row.names = FALSE)
write.csv(vi_brt_model_v_c, "ML_model/var_imp/vi_brt_model_v_c_add.csv", row.names = FALSE)
write.csv(vi_brt_model_wd, "ML_model/var_imp/vi_brt_model_wd_add.csv", row.names = FALSE)
write.csv(vi_brt_model_wd_c, "ML_model/var_imp/vi_brt_model_wd_c_add.csv", row.names = FALSE)
write.csv(vi_brt_model_samp, "ML_model/var_imp/vi_brt_model_samp_add.csv", row.names = FALSE)
write.csv(vi_brt_model_samp_c, "ML_model/var_imp/vi_brt_model_samp_c_add.csv", row.names = FALSE)
write.csv(vi_brt_model_sec, "ML_model/var_imp/vi_brt_model_sec_add.csv", row.names = FALSE)
write.csv(vi_brt_model_sec_c, "ML_model/var_imp/vi_brt_model_sec_c_add.csv", row.names = FALSE)
```


## Partial dependence plots
https://stackoverflow.com/questions/66016542/partial-dependence-ale-ice-plots-xgboost-in-r
```{r}
### k_index -------------------------------------------------------------
### velocity -----------------------------------------------------------
#pdp_v_k <- pdp::partial(model, pred.var = "velocity")
pdp_model_v_k <- pdp::partial(xgb_v_k, pred.var = "velocity", train = trainx_v_k[ ,-1]) |>
  mutate(predictors = "velocity")

pdp_model_v_k_c <- pdp::partial(rf_model_v_k_c, pred.var = "velocity")|>
  mutate(predictors = "velocity_c")

### froude -----------------------------------------------------------
pdp_model_f_v_k <- pdp::partial(rf_model_v_k, pred.var = "froude") |>
  mutate(predictors = "froude")
pdp_model_f_v_k_c <- pdp::partial(rf_model_v_k_c, pred.var = "froude") |>
  mutate(predictors = "froude_c")

### shear stress -------------------------------------------------------
pdp_model_s_v_k <- pdp::partial(rf_model_v_k, pred.var = "shear_stress") |>
  mutate(predictors = "shear_stress")
pdp_model_s_v_k_c <- pdp::partial(rf_model_v_k_c, pred.var = "shear_stress") |>
  mutate(predictors = "shear_stress_c")

### stream power --------------------------------------------------------
pdp_model_sp_v_k <- pdp::partial(rf_model_v_k, pred.var = "stream_power") |>
  mutate(predictors = "stream_power")
pdp_model_sp_v_k_c <- pdp::partial(rf_model_v_k_c, pred.var = "stream_power") |>
  mutate(predictors = "stream_power_c")

### shannon index -----------------------------------------------------
### velocity -----------------------------------------------------------
# pdp_v_s <- partial(autotuner_rf_v_s, pred.var = c("velocity"))
pdp_model_v_s <- pdp::partial(rf_model_v_s, pred.var = "velocity") |>
  mutate(predictors = "velocity")
pdp_model_v_s_c <- pdp::partial(rf_model_v_s_c, pred.var = "velocity")|>
  mutate(predictors = "velocity_c")

### froude -----------------------------------------------------------
pdp_model_f_v_s <- pdp::partial(rf_model_v_s, pred.var = "froude") |>
  mutate(predictors = "froude")
pdp_model_f_v_s_c <- pdp::partial(rf_model_v_s_c, pred.var = "froude") |>
  mutate(predictors = "froude_c")

### shear stress ------------------------------------------------------
pdp_model_s_v_s <- pdp::partial(rf_model_v_s, pred.var = "shear_stress") |>
  mutate(predictors = "shear_stress")
pdp_model_s_v_s_c <- pdp::partial(rf_model_v_s_c, pred.var = "shear_stress") |>
  mutate(predictors = "shear_stress_c")

### stream power ------------------------------------------------------
pdp_model_sp_v_s <- pdp::partial(rf_model_v_s, pred.var = "stream_power") |>
  mutate(predictors = "stream_power")
pdp_model_sp_v_s_c <- pdp::partial(rf_model_v_s_c, pred.var = "stream_power") |>
  mutate(predictors = "stream_power_c")

### abundance ----------------------------------------------------------
### velocity -----------------------------------------------------------
# pdp_v_a <- partial(autotuner_rf_v_a, pred.var = c("velocity"))
pdp_model_v_a <- pdp::partial(rf_model_v_a, pred.var = "velocity") |>
  mutate(predictors = "velocity")
pdp_model_v_a_c <- pdp::partial(rf_model_v_a_c, pred.var = "velocity")|>
  mutate(predictors = "velocity_c")

### froude -----------------------------------------------------------
pdp_model_f_v_a <- pdp::partial(rf_model_v_a, pred.var = "froude") |>
  mutate(predictors = "froude")
pdp_model_f_v_a_c <- pdp::partial(rf_model_v_a_c, pred.var = "froude") |>
  mutate(predictors = "froude_c")

### shear stress ------------------------------------------------------
pdp_model_s_v_a <- pdp::partial(rf_model_v_a, pred.var = "shear_stress") |>
  mutate(predictors = "shear_stress")
pdp_model_s_v_a_c <- pdp::partial(rf_model_v_a_c, pred.var = "shear_stress") |>
  mutate(predictors = "shear_stress_c")

### stream power -------------------------------------------------------
pdp_model_sp_v_a <- pdp::partial(rf_model_v_a, pred.var = "stream_power") |>
  mutate(predictors = "stream_power")
pdp_model_sp_v_a_c <- pdp::partial(rf_model_v_a_c, pred.var = "stream_power") |>
  mutate(predictors = "stream_power_c")

### relative abundance -------------------------------------------------
### velocity -----------------------------------------------------------
# pdp_v_ra <- partial(autotuner_rf_v_ra, pred.var = c("velocity"))
pdp_model_v_ra <- pdp::partial(rf_model_v_ra, pred.var = "velocity") |>
  mutate(predictors = "velocity")
pdp_model_v_ra_c <- pdp::partial(rf_model_v_ra_c, pred.var = "velocity")|>
  mutate(predictors = "velocity_c")

### froude -----------------------------------------------------------
pdp_model_f_v_ra <- pdp::partial(rf_model_v_ra, pred.var = "froude") |>
  mutate(predictors = "froude")
pdp_model_f_v_ra_c <- pdp::partial(rf_model_v_ra_c, pred.var = "froude") |>
  mutate(predictors = "froude_c")

### shear stress ------------------------------------------------------
pdp_model_s_v_ra <- pdp::partial(rf_model_v_ra, pred.var = "shear_stress") |>
  mutate(predictors = "shear_stress")
pdp_model_s_v_ra_c <- pdp::partial(rf_model_v_ra_c, pred.var = "shear_stress") |>
  mutate(predictors = "shear_stress_c")

### stream power -------------------------------------------------------
pdp_model_sp_v_ra <- pdp::partial(rf_model_v_ra, pred.var = "stream_power") |>
  mutate(predictors = "stream_power")
pdp_model_sp_v_ra_c <- pdp::partial(rf_model_v_ra_c, pred.var = "stream_power") |>
  mutate(predictors = "stream_power_c")
```

## Obs and Pred 
```{r}
### OBSERVED VALUES ### ------------------------------------------------------
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
responses_v_k <- test_v_k$k_index

# With shannon index as response
responses_v_s <- test_v_s$shannon

# With abundance as response
responses_v_a <- test_v_a$abundance

# With rel_abundance as response
responses_v_ra <- test_v_ra$rel_abundance

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
responses_wd_k <- test_wd_k$k_index

# With shannon index as response
responses_wd_s <- test_wd_s$shannon

# With abundance as response
responses_wd_a <- test_wd_a$abundance

# With rel_abundance as response
responses_wd_ra <- test_wd_ra$rel_abundance

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response
responses_samp_k <- test_samp_k$k_index

# With shannon index as response
responses_samp_s <- test_samp_s$shannon

# With abundance as response
responses_samp_a <- test_samp_a$abundance

# With rel_abundance as response
responses_samp_ra <- test_samp_ra$rel_abundance

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
responses_sec_k <- test_sec_k$k_index

# With shannon index as response
responses_sec_s <- test_sec_s$shannon

# With abundance as response
responses_sec_a <- test_sec_a$abundance

# With rel_abundance as response
responses_sec_ra <- test_sec_ra$rel_abundance

### PREDICTED VALUES ### ------------------------------------------------------
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
brt_pred_v_k <- predict(autotuner_xbrt_v_k, newdata = test_v_k)
brt_pred_model_v_k <- predict(xgb_v_k, newdata = testx_v_k[ ,-1])
brt_pred_model_v_k_c <- predict(xgb_v_k_c, newdata = testx_v_k_c)

# With shannon index as response
brt_pred_v_s <- predict(autotuner_xbrt_v_s, newdata = test_v_s)
brt_pred_model_v_s <- predict(xgb_v_s, newdata = testx_v_s[ ,-1])
brt_pred_model_v_s_c <- predict(xgb_v_s_c, newdata = testx_v_s_c[ ,-1])

# With abundance as response 
brt_pred_v_a <- predict(autotuner_xbrt_v_a, newdata = test_v_a)
brt_pred_model_v_a <- predict(xgb_v_a, newdata = testx_v_a[ ,-1])
brt_pred_model_v_a_c <- predict(xgb_v_a_c, newdata = testx_v_a_c[ ,-1])

# With rel_abundance as response
brt_pred_v_ra <- predict(autotuner_xbrt_v_ra, newdata = test_v_ra)
brt_pred_model_v_ra <- predict(xgb_v_ra, newdata = testx_v_ra[ ,-1])
brt_pred_model_v_ra_c <- predict(xgb_v_ra_c, newdata = testx_v_ra_c[ ,-1])

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
brt_pred_wd_k <- predict(autotuner_xbrt_wd_k, newdata = test_wd_k)
brt_pred_model_wd_k <- predict(xgb_wd_k, newdata = testx_wd_k[ ,-1])
brt_pred_model_wd_k_c <- predict(xgb_wd_k_c, newdata = testx_wd_k_c[ ,-1])

# With shannon index as response
brt_pred_wd_s <- predict(autotuner_xbrt_wd_s, newdata = test_wd_s)
brt_pred_model_wd_s <- predict(xgb_wd_s, newdata = testx_wd_s[ ,-1])
brt_pred_model_wd_s_c <- predict(xgb_wd_s_c, newdata = testx_wd_s_c[ ,-1])

# With abundance as response
brt_pred_wd_a <- predict(autotuner_xbrt_wd_a, newdata = test_wd_a)
brt_pred_model_wd_a <- predict(xgb_wd_a, newdata = testx_wd_a[ ,-1])
brt_pred_model_wd_a_c <- predict(xgb_wd_a_c, newdata = testx_wd_a_c[ ,-1])

# With rel_abundance as response
brt_pred_wd_ra <- predict(autotuner_xbrt_wd_ra, newdata = test_wd_ra)
brt_pred_model_wd_ra <- predict(xgb_wd_ra, newdata = testx_wd_ra[ ,-1])
brt_pred_model_wd_ra_c <- predict(xgb_wd_ra_c, newdata = testx_wd_ra_c[ ,-1])

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
brt_pred_samp_k <- predict(autotuner_xbrt_samp_k, newdata = test_samp_k)
brt_pred_model_samp_k <- predict(xgb_samp_k, newdata = testx_samp_k[ ,-1])
brt_pred_model_samp_k_c <- predict(xgb_samp_k_c, newdata = testx_samp_k_c[ ,-1])

# With shannon index as response
brt_pred_samp_s <- predict(autotuner_xbrt_samp_s, newdata = test_samp_s)
brt_pred_model_samp_s <- predict(xgb_samp_s, newdata = testx_samp_s[ ,-1])
brt_pred_model_samp_s_c <- predict(xgb_samp_s_c, newdata = testx_samp_s_c[ ,-1])

# With abundance as response
brt_pred_samp_a <- predict(autotuner_xbrt_samp_a, newdata = test_samp_a)
brt_pred_model_samp_a <- predict(xgb_samp_a, newdata = testx_samp_a[ ,-1])
brt_pred_model_samp_a_c <- predict(xgb_samp_a_c, newdata = testx_samp_a_c[ ,-1])

# With rel_abundance as response
brt_pred_samp_ra <- predict(autotuner_xbrt_samp_ra, newdata = test_samp_ra)
brt_pred_model_samp_ra <- predict(xgb_samp_ra, newdata = testx_samp_ra[ ,-1])
brt_pred_model_samp_ra_c <- predict(xgb_samp_ra_c, newdata = testx_samp_ra_c[ ,-1])

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
brt_pred_sec_k <- predict(autotuner_xbrt_sec_k, newdata = test_sec_k)
brt_pred_model_sec_k <- predict(xgb_sec_k, newdata = testx_sec_k[ ,-1])
brt_pred_model_sec_k_c <- predict(xgb_sec_k_c, newdata = testx_sec_k_c[ ,-1])

# With shannon index as response
brt_pred_sec_s <- predict(autotuner_xbrt_sec_s, newdata = test_sec_s)
brt_pred_model_sec_s <- predict(xgb_sec_s, newdata = testx_sec_s[ ,-1])
brt_pred_model_sec_s_c <- predict(xgb_sec_s_c, newdata = testx_sec_s_c[ ,-1])

# With abundance as response
brt_pred_sec_a <- predict(autotuner_xbrt_sec_a, newdata = test_sec_a)
brt_pred_model_sec_a <- predict(xgb_sec_a, newdata = testx_sec_a[ ,-1])
brt_pred_model_sec_a_c <- predict(xgb_sec_a_c, newdata = testx_sec_a_c[ ,-1])

# With rel_abundance as response
brt_pred_sec_ra <- predict(autotuner_xbrt_sec_ra, newdata = test_sec_ra)
brt_pred_model_sec_ra <- predict(xgb_sec_ra, newdata = testx_sec_ra[ ,-1])
brt_pred_model_sec_ra_c <- predict(xgb_sec_ra_c, newdata = testx_sec_ra_c[ ,-1])
```

## Deviance explained (R2)
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response 
r2_v_k <- R2(pred = brt_pred_v_k, obs = responses_v_k)
r2_model_v_k <- R2(pred = brt_pred_model_v_k, obs = responses_v_k)
r2_model_v_k_c <- R2(pred = brt_pred_model_v_k_c, obs = responses_v_k)

# With shannon index as response 
r2_v_s <- R2(pred = brt_pred_v_s, obs = responses_v_s)
r2_model_v_s <- R2(pred = brt_pred_model_v_s, obs = responses_v_s)
r2_model_v_s_c <- R2(pred = brt_pred_model_v_s_c, obs = responses_v_s)

# With abundance as response
r2_v_a <- R2(pred = brt_pred_v_a, obs = responses_v_a)
r2_model_v_a <- R2(pred = brt_pred_model_v_a, obs = responses_v_a)
r2_model_v_a_c <- R2(pred = brt_pred_model_v_a_c, obs = responses_v_a)

# With rel_abundance as response 
r2_v_ra <- R2(pred = brt_pred_v_ra, obs = responses_v_ra)
r2_model_v_ra <- R2(pred = brt_pred_model_v_ra, obs = responses_v_ra)
r2_model_v_ra_c <- R2(pred = brt_pred_model_v_ra_c, obs = responses_v_ra)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
r2_wd_k <- R2(pred = brt_pred_wd_k, obs = responses_wd_k)
r2_model_wd_k <- R2(pred = brt_pred_model_wd_k, obs = responses_wd_k)
r2_model_wd_k_c <- R2(pred = brt_pred_model_wd_k_c, obs = responses_wd_k)

# With shannon index as response
r2_wd_s <- R2(pred = brt_pred_wd_s, obs = responses_wd_s)
r2_model_wd_s <- R2(pred = brt_pred_model_wd_s, obs = responses_wd_s)
r2_model_wd_s_c <- R2(pred = brt_pred_model_wd_s_c, obs = responses_wd_s)

# With abundance as response
r2_wd_a <- R2(pred = brt_pred_wd_a, obs = responses_wd_a)
r2_model_wd_a <- R2(pred = brt_pred_model_wd_a, obs = responses_wd_a)
r2_model_wd_a_c <- R2(pred = brt_pred_model_wd_a_c, obs = responses_wd_a)

# With rel_abundance as response 
r2_wd_ra <- R2(pred = brt_pred_wd_ra, obs = responses_wd_ra)
r2_model_wd_ra <- R2(pred = brt_pred_model_wd_ra, obs = responses_wd_ra)
r2_model_wd_ra_c <- R2(pred = brt_pred_model_wd_ra_c, obs = responses_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
r2_samp_k <- R2(pred = brt_pred_samp_k, obs = responses_samp_k)
r2_model_samp_k <- R2(pred = brt_pred_model_samp_k, obs = responses_samp_k)
r2_model_samp_k_c <- R2(pred = brt_pred_model_samp_k_c, obs = responses_samp_k)

# With shannon index as response
r2_samp_s <- R2(pred = brt_pred_samp_s, obs = responses_samp_s)
r2_model_samp_s <- R2(pred = brt_pred_model_samp_s, obs = responses_samp_s)
r2_model_samp_s_c <- R2(pred = brt_pred_model_samp_s_c, obs = responses_samp_s)

# With abundance as response 
r2_samp_a <- R2(pred = brt_pred_samp_a, obs = responses_samp_a)
r2_model_samp_a <- R2(pred = brt_pred_model_samp_a, obs = responses_samp_a)
r2_model_samp_a_c <- R2(pred = brt_pred_model_samp_a_c, obs = responses_samp_a)

# With rel_abundance as response
r2_samp_ra <- R2(pred = brt_pred_samp_ra, obs = responses_samp_ra)
r2_model_samp_ra <- R2(pred = brt_pred_model_samp_ra, obs = responses_samp_ra)
r2_model_samp_ra_c <- R2(pred = brt_pred_model_samp_ra_c, obs = responses_samp_ra)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
r2_sec_k <- R2(pred = brt_pred_sec_k, obs = responses_sec_k)
r2_model_sec_k <- R2(pred = brt_pred_model_sec_k, obs = responses_sec_k)
r2_model_sec_k_c <- R2(pred = brt_pred_model_sec_k_c, obs = responses_sec_k)

# With shannon index as response 
r2_sec_s <- R2(pred = brt_pred_sec_s, obs = responses_sec_s)
r2_model_sec_s <- R2(pred = brt_pred_model_sec_s, obs = responses_sec_s)
r2_model_sec_s_c <- R2(pred = brt_pred_model_sec_s_c, obs = responses_sec_s)

# With abundance as response
r2_sec_a <- R2(pred = brt_pred_sec_a, obs = responses_sec_a)
r2_model_sec_a <- R2(pred = brt_pred_model_sec_a, obs = responses_sec_a)
r2_model_sec_a_c <- R2(pred = brt_pred_model_sec_a_c, obs = responses_sec_a)

# With rel_abundance as response
r2_sec_ra <- R2(pred = brt_pred_sec_ra, obs = responses_sec_ra)
r2_model_sec_ra <- R2(pred = brt_pred_model_sec_ra, obs = responses_sec_ra)
r2_model_sec_ra_c <- R2(pred = brt_pred_model_sec_ra_c, obs = responses_sec_ra)
```

## RMSE & MAE
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
rmse_v_k <- Metrics::rmse(actual = responses_v_k, predicted = brt_pred_v_k)
rmse_model_v_k <- Metrics::rmse(actual = responses_v_k, predicted = brt_pred_model_v_k)
rmse_model_v_k_c <- Metrics::rmse(actual = responses_v_k, predicted = brt_pred_model_v_k_c)

mae_v_k <- Metrics::mae(actual = responses_v_k, predicted = brt_pred_v_k)
mae_model_v_k <- Metrics::mae(actual = responses_v_k, predicted = brt_pred_model_v_k)
mae_model_v_k_c <- Metrics::mae(actual = responses_v_k, predicted = brt_pred_model_v_k_c)

# With shannon index as response
rmse_v_s <- Metrics::rmse(actual = responses_v_s, predicted = brt_pred_v_s)
rmse_model_v_s <- Metrics::rmse(actual = responses_v_s, predicted = brt_pred_model_v_s)
rmse_model_v_s_c <- Metrics::rmse(actual = responses_v_s, predicted = brt_pred_model_v_s_c)

mae_v_s <- Metrics::mae(actual = responses_v_s, predicted = brt_pred_v_s)
mae_model_v_s <- Metrics::mae(actual = responses_v_s, predicted = brt_pred_model_v_s)
mae_model_v_s_c <- Metrics::mae(actual = responses_v_s, predicted = brt_pred_model_v_s_c)

# With abundance as response
rmse_v_a <- Metrics::rmse(actual = responses_v_a, predicted = brt_pred_v_a)
rmse_model_v_a <- Metrics::rmse(actual = responses_v_a, predicted = brt_pred_model_v_a)
rmse_model_v_a_c <- Metrics::rmse(actual = responses_v_a, predicted = brt_pred_model_v_a_c)

mae_v_a <- Metrics::mae(actual = responses_v_a, predicted = brt_pred_v_a)
mae_model_v_a <- Metrics::mae(actual = responses_v_a, predicted = brt_pred_model_v_a)
mae_model_v_a_c <- Metrics::mae(actual = responses_v_a, predicted = brt_pred_model_v_a_c)

# With rel_abundance as response
rmse_v_ra <- Metrics::rmse(actual = responses_v_ra, predicted = brt_pred_v_ra)
rmse_model_v_ra <- Metrics::rmse(actual = responses_v_ra, predicted = brt_pred_model_v_ra)
rmse_model_v_ra_c <- Metrics::rmse(actual = responses_v_ra, predicted = brt_pred_model_v_ra_c)

mae_v_ra <- Metrics::mae(actual = responses_v_ra, predicted = brt_pred_v_ra)
mae_model_v_ra <- Metrics::mae(actual = responses_v_ra, predicted = brt_pred_model_v_ra)
mae_model_v_ra_c <- Metrics::mae(actual = responses_v_ra, predicted = brt_pred_model_v_ra_c)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
rmse_wd_k <- Metrics::rmse(actual = responses_wd_k, predicted = brt_pred_wd_k)
rmse_model_wd_k <- Metrics::rmse(actual = responses_wd_k, predicted = brt_pred_model_wd_k)
rmse_model_wd_k_c <- Metrics::rmse(actual = responses_wd_k, predicted = brt_pred_model_wd_k_c)

mae_wd_k <- Metrics::mae(actual = responses_wd_k, predicted = brt_pred_wd_k)
mae_model_wd_k <- Metrics::mae(actual = responses_wd_k, predicted = brt_pred_model_wd_k)
mae_model_wd_k_c <- Metrics::mae(actual = responses_wd_k, predicted = brt_pred_model_wd_k_c)

# With shannon index as response
rmse_wd_s <- Metrics::rmse(actual = responses_wd_s, predicted = brt_pred_wd_s)
rmse_model_wd_s <- Metrics::rmse(actual = responses_wd_s, predicted = brt_pred_model_wd_s)
rmse_model_wd_s_c <- Metrics::rmse(actual = responses_wd_s, predicted = brt_pred_model_wd_s_c)

mae_wd_s <- Metrics::mae(actual = responses_wd_s, predicted = brt_pred_wd_s)
mae_model_wd_s <- Metrics::mae(actual = responses_wd_s, predicted = brt_pred_model_wd_s)
mae_model_wd_s_c <- Metrics::mae(actual = responses_wd_s, predicted = brt_pred_model_wd_s_c)

# With abundance as response
rmse_wd_a <- Metrics::rmse(actual = responses_wd_a, predicted = brt_pred_wd_a)
rmse_model_wd_a <- Metrics::rmse(actual = responses_wd_a, predicted = brt_pred_model_wd_a)
rmse_model_wd_a_c <- Metrics::rmse(actual = responses_wd_a, predicted = brt_pred_model_wd_a_c)

mae_wd_a <- Metrics::mae(actual = responses_wd_a, predicted = brt_pred_wd_a)
mae_model_wd_a <- Metrics::mae(actual = responses_wd_a, predicted = brt_pred_model_wd_a)
mae_model_wd_a_c <- Metrics::mae(actual = responses_wd_a, predicted = brt_pred_model_wd_a_c)

# With rel_abundance as response
rmse_wd_ra <- Metrics::rmse(actual = responses_wd_ra, predicted = brt_pred_wd_ra)
rmse_model_wd_ra <- Metrics::rmse(actual = responses_wd_ra, predicted = brt_pred_model_wd_ra)
rmse_model_wd_ra_c <- Metrics::rmse(actual = responses_wd_ra, predicted = brt_pred_model_wd_ra_c)

mae_wd_ra <- Metrics::mae(actual = responses_wd_ra, predicted = brt_pred_wd_ra)
mae_model_wd_ra <- Metrics::mae(actual = responses_wd_ra, predicted = brt_pred_model_wd_ra)
mae_model_wd_ra_c <- Metrics::mae(actual = responses_wd_ra, predicted = brt_pred_model_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
rmse_samp_k <- Metrics::rmse(actual = responses_samp_k, predicted = brt_pred_samp_k)
rmse_model_samp_k <- Metrics::rmse(actual = responses_samp_k, predicted = brt_pred_model_samp_k)
rmse_model_samp_k_c <- Metrics::rmse(actual = responses_samp_k, predicted = brt_pred_model_samp_k_c)

mae_samp_k <- Metrics::mae(actual = responses_samp_k, predicted = brt_pred_samp_k)
mae_model_samp_k <- Metrics::mae(actual = responses_samp_k, predicted = brt_pred_model_samp_k)
mae_model_samp_k_c <- Metrics::mae(actual = responses_samp_k, predicted = brt_pred_model_samp_k_c)

# With shannon index as response
rmse_samp_s <- Metrics::rmse(actual = responses_samp_s, predicted = brt_pred_samp_s)
rmse_model_samp_s <- Metrics::rmse(actual = responses_samp_s, predicted = brt_pred_model_samp_s)
rmse_model_samp_s_c <- Metrics::rmse(actual = responses_samp_s, predicted = brt_pred_model_samp_s_c)

mae_samp_s <- Metrics::mae(actual = responses_samp_s, predicted = brt_pred_samp_s)
mae_model_samp_s <- Metrics::mae(actual = responses_samp_s, predicted = brt_pred_model_samp_s)
mae_model_samp_s_c <- Metrics::mae(actual = responses_samp_s, predicted = brt_pred_model_samp_s_c)

# With abundance as response
rmse_samp_a <- Metrics::rmse(actual = responses_samp_a, predicted = brt_pred_samp_a)
rmse_model_samp_a <- Metrics::rmse(actual = responses_samp_a, predicted = brt_pred_model_samp_a)
rmse_model_samp_a_c <- Metrics::rmse(actual = responses_samp_a, predicted = brt_pred_model_samp_a_c)

mae_samp_a <- Metrics::mae(actual = responses_samp_a, predicted = brt_pred_samp_a)
mae_model_samp_a <- Metrics::mae(actual = responses_samp_a, predicted = brt_pred_model_samp_a)
mae_model_samp_a_c <- Metrics::mae(actual = responses_samp_a, predicted = brt_pred_model_samp_a_c)

# With rel_abundance as response
rmse_samp_ra <- Metrics::rmse(actual = responses_samp_ra, predicted = brt_pred_samp_ra)
rmse_model_samp_ra <- Metrics::rmse(actual = responses_samp_ra, predicted = brt_pred_model_samp_ra)
rmse_model_samp_ra_c <- Metrics::rmse(actual = responses_samp_ra, predicted = brt_pred_model_samp_ra_c)

mae_samp_ra <- Metrics::mae(actual = responses_samp_ra, predicted = brt_pred_samp_ra)
mae_model_samp_ra <- Metrics::mae(actual = responses_samp_ra, predicted = brt_pred_model_samp_ra)
mae_model_samp_ra_c <- Metrics::mae(actual = responses_samp_ra, predicted = brt_pred_model_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
rmse_sec_k <- Metrics::rmse(actual = responses_sec_k, predicted = brt_pred_sec_k)
rmse_model_sec_k <- Metrics::rmse(actual = responses_sec_k, predicted = brt_pred_model_sec_k)
rmse_model_sec_k_c <- Metrics::rmse(actual = responses_sec_k, predicted = brt_pred_model_sec_k_c)

mae_sec_k <- Metrics::mae(actual = responses_sec_k, predicted = brt_pred_sec_k)
mae_model_sec_k <- Metrics::mae(actual = responses_sec_k, predicted = brt_pred_model_sec_k)
mae_model_sec_k_c <- Metrics::mae(actual = responses_sec_k, predicted = brt_pred_model_sec_k_c)

# With shannon index as response
rmse_sec_s <- Metrics::rmse(actual = responses_sec_s, predicted = brt_pred_sec_s)
rmse_model_sec_s <- Metrics::rmse(actual = responses_sec_s, predicted = brt_pred_model_sec_s)
rmse_model_sec_s_c <- Metrics::rmse(actual = responses_sec_s, predicted = brt_pred_model_sec_s_c)

mae_sec_s <- Metrics::mae(actual = responses_sec_s, predicted = brt_pred_sec_s)
mae_model_sec_s <- Metrics::mae(actual = responses_sec_s, predicted = brt_pred_model_sec_s)
mae_model_sec_s_c <- Metrics::mae(actual = responses_sec_s, predicted = brt_pred_model_sec_s_c)

# With abundance as response
rmse_sec_a <- Metrics::rmse(actual = responses_sec_a, predicted = brt_pred_sec_a)
rmse_model_sec_a <- Metrics::rmse(actual = responses_sec_a, predicted = brt_pred_model_sec_a)
rmse_model_sec_a_c <- Metrics::rmse(actual = responses_sec_a, predicted = brt_pred_model_sec_a_c)

mae_sec_a <- Metrics::mae(actual = responses_sec_a, predicted = brt_pred_sec_a)
mae_model_sec_a <- Metrics::mae(actual = responses_sec_a, predicted = brt_pred_model_sec_a)
mae_model_sec_a_c <- Metrics::mae(actual = responses_sec_a, predicted = brt_pred_model_sec_a_c)

# With rel_abundance as response
rmse_sec_ra <- Metrics::rmse(actual = responses_sec_ra, predicted = brt_pred_sec_ra)
rmse_model_sec_ra <- Metrics::rmse(actual = responses_sec_ra, predicted = brt_pred_model_sec_ra)
rmse_model_sec_ra_c <- Metrics::rmse(actual = responses_sec_ra, predicted = brt_pred_model_sec_ra_c)

mae_sec_ra <- Metrics::mae(actual = responses_sec_ra, predicted = brt_pred_sec_ra)
mae_model_sec_ra <- Metrics::mae(actual = responses_sec_ra, predicted = brt_pred_model_sec_ra)
mae_model_sec_ra_c <- Metrics::mae(actual = responses_sec_ra, predicted = brt_pred_model_sec_ra_c)
```

## Bias
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
bias_v_k <- bias(observados = responses_v_k, estimados = brt_pred_v_k)
bias_model_v_k <- bias(observados = responses_v_k, estimados = brt_pred_model_v_k)
bias_model_v_k_c <- bias(observados = responses_v_k, estimados = brt_pred_model_v_k_c)

# With shannon index as response
bias_v_s <- bias(observados = responses_v_s, estimados = brt_pred_v_s)
bias_model_v_s <- bias(observados = responses_v_s, estimados = brt_pred_model_v_s)
bias_model_v_s_c <- bias(observados = responses_v_s, estimados = brt_pred_model_v_s_c)

# With abundance as response
bias_v_a <- bias(observados = responses_v_a, estimados = brt_pred_v_a)
bias_model_v_a <- bias(observados = responses_v_a, estimados = brt_pred_model_v_a)
bias_model_v_a_c <- bias(observados = responses_v_a, estimados = brt_pred_model_v_a_c)

# With rel_abundance as response
bias_v_ra <- bias(observados = responses_v_ra, estimados = brt_pred_v_ra)
bias_model_v_ra <- bias(observados = responses_v_ra, estimados = brt_pred_model_v_ra)
bias_model_v_ra_c <- bias(observados = responses_v_ra, estimados = brt_pred_model_v_ra_c)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
bias_wd_k <- bias(observados = responses_wd_k, estimados = brt_pred_wd_k)
bias_model_wd_k <- bias(observados = responses_wd_k, estimados = brt_pred_model_wd_k)
bias_model_wd_k_c <- bias(observados = responses_wd_k, estimados = brt_pred_model_wd_k_c)

# With shannon index as response
bias_wd_s <- bias(observados = responses_wd_s, estimados = brt_pred_wd_s)
bias_model_wd_s <- bias(observados = responses_wd_s, estimados = brt_pred_model_wd_s)
bias_model_wd_s_c <- bias(observados = responses_wd_s, estimados = brt_pred_model_wd_s_c)

# With abundance as response
bias_wd_a <- bias(observados = responses_wd_a, estimados = brt_pred_wd_a)
bias_model_wd_a <- bias(observados = responses_wd_a, estimados = brt_pred_model_wd_a)
bias_model_wd_a_c <- bias(observados = responses_wd_a, estimados = brt_pred_model_wd_a_c)

# With rel_abundance as response
bias_wd_ra <- bias(observados = responses_wd_ra, estimados = brt_pred_wd_ra)
bias_model_wd_ra <- bias(observados = responses_wd_ra, estimados = brt_pred_model_wd_ra)
bias_model_wd_ra_c <- bias(observados = responses_wd_ra, estimados = brt_pred_model_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
bias_samp_k <- bias(observados = responses_samp_k, estimados = brt_pred_samp_k)
bias_model_samp_k <- bias(observados = responses_samp_k, estimados = brt_pred_model_samp_k)
bias_model_samp_k_c <- bias(observados = responses_samp_k, estimados = brt_pred_model_samp_k_c)

# With shannon index as response
bias_samp_s <- bias(observados = responses_samp_s, estimados = brt_pred_samp_s)
bias_model_samp_s <- bias(observados = responses_samp_s, estimados = brt_pred_model_samp_s)
bias_model_samp_s_c <- bias(observados = responses_samp_s, estimados = brt_pred_model_samp_s_c)

# With abundance as response
bias_samp_a <- bias(observados = responses_samp_a, estimados = brt_pred_samp_a)
bias_model_samp_a <- bias(observados = responses_samp_a, estimados = brt_pred_model_samp_a)
bias_model_samp_a_c <- bias(observados = responses_samp_a, estimados = brt_pred_model_samp_a_c)

# With rel_abundance as response
bias_samp_ra <- bias(observados = responses_samp_ra, estimados = brt_pred_samp_ra)
bias_model_samp_ra <- bias(observados = responses_samp_ra, estimados = brt_pred_model_samp_ra)
bias_model_samp_ra_c <- bias(observados = responses_samp_ra, estimados = brt_pred_model_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
bias_sec_k <- bias(observados = responses_sec_k, estimados = brt_pred_sec_k)
bias_model_sec_k <- bias(observados = responses_sec_k, estimados = brt_pred_model_sec_k)
bias_model_sec_k_c <- bias(observados = responses_sec_k, estimados = brt_pred_model_sec_k_c)

# With shannon index as response
bias_sec_s <- bias(observados = responses_sec_s, estimados = brt_pred_sec_s)
bias_model_sec_s <- bias(observados = responses_sec_s, estimados = brt_pred_model_sec_s)
bias_model_sec_s_c <- bias(observados = responses_sec_s, estimados = brt_pred_model_sec_s_c)

# With abundance as response
bias_sec_a <- bias(observados = responses_sec_a, estimados = brt_pred_sec_a)
bias_model_sec_a <- bias(observados = responses_sec_a, estimados = brt_pred_model_sec_a)
bias_model_sec_a_c <- bias(observados = responses_sec_a, estimados = brt_pred_model_sec_a_c)

# With rel_abundance as response
bias_sec_ra <- bias(observados = responses_sec_ra, estimados = brt_pred_sec_ra)
bias_model_sec_ra <- bias(observados = responses_sec_ra,  estimados = brt_pred_model_sec_ra)
bias_model_sec_ra_c <- bias(observados = responses_sec_ra, estimados = brt_pred_model_sec_ra_c)
```

## Nash-Sutcliffe efficiency (NSE) 
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
nse_v_k <- NSE(sim = brt_pred_v_k, obs = responses_v_k)
nse_model_v_k <- NSE(sim = brt_pred_model_v_k, obs = responses_v_k)
nse_model_v_k_c <- NSE(sim = brt_pred_model_v_k_c, obs = responses_v_k)

# With shannon index as response
nse_v_s <- NSE(sim = brt_pred_v_s, obs = responses_v_s)
nse_model_v_s <- NSE(sim = brt_pred_model_v_s, obs = responses_v_s)
nse_model_v_s_c <- NSE(sim = brt_pred_model_v_s_c, obs = responses_v_s)

# With abundance as response
nse_v_a <- NSE(sim = brt_pred_v_a, obs = responses_v_a)
nse_model_v_a <- NSE(sim = brt_pred_model_v_a, obs = responses_v_a)
nse_model_v_a_c <- NSE(sim = brt_pred_model_v_a_c, obs = responses_v_a)

# With rel_abundance as response
nse_v_ra <- NSE(sim = brt_pred_v_ra, obs = responses_v_ra)
nse_model_v_ra <- NSE(sim = brt_pred_model_v_ra, obs = responses_v_ra)
nse_model_v_ra_c <- NSE(sim = brt_pred_model_v_ra_c, obs = responses_v_ra)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
nse_wd_k <- NSE(sim = brt_pred_wd_k, obs = responses_wd_k)
nse_model_wd_k <- NSE(sim = brt_pred_model_wd_k, obs = responses_wd_k)
nse_model_wd_k_c <- NSE(sim = brt_pred_model_wd_k_c, obs = responses_wd_k)

# With shannon index as response
nse_wd_s <- NSE(sim = brt_pred_wd_s, obs = responses_wd_s)
nse_model_wd_s <- NSE(sim = brt_pred_model_wd_s, obs = responses_wd_s)
nse_model_wd_s_c <- NSE(sim = brt_pred_model_wd_s_c, obs = responses_wd_s)

# With abundance as response
nse_wd_a <- NSE(sim = brt_pred_wd_a, obs = responses_wd_a)
nse_model_wd_a <- NSE(sim = brt_pred_model_wd_a, obs = responses_wd_a)
nse_model_wd_a_c <- NSE(sim = brt_pred_model_wd_a_c, obs = responses_wd_a)

# With rel_abundance as response
nse_wd_ra <- NSE(sim = brt_pred_wd_ra, obs = responses_wd_ra)
nse_model_wd_ra <- NSE(sim = brt_pred_model_wd_ra, obs = responses_wd_ra)
nse_model_wd_ra_c <- NSE(sim = brt_pred_model_wd_ra_c, obs = responses_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
nse_samp_k <- NSE(sim = brt_pred_samp_k, obs = responses_samp_k)
nse_model_samp_k <- NSE(sim = brt_pred_model_samp_k, obs = responses_samp_k)
nse_model_samp_k_c <- NSE(sim = brt_pred_model_samp_k_c, obs = responses_samp_k)

# With shannon index as response
nse_samp_s <- NSE(sim = brt_pred_samp_s, obs = responses_samp_s)
nse_model_samp_s <- NSE(sim = brt_pred_model_samp_s, obs = responses_samp_s)
nse_model_samp_s_c <- NSE(sim = brt_pred_model_samp_s_c, obs = responses_samp_s)

# With abundance as response
nse_samp_a <- NSE(sim = brt_pred_samp_a, obs = responses_samp_a)
nse_model_samp_a <- NSE(sim = brt_pred_model_samp_a, obs = responses_samp_a)
nse_model_samp_a_c <- NSE(sim = brt_pred_model_samp_a_c, obs = responses_samp_a)

# With rel_abundance as response
nse_samp_ra <- NSE(sim = brt_pred_samp_ra, obs = responses_samp_ra)
nse_model_samp_ra <- NSE(sim = brt_pred_model_samp_ra, obs = responses_samp_ra)
nse_model_samp_ra_c <- NSE(sim = brt_pred_model_samp_ra_c, obs = responses_samp_ra)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
nse_sec_k <- NSE(sim = brt_pred_sec_k, obs = responses_sec_k)
nse_model_sec_k <- NSE(sim = brt_pred_model_sec_k, obs = responses_sec_k)
nse_model_sec_k_c <- NSE(sim = brt_pred_model_sec_k_c, obs = responses_sec_k)

# With shannon index as response
nse_sec_s <- NSE(sim = brt_pred_sec_s, obs = responses_sec_s)
nse_model_sec_s <- NSE(sim = brt_pred_model_sec_s, obs = responses_sec_s)
nse_model_sec_s_c <- NSE(sim = brt_pred_model_sec_s_c, obs = responses_sec_s)

# With abundance as response
nse_sec_a <- NSE(sim = brt_pred_sec_a, obs = responses_sec_a)
nse_model_sec_a <- NSE(sim = brt_pred_model_sec_a, obs = responses_sec_a)
nse_model_sec_a_c <- NSE(sim = brt_pred_model_sec_a_c, obs = responses_sec_a)

# With rel_abundance as response
nse_sec_ra <- NSE(sim = brt_pred_sec_ra, obs = responses_sec_ra)
nse_model_sec_ra <- NSE(sim = brt_pred_model_sec_ra, obs = responses_sec_ra)
nse_model_sec_ra_c <- NSE(sim = brt_pred_model_sec_ra_c, obs = responses_sec_ra)
```

## Write Evaluation Results 
```{r}
# write evaluation metrics into df
metric_results <- data.frame(nse = c(nse_v_k, nse_model_v_k, nse_model_v_k_c, nse_v_s, nse_model_v_s, nse_model_v_s_c, nse_v_a, nse_model_v_a, nse_model_v_a_c, nse_v_ra, nse_model_v_ra, nse_model_v_ra_c, nse_wd_k, nse_model_wd_k, nse_model_wd_k_c, nse_wd_s, nse_model_wd_s, nse_model_wd_s_c, nse_wd_a, nse_model_wd_a, nse_model_wd_a_c, nse_wd_ra, nse_model_wd_ra, nse_model_wd_ra_c, nse_samp_k, nse_model_samp_k, nse_model_samp_k_c, nse_samp_s, nse_model_samp_s, nse_model_samp_s_c, nse_samp_a, nse_model_samp_a, nse_model_samp_a_c, nse_samp_ra, nse_model_samp_ra, nse_model_samp_ra_c, nse_sec_k, nse_model_sec_k, nse_model_sec_k_c, nse_sec_s, nse_model_sec_s, nse_model_sec_s_c, nse_sec_a, nse_model_sec_a, nse_model_sec_a_c, nse_sec_ra, nse_model_sec_ra, nse_model_sec_ra_c),

bias = c(bias_v_k, bias_model_v_k, bias_model_v_k_c, bias_v_s, bias_model_v_s, bias_model_v_s_c, bias_v_a, bias_model_v_a, bias_model_v_a_c, bias_v_ra, bias_model_v_ra, bias_model_v_ra_c, bias_wd_k, bias_model_wd_k, bias_model_wd_k_c, bias_wd_s, bias_model_wd_s, bias_model_wd_s_c, bias_wd_a, bias_model_wd_a, bias_model_wd_a_c, bias_wd_ra, bias_model_wd_ra, bias_model_wd_ra_c, bias_samp_k, bias_model_samp_k, bias_model_samp_k_c, bias_samp_s, bias_model_samp_s, bias_model_samp_s_c, bias_samp_a, bias_model_samp_a, bias_model_samp_a_c, bias_samp_ra, bias_model_samp_ra, bias_model_samp_ra_c, bias_sec_k, bias_model_sec_k, bias_model_sec_k_c, bias_sec_s, bias_model_sec_s, bias_model_sec_s_c, bias_sec_a, bias_model_sec_a, bias_model_sec_a_c, bias_sec_ra, bias_model_sec_ra, bias_model_sec_ra_c),

mae = c(mae_v_k, mae_model_v_k, mae_model_v_k_c, mae_v_s, mae_model_v_s, mae_model_v_s_c, mae_v_a, mae_model_v_a, mae_model_v_a_c, mae_v_ra, mae_model_v_ra, mae_model_v_ra_c, mae_wd_k, mae_model_wd_k, mae_model_wd_k_c, mae_wd_s, mae_model_wd_s, mae_model_wd_s_c, mae_wd_a, mae_model_wd_a, mae_model_wd_a_c, mae_wd_ra, mae_model_wd_ra, mae_model_wd_ra_c, mae_samp_k, mae_model_samp_k, mae_model_samp_k_c, mae_samp_s, mae_model_samp_s, mae_model_samp_s_c, mae_samp_a, mae_model_samp_a, mae_model_samp_a_c, mae_samp_ra, mae_model_samp_ra, mae_model_samp_ra_c, mae_sec_k, mae_model_sec_k, mae_model_sec_k_c, mae_sec_s, mae_model_sec_s, mae_model_sec_s_c, mae_sec_a, mae_model_sec_a, mae_model_sec_a_c, mae_sec_ra, mae_model_sec_ra, mae_model_sec_ra_c), 

rmse = c(rmse_v_k, rmse_model_v_k, rmse_model_v_k_c, rmse_v_s, rmse_model_v_s, rmse_model_v_s_c, rmse_v_a, rmse_model_v_a, rmse_model_v_a_c, rmse_v_ra, rmse_model_v_ra, rmse_model_v_ra_c, rmse_wd_k, rmse_model_wd_k, rmse_model_wd_k_c, rmse_wd_s, rmse_model_wd_s, rmse_model_wd_s_c, rmse_wd_a, rmse_model_wd_a, rmse_model_wd_a_c, rmse_wd_ra, rmse_model_wd_ra, rmse_model_wd_ra_c, rmse_samp_k, rmse_model_samp_k, rmse_model_samp_k_c, rmse_samp_s, rmse_model_samp_s, rmse_model_samp_s_c, rmse_samp_a, rmse_model_samp_a, rmse_model_samp_a_c, rmse_samp_ra, rmse_model_samp_ra, rmse_model_samp_ra_c, rmse_sec_k, rmse_model_sec_k, rmse_model_sec_k_c, rmse_sec_s, rmse_model_sec_s, rmse_model_sec_s_c, rmse_sec_a, rmse_model_sec_a, rmse_model_sec_a_c, rmse_sec_ra, rmse_model_sec_ra, rmse_model_sec_ra_c),

r2 = c(r2_v_k, r2_model_v_k, r2_model_v_k_c, r2_v_s, r2_model_v_s, r2_model_v_s_c, r2_v_a, r2_model_v_a, r2_model_v_a_c, r2_v_ra, r2_model_v_ra, r2_model_v_ra_c, r2_wd_k, r2_model_wd_k, r2_model_wd_k_c, r2_wd_s, r2_model_wd_s, r2_model_wd_s_c, r2_wd_a, r2_model_wd_a, r2_model_wd_a_c, r2_wd_ra,  r2_model_wd_ra, r2_model_wd_ra_c, r2_samp_k, r2_model_samp_k, r2_model_samp_k_c, r2_samp_s, r2_model_samp_s, r2_model_samp_s_c, r2_samp_a, r2_model_samp_a, r2_model_samp_a_c, r2_samp_ra, r2_model_samp_ra, r2_model_samp_ra_c, r2_sec_k, r2_model_sec_k, r2_model_sec_k_c, r2_sec_s, r2_model_sec_s, r2_model_sec_s_c, r2_sec_a, r2_model_sec_a, r2_model_sec_a_c, r2_sec_ra, r2_model_sec_ra, r2_model_sec_ra_c), 

index = c("k_index", "k_index", "k_index", "shannon", "shannon", "shannon", "abundance", "abundance", "abundance", "rel_abundance", "rel_abundance", "rel_abundance", "k_index", "k_index", "k_index", "shannon", "shannon", "shannon", "abundance", "abundance", "abundance", "rel_abundance", "rel_abundance", "rel_abundance", "k_index", "k_index", "k_index", "shannon", "shannon", "shannon", "abundance", "abundance", "abundance", "rel_abundance", "rel_abundance", "rel_abundance", "k_index", "k_index", "k_index", "shannon", "shannon", "shannon", "abundance", "abundance", "abundance", "rel_abundance", "rel_abundance", "rel_abundance"),

predictor = c("v", "v", "v", "v", "v", "v", "v", "v", "v", "v", "v", "v",
"v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", 
"samp", "samp", "samp", "samp", "samp", "samp", "samp", "samp", "samp", "samp", "samp", "samp",
"all", "all", "all", "all", "all", "all", "all", "all", "all", "all", "all", "all"),

model = c("autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord", "autotuner", "xgb", "xgb w/o coord"))

# write results into a .csv 
write.csv(metric_results, "Stat_Analysis/ml_evaluation_metrics_brt_add.csv", row.names = FALSE)
```
 
 
# Extract 
## Predict to maps ML models - here RF
```{r}
# read rasters containing wd and velocity 
GL1_ezg <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg.grd")
GL1_q <- stack("Pre_Processing/rasters_stacked/GL1_3_28.grd")

GL2_ezg <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg.grd")
GL2_q <- stack("Pre_Processing/rasters_stacked/GL2_3_21.grd")

L2_ezg <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg.grd")
L2_q <- stack("Pre_Processing/rasters_stacked/L2_2_40.grd")

M1_ezg <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg.grd")
M1_q <- stack("Pre_Processing/rasters_stacked/M1_0_47.grd")

S1_ezg <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg.grd")
S1_q <- stack("Pre_Processing/rasters_stacked/S1_2_00.grd")

S2_ezg <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg.grd")
S2_q <- stack("Pre_Processing/rasters_stacked/S2_2_00.grd")

TH4_ezg <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg.grd")
TH4_q <- stack("Pre_Processing/rasters_stacked/TH4_11_45.grd")

VR3_ezg <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg.grd")
VR3_q <- stack("Pre_Processing/rasters_stacked/VR3_2_90.grd")

# rename rasters in stacks for extraction 
names(GL1_ezg) <- c("velocity", "wd_m")  
names(GL1_q) <- c("velocity", "wd_m") 

names(GL2_ezg) <- c("velocity", "wd_m") 
names(GL2_q) <- c("velocity", "wd_m")

names(L2_ezg) <- c("velocity", "wd_m")
names(L2_q) <- c("velocity", "wd_m")

names(M1_ezg) <- c("velocity", "wd_m") 
names(M1_q) <- c("velocity", "wd_m") 

names(S1_ezg) <- c("velocity", "wd_m")  
names(S1_q) <- c("velocity", "wd_m")  

names(S2_ezg) <- c("velocity", "wd_m") 
names(S2_q) <- c("velocity", "wd_m") 

names(TH4_ezg) <- c("velocity", "wd_m") 
names(TH4_q) <- c("velocity", "wd_m") 

names(VR3_ezg) <- c("velocity", "wd_m")
names(VR3_q) <- c("velocity", "wd_m") 

# assign coordinate system 
crs(GL1_ezg) <- "EPSG: 2056"
crs(GL1_q) <- "EPSG: 2056"

crs(GL2_ezg) <- "EPSG: 2056"
crs(GL2_q) <- "EPSG: 2056"

crs(L2_ezg) <- "EPSG: 2056"
crs(L2_q) <- "EPSG: 2056"

crs(M1_ezg) <- "EPSG: 2056"
crs(M1_q) <- "EPSG: 2056"

crs(S1_ezg) <- "EPSG: 2056"
crs(S1_q) <- "EPSG: 2056"

crs(S2_ezg) <- "EPSG: 2056"
crs(S2_q) <- "EPSG: 2056"

crs(TH4_ezg) <- "EPSG: 2056"
crs(TH4_q) <- "EPSG: 2056"

crs(VR3_ezg) <- "EPSG: 2056"
crs(VR3_q) <- "EPSG: 2056"
```

### Predict Models to Maps 
```{r}
# predict ML model to rasters with velocity and wd 
# GL1 - all indices with velocity and wd as predictors
GL1_ezg_wd_k <- terra::predict(GL1_ezg, model = autotuner_xbrt_wd_k, fun = predict, index = 2)
GL1_q_rf_wd_k <- terra::predict(GL1_q, model = autotuner_xbrt_wd_k, fun = predict, index = 2)

GL1_ezg_rf_wd_s <- terra::predict(GL1_ezg, model = autotuner_xbrt_wd_s, fun = predict, index = 2)
GL1_q_rf_wd_s <- terra::predict(GL1_q, model = autotuner_xbrt_wd_s, fun = predict, index = 2)

GL1_ezg_rf_wd_a <- terra::predict(GL1_ezg, model = autotuner_xbrt_wd_a, fun = predict, index = 2)
GL1_q_rf_wd_a <- terra::predict(GL1_q, model = autotuner_xbrt_wd_a, fun = predict, index = 2)

GL1_ezg_rf_wd_ra <- terra::predict(GL1_ezg, model = autotuner_xbrt_wd_ra, fun = predict, index = 2)
GL1_q_rf_wd_ra <- terra::predict(GL1_q, model = autotuner_xbrt_wd_ra, fun = predict, index = 2)

# GL1 - all indices with only velocity as predictor
GL1_ezg_rf_v_k <- terra::predict(GL1_ezg, model = autotuner_xbrt_v_k, fun = predict, index = "velocity")
GL1_q_rf_v_k <- terra::predict(GL1_q, model = autotuner_xbrt_v_k, fun = predict, index = "velocity")

GL1_ezg_rf_v_s <- terra::predict(GL1_ezg, model = autotuner_xbrt_v_s, fun = predict, index = "velocity")
GL1_q_rf_v_s <- terra::predict(GL1_q, model = autotuner_xbrt_v_s, fun = predict, index = "velocity")

GL1_ezg_rf_v_a <- terra::predict(GL1_ezg, model = autotuner_xbrt_v_a, fun = predict, index = "velocity")
GL1_q_rf_v_a <- terra::predict(GL1_q, model = autotuner_xbrt_v_a, fun = predict, index = "velocity")

GL1_ezg_rf_v_ra <- terra::predict(GL1_ezg, model = autotuner_xbrt_v_ra, fun = predict, index = "velocity")
GL1_q_rf_v_ra <- terra::predict(GL1_q, model = autotuner_xbrt_v_ra, fun = predict, index = "velocity")
```


```{r}
# read all raster results (one time flow velocity classes and one time for habitat suitability)
# prep extraction data 
## GL1
coord_GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1") |>
  dplyr::select(x, y) 

GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1")

## GL2
coord_GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2") |>
  dplyr::select(x, y) 

GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2")

## L2
coord_L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2") |>
  dplyr::select(x, y) 

L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2")

## M1
coord_M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1") |>
  dplyr::select(x, y) 

M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1")

## S1
coord_S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1") |>
  dplyr::select(x, y) 

S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1")

## S2
coord_S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2") |>
  dplyr::select(x, y) 

S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2")

## TH4
coord_TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4") |>
  dplyr::select(x, y) 

TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4")

## VR3
coord_VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3") |>
  dplyr::select(x, y) 

VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3")
```

### Extract Results
```{r}
# extract raster information for regression analysis later
# GL1 
# random forest 
regr_rf_data_GL1_wd_k <- extract(GL1_pred_rf_wd_k, coord_GL1) 
regr_rf_data_GL1_wd_s <- extract(GL1_pred_rf_wd_s, coord_GL1) 
regr_rf_data_GL1_wd_a <- extract(GL1_pred_rf_wd_a, coord_GL1) 

regr_rf_data_GL1_v_k <- extract(GL1_pred_rf_v_k, coord_GL1) 
regr_rf_data_GL1_v_s <- extract(GL1_pred_rf_v_s, coord_GL1) 
regr_rf_data_GL1_v_a <- extract(GL1_pred_rf_v_a, coord_GL1) 

# boosted regression tree
regr_brt_data_GL1_wd_k <- extract(GL1_pred_brt_wd_k, coord_GL1) 
regr_brt_data_GL1_wd_s <- extract(GL1_pred_brt_wd_s, coord_GL1) 
regr_brt_data_GL1_wd_a <- extract(GL1_pred_brt_wd_a, coord_GL1) 

regr_brt_data_GL1_v_k <- extract(GL1_pred_brt_v_k, coord_GL1) 
regr_brt_data_GL1_v_s <- extract(GL1_pred_brt_v_s, coord_GL1) 
regr_brt_data_GL1_v_a <- extract(GL1_pred_brt_v_a, coord_GL1)

# GL2
# random forest 
regr_rf_data_GL2_wd_k <- extract(GL2_pred_rf_wd_k, coord_GL2) 
regr_rf_data_GL2_wd_s <- extract(GL2_pred_rf_wd_s, coord_GL2) 
regr_rf_data_GL2_wd_a <- extract(GL2_pred_rf_wd_a, coord_GL2) 

regr_rf_data_GL2_v_k <- extract(GL2_pred_rf_v_k, coord_GL2) 
regr_rf_data_GL2_v_s <- extract(GL2_pred_rf_v_s, coord_GL2) 
regr_rf_data_GL2_v_a <- extract(GL2_pred_rf_v_a, coord_GL2)

# boosted regression tree
regr_brt_data_GL2_wd_k <- extract(GL2_pred_brt_wd_k, coord_GL2) 
regr_brt_data_GL2_wd_s <- extract(GL2_pred_brt_wd_s, coord_GL2) 
regr_brt_data_GL2_wd_a <- extract(GL2_pred_brt_wd_a, coord_GL2) 

regr_brt_data_GL2_v_k <- extract(GL2_pred_brt_v_k, coord_GL2) 
regr_brt_data_GL2_v_s <- extract(GL2_pred_brt_v_s, coord_GL2) 
regr_brt_data_GL2_v_a <- extract(GL2_pred_brt_v_a, coord_GL2)

# L2
# random forest 
regr_rf_data_L2_wd_k <- extract(L2_pred_rf_wd_k, coord_L2) 
regr_rf_data_L2_wd_s <- extract(L2_pred_rf_wd_s, coord_L2) 
regr_rf_data_L2_wd_a <- extract(L2_pred_rf_wd_a, coord_L2) 

regr_rf_data_L2_v_k <- extract(L2_pred_rf_v_k, coord_L2) 
regr_rf_data_L2_v_s <- extract(L2_pred_rf_v_s, coord_L2) 
regr_rf_data_L2_v_a <- extract(L2_pred_rf_v_a, coord_L2)

# boosted regression tree
regr_brt_data_L2_wd_k <- extract(L2_pred_brt_wd_k, coord_L2) 
regr_brt_data_L2_wd_s <- extract(L2_pred_brt_wd_s, coord_L2) 
regr_brt_data_L2_wd_a <- extract(L2_pred_brt_wd_a, coord_L2) 

regr_brt_data_L2_v_k <- extract(L2_pred_brt_v_k, coord_L2) 
regr_brt_data_L2_v_s <- extract(L2_pred_brt_v_s, coord_L2) 
regr_brt_data_L2_v_a <- extract(L2_pred_brt_v_a, coord_L2)

# M1
# random forest 
regr_rf_data_M1_wd_k <- extract(M1_pred_rf_wd_k, coord_M1) 
regr_rf_data_M1_wd_s <- extract(M1_pred_rf_wd_s, coord_M1) 
regr_rf_data_M1_wd_a <- extract(M1_pred_rf_wd_a, coord_M1) 

regr_rf_data_M1_v_k <- extract(M1_pred_rf_v_k, coord_M1) 
regr_rf_data_M1_v_s <- extract(M1_pred_rf_v_s, coord_M1) 
regr_rf_data_M1_v_a <- extract(M1_pred_rf_v_a, coord_M1)

# boosted regression tree
regr_brt_data_M1_wd_k <- extract(M1_pred_brt_wd_k, coord_M1) 
regr_brt_data_M1_wd_s <- extract(M1_pred_brt_wd_s, coord_M1) 
regr_brt_data_M1_wd_a <- extract(M1_pred_brt_wd_a, coord_M1) 

regr_brt_data_M1_v_k <- extract(M1_pred_brt_v_k, coord_M1) 
regr_brt_data_M1_v_s <- extract(M1_pred_brt_v_s, coord_M1) 
regr_brt_data_M1_v_a <- extract(M1_pred_brt_v_a, coord_M1)

# S1
# random forest 
regr_rf_data_S1_wd_k <- extract(S1_pred_rf_wd_k, coord_S1) 
regr_rf_data_S1_wd_s <- extract(S1_pred_rf_wd_s, coord_S1) 
regr_rf_data_S1_wd_a <- extract(S1_pred_rf_wd_a, coord_S1) 

regr_rf_data_S1_v_k <- extract(S1_pred_rf_v_k, coord_S1) 
regr_rf_data_S1_v_s <- extract(S1_pred_rf_v_s, coord_S1) 
regr_rf_data_S1_v_a <- extract(S1_pred_rf_v_a, coord_S1)

# boosted regression tree
regr_brt_data_S1_wd_k <- extract(S1_pred_brt_wd_k, coord_S1) 
regr_brt_data_S1_wd_s <- extract(S1_pred_brt_wd_s, coord_S1) 
regr_brt_data_S1_wd_a <- extract(S1_pred_brt_wd_a, coord_S1) 

regr_brt_data_S1_v_k <- extract(S1_pred_brt_v_k, coord_S1) 
regr_brt_data_S1_v_s <- extract(S1_pred_brt_v_s, coord_S1) 
regr_brt_data_S1_v_a <- extract(S1_pred_brt_v_a, coord_S1)

# S2
# random forest 
regr_rf_data_S2_wd_k <- extract(S2_pred_rf_wd_k, coord_S2) 
regr_rf_data_S2_wd_s <- extract(S2_pred_rf_wd_s, coord_S2) 
regr_rf_data_S2_wd_a <- extract(S2_pred_rf_wd_a, coord_S2) 

regr_rf_data_S2_v_k <- extract(S2_pred_rf_v_k, coord_S2) 
regr_rf_data_S2_v_s <- extract(S2_pred_rf_v_s, coord_S2) 
regr_rf_data_S2_v_a <- extract(S2_pred_rf_v_a, coord_S2)

# boosted regression tree
regr_brt_data_S2_wd_k <- extract(S2_pred_brt_wd_k, coord_S2) 
regr_brt_data_S2_wd_s <- extract(S2_pred_brt_wd_s, coord_S2) 
regr_brt_data_S2_wd_a <- extract(S2_pred_brt_wd_a, coord_S2) 

regr_brt_data_S2_v_k <- extract(S2_pred_brt_v_k, coord_S2) 
regr_brt_data_S2_v_s <- extract(S2_pred_brt_v_s, coord_S2) 
regr_brt_data_S2_v_a <- extract(S2_pred_brt_v_a, coord_S2)

# TH4
# random forest 
regr_rf_data_TH4_wd_k <- extract(TH4_pred_rf_wd_k, coord_TH4) 
regr_rf_data_TH4_wd_s <- extract(TH4_pred_rf_wd_s, coord_TH4) 
regr_rf_data_TH4_wd_a <- extract(TH4_pred_rf_wd_a, coord_TH4) 

regr_rf_data_TH4_v_k <- extract(TH4_pred_rf_v_k, coord_TH4) 
regr_rf_data_TH4_v_s <- extract(TH4_pred_rf_v_s, coord_TH4) 
regr_rf_data_TH4_v_a <- extract(TH4_pred_rf_v_a, coord_TH4)

# boosted regression tree
regr_brt_data_TH4_wd_k <- extract(TH4_pred_brt_wd_k, coord_TH4) 
regr_brt_data_TH4_wd_s <- extract(TH4_pred_brt_wd_s, coord_TH4) 
regr_brt_data_TH4_wd_a <- extract(TH4_pred_brt_wd_a, coord_TH4) 

regr_brt_data_TH4_v_k <- extract(TH4_pred_brt_v_k, coord_TH4) 
regr_brt_data_TH4_v_s <- extract(TH4_pred_brt_v_s, coord_TH4) 
regr_brt_data_TH4_v_a <- extract(TH4_pred_brt_v_a, coord_TH4)

# VR3
# random forest 
regr_rf_data_VR3_wd_k <- extract(VR3_pred_rf_wd_k, coord_VR3) 
regr_rf_data_VR3_wd_s <- extract(VR3_pred_rf_wd_s, coord_VR3) 
regr_rf_data_VR3_wd_a <- extract(VR3_pred_rf_wd_a, coord_VR3) 

regr_rf_data_VR3_v_k <- extract(VR3_pred_rf_v_k, coord_VR3) 
regr_rf_data_VR3_v_s <- extract(VR3_pred_rf_v_s, coord_VR3) 
regr_rf_data_VR3_v_a <- extract(VR3_pred_rf_v_a, coord_VR3)

# boosted regression tree
regr_brt_data_VR3_wd_k <- extract(VR3_pred_brt_wd_k, coord_VR3) 
regr_brt_data_VR3_wd_s <- extract(VR3_pred_brt_wd_s, coord_VR3) 
regr_brt_data_VR3_wd_a <- extract(VR3_pred_brt_wd_a, coord_VR3) 

regr_brt_data_VR3_v_k <- extract(VR3_pred_brt_v_k, coord_VR3) 
regr_brt_data_VR3_v_s <- extract(VR3_pred_brt_v_s, coord_VR3) 
regr_brt_data_VR3_v_a <- extract(VR3_pred_brt_v_a, coord_VR3)
```

### Combine into DF
```{r}
# combine all results into dataframe
# GL1
data_GL1 <- cbind(regr_rf_data_GL1_wd_k, regr_rf_data_GL1_wd_s, regr_rf_data_GL1_wd_a, regr_rf_data_GL1_v_k, regr_rf_data_GL1_v_s, regr_rf_data_GL1_v_a, regr_brt_data_GL1_wd_k, regr_brt_data_GL1_wd_s, regr_brt_data_GL1_wd_a, regr_brt_data_GL1_v_k, regr_brt_data_GL1_v_s, regr_brt_data_GL1_v_a, GL1) |>
  rename(rf_pred_k_index_2 = regr_rf_data_GL1_wd_k,
         rf_pred_shannon_2 = regr_rf_data_GL1_wd_s,
         rf_pred_abundance_2 = regr_rf_data_GL1_wd_a,
         rf_pred_k_index_v = regr_rf_data_GL1_v_k,
         rf_pred_shannon_v = regr_rf_data_GL1_v_s,
         rf_pred_abundance_v = regr_rf_data_GL1_v_a,
         brt_pred_k_index_2 = regr_brt_data_GL1_wd_k,
         brt_pred_shannon_2 = regr_brt_data_GL1_wd_s,
         brt_pred_abundance_2 = regr_brt_data_GL1_wd_a,
         brt_pred_k_index_v = regr_brt_data_GL1_v_k,
         brt_pred_shannon_v = regr_brt_data_GL1_v_s,
         brt_pred_abundance_v = regr_brt_data_GL1_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# GL2
data_GL2 <- cbind(regr_rf_data_GL2_wd_k, regr_rf_data_GL2_wd_s, regr_rf_data_GL2_wd_a, regr_rf_data_GL2_v_k, regr_rf_data_GL2_v_s, regr_rf_data_GL2_v_a, regr_brt_data_GL2_wd_k, regr_brt_data_GL2_wd_s, regr_brt_data_GL2_wd_a, regr_brt_data_GL2_v_k, regr_brt_data_GL2_v_s, regr_brt_data_GL2_v_a, GL2) |>
  rename(rf_pred_k_index_2 = regr_rf_data_GL2_wd_k,
         rf_pred_shannon_2 = regr_rf_data_GL2_wd_s,
         rf_pred_abundance_2 = regr_rf_data_GL2_wd_a,
         rf_pred_k_index_v = regr_rf_data_GL2_v_k,
         rf_pred_shannon_v = regr_rf_data_GL2_v_s,
         rf_pred_abundance_v = regr_rf_data_GL2_v_a,
         brt_pred_k_index_2 = regr_brt_data_GL2_wd_k,
         brt_pred_shannon_2 = regr_brt_data_GL2_wd_s,
         brt_pred_abundance_2 = regr_brt_data_GL2_wd_a,
         brt_pred_k_index_v = regr_brt_data_GL2_v_k,
         brt_pred_shannon_v = regr_brt_data_GL2_v_s,
         brt_pred_abundance_v = regr_brt_data_GL2_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# L2
data_L2 <- cbind(regr_rf_data_L2_wd_k, regr_rf_data_L2_wd_s, regr_rf_data_L2_wd_a, regr_rf_data_L2_v_k, regr_rf_data_L2_v_s, regr_rf_data_L2_v_a, regr_brt_data_L2_wd_k, regr_brt_data_L2_wd_s, regr_brt_data_L2_wd_a, regr_brt_data_L2_v_k, regr_brt_data_L2_v_s, regr_brt_data_L2_v_a, L2) |>
  rename(rf_pred_k_index_2 = regr_rf_data_L2_wd_k,
         rf_pred_shannon_2 = regr_rf_data_L2_wd_s,
         rf_pred_abundance_2 = regr_rf_data_L2_wd_a,
         rf_pred_k_index_v = regr_rf_data_L2_v_k,
         rf_pred_shannon_v = regr_rf_data_L2_v_s,
         rf_pred_abundance_v = regr_rf_data_L2_v_a,
         brt_pred_k_index_2 = regr_brt_data_L2_wd_k,
         brt_pred_shannon_2 = regr_brt_data_L2_wd_s,
         brt_pred_abundance_2 = regr_brt_data_L2_wd_a,
         brt_pred_k_index_v = regr_brt_data_L2_v_k,
         brt_pred_shannon_v = regr_brt_data_L2_v_s,
         brt_pred_abundance_v = regr_brt_data_L2_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# M1
data_M1 <- cbind(regr_rf_data_M1_wd_k, regr_rf_data_M1_wd_s, regr_rf_data_M1_wd_a, regr_rf_data_M1_v_k, regr_rf_data_M1_v_s, regr_rf_data_M1_v_a, regr_brt_data_M1_wd_k, regr_brt_data_M1_wd_s, regr_brt_data_M1_wd_a, regr_brt_data_M1_v_k, regr_brt_data_M1_v_s, regr_brt_data_M1_v_a, M1) |>
  rename(rf_pred_k_index_2 = regr_rf_data_M1_wd_k,
         rf_pred_shannon_2 = regr_rf_data_M1_wd_s,
         rf_pred_abundance_2 = regr_rf_data_M1_wd_a,
         rf_pred_k_index_v = regr_rf_data_M1_v_k,
         rf_pred_shannon_v = regr_rf_data_M1_v_s,
         rf_pred_abundance_v = regr_rf_data_M1_v_a,
         brt_pred_k_index_2 = regr_brt_data_M1_wd_k,
         brt_pred_shannon_2 = regr_brt_data_M1_wd_s,
         brt_pred_abundance_2 = regr_brt_data_M1_wd_a,
         brt_pred_k_index_v = regr_brt_data_M1_v_k,
         brt_pred_shannon_v = regr_brt_data_M1_v_s,
         brt_pred_abundance_v = regr_brt_data_M1_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# S1
data_S1 <- cbind(regr_rf_data_S1_wd_k, regr_rf_data_S1_wd_s, regr_rf_data_S1_wd_a, regr_rf_data_S1_v_k, regr_rf_data_S1_v_s, regr_rf_data_S1_v_a, regr_brt_data_S1_wd_k, regr_brt_data_S1_wd_s, regr_brt_data_S1_wd_a, regr_brt_data_S1_v_k, regr_brt_data_S1_v_s, regr_brt_data_S1_v_a, S1) |>
  rename(rf_pred_k_index_2 = regr_rf_data_S1_wd_k,
         rf_pred_shannon_2 = regr_rf_data_S1_wd_s,
         rf_pred_abundance_2 = regr_rf_data_S1_wd_a,
         rf_pred_k_index_v = regr_rf_data_S1_v_k,
         rf_pred_shannon_v = regr_rf_data_S1_v_s,
         rf_pred_abundance_v = regr_rf_data_S1_v_a,
         brt_pred_k_index_2 = regr_brt_data_S1_wd_k,
         brt_pred_shannon_2 = regr_brt_data_S1_wd_s,
         brt_pred_abundance_2 = regr_brt_data_S1_wd_a,
         brt_pred_k_index_v = regr_brt_data_S1_v_k,
         brt_pred_shannon_v = regr_brt_data_S1_v_s,
         brt_pred_abundance_v = regr_brt_data_S1_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# S2
data_S2 <- cbind(regr_rf_data_S2_wd_k, regr_rf_data_S2_wd_s, regr_rf_data_S2_wd_a, regr_rf_data_S2_v_k, regr_rf_data_S2_v_s, regr_rf_data_S2_v_a, regr_brt_data_S2_wd_k, regr_brt_data_S2_wd_s, regr_brt_data_S2_wd_a, regr_brt_data_S2_v_k, regr_brt_data_S2_v_s, regr_brt_data_S2_v_a, S2) |>
  rename(rf_pred_k_index_2 = regr_rf_data_S2_wd_k,
         rf_pred_shannon_2 = regr_rf_data_S2_wd_s,
         rf_pred_abundance_2 = regr_rf_data_S2_wd_a,
         rf_pred_k_index_v = regr_rf_data_S2_v_k,
         rf_pred_shannon_v = regr_rf_data_S2_v_s,
         rf_pred_abundance_v = regr_rf_data_S2_v_a,
         brt_pred_k_index_2 = regr_brt_data_S2_wd_k,
         brt_pred_shannon_2 = regr_brt_data_S2_wd_s,
         brt_pred_abundance_2 = regr_brt_data_S2_wd_a,
         brt_pred_k_index_v = regr_brt_data_S2_v_k,
         brt_pred_shannon_v = regr_brt_data_S2_v_s,
         brt_pred_abundance_v = regr_brt_data_S2_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# TH4
data_TH4 <- cbind(regr_rf_data_TH4_wd_k, regr_rf_data_TH4_wd_s, regr_rf_data_TH4_wd_a, regr_rf_data_TH4_v_k, regr_rf_data_TH4_v_s, regr_rf_data_TH4_v_a, regr_brt_data_TH4_wd_k, regr_brt_data_TH4_wd_s, regr_brt_data_TH4_wd_a, regr_brt_data_TH4_v_k, regr_brt_data_TH4_v_s, regr_brt_data_TH4_v_a, TH4) |>
  rename(rf_pred_k_index_2 = regr_rf_data_TH4_wd_k,
         rf_pred_shannon_2 = regr_rf_data_TH4_wd_s,
         rf_pred_abundance_2 = regr_rf_data_TH4_wd_a,
         rf_pred_k_index_v = regr_rf_data_TH4_v_k,
         rf_pred_shannon_v = regr_rf_data_TH4_v_s,
         rf_pred_abundance_v = regr_rf_data_TH4_v_a,
         brt_pred_k_index_2 = regr_brt_data_TH4_wd_k,
         brt_pred_shannon_2 = regr_brt_data_TH4_wd_s,
         brt_pred_abundance_2 = regr_brt_data_TH4_wd_a,
         brt_pred_k_index_v = regr_brt_data_TH4_v_k,
         brt_pred_shannon_v = regr_brt_data_TH4_v_s,
         brt_pred_abundance_v = regr_brt_data_TH4_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# VR3
data_VR3 <- cbind(regr_rf_data_VR3_wd_k, regr_rf_data_VR3_wd_s, regr_rf_data_VR3_wd_a, regr_rf_data_VR3_v_k, regr_rf_data_VR3_v_s, regr_rf_data_VR3_v_a, regr_brt_data_VR3_wd_k, regr_brt_data_VR3_wd_s, regr_brt_data_VR3_wd_a, regr_brt_data_VR3_v_k, regr_brt_data_VR3_v_s, regr_brt_data_VR3_v_a, VR3) |>
  rename(rf_pred_k_index_2 = regr_rf_data_VR3_wd_k,
         rf_pred_shannon_2 = regr_rf_data_VR3_wd_s,
         rf_pred_abundance_2 = regr_rf_data_VR3_wd_a,
         rf_pred_k_index_v = regr_rf_data_VR3_v_k,
         rf_pred_shannon_v = regr_rf_data_VR3_v_s,
         rf_pred_abundance_v = regr_rf_data_VR3_v_a,
         brt_pred_k_index_2 = regr_brt_data_VR3_wd_k,
         brt_pred_shannon_2 = regr_brt_data_VR3_wd_s,
         brt_pred_abundance_2 = regr_brt_data_VR3_wd_a,
         brt_pred_k_index_v = regr_brt_data_VR3_v_k,
         brt_pred_shannon_v = regr_brt_data_VR3_v_s,
         brt_pred_abundance_v = regr_brt_data_VR3_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance) 
```

### Results from Extraction 
```{r}
# bind results together 
# data_TH4 fehlt noch
regr_analysis <- rbind(data_GL1, data_GL2, data_L2, data_M1, data_S1, data_S2, data_TH4, data_VR3)

# export to .csv file
write.csv(regr_analysis, "Stat_Analysis/ml_regr_analysis.csv", row.names = FALSE)
```