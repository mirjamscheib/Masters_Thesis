---
title: "RF_model"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
pkgCheck("Fgmutils") # for bias calculation (bias() function)
pkgCheck("hydroGOF") # for NSE calculation with NSE() function 
```

# Load & prepare data 
```{r}
# Load data containing velocity as predictor variable 
data_v <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_v.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing velocity and wd as predictors 
data_wd <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_wd_v.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing all variables measured at each sampling locations and remove all other "chr" variables
data_sampling <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_sampling.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type) |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing all variables measured at each river section and remove all other "chr" variables
# Additionally, remove ox_sat columns, as they contain NA values
data_section <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_section.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type, -Hydropeaking_river_type, -Hydrokeaking_residual_flow_natural_near_natural, -date, -time, -time_before, -time_during, -time_after, -Category_Water_depth, -Number_Taxa, -EPT_Taxa, -ox_sat_after, -ox_sat_before, -ox_sat_during, -hydr_type_int, -hydr_int) |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# load data containing selected variables 
data_var <- read_delim("Pre_Processing/abiotic_mi_sampling/ml_selected_var.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach) |>
  mutate(ecomorph_class = if_else(ecomorph_class == "-", 0, as.numeric(ecomorph_class)))
```
    
```{r}
### TRAINING SETS ###
# w/o hydr. models "GL1", "GL2", "L2", "M1", "S1", "S2", "TH4", "VR3"
# training set containing velocity 
training_v <- data_v |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing velocity + wd
training_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location 
training_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location and overall river section 
training_section <- data_section |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all variables selected 
training_var <- data_var |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4",
         Reach_Untersuchungsstelle != "VR3")

### TEST SETS ###
# test set containing velocity 
test_v <- data_v |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing velocity + wd
test_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location 
test_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location and overall river section 
test_section <- data_section |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# training set containing all variables selected 
test_var <- data_var |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")
```

## Training Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response 
training_v_k <- training_v |>
  dplyr::select(k_index, velocity, x, y)

# With shannon index as response 
training_v_s <- training_v |>
  dplyr::select(shannon, velocity, x, y)

# With abundance as response 
training_v_a <- training_v |>
  dplyr::select(abundance, velocity, x, y)

# With relative abundance as response  
training_v_ra <- training_v |>
  dplyr::select(rel_abundance, velocity, x, y)

### PREDICTOR: VELOCITY AND WD ### ---------------------------------------------
# With k_index as response 
training_wd_k <- training_wd |>
  dplyr::select(k_index, velocity, wd_m, x, y)

# With shannon index as response 
training_wd_s <- training_wd |>
  dplyr::select(shannon, velocity, wd_m, x, y)

# With abundance index as response 
training_wd_a <- training_wd |>
  dplyr::select(abundance, velocity, wd_m, x, y)

# With relative abundance index as response 
training_wd_ra <- training_wd |>
  dplyr::select(rel_abundance, velocity, wd_m, x, y)

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response 
training_samp_k <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_samp_a <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_samp_ra <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response 
training_sec_k <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_sec_a <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_sec_ra <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------------
# With k_index as response 
training_var_k <- training_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_var_s <- training_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_var_a <- training_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_var_ra <- training_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Training Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response 
training_v_k_c <- training_v |>
  dplyr::select(k_index, velocity)

# With shannon index as response
training_v_s_c <- training_v |>
  dplyr::select(shannon, velocity)

# With abundance as response
training_v_a_c <- training_v |>
  dplyr::select(abundance, velocity)

# With rel_abundance as response
training_v_ra_c <- training_v |>
  dplyr::select(rel_abundance, velocity)

### PREDICTOR: VELOCITY AND WD ### ----------------------------------
# With k_index as response 
training_wd_k_c <- training_wd |>
  dplyr::select(k_index, velocity, wd_m)

# With shannon index as response 
training_wd_s_c <- training_wd |>
  dplyr::select(shannon, velocity, wd_m)

# With abundance as response 
training_wd_a_c <- training_wd |>
  dplyr::select(abundance, velocity, wd_m)

# With rel_abundance as response 
training_wd_ra_c <- training_wd |>
  dplyr::select(rel_abundance, velocity, wd_m)

### PREDICTOR: SAMPLING LOCATIONS ### --------------------------------
# With k_index as response 
training_samp_k_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s_c <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_samp_a_c <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_samp_ra_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### ----------------------------------
# With k_index as response 
training_sec_k_c <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s_c <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_sec_a_c <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_sec_ra_c <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------------
# With k_index as response 
training_var_k_c <- training_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With shannon index as response 
training_var_s_c <- training_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With abundance index as response 
training_var_a_c <- training_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With relative abundance index as response 
training_var_ra_c <- training_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle, -x, -y)
```

## Test Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ------------------------------------------
# With k_index as response
test_v_k <- test_v |>
  dplyr::select(k_index, velocity, x, y) 

# With shannon index as response
test_v_s <- test_v |>
  dplyr::select(shannon, velocity, x, y) 

# With abundance as response 
test_v_a <- test_v |>
  dplyr::select(abundance, velocity, x, y) 

# With relative abundance as response 
test_v_ra <- test_v |>
  dplyr::select(rel_abundance, velocity, x, y)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k <- test_wd |>
  dplyr::select(k_index, velocity, wd_m, x, y) 

# With shannon index as response 
test_wd_s <- test_wd |>
  dplyr::select(shannon, velocity, wd_m, x, y) 

# With abundance as response 
test_wd_a <- test_wd |>
  dplyr::select(abundance, velocity, wd_m, x, y)

# With relative abundance as response 
test_wd_ra <- test_wd |>
  dplyr::select(rel_abundance, velocity, wd_m, x, y)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response
test_samp_a <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_samp_ra <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
test_sec_s <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
test_sec_a <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_sec_ra <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------
# With k_index as response 
test_var_k <- test_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
test_var_s <- test_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
test_var_a <- test_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_var_ra <- test_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Test Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response
test_v_k_c <- test_v |>
  dplyr::select(k_index, velocity)

# With shannon index as response
test_v_s_c <- test_v |>
  dplyr::select(shannon, velocity) 

# With abundance as response
test_v_a_c <- test_v |>
  dplyr::select(abundance, velocity) 

# With rel_abundance as response
test_v_ra_c <- test_v |>
  dplyr::select(rel_abundance, velocity)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k_c <- test_wd |>
  dplyr::select(k_index, velocity, wd_m) 

# With shannon index as response 
test_wd_s_c <- test_wd |>
  dplyr::select(shannon, velocity, wd_m)

# With abundance as response 
test_wd_a_c <- test_wd |>
  dplyr::select(abundance, velocity, wd_m)

# With rel_abundance as response 
test_wd_ra_c <- test_wd |>
  dplyr::select(rel_abundance, velocity, wd_m)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s_c <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
test_samp_a_c <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
test_samp_ra_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k_c <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response
test_sec_s_c <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response
test_sec_a_c <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response
test_sec_ra_c <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------
# With k_index as response 
test_var_k_c <- test_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With shannon index as response 
test_var_s_c <- test_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With abundance index as response 
test_var_a_c <- test_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With relative abundance index as response 
test_var_ra_c <- test_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle, -x, -y)
```

# Random Forest 
## Hyperparameter tuning 
```{r}
# convert dataframes into spatial objects for mlr3 spatial hyperparameter tuning
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
data_v_k_sp <-  st_as_sf(training_v_k, coords =  c("x", "y"))
st_crs(data_v_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_v_s_sp <-  st_as_sf(training_v_s, coords =  c("x", "y"))
st_crs(data_v_s_sp) <- "EPSG: 2056"

# With abundance as response
data_v_a_sp <-  st_as_sf(training_v_a, coords =  c("x", "y"))
st_crs(data_v_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_v_ra_sp <-  st_as_sf(training_v_ra, coords =  c("x", "y"))
st_crs(data_v_ra_sp) <- "EPSG: 2056"

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# With k_index as response
data_wd_k_sp <-  st_as_sf(training_wd_k, coords =  c("x", "y"))
st_crs(data_wd_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_wd_s_sp <-  st_as_sf(training_wd_s, coords =  c("x", "y"))
st_crs(data_wd_s_sp) <- "EPSG: 2056"

# With abundance as response
data_wd_a_sp <-  st_as_sf(training_wd_a, coords =  c("x", "y"))
st_crs(data_wd_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_wd_ra_sp <-  st_as_sf(training_wd_ra, coords =  c("x", "y"))
st_crs(data_wd_ra_sp) <- "EPSG: 2056"

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response
data_samp_k_sp <-  st_as_sf(training_samp_k, coords =  c("x", "y"))
st_crs(data_samp_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_samp_s_sp <-  st_as_sf(training_samp_s, coords =  c("x", "y"))
st_crs(data_samp_s_sp) <- "EPSG: 2056"

# With abundance as response
data_samp_a_sp <-  st_as_sf(training_samp_a, coords =  c("x", "y"))
st_crs(data_samp_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_samp_ra_sp <-  st_as_sf(training_samp_ra, coords =  c("x", "y"))
st_crs(data_samp_ra_sp) <- "EPSG: 2056"

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response
data_sec_k_sp <-  st_as_sf(training_sec_k, coords =  c("x", "y"))
st_crs(data_sec_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_sec_s_sp <-  st_as_sf(training_sec_s, coords =  c("x", "y"))
st_crs(data_sec_s_sp) <- "EPSG: 2056"

# With abundance as response
data_sec_a_sp <-  st_as_sf(training_sec_a, coords =  c("x", "y"))
st_crs(data_sec_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_sec_ra_sp <-  st_as_sf(training_sec_ra, coords =  c("x", "y"))
st_crs(data_sec_ra_sp) <- "EPSG: 2056"

### PREDICTOR: SELECTED VARIABLES ### -------------------------------------
# With k_index as response
data_var_k_sp <-  st_as_sf(training_var_k, coords =  c("x", "y"))
st_crs(data_var_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_var_s_sp <-  st_as_sf(training_var_s, coords =  c("x", "y"))
st_crs(data_var_s_sp) <- "EPSG: 2056"

# With abundance as response
data_var_a_sp <-  st_as_sf(training_var_a, coords =  c("x", "y"))
st_crs(data_var_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_var_ra_sp <-  st_as_sf(training_var_ra, coords =  c("x", "y"))
st_crs(data_var_ra_sp) <- "EPSG: 2056"

```

### Create Task & Learner
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# TASK with k_index as response
task_rf_v_k <- mlr3spatiotempcv::as_task_regr_st(data_v_k_sp,
  id = "velocity_k_index", target = "k_index")

# TASK with shannon index as response
task_rf_v_s <- mlr3spatiotempcv::as_task_regr_st(data_v_s_sp,
  id = "velocity_shannon", target = "shannon")

# TASK with abundance as response
task_rf_v_a <- mlr3spatiotempcv::as_task_regr_st(data_v_a_sp,
  id = "velocity_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_v_ra <- mlr3spatiotempcv::as_task_regr_st(data_v_ra_sp,
  id = "velocity_rel_abundance", target = "rel_abundance")

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# TASK with k_index as response
task_rf_wd_k <- mlr3spatiotempcv::as_task_regr_st(data_wd_k_sp,
  id = "wd_k_index", target = "k_index")

# TASK with shannon index as response
task_rf_wd_s <- mlr3spatiotempcv::as_task_regr_st(data_wd_s_sp,
  id = "wd_shannon", target = "shannon")

# TASK with abundance as response
task_rf_wd_a <- mlr3spatiotempcv::as_task_regr_st(data_wd_a_sp,
  id = "wd_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_wd_ra <- mlr3spatiotempcv::as_task_regr_st(data_wd_ra_sp,
  id = "wd_rel_abundance", target = "rel_abundance")

### PREDICTORS: SAMPLING LOCATIONS ### -----------------------------------------
# TASK with k_index as response
task_rf_samp_k <- mlr3spatiotempcv::as_task_regr_st(data_samp_k_sp,
  id = "sampling_k_index", target = "k_index")

# TASK with shannon index as response
task_rf_samp_s <- mlr3spatiotempcv::as_task_regr_st(data_samp_s_sp,
  id = "sampling_shannon", target = "shannon")

# TASK with abundance as response
task_rf_samp_a <- mlr3spatiotempcv::as_task_regr_st(data_samp_a_sp,
  id = "sampling_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_samp_ra <- mlr3spatiotempcv::as_task_regr_st(data_samp_ra_sp,
  id = "sampling_rel_abundance", target = "rel_abundance")

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# TASK with k_index as response
task_rf_sec_k <- mlr3spatiotempcv::as_task_regr_st(data_sec_k_sp,
  id = "section_k_index", target = "k_index")

# TASK with shannon index as response 
task_rf_sec_s <- mlr3spatiotempcv::as_task_regr_st(data_sec_s_sp,
  id = "section_shannon", target = "shannon")

# TASK with abundance as response
task_rf_sec_a <- mlr3spatiotempcv::as_task_regr_st(data_sec_a_sp,
  id = "section_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_sec_ra <- mlr3spatiotempcv::as_task_regr_st(data_sec_ra_sp,
  id = "section_rel_abundance", target = "rel_abundance")

### PREDICTORS: SELECTED VARIABLES ### ---------------------------------------
# TASK with k_index as response
task_rf_var_k <- mlr3spatiotempcv::as_task_regr_st(data_var_k_sp,
  id = "var_k_index", target = "k_index")

# TASK with shannon index as response 
task_rf_var_s <- mlr3spatiotempcv::as_task_regr_st(data_var_s_sp,
  id = "var_shannon", target = "shannon")

# TASK with abundance as response
task_rf_var_a <- mlr3spatiotempcv::as_task_regr_st(data_var_a_sp,
  id = "var_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_var_ra <- mlr3spatiotempcv::as_task_regr_st(data_var_ra_sp,
  id = "var_rel_abundance", target = "rel_abundance")

### LEARNER ### ---------------------------------------------------------------
# learner for a random forest model from the ranger package
lrn_rf <- lrn("regr.ranger", predict_type = "response", importance = "permutation")
```

### Specify Search Space
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# specify the search space for k_index as response
search_space_v_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_v_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_v_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_v_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# specify the search space for k_index as response
search_space_wd_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_wd_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_wd_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_wd_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)


### PREDICTORS: SAMPLING LOCATIONS ### -----------------------------------------
# specify the search space for k_index as response
search_space_samp_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_samp_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_samp_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_samp_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# specify the search space for k_index as response
search_space_sec_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_sec_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_sec_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_sec_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# specify the search space for k_index as response
search_space_var_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_var_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_var_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_var_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_var_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_var_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_var_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_var_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)
```


### Specify Autotuner  
resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning # gibt kein richtig, falsch, je mehr folds desto mehr modelle müssen trainiert werden
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
autotuner_rf_v_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning  
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_v_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response 
autotuner_rf_v_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_v_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_v_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_v_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_v_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_v_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: VELOCITY AND WD ### --------------------------------------------
# With k_index as response
autotuner_rf_wd_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_wd_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_rf_wd_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_wd_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_wd_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_wd_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_wd_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_wd_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: SAMPLING LOCATION ### ------------------------------------------
# With k_index as response
autotuner_rf_samp_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_samp_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_rf_samp_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_samp_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_samp_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_samp_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_samp_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_samp_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# With k_index as response
autotuner_rf_sec_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_sec_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_rf_sec_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_sec_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_sec_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_sec_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_sec_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_sec_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
autotuner_rf_var_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_var_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_rf_var_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_var_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_var_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_var_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_var_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_var_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)
```

### Train Autotuner
```{r}
# set seed to obtain the same results with each run
set.seed(0412022)

### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
autotuner_rf_v_k$train(task_rf_v_k)

# With shannon index as response
autotuner_rf_v_s$train(task_rf_v_s)

# With abundance as response
autotuner_rf_v_a$train(task_rf_v_a)

# With rel_abundance as response 
autotuner_rf_v_ra$train(task_rf_v_ra)

### PREDICTORS: VELOCITY + WD ### ----------------------------------------------
# With k_index as response
autotuner_rf_wd_k$train(task_rf_wd_k)

# With shannon index as response
autotuner_rf_wd_s$train(task_rf_wd_s)

# With abundance as response
autotuner_rf_wd_a$train(task_rf_wd_a)

# With rel_abundance as response
autotuner_rf_wd_ra$train(task_rf_wd_ra)

### PREDICTORS: SAMPLING LOCATION ### ------------------------------------------
# With k_index as response
autotuner_rf_samp_k$train(task_rf_samp_k)

# With shannon index as response 
autotuner_rf_samp_s$train(task_rf_samp_s)

# With abundance as response
autotuner_rf_samp_a$train(task_rf_samp_a)

# With rel_abundance as response
autotuner_rf_samp_ra$train(task_rf_samp_ra)

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# With k_index as response
autotuner_rf_sec_k$train(task_rf_sec_k)

# With shannon index as response 
autotuner_rf_sec_s$train(task_rf_sec_s)

# With abundance as response
autotuner_rf_sec_a$train(task_rf_sec_a)

# With rel_abundance as response
autotuner_rf_sec_ra$train(task_rf_sec_ra)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
autotuner_rf_var_k$train(task_rf_var_k)

# With shannon index as response 
autotuner_rf_var_s$train(task_rf_var_s)

# With abundance as response
autotuner_rf_var_a$train(task_rf_var_a)

# With rel_abundance as response
autotuner_rf_var_ra$train(task_rf_var_ra)
```

### Tuned Hyperparameters
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
autotuner_rf_v_k$tuning_result

# With shannon index as response
autotuner_rf_v_s$tuning_result

# With abundance as response
autotuner_rf_v_a$tuning_result

# With rel_abundance as response
autotuner_rf_v_ra$tuning_result

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
autotuner_rf_wd_k$tuning_result

# With shannon index as response
autotuner_rf_wd_s$tuning_result

# With abundance as response
autotuner_rf_wd_a$tuning_result

# With rel_abundance as response
autotuner_rf_wd_ra$tuning_result

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
autotuner_rf_samp_k$tuning_result

# With shannon index as response
autotuner_rf_samp_s$tuning_result

# With abundance as response
autotuner_rf_samp_a$tuning_result

# With rel_abundance as response
autotuner_rf_samp_ra$tuning_result

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
autotuner_rf_sec_k$tuning_result

# With shannon index as response
autotuner_rf_sec_s$tuning_result

# With abundance as response
autotuner_rf_sec_a$tuning_result

# With rel_abundance as response
autotuner_rf_sec_ra$tuning_result

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
autotuner_rf_var_k$tuning_result

# With shannon index as response
autotuner_rf_var_s$tuning_result

# With abundance as response
autotuner_rf_var_a$tuning_result

# With rel_abundance as response
autotuner_rf_var_ra$tuning_result
```

# Ranger Models 
## Ranger w/o coordinates 
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# With k_index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2145317             7                   
rf_model_v_k_c <- ranger(formula = k_index ~., data = training_v_k_c, mtry = 1, sample.fraction = 0.2145317, min.node.size = 7, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2834015            10                   
rf_model_v_s_c <- ranger(formula = shannon ~., data = training_v_s_c, mtry = 1, sample.fraction = 0.2834015, min.node.size = 10, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2879012             8                 
rf_model_v_a_c <- ranger(formula = abundance ~., data = training_v_a_c, mtry = 1, sample.fraction = 0.2879012, min.node.size = 8, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2798592            10                  
rf_model_v_ra_c <- ranger(formula = rel_abundance ~., data = training_v_ra_c, mtry = 1, sample.fraction = 0.2798592, min.node.size = 10, importance = "impurity")

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
#  mtry sample.fraction min.node.size 
#1:    2       0.2295754             9                 
rf_model_wd_k_c <- ranger(formula = k_index ~., data = training_wd_k_c, mtry = 2, sample.fraction = 0.2295754, min.node.size = 9, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2537032             9                   
rf_model_wd_s_c <- ranger(formula = shannon ~., data = training_wd_s_c, mtry = 1, sample.fraction = 0.2537032, min.node.size = 9, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    2       0.2353055             6                     
rf_model_wd_a_c <- ranger(formula = abundance ~., data = training_wd_a_c, mtry = 2, sample.fraction = 0.2353055, min.node.size = 6, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    2       0.2361047            10                   
rf_model_wd_ra_c <- ranger(formula = rel_abundance ~., data = training_wd_ra_c, mtry = 2, sample.fraction = 0.2361047, min.node.size = 10, importance = "impurity")

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2922811             1                 
rf_model_samp_k_c <- ranger(formula = k_index ~., data = training_samp_k_c, mtry = 1, sample.fraction = 0.2922811, min.node.size = 1, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2967033             5                   
rf_model_samp_s_c <- ranger(formula = shannon ~., data = training_samp_s_c, mtry = 1, sample.fraction = 0.2967033, min.node.size = 5, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.6010324             9                  
rf_model_samp_a_c <- ranger(formula = abundance ~., data = training_samp_a_c, mtry = 1, sample.fraction = 0.6010324, min.node.size = 9, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    2       0.6187799            10                    
rf_model_samp_ra_c <- ranger(formula = rel_abundance ~., data = training_samp_ra_c, mtry = 2, sample.fraction = 0.6187799, min.node.size = 10, importance = "impurity")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
#   mtry sample.fraction min.node.size 
#1:    2       0.8387539             2                 
rf_model_sec_k_c <- ranger(formula = k_index ~., data = training_sec_k_c, mtry = 2, sample.fraction = 0.8387539, min.node.size = 2, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.5632708             2                  
rf_model_sec_s_c <- ranger(formula = shannon ~., data = training_sec_s_c, mtry = 1, sample.fraction = 0.5632708, min.node.size = 2, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    2       0.5495946             3                    
rf_model_sec_a_c <- ranger(formula = abundance ~., data = training_sec_a_c, mtry = 2, sample.fraction = 0.5495946, min.node.size = 3, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    6        0.542884             7                   
rf_model_sec_ra_c <- ranger(formula = rel_abundance ~., data = training_sec_ra_c, mtry = 6, sample.fraction = 0.542884, min.node.size = 7, importance = "impurity")

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2612071             8                 
rf_model_var_k_c <- ranger(formula = k_index ~., data = training_var_k_c, mtry = 1, sample.fraction = 0.2612071, min.node.size = 8, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.7040984             9                  
rf_model_var_s_c <- ranger(formula = shannon ~., data = training_var_s_c, mtry = 1, sample.fraction = 0.7040984, min.node.size = 9, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.5287441             4                    
rf_model_var_a_c <- ranger(formula = abundance ~., data = training_var_a_c, mtry = 1, sample.fraction = 0.5287441, min.node.size = 4, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2030046             1                    
rf_model_var_ra_c <- ranger(formula = rel_abundance ~., data = training_var_ra_c, mtry = 1, sample.fraction = 0.2030046, min.node.size = 1, importance = "impurity")
```

# Model Evaluation 
## Variable Importance
```{r}
### VARIABLE IMPORTANCE FROM RANGER MODELS ### --------------------------------
### PREDICTOR: ONLY VELOCITY ### ----------------------------------------------
# w/o coordinates
vi_v_k_c <- importance(rf_model_v_k_c) 
vi_rel_v_k_c <- vi_v_k_c/sum(vi_v_k_c) 

vi_v_s_c <- importance(rf_model_v_s_c) 
vi_rel_v_s_c <- vi_v_s_c/sum(vi_v_s_c) 

vi_v_a_c <- importance(rf_model_v_a_c) 
vi_rel_v_a_c <- vi_v_a_c/sum(vi_v_a_c) 

vi_v_ra_c <- importance(rf_model_v_ra_c) 
vi_rel_v_ra_c <- vi_v_ra_c/sum(vi_v_ra_c) 


### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# w/o coordinates
vi_wd_k_c <- importance(rf_model_wd_k_c) 
vi_rel_wd_k_c <- vi_wd_k_c/sum(vi_wd_k_c) 

vi_wd_s_c <- importance(rf_model_wd_s_c) 
vi_rel_wd_s_c <- vi_wd_s_c/sum(vi_wd_s_c) 

vi_wd_a_c <- importance(rf_model_wd_a_c) 
vi_rel_wd_a_c <- vi_wd_a_c/sum(vi_wd_a_c) 

vi_wd_ra_c <- importance(rf_model_wd_ra_c) 
vi_rel_wd_ra_c <- vi_wd_ra_c/sum(vi_wd_ra_c) 

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# w/o coordinates
vi_samp_k_c <- importance(rf_model_samp_k_c) 
vi_rel_samp_k_c <- vi_samp_k_c/sum(vi_samp_k_c) 

vi_samp_s_c <- importance(rf_model_samp_s_c) 
vi_rel_samp_s_c <- vi_samp_s_c/sum(vi_samp_s_c) 

vi_samp_a_c <- importance(rf_model_samp_a_c) 
vi_rel_samp_a_c <- vi_samp_a_c/sum(vi_samp_a_c) 

vi_samp_ra_c <- importance(rf_model_samp_ra_c) 
vi_rel_samp_ra_c <- vi_samp_ra_c/sum(vi_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# w/o coordinates
vi_sec_k_c <- importance(rf_model_sec_k_c) 
vi_rel_sec_k_c <- vi_sec_k_c/sum(vi_sec_k_c) 

vi_sec_s_c <- importance(rf_model_sec_s_c) 
vi_rel_sec_s_c <- vi_sec_s_c/sum(vi_sec_s_c) 

vi_sec_a_c <- importance(rf_model_sec_a_c) 
vi_rel_sec_a_c <- vi_sec_a_c/sum(vi_sec_a_c) 

vi_sec_ra_c <- importance(rf_model_sec_ra_c)
vi_rel_sec_ra_c <- vi_sec_ra_c/sum(vi_sec_ra_c) 

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# w/o coordinates
vi_var_k_c <- importance(rf_model_var_k_c) 
vi_rel_var_k_c <- vi_var_k_c/sum(vi_var_k_c) 

vi_var_s_c <- importance(rf_model_var_s_c) 
vi_rel_var_s_c <- vi_var_s_c/sum(vi_var_s_c) 

vi_var_a_c <- importance(rf_model_var_a_c) 
vi_rel_var_a_c <- vi_var_a_c/sum(vi_var_a_c) 

vi_var_ra_c <- importance(rf_model_var_ra_c)
vi_rel_var_ra_c <- vi_var_ra_c/sum(vi_var_ra_c) 

# bind results together ------------------------------------------------------
vi_rf_model_v_c <- rbind(vi_v_k_c, vi_v_s_c, vi_v_a_c, vi_v_ra_c) |>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rel_rf_model_v_c <- rbind(vi_rel_v_k_c, vi_rel_v_s_c, vi_rel_v_a_c, vi_rel_v_ra_c) |>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rf_model_wd_c <- rbind(vi_wd_k_c, vi_wd_s_c, vi_wd_a_c, vi_wd_ra_c) |>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rel_rf_model_wd_c <- rbind(vi_rel_wd_k_c, vi_rel_wd_s_c, vi_rel_wd_a_c, vi_rel_wd_ra_c)|>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rf_model_samp_c <- rbind(vi_samp_k_c, vi_samp_s_c, vi_samp_a_c, vi_samp_ra_c)|>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rel_rf_model_samp_c <- rbind(vi_rel_samp_k_c, vi_rel_samp_s_c, vi_rel_samp_a_c, vi_rel_samp_ra_c)|>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rf_model_sec_c <- rbind(vi_sec_k_c, vi_sec_s_c, vi_sec_a_c, vi_sec_ra_c)|>
 as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rel_rf_model_sec_c <- rbind(vi_rel_sec_k_c, vi_rel_sec_s_c, vi_rel_sec_a_c, vi_rel_sec_ra_c)|>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rf_model_var_c <- rbind(vi_var_k_c, vi_var_s_c, vi_var_a_c, vi_var_ra_c)|>
 as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rel_rf_model_var_c <- rbind(vi_rel_var_k_c, vi_rel_var_s_c, vi_rel_var_a_c, vi_rel_var_ra_c)|>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

# write results into .csv ------------------------------------------------------
write.csv(vi_rf_model_v_c, "ML_model/var_imp/vi_rf_model_v_woc.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_v_c, "ML_model/var_imp/vi_rel_rf_model_v_woc.csv", row.names = FALSE)
write.csv(vi_rf_model_wd_c, "ML_model/var_imp/vi_rf_model_wd_woc.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_wd_c, "ML_model/var_imp/vi_rel_rf_model_wd_woc.csv", row.names = FALSE)
write.csv(vi_rf_model_samp_c, "ML_model/var_imp/vi_rf_model_samp_woc.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_samp_c, "ML_model/var_imp/vi_rel_rf_model_samp_woc.csv", row.names = FALSE)
write.csv(vi_rf_model_sec_c, "ML_model/var_imp/vi_rf_model_sec_woc.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_sec_c, "ML_model/var_imp/vi_rel_rf_model_sec_woc.csv", row.names = FALSE)
write.csv(vi_rf_model_var_c, "ML_model/var_imp/vi_rf_model_var_woc.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_var_c, "ML_model/var_imp/vi_rel_rf_model_var_woc.csv", row.names = FALSE)
```

## Partial dependence plots
### Data extraction & export
```{r}
### PREDICTOR: VELOCITY ### -------------------------------------------------
# With k_index as response --------------------------------------------------
### velocity
pdp_model_v_k_c <- pdp::partial(rf_model_v_k_c, pred.var = "velocity")|>
  mutate(predictors = "velocity_c",
         model = "velocity w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_k_c, "ML_Model/pdp_data/pdp_v_k_c_rf.csv", row.names = FALSE)

# With shannon index as response ----------------------------------------------
### velocity 
pdp_model_v_s_c <- pdp::partial(rf_model_v_s_c, pred.var = "velocity")|>
  mutate(predictors = "velocity_c",
         model = "velocity w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_v_s_c, "ML_Model/pdp_data/pdp_v_s_c_rf.csv", row.names = FALSE)

# With abundance as response --------------------------------------------------
### velocity 
pdp_model_v_a_c <- pdp::partial(rf_model_v_a_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "velocity w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_v_a_c, "ML_Model/pdp_data/pdp_v_a_c_rf.csv", row.names = FALSE)


# With rel_abundance as response ----------------------------------------------
### velocity 
pdp_model_v_ra_c <- pdp::partial(rf_model_v_ra_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "velocity w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_ra_c, "ML_Model/pdp_data/pdp_v_ra_c_rf.csv", row.names = FALSE)

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
pdp_model_v_wd_k_c <- pdp::partial(rf_model_wd_k_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "v + wd w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_wd_k_c, "ML_Model/pdp_data/pdp_v_wd_k_c_rf.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_k_c <- pdp::partial(rf_model_wd_k_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "v + wd w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_wd_k_c, "ML_Model/pdp_data/pdp_wd_k_c_rf.csv", row.names = FALSE)

# With shannon index as response ----------------------------------------------
### velocity 
pdp_model_v_wd_s_c <- pdp::partial(rf_model_wd_s_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "v + wd w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_v_wd_s_c, "ML_Model/pdp_data/pdp_v_wd_s_c_rf.csv", row.names = FALSE)

### wd_m
pdp_model_wd_s_c <- pdp::partial(rf_model_wd_s_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "v + wd w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_wd_s_c, "ML_Model/pdp_data/pdp_wd_s_c_rf.csv", row.names = FALSE)

# With abundance as response --------------------------------------------------
### velocity 
pdp_model_v_wd_a_c <- pdp::partial(rf_model_wd_a_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "v + wd w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_v_wd_a_c, "ML_Model/pdp_data/pdp_v_wd_a_c_rf.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_a_c <- pdp::partial(rf_model_wd_a_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "v + wd w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_wd_a_c, "ML_Model/pdp_data/pdp_wd_a_c_rf.csv", row.names = FALSE)

# With rel_abundance as response ---------------------------------------------
### velocity
pdp_model_v_wd_ra_c <- pdp::partial(rf_model_wd_ra_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "v + wd w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_wd_ra_c, "ML_Model/pdp_data/pdp_v_wd_ra_c_rf.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_ra_c <- pdp::partial(rf_model_wd_ra_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "v + wd w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_wd_ra_c, "ML_Model/pdp_data/pdp_wd_ra_c_rf.csv", row.names = FALSE)

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
pdp_model_v_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_samp_k_c, "ML_Model/pdp_data/pdp_v_samp_k_c_rf.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_wd_samp_k_c, "ML_Model/pdp_data/pdp_wd_samp_k_c_rf.csv", row.names = FALSE)

### z 
pdp_model_z_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_z_samp_k_c, "ML_Model/pdp_data/pdp_z_samp_k_c_rf.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_dist_samp_k_c, "ML_Model/pdp_data/pdp_dist_samp_k_c_rf.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cv_samp_k_c, "ML_Model/pdp_data/pdp_cv_samp_k_c_rf.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ac_samp_k_c, "ML_Model/pdp_data/pdp_ac_samp_k_c_rf.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_mc_samp_k_c, "ML_Model/pdp_data/pdp_mc_samp_k_c_rf.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cc_samp_k_c, "ML_Model/pdp_data/pdp_cc_samp_k_c_rf.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_clog_3_samp_k_c, "ML_Model/pdp_data/pdp_clog_3_samp_k_c_rf.csv", row.names = FALSE)

### clog_6 
pdp_model_clog_6_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_clog_6_samp_k_c, "ML_Model/pdp_data/pdp_clog_6_samp_k_c_rf.csv", row.names = FALSE)

### sub_type
pdp_model_sub_samp_k_c <- pdp::partial(rf_model_samp_k_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_sub_samp_k_c, "ML_Model/pdp_data/pdp_sub_samp_k_c_rf.csv", row.names = FALSE)

# With shannon index as response ----------------------------------------------
### velocity 
pdp_model_v_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_v_samp_s_c, "ML_Model/pdp_data/pdp_v_samp_s_c_rf.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_wd_samp_s_c, "ML_Model/pdp_data/pdp_wd_samp_s_c_rf.csv", row.names = FALSE)

### z 
pdp_model_z_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_z_samp_s_c, "ML_Model/pdp_data/pdp_z_samp_s_c_rf.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_dist_samp_s_c, "ML_Model/pdp_data/pdp_dist_samp_s_c_rf.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/ coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cv_samp_s_c, "ML_Model/pdp_data/pdp_cv_samp_s_c_rf.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ac_samp_s_c, "ML_Model/pdp_data/pdp_ac_samp_s_c_rf.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_mc_samp_s_c, "ML_Model/pdp_data/pdp_mc_samp_s_c_rf.csv", row.names = FALSE)

### cpom_cover
pdp_model_cc_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cc_samp_s_c, "ML_Model/pdp_data/pdp_cc_samp_s_c_rf.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_3_samp_s_c, "ML_Model/pdp_data/pdp_clog_3_samp_s_c_rf.csv", row.names = FALSE)

### clog_6 
pdp_model_clog_6_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_6_samp_s_c, "ML_Model/pdp_data/pdp_clog_6_samp_s_c_rf.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_samp_s_c <- pdp::partial(rf_model_samp_s_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_sub_samp_s_c, "ML_Model/pdp_data/pdp_sub_samp_s_c_rf.csv", row.names = FALSE)

# With abundance as response --------------------------------------------------
### velocity 
pdp_model_v_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_v_samp_a_c, "ML_Model/pdp_data/pdp_v_samp_a_c_rf.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_wd_samp_a_c, "ML_Model/pdp_data/pdp_wd_samp_a_c_rf.csv", row.names = FALSE)

### z 
pdp_model_z_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_z_samp_a_c, "ML_Model/pdp_data/pdp_z_samp_a_c_rf.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_dist_samp_a_c, "ML_Model/pdp_data/pdp_dist_samp_a_c_rf.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cv_samp_a_c, "ML_Model/pdp_data/pdp_cv_samp_a_c_rf.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ac_samp_a_c, "ML_Model/pdp_data/pdp_ac_samp_a_c_rf.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_mc_samp_a_c, "ML_Model/pdp_data/pdp_mc_samp_a_c_rf.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cc_samp_a_c, "ML_Model/pdp_data/pdp_cc_samp_a_c_rf.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_clog_3_samp_a_c, "ML_Model/pdp_data/pdp_clog_3_samp_a_c_rf.csv", row.names = FALSE)

### clog_6 
pdp_model_clog_6_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_clog_6_samp_a_c, "ML_Model/pdp_data/pdp_clog_6_samp_a_c_rf.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_samp_a_c <- pdp::partial(rf_model_samp_a_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_sub_samp_a_c, "ML_Model/pdp_data/pdp_sub_samp_a_c_rf.csv", row.names = FALSE)

# With rel_abundance as response ----------------------------------------------
### velocity 
pdp_model_v_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_samp_ra_c, "ML_Model/pdp_data/pdp_v_samp_ra_c_rf.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_wd_samp_ra_c, "ML_Model/pdp_data/pdp_wd_samp_ra_c_rf.csv", row.names = FALSE)

### z 
pdp_model_z_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_z_samp_ra_c, "ML_Model/pdp_data/pdp_z_samp_ra_c_rf.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_dist_samp_ra_c, "ML_Model/pdp_data/pdp_dist_samp_ra_c_rf.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cv_samp_ra_c, "ML_Model/pdp_data/pdp_cv_samp_ra_c_rf.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ac_samp_ra_c, "ML_Model/pdp_data/pdp_ac_samp_ra_c_rf.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_mc_samp_ra_c, "ML_Model/pdp_data/pdp_mc_samp_ra_c_rf.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cc_samp_ra_c, "ML_Model/pdp_data/pdp_cc_samp_ra_c_rf.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_3_samp_ra_c, "ML_Model/pdp_data/pdp_clog_3_samp_ra_c_rf.csv", row.names = FALSE)

### clog_6 
pdp_model_clog_6_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_6_samp_ra_c, "ML_Model/pdp_data/pdp_clog_6_samp_ra_c_rf.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_samp_ra_c <- pdp::partial(rf_model_samp_ra_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_sub_samp_ra_c, "ML_Model/pdp_data/pdp_sub_samp_ra_c_rf.csv", row.names = FALSE)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
pdp_model_v_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_sec_k_c, "ML_Model/pdp_data/pdp_v_sec_k_c_rf.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_wd_sec_k_c, "ML_Model/pdp_data/pdp_wd_sec_k_c_rf.csv", row.names = FALSE)

### z 
pdp_model_z_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_z_sec_k_c, "ML_Model/pdp_data/pdp_z_sec_k_c_rf.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_dist_sec_k_c, "ML_Model/pdp_data/pdp_dist_sec_k_c_rf.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cv_sec_k_c, "ML_Model/pdp_data/pdp_cv_sec_k_c_rf.csv", row.names = FALSE)

### alg_cover
pdp_model_ac_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ac_sec_k_c, "ML_Model/pdp_data/pdp_ac_sec_k_c_rf.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_mc_sec_k_c, "ML_Model/pdp_data/pdp_mc_sec_k_c_rf.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cc_sec_k_c, "ML_Model/pdp_data/pdp_cc_sec_k_c_rf.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_clog_3_sec_k_c, "ML_Model/pdp_data/pdp_clog_3_sec_k_c_rf.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_clog_6_sec_k_c, "ML_Model/pdp_data/pdp_clog_6_sec_k_c_rf.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_sub_sec_k_c, "ML_Model/pdp_data/pdp_sub_sec_k_c_rf.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "pH_before") |>
  mutate(predictors = "pH_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_phb_sec_k_c, "ML_Model/pdp_data/pdp_phb_sec_k_c_rf.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "pH_during") |>
  mutate(predictors = "pH_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_phd_sec_k_c, "ML_Model/pdp_data/pdp_phd_sec_k_c_rf.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "pH_after") |>
  mutate(predictors = "pH_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_pha_sec_k_c, "ML_Model/pdp_data/pdp_pha_sec_k_c_rf.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "conduct_before") |>
  mutate(predictors = "conduct_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cb_sec_k_c, "ML_Model/pdp_data/pdp_cb_sec_k_c_rf.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "conduct_during") |>
  mutate(predictors = "conduct_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cd_sec_k_c, "ML_Model/pdp_data/pdp_cd_sec_k_c_rf.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "conduct_after") |>
  mutate(predictors = "conduct_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ca_sec_k_c, "ML_Model/pdp_data/pdp_ca_sec_k_c_rf.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "ox_before") |>
  mutate(predictors = "ox_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ob_sec_k_c, "ML_Model/pdp_data/pdp_ob_sec_k_c_rf.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "ox_during") |>
  mutate(predictors = "ox_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_od_sec_k_c, "ML_Model/pdp_data/pdp_od_sec_k_c_rf.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "ox_after") |>
  mutate(predictors = "ox_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_oa_sec_k_c, "ML_Model/pdp_data/pdp_oa_sec_k_c_rf.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "turb_before") |>
  mutate(predictors = "turb_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_tb_sec_k_c, "ML_Model/pdp_data/pdp_tb_sec_k_c_rf.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "turb_during") |>
  mutate(predictors = "turb_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_td_sec_k_c, "ML_Model/pdp_data/pdp_td_sec_k_c_rf.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "turb_after") |>
  mutate(predictors = "turb_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ta_sec_k_c, "ML_Model/pdp_data/pdp_ta_sec_k_c_rf.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "temp_before") |>
  mutate(predictors = "temp_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_teb_sec_k_c, "ML_Model/pdp_data/pdp_teb_sec_k_c_rf.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "temp_during") |>
  mutate(predictors = "temp_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ted_sec_k_c, "ML_Model/pdp_data/pdp_ted_sec_k_c_rf.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "temp_after") |>
  mutate(predictors = "temp_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_tea_sec_k_c, "ML_Model/pdp_data/pdp_tea_sec_k_c_rf.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "q_before") |>
  mutate(predictors = "q_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_qb_sec_k_c, "ML_Model/pdp_data/pdp_qb_sec_k_c_rf.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "q_during") |>
  mutate(predictors = "q_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_qd_sec_k_c, "ML_Model/pdp_data/pdp_qd_sec_k_c_rf.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "q_after") |>
  mutate(predictors = "q_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_qa_sec_k_c, "ML_Model/pdp_data/pdp_qa_sec_k_c_rf.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "gaug_before") |>
  mutate(predictors = "gaug_before",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_gb_sec_k_c, "ML_Model/pdp_data/pdp_gb_sec_k_c_rf.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "gaug_during") |>
  mutate(predictors = "gaug_during",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_gd_sec_k_c, "ML_Model/pdp_data/pdp_gd_sec_k_c_rf.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_k_c <- pdp::partial(rf_model_sec_k_c, pred.var = "gaug_after") |>
  mutate(predictors = "gaug_after",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ga_sec_k_c, "ML_Model/pdp_data/pdp_ga_sec_k_c_rf.csv", row.names = FALSE)

# With shannon index as response ----------------------------------------------
### velocity 
pdp_model_v_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_v_sec_s_c, "ML_Model/pdp_data/pdp_v_sec_s_c_rf.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_wd_sec_s_c, "ML_Model/pdp_data/pdp_wd_sec_s_c_rf.csv", row.names = FALSE)

### z 
pdp_model_z_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_z_sec_s_c, "ML_Model/pdp_data/pdp_z_sec_s_c_rf.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_dist_sec_s_c, "ML_Model/pdp_data/pdp_dist_sec_s_c_rf.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cv_sec_s_c, "ML_Model/pdp_data/pdp_cv_sec_s_c_rf.csv", row.names = FALSE)

### alg_cover
pdp_model_ac_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ac_sec_s_c, "ML_Model/pdp_data/pdp_ac_sec_s_c_rf.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_mc_sec_s_c, "ML_Model/pdp_data/pdp_mc_sec_s_c_rf.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cc_sec_s_c, "ML_Model/pdp_data/pdp_cc_sec_s_c_rf.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_3_sec_s_c, "ML_Model/pdp_data/pdp_clog_3_sec_s_c_rf.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_6_sec_s_c, "ML_Model/pdp_data/pdp_clog_6_sec_s_c_rf.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_sub_sec_s_c, "ML_Model/pdp_data/pdp_sub_sec_s_c_rf.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "pH_before") |>
  mutate(predictors = "pH_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_phb_sec_s_c, "ML_Model/pdp_data/pdp_phb_sec_s_c_rf.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "pH_during") |>
  mutate(predictors = "pH_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_phd_sec_s_c, "ML_Model/pdp_data/pdp_phd_sec_s_c_rf.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "pH_after") |>
  mutate(predictors = "pH_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_pha_sec_s_c, "ML_Model/pdp_data/pdp_pha_sec_s_c_rf.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "conduct_before") |>
  mutate(predictors = "conduct_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cb_sec_s_c, "ML_Model/pdp_data/pdp_cb_sec_s_c_rf.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "conduct_during") |>
  mutate(predictors = "conduct_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cd_sec_s_c, "ML_Model/pdp_data/pdp_cd_sec_s_c_rf.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "conduct_after") |>
  mutate(predictors = "conduct_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ca_sec_s_c, "ML_Model/pdp_data/pdp_ca_sec_s_c_rf.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "ox_before") |>
  mutate(predictors = "ox_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ob_sec_s_c, "ML_Model/pdp_data/pdp_ob_sec_s_c_rf.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "ox_during") |>
  mutate(predictors = "ox_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_od_sec_s_c, "ML_Model/pdp_data/pdp_od_sec_s_c_rf.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "ox_after") |>
  mutate(predictors = "ox_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_oa_sec_s_c, "ML_Model/pdp_data/pdp_oa_sec_s_c_rf.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "turb_before") |>
  mutate(predictors = "turb_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_tb_sec_s_c, "ML_Model/pdp_data/pdp_tb_sec_s_c_rf.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "turb_during") |>
  mutate(predictors = "turb_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_td_sec_s_c, "ML_Model/pdp_data/pdp_td_sec_s_c_rf.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "turb_after") |>
  mutate(predictors = "turb_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ta_sec_s_c, "ML_Model/pdp_data/pdp_ta_sec_s_c_rf.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "temp_before") |>
  mutate(predictors = "temp_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_teb_sec_s_c, "ML_Model/pdp_data/pdp_teb_sec_s_c_rf.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "temp_during") |>
  mutate(predictors = "temp_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ted_sec_s_c, "ML_Model/pdp_data/pdp_ted_sec_s_c_rf.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "temp_after") |>
  mutate(predictors = "temp_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_tea_sec_s_c, "ML_Model/pdp_data/pdp_tea_sec_s_c_rf.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "q_before") |>
  mutate(predictors = "q_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_qb_sec_s_c, "ML_Model/pdp_data/pdp_qb_sec_s_c_rf.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "q_during") |>
  mutate(predictors = "q_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_qd_sec_s_c, "ML_Model/pdp_data/pdp_qd_sec_s_c_rf.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "q_after") |>
  mutate(predictors = "q_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_qa_sec_s_c, "ML_Model/pdp_data/pdp_qa_sec_s_c_rf.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "gaug_before") |>
  mutate(predictors = "gaug_before",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_gb_sec_s_c, "ML_Model/pdp_data/pdp_gb_sec_s_c_rf.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "gaug_during") |>
  mutate(predictors = "gaug_during",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_gd_sec_s_c, "ML_Model/pdp_data/pdp_gd_sec_s_c_rf.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_s_c <- pdp::partial(rf_model_sec_s_c, pred.var = "gaug_after") |>
  mutate(predictors = "gaug_after",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ga_sec_s_c, "ML_Model/pdp_data/pdp_ga_sec_s_c_rf.csv", row.names = FALSE)

# With abundance as response --------------------------------------------------
### velocity 
pdp_model_v_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_v_sec_a_c, "ML_Model/pdp_data/pdp_v_sec_a_c_rf.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_wd_sec_a_c, "ML_Model/pdp_data/pdp_wd_sec_a_c_rf.csv", row.names = FALSE)

### z 
pdp_model_z_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_z_sec_a_c, "ML_Model/pdp_data/pdp_z_sec_a_c_rf.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_dist_sec_a_c, "ML_Model/pdp_data/pdp_dist_sec_a_c_rf.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cv_sec_a_c, "ML_Model/pdp_data/pdp_cv_sec_a_c_rf.csv", row.names = FALSE)

### alg_cover
pdp_model_ac_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ac_sec_a_c, "ML_Model/pdp_data/pdp_ac_sec_a_c_rf.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_mc_sec_a_c, "ML_Model/pdp_data/pdp_mc_sec_a_c_rf.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cc_sec_a_c, "ML_Model/pdp_data/pdp_cc_sec_a_c_rf.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_clog_3_sec_a_c, "ML_Model/pdp_data/pdp_clog_3_sec_a_c_rf.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_clog_6_sec_a_c, "ML_Model/pdp_data/pdp_clog_6_sec_a_c_rf.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_sub_sec_a_c, "ML_Model/pdp_data/pdp_sub_sec_a_c_rf.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "pH_before") |>
  mutate(predictors = "pH_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_phb_sec_a_c, "ML_Model/pdp_data/pdp_phb_sec_a_c_rf.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "pH_during") |>
  mutate(predictors = "pH_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_phd_sec_a_c, "ML_Model/pdp_data/pdp_phd_sec_a_c_rf.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "pH_after") |>
  mutate(predictors = "pH_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_pha_sec_a_c, "ML_Model/pdp_data/pdp_pha_sec_a_c_rf.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "conduct_before") |>
  mutate(predictors = "conduct_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cb_sec_a_c, "ML_Model/pdp_data/pdp_cb_sec_a_c_rf.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "conduct_during") |>
  mutate(predictors = "conduct_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cd_sec_a_c, "ML_Model/pdp_data/pdp_cd_sec_a_c_rf.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "conduct_after") |>
  mutate(predictors = "conduct_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ca_sec_a_c, "ML_Model/pdp_data/pdp_ca_sec_a_c_rf.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "ox_before") |>
  mutate(predictors = "ox_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ob_sec_a_c, "ML_Model/pdp_data/pdp_ob_sec_a_c_rf.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "ox_during") |>
  mutate(predictors = "ox_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_od_sec_a_c, "ML_Model/pdp_data/pdp_od_sec_a_c_rf.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "ox_after") |>
  mutate(predictors = "ox_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_oa_sec_a_c, "ML_Model/pdp_data/pdp_oa_sec_a_c_rf.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "turb_before") |>
  mutate(predictors = "turb_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_tb_sec_a_c, "ML_Model/pdp_data/pdp_tb_sec_a_c_rf.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "turb_during") |>
  mutate(predictors = "turb_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_td_sec_a_c, "ML_Model/pdp_data/pdp_td_sec_a_c_rf.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "turb_after") |>
  mutate(predictors = "turb_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ta_sec_a_c, "ML_Model/pdp_data/pdp_ta_sec_a_c_rf.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "temp_before") |>
  mutate(predictors = "temp_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_teb_sec_a_c, "ML_Model/pdp_data/pdp_teb_sec_a_c_rf.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "temp_during") |>
  mutate(predictors = "temp_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ted_sec_a_c, "ML_Model/pdp_data/pdp_ted_sec_a_c_rf.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "temp_after") |>
  mutate(predictors = "temp_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_tea_sec_a_c, "ML_Model/pdp_data/pdp_tea_sec_a_c_rf.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "q_before") |>
  mutate(predictors = "q_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_qb_sec_a_c, "ML_Model/pdp_data/pdp_qb_sec_a_c_rf.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "q_during") |>
  mutate(predictors = "q_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_qd_sec_a_c, "ML_Model/pdp_data/pdp_qd_sec_a_c_rf.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "q_after") |>
  mutate(predictors = "q_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_qa_sec_a_c, "ML_Model/pdp_data/pdp_qa_sec_a_c_rf.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "gaug_before") |>
  mutate(predictors = "gaug_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_gb_sec_a_c, "ML_Model/pdp_data/pdp_gb_sec_a_c_rf.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "gaug_during") |>
  mutate(predictors = "gaug_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_gd_sec_a_c, "ML_Model/pdp_data/pdp_gd_sec_a_c_rf.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_a_c <- pdp::partial(rf_model_sec_a_c, pred.var = "gaug_after") |>
  mutate(predictors = "gaug_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ga_sec_a_c, "ML_Model/pdp_data/pdp_ga_sec_a_c_rf.csv", row.names = FALSE)

# With relative abundance as response -----------------------------------------
### velocity 
pdp_model_v_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_sec_ra_c, "ML_Model/pdp_data/pdp_v_sec_ra_c_rf.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_wd_sec_ra_c, "ML_Model/pdp_data/pdp_wd_sec_ra_c_rf.csv", row.names = FALSE)

### z 
pdp_model_z_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "z") |>
  mutate(predictors = "z",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_z_sec_ra_c, "ML_Model/pdp_data/pdp_z_sec_ra_c_rf.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "dist_w") |>
  mutate(predictors = "dist_w",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_dist_sec_ra_c, "ML_Model/pdp_data/pdp_dist_sec_ra_c_rf.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "cat_velocity") |>
  mutate(predictors = "cat_velocity",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cv_sec_ra_c, "ML_Model/pdp_data/pdp_cv_sec_ra_c_rf.csv", row.names = FALSE)

### alg_cover
pdp_model_ac_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "alg_cover") |>
  mutate(predictors = "alg_cover",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ac_sec_ra_c, "ML_Model/pdp_data/pdp_ac_sec_ra_c_rf.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "moos_cover") |>
  mutate(predictors = "moos_cover",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_mc_sec_ra_c, "ML_Model/pdp_data/pdp_mc_sec_ra_c_rf.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "cpom_cover") |>
  mutate(predictors = "cpom_cover",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cc_sec_ra_c, "ML_Model/pdp_data/pdp_cc_sec_ra_c_rf.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "clog_3_class_int") |>
  mutate(predictors = "clog_3_class",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_3_sec_ra_c, "ML_Model/pdp_data/pdp_clog_3_sec_ra_c_rf.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "clog_6_class_int") |>
  mutate(predictors = "clog_6_class",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_6_sec_ra_c, "ML_Model/pdp_data/pdp_clog_6_sec_ra_c_rf.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "sub_type_int") |>
  mutate(predictors = "sub_type",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_sub_sec_ra_c, "ML_Model/pdp_data/pdp_sub_sec_ra_c_rf.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "pH_before") |>
  mutate(predictors = "pH_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_phb_sec_ra_c, "ML_Model/pdp_data/pdp_phb_sec_ra_c_rf.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "pH_during") |>
  mutate(predictors = "pH_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_phd_sec_ra_c, "ML_Model/pdp_data/pdp_phd_sec_ra_c_rf.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "pH_after") |>
  mutate(predictors = "pH_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_pha_sec_ra_c, "ML_Model/pdp_data/pdp_pha_sec_ra_c_rf.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "conduct_before") |>
  mutate(predictors = "conduct_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cb_sec_ra_c, "ML_Model/pdp_data/pdp_cb_sec_ra_c_rf.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "conduct_during") |>
  mutate(predictors = "conduct_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cd_sec_ra_c, "ML_Model/pdp_data/pdp_cd_sec_ra_c_rf.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "conduct_after") |>
  mutate(predictors = "conduct_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ca_sec_ra_c, "ML_Model/pdp_data/pdp_ca_sec_ra_c_rf.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "ox_before") |>
  mutate(predictors = "ox_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ob_sec_ra_c, "ML_Model/pdp_data/pdp_ob_sec_ra_c_rf.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "ox_during") |>
  mutate(predictors = "ox_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_od_sec_ra_c, "ML_Model/pdp_data/pdp_od_sec_ra_c_rf.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "ox_after") |>
  mutate(predictors = "ox_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_oa_sec_ra_c, "ML_Model/pdp_data/pdp_oa_sec_ra_c_rf.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "turb_before") |>
  mutate(predictors = "turb_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_tb_sec_ra_c, "ML_Model/pdp_data/pdp_tb_sec_ra_c_rf.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "turb_during") |>
  mutate(predictors = "turb_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_td_sec_ra_c, "ML_Model/pdp_data/pdp_td_sec_ra_c_rf.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "turb_after") |>
  mutate(predictors = "turb_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ta_sec_ra_c, "ML_Model/pdp_data/pdp_ta_sec_ra_c_rf.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "temp_before") |>
  mutate(predictors = "temp_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_teb_sec_ra_c, "ML_Model/pdp_data/pdp_teb_sec_ra_c_rf.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "temp_during") |>
  mutate(predictors = "temp_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ted_sec_ra_c, "ML_Model/pdp_data/pdp_ted_sec_ra_c_rf.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "temp_after") |>
  mutate(predictors = "temp_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_tea_sec_ra_c, "ML_Model/pdp_data/pdp_tea_sec_ra_c_rf.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "q_before") |>
  mutate(predictors = "q_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_qb_sec_ra_c, "ML_Model/pdp_data/pdp_qb_sec_ra_c_rf.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "q_during") |>
  mutate(predictors = "q_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_qd_sec_ra_c, "ML_Model/pdp_data/pdp_qd_sec_ra_c_rf.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "q_after") |>
  mutate(predictors = "q_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_qa_sec_ra_c, "ML_Model/pdp_data/pdp_qa_sec_ra_c_rf.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "gaug_before") |>
  mutate(predictors = "gaug_before",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_gb_sec_ra_c, "ML_Model/pdp_data/pdp_gb_sec_ra_c_rf.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "gaug_during") |>
  mutate(predictors = "gaug_during",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_gd_sec_ra_c, "ML_Model/pdp_data/pdp_gd_sec_ra_c_rf.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_ra_c <- pdp::partial(rf_model_sec_ra_c, pred.var = "gaug_after") |>
  mutate(predictors = "gaug_after",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ga_sec_ra_c, "ML_Model/pdp_data/pdp_ga_sec_ra_c_rf.csv", row.names = FALSE)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------------
# With k_index as response --------------------------------------------------
### velocity
pdp_model_v_var_k_c <- pdp::partial(rf_model_var_k_c, pred.var = "velocity")|>
  mutate(predictors = "velocity",
         model = "velocity w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_var_k_c, "ML_Model/pdp_data/pdp_v_var_k_c_rf.csv", row.names = FALSE)

### z
pdp_model_z_var_k_c <- pdp::partial(rf_model_var_k_c, pred.var = "z")|>
  mutate(predictors = "z",
         model = "z w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_z_var_k_c, "ML_Model/pdp_data/pdp_z_var_k_c_rf.csv", row.names = FALSE)

### wd_m
pdp_model_wd_var_k_c <- pdp::partial(rf_model_var_k_c, pred.var = "wd_m")|>
  mutate(predictors = "wd_m",
         model = "wd_m w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_wd_var_k_c, "ML_Model/pdp_data/pdp_wd_var_k_c_rf.csv", row.names = FALSE)

### nitrogen 
pdp_model_n_var_k_c <- pdp::partial(rf_model_var_k_c, pred.var = "mean_diff_nitrogen")|>
  mutate(predictors = "mean_diff_nitrogen",
         model = "mean_diff_nitrogen w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_n_var_k_c, "ML_Model/pdp_data/pdp_n_var_k_c_rf.csv", row.names = FALSE)

### phosphor 
pdp_model_p_var_k_c <- pdp::partial(rf_model_var_k_c, pred.var = "mean_diff_phosphor")|>
  mutate(predictors = "mean_diff_phosphor",
         model = "mean_diff_phosphor w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_p_var_k_c, "ML_Model/pdp_data/pdp_p_var_k_c_rf.csv", row.names = FALSE)

### ecomorph_class 
pdp_model_e_var_k_c <- pdp::partial(rf_model_var_k_c, pred.var = "ecomorph_class")|>
  mutate(predictors = "ecomorph_class",
         model = "ecomorph_class w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_e_var_k_c, "ML_Model/pdp_data/pdp_e_var_k_c_rf.csv", row.names = FALSE)

### biogeo_int 
pdp_model_b_var_k_c <- pdp::partial(rf_model_var_k_c, pred.var = "biogeo_int")|>
  mutate(predictors = "biogeo_int",
         model = "biogeo_int w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_b_var_k_c, "ML_Model/pdp_data/pdp_b_var_k_c_rf.csv", row.names = FALSE)
```

## Obs and Pred
```{r}
### PREDICTED VALUES ### ------------------------------------------------------
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
rf_pred_model_v_k_c <- predict(rf_model_v_k_c, data = test_v_k_c)$predictions

# With shannon index as response
rf_pred_model_v_s_c <- predict(rf_model_v_s_c, data = test_v_s_c)$predictions

# With abundance as response
rf_pred_model_v_a_c <- predict(rf_model_v_a_c, data = test_v_a_c)$predictions

# With rel_abundance as response
rf_pred_model_v_ra_c <- predict(rf_model_v_ra_c, data = test_v_ra_c)$predictions

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
rf_pred_model_wd_k_c <- predict(rf_model_wd_k_c, data = test_wd_k_c)$predictions

# With shannon index as response
rf_pred_model_wd_s_c <- predict(rf_model_wd_s_c, data = test_wd_s_c)$predictions

# With abundance as response
rf_pred_model_wd_a_c <- predict(rf_model_wd_a_c, data = test_wd_a_c)$predictions

# With rel_abundance as response
rf_pred_model_wd_ra_c <- predict(rf_model_wd_ra_c, data = test_wd_ra_c)$predictions

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
rf_pred_model_samp_k_c <- predict(rf_model_samp_k_c, data = test_samp_k_c)$predictions

# With shannon index as response
rf_pred_model_samp_s_c <- predict(rf_model_samp_s_c, data = test_samp_s_c)$predictions

# With abundance as response
rf_pred_model_samp_a_c <- predict(rf_model_samp_a_c, data = test_samp_a_c)$predictions

# With rel_abundance as response
rf_pred_model_samp_ra_c <- predict(rf_model_samp_ra_c, data = test_samp_ra_c)$predictions

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
rf_pred_model_sec_k_c <- predict(rf_model_sec_k_c, data = test_sec_k_c)$predictions

# With shannon index as response
rf_pred_model_sec_s_c <- predict(rf_model_sec_s_c, data = test_sec_s_c)$predictions

# With abundance as response
rf_pred_model_sec_a_c <- predict(rf_model_sec_a_c, data = test_sec_a_c)$predictions

# With rel_abundance as response
rf_pred_model_sec_ra_c <- predict(rf_model_sec_ra_c, data = test_sec_ra_c)$predictions

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
rf_pred_model_var_k_c <- predict(rf_model_var_k_c, data = test_var_k_c)$predictions

# With shannon index as response
rf_pred_model_var_s_c <- predict(rf_model_var_s_c, data = test_var_s_c)$predictions

# With abundance as response
rf_pred_model_var_a_c <- predict(rf_model_var_a_c, data = test_var_a_c)$predictions

# With rel_abundance as response
rf_pred_model_var_ra_c <- predict(rf_model_var_ra_c, data = test_var_ra_c)$predictions

### OBSERVED VALUES ### -------------------------------------------------------
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
responses_v_k <- test_v_k$k_index

# With shannon index as response
responses_v_s <- test_v_s$shannon

# With abundance as response
responses_v_a <- test_v_a$abundance

# With rel_abundance as response
responses_v_ra <- test_v_ra$rel_abundance

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
responses_wd_k <- test_wd_k$k_index

# With shannon index as response
responses_wd_s <- test_wd_s$shannon

# With abundance as response
responses_wd_a <- test_wd_a$abundance

# With rel_abundance as response
responses_wd_ra <- test_wd_ra$rel_abundance

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
responses_samp_k <- test_samp_k$k_index

# With shannon index as response
responses_samp_s <- test_samp_s$shannon

# With abundance as response
responses_samp_a <- test_samp_a$abundance

# With rel_abundance as response
responses_samp_ra <- test_samp_ra$rel_abundance

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
responses_sec_k <- test_sec_k$k_index

# With shannon index as response
responses_sec_s <- test_sec_s$shannon

# With abundance as response
responses_sec_a <- test_sec_a$abundance

# With rel_abundance as response
responses_sec_ra <- test_sec_ra$rel_abundance

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
responses_var_k <- test_var_k$k_index

# With shannon index as response
responses_var_s <- test_var_s$shannon

# With abundance as response
responses_var_a <- test_var_a$abundance

# With rel_abundance as response
responses_var_ra <- test_var_ra$rel_abundance
```

## Deviance explained (R2)
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# With k_index as response
r2_v_k <- R2(pred = rf_pred_model_v_k_c, obs = responses_v_k)

# With shannon index as response 
r2_v_s <- R2(pred = rf_pred_model_v_s_c, obs = responses_v_s)

# With abundance as response
r2_v_a <- R2(pred = rf_pred_model_v_a_c, obs = responses_v_a)

# With rel_abundance as response 
r2_v_ra <- R2(pred = rf_pred_model_v_ra_c, obs = responses_v_ra)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
r2_wd_k <- R2(pred = rf_pred_model_wd_k_c, obs = responses_wd_k)

# With shannon index as response
r2_wd_s <- R2(pred = rf_pred_model_wd_s_c, obs = responses_wd_s)

# With abundance as response
r2_wd_a <- R2(pred = rf_pred_model_wd_a_c, obs = responses_wd_a)

# With rel_abundance as response
r2_wd_ra <- R2(pred = rf_pred_model_wd_ra_c, obs = responses_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
r2_samp_k <- R2(pred = rf_pred_model_samp_k_c, obs = responses_samp_k)

# With shannon index as response
r2_samp_s <- R2(pred = rf_pred_model_samp_s_c, obs = responses_samp_s)

# With abundance as response
r2_samp_a <- R2(pred = rf_pred_model_samp_a_c, obs = responses_samp_a)

# With rel_abundance as response
r2_samp_ra <- R2(pred = rf_pred_model_samp_ra_c, obs = responses_samp_ra)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
r2_sec_k <- R2(pred = rf_pred_model_sec_k_c, obs = responses_sec_k)

# With shannon index as response
r2_sec_s <- R2(pred = rf_pred_model_sec_s_c, obs = responses_sec_s)

# With abundance as response
r2_sec_a <- R2(pred = rf_pred_model_sec_a_c, obs = responses_sec_a)

# With rel_abundance as response
r2_sec_ra <- R2(pred = rf_pred_model_sec_ra_c, obs = responses_sec_ra)

### PREDICTORS: SELECTED VARIABLES ### ---------------------------------------
# With k_index as response
r2_var_k <- R2(pred = rf_pred_model_var_k_c, obs = responses_var_k)

# With shannon index as response
r2_var_s <- R2(pred = rf_pred_model_var_s_c, obs = responses_var_s)

# With abundance as response
r2_var_a <- R2(pred = rf_pred_model_var_a_c, obs = responses_var_a)

# With rel_abundance as response
r2_var_ra <- R2(pred = rf_pred_model_var_ra_c, obs = responses_var_ra)
```

## RMSE & MAE
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
rmse_model_v_k_c <- Metrics::rmse(actual = responses_v_k, predicted = rf_pred_model_v_k_c)

mae_model_v_k_c <- Metrics::mae(actual = responses_v_k, predicted = rf_pred_model_v_k_c)

# With shannon index as response
rmse_model_v_s_c <- Metrics::rmse(actual = responses_v_s, predicted = rf_pred_model_v_s_c)

mae_model_v_s_c <- Metrics::mae(actual = responses_v_s, predicted = rf_pred_model_v_s_c)

# With abundance as response
rmse_model_v_a_c <- Metrics::rmse(actual = responses_v_a, predicted = rf_pred_model_v_a_c)

mae_model_v_a_c <- Metrics::mae(actual = responses_v_a, predicted = rf_pred_model_v_a_c)

# With rel_abundance as response
rmse_model_v_ra_c <- Metrics::rmse(actual = responses_v_ra, predicted = rf_pred_model_v_ra_c)

mae_model_v_ra_c <- Metrics::mae(actual = responses_v_ra, predicted = rf_pred_model_v_ra_c)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
rmse_model_wd_k_c <- Metrics::rmse(actual = responses_wd_k, predicted = rf_pred_model_wd_k_c)

mae_model_wd_k_c <- Metrics::mae(actual = responses_wd_k, predicted = rf_pred_model_wd_k_c)

# With shannon index as response
rmse_model_wd_s_c <- Metrics::rmse(actual = responses_wd_s, predicted = rf_pred_model_wd_s_c)

mae_model_wd_s_c <- Metrics::mae(actual = responses_wd_s, predicted = rf_pred_model_wd_s_c)

# With abundance as response
rmse_model_wd_a_c <- Metrics::rmse(actual = responses_wd_a, predicted = rf_pred_model_wd_a_c)

mae_model_wd_a_c <- Metrics::mae(actual = responses_wd_a, predicted = rf_pred_model_wd_a_c)

# With rel_abundance as response
rmse_model_wd_ra_c <- Metrics::rmse(actual = responses_wd_ra, predicted = rf_pred_model_wd_ra_c)

mae_model_wd_ra_c <- Metrics::mae(actual = responses_wd_ra, predicted = rf_pred_model_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
rmse_model_samp_k_c <- Metrics::rmse(actual = responses_samp_k, predicted = rf_pred_model_samp_k_c)

mae_model_samp_k_c <- Metrics::mae(actual = responses_samp_k, predicted = rf_pred_model_samp_k_c)

# With shannon index as response
rmse_model_samp_s_c <- Metrics::rmse(actual = responses_samp_s, predicted = rf_pred_model_samp_s_c)

mae_model_samp_s_c <- Metrics::mae(actual = responses_samp_s, predicted = rf_pred_model_samp_s_c)

# With abundance as response
rmse_model_samp_a_c <- Metrics::rmse(actual = responses_samp_a, predicted = rf_pred_model_samp_a_c)

mae_model_samp_a_c <- Metrics::mae(actual = responses_samp_a, predicted = rf_pred_model_samp_a_c)

# With rel_abundance as response
rmse_model_samp_ra_c <- Metrics::rmse(actual = responses_samp_ra, predicted = rf_pred_model_samp_ra_c)

mae_model_samp_ra_c <- Metrics::mae(actual = responses_samp_ra, predicted = rf_pred_model_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
rmse_model_sec_k_c <- Metrics::rmse(actual = responses_sec_k, predicted = rf_pred_model_sec_k_c)

mae_model_sec_k_c <- Metrics::mae(actual = responses_sec_k, predicted = rf_pred_model_sec_k_c)

# With shannon index as response
rmse_model_sec_s_c <- Metrics::rmse(actual = responses_sec_s, predicted = rf_pred_model_sec_s_c)

mae_model_sec_s_c <- Metrics::mae(actual = responses_sec_s, predicted = rf_pred_model_sec_s_c)

# With abundance as response
rmse_model_sec_a_c <- Metrics::rmse(actual = responses_sec_a, predicted = rf_pred_model_sec_a_c)

mae_model_sec_a_c <- Metrics::mae(actual = responses_sec_a, predicted = rf_pred_model_sec_a_c)

# With rel_abundance as response
rmse_model_sec_ra_c <- Metrics::rmse(actual = responses_sec_ra, predicted = rf_pred_model_sec_ra_c)

mae_model_sec_ra_c <- Metrics::mae(actual = responses_sec_ra, predicted = rf_pred_model_sec_ra_c)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
rmse_model_var_k_c <- Metrics::rmse(actual = responses_var_k, predicted = rf_pred_model_var_k_c)

mae_model_var_k_c <- Metrics::mae(actual = responses_var_k, predicted = rf_pred_model_var_k_c)

# With shannon index as response
rmse_model_var_s_c <- Metrics::rmse(actual = responses_var_s, predicted = rf_pred_model_var_s_c)

mae_model_var_s_c <- Metrics::mae(actual = responses_var_s, predicted = rf_pred_model_var_s_c)

# With abundance as response
rmse_model_var_a_c <- Metrics::rmse(actual = responses_var_a, predicted = rf_pred_model_var_a_c)

mae_model_var_a_c <- Metrics::mae(actual = responses_var_a, predicted = rf_pred_model_var_a_c)

# With rel_abundance as response
rmse_model_var_ra_c <- Metrics::rmse(actual = responses_var_ra, predicted = rf_pred_model_var_ra_c)

mae_model_var_ra_c <- Metrics::mae(actual = responses_var_ra, predicted = rf_pred_model_var_ra_c)
```

## Bias 
```{r}
### ONLY VELOCITY AS PREDICTOR ### --------------------------------------------
# With k_index as response
bias_model_v_k_c <- bias(observados = responses_v_k, estimados = rf_pred_model_v_k_c)

# With shannon index as response
bias_model_v_s_c <- bias(observados = responses_v_s, estimados = rf_pred_model_v_s_c)

# With abundance as response
bias_model_v_a_c <- bias(observados = responses_v_a, estimados = rf_pred_model_v_a_c)

# With rel_abundance as response
bias_model_v_ra_c <- bias(observados = responses_v_ra, estimados = rf_pred_model_v_ra_c)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
bias_model_wd_k_c <- bias(observados = responses_wd_k, estimados = rf_pred_model_wd_k_c)

# With shannon index as response
bias_model_wd_s_c <- bias(observados = responses_wd_s, estimados = rf_pred_model_wd_s_c)

# With abundance as response
bias_model_wd_a_c <- bias(observados = responses_wd_a, estimados = rf_pred_model_wd_a_c)

# With rel_abundance as response
bias_model_wd_ra_c <- bias(observados = responses_wd_ra, estimados = rf_pred_model_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
bias_model_samp_k_c <- bias(observados = responses_samp_k, estimados = rf_pred_model_samp_k_c)

# With shannon index as response
bias_model_samp_s_c <- bias(observados = responses_samp_s, estimados = rf_pred_model_samp_s_c)

# With abundance as response
bias_model_samp_a_c <- bias(observados = responses_samp_a, estimados = rf_pred_model_samp_a_c)

# With rel_abundance as response
bias_model_samp_ra_c <- bias(observados = responses_samp_ra, estimados = rf_pred_model_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
bias_model_sec_k_c <- bias(observados = responses_sec_k, estimados = rf_pred_model_sec_k_c)

# With shannon index as response
bias_model_sec_s_c <- bias(observados = responses_sec_s, estimados = rf_pred_model_sec_s_c)

# With abundance as response
bias_model_sec_a_c <- bias(observados = responses_sec_a, estimados = rf_pred_model_sec_a_c)

# With rel_abundance as response
bias_model_sec_ra_c <- bias(observados = responses_sec_ra, estimados = rf_pred_model_sec_ra_c)

### PREDICTORS: SELECTED VARIABLES ### ---------------------------------------
# With k_index as response
bias_model_var_k_c <- bias(observados = responses_var_k, estimados = rf_pred_model_var_k_c)

# With shannon index as response
bias_model_var_s_c <- bias(observados = responses_var_s, estimados = rf_pred_model_var_s_c)

# With abundance as response
bias_model_var_a_c <- bias(observados = responses_var_a, estimados = rf_pred_model_var_a_c)

# With rel_abundance as response
bias_model_var_ra_c <- bias(observados = responses_var_ra, estimados = rf_pred_model_var_ra_c)
```

## Nash-Sutcliffe efficiency (NSE) 
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
nse_model_v_k_c <- NSE(sim = rf_pred_model_v_k_c, obs = responses_v_k)

# With shannon index as response
nse_model_v_s_c <- NSE(sim = rf_pred_model_v_s_c, obs = responses_v_s)

# With abundance as response
nse_model_v_a_c <- NSE(sim = rf_pred_model_v_a_c, obs = responses_v_a)

# With rel_abundance as response
nse_model_v_ra_c <- NSE(sim = rf_pred_model_v_ra_c, obs = responses_v_ra)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
nse_model_wd_k_c <- NSE(sim = rf_pred_model_wd_k_c, obs = responses_wd_k)

# With shannon index as response
nse_model_wd_s_c <- NSE(sim = rf_pred_model_wd_s_c, obs = responses_wd_s)

# With abundance as response
nse_model_wd_a_c <- NSE(sim = rf_pred_model_wd_a_c, obs = responses_wd_a)

# With rel_abundance as response
nse_model_wd_ra_c <- NSE(sim = rf_pred_model_wd_ra_c, obs = responses_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
nse_model_samp_k_c <- NSE(sim = rf_pred_model_samp_k_c, obs = responses_samp_k)

# With shannon index as response
nse_model_samp_s_c <- NSE(sim = rf_pred_model_samp_s_c, obs = responses_samp_s)

# With abundance as response
nse_model_samp_a_c <- NSE(sim = rf_pred_model_samp_a_c, obs = responses_samp_a)

# With rel_abundance as response
nse_model_samp_ra_c <- NSE(sim = rf_pred_model_samp_ra_c, obs = responses_samp_ra)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
nse_model_sec_k_c <- NSE(sim = rf_pred_model_sec_k_c, obs = responses_sec_k)

# With shannon index as response
nse_model_sec_s_c <- NSE(sim = rf_pred_model_sec_s_c, obs = responses_sec_s)

# With abundance as response
nse_model_sec_a_c <- NSE(sim = rf_pred_model_sec_a_c, obs = responses_sec_a)

# With rel_abundance as response
nse_model_sec_ra_c <- NSE(sim = rf_pred_model_sec_ra_c, obs = responses_sec_ra)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
nse_model_var_k_c <- NSE(sim = rf_pred_model_var_k_c, obs = responses_var_k)

# With shannon index as response
nse_model_var_s_c <- NSE(sim = rf_pred_model_var_s_c, obs = responses_var_s)

# With abundance as response
nse_model_var_a_c <- NSE(sim = rf_pred_model_var_a_c, obs = responses_var_a)

# With rel_abundance as response
nse_model_var_ra_c <- NSE(sim = rf_pred_model_var_ra_c, obs = responses_var_ra)
```

## Regression Analysis
### Create DF
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# With k-index as a response 
pred_v_k <- as.data.frame(rf_pred_model_v_k_c)
resp_v_k <- as.data.frame(responses_v_k)
rf_v_k <- cbind(pred_v_k, responses_v_k) |>
  dplyr::rename(observed = responses_v_k,
         predicted = rf_pred_model_v_k_c)

# With shannon index as a response 
pred_v_s <- as.data.frame(rf_pred_model_v_s_c)
resp_v_s <- as.data.frame(responses_v_s)
rf_v_s <- cbind(pred_v_s, responses_v_s) |>
  dplyr::rename(observed = responses_v_s,
         predicted = rf_pred_model_v_s_c)

# With abundance as a response 
pred_v_a <- as.data.frame(rf_pred_model_v_a_c)
resp_v_a <- as.data.frame(responses_v_a)
rf_v_a <- cbind(pred_v_a, responses_v_a) |>
  dplyr::rename(observed = responses_v_a,
         predicted = rf_pred_model_v_a_c)

# With relative abundance as a response 
pred_v_ra <- as.data.frame(rf_pred_model_v_ra_c)
resp_v_ra <- as.data.frame(responses_v_ra)
rf_v_ra <- cbind(pred_v_ra, responses_v_ra) |>
  dplyr::rename(observed = responses_v_ra,
         predicted = rf_pred_model_v_ra_c)

### PREDICTOR: V + WD ### --------------------------------------------------
# With k-index as a response 
pred_wd_k <- as.data.frame(rf_pred_model_wd_k_c)
resp_wd_k <- as.data.frame(responses_wd_k)
rf_wd_k <- cbind(pred_wd_k, responses_wd_k) |>
  dplyr::rename(observed = responses_wd_k,
         predicted = rf_pred_model_wd_k_c)

# With shannon index as a response 
pred_wd_s <- as.data.frame(rf_pred_model_wd_s_c)
resp_wd_s <- as.data.frame(responses_wd_s)
rf_wd_s <- cbind(pred_wd_s, responses_wd_s) |>
  dplyr::rename(observed = responses_wd_s,
         predicted = rf_pred_model_wd_s_c)

# With abundance as a response 
pred_wd_a <- as.data.frame(rf_pred_model_wd_a_c)
resp_wd_a <- as.data.frame(responses_wd_a)
rf_wd_a <- cbind(pred_wd_a, responses_wd_a) |>
  dplyr::rename(observed = responses_wd_a,
         predicted = rf_pred_model_wd_a_c)

# With relative abundance as a response 
pred_wd_ra <- as.data.frame(rf_pred_model_wd_ra_c)
resp_wd_ra <- as.data.frame(responses_wd_ra)
rf_wd_ra <- cbind(pred_wd_ra, responses_wd_ra) |>
  dplyr::rename(observed = responses_wd_ra,
         predicted = rf_pred_model_wd_ra_c)

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# With k-index as a response 
pred_samp_k <- as.data.frame(rf_pred_model_samp_k_c)
resp_samp_k <- as.data.frame(responses_samp_k)
rf_samp_k <- cbind(pred_samp_k, responses_samp_k) |>
  dplyr::rename(observed = responses_samp_k,
         predicted = rf_pred_model_samp_k_c)

# With shannon index as a response 
pred_samp_s <- as.data.frame(rf_pred_model_samp_s_c)
resp_samp_s <- as.data.frame(responses_samp_s)
rf_samp_s <- cbind(pred_samp_s, responses_samp_s) |>
  dplyr::rename(observed = responses_samp_s,
         predicted = rf_pred_model_samp_s_c)

# With abundance as a response 
pred_samp_a <- as.data.frame(rf_pred_model_samp_a_c)
resp_samp_a <- as.data.frame(responses_samp_a)
rf_samp_a <- cbind(pred_samp_a, responses_samp_a) |>
  dplyr::rename(observed = responses_samp_a,
         predicted = rf_pred_model_samp_a_c)

# With relative abundance as a response 
pred_samp_ra <- as.data.frame(rf_pred_model_samp_ra_c)
resp_samp_ra <- as.data.frame(responses_samp_ra)
rf_samp_ra <- cbind(pred_samp_ra, responses_samp_ra) |>
  dplyr::rename(observed = responses_samp_ra,
         predicted = rf_pred_model_samp_ra_c)

### PREDICTOR: ALL PREDICTORS ### -------------------------------------------
# With k-index as a response 
pred_sec_k <- as.data.frame(rf_pred_model_sec_k_c)
resp_sec_k <- as.data.frame(responses_sec_k)
rf_sec_k <- cbind(pred_sec_k, responses_sec_k) |>
  dplyr::rename(observed = responses_sec_k,
         predicted = rf_pred_model_sec_k_c)

# With shannon index as a response 
pred_sec_s <- as.data.frame(rf_pred_model_sec_s_c)
resp_sec_s <- as.data.frame(responses_sec_s)
rf_sec_s <- cbind(pred_sec_s, responses_sec_s) |>
  dplyr::rename(observed = responses_sec_s,
         predicted = rf_pred_model_sec_s_c)

# With abundance as a response 
pred_sec_a <- as.data.frame(rf_pred_model_sec_a_c)
resp_sec_a <- as.data.frame(responses_sec_a)
rf_sec_a <- cbind(pred_sec_a, responses_sec_a) |>
  dplyr::rename(observed = responses_sec_a,
         predicted = rf_pred_model_sec_a_c)

# With relative abundance as a response 
pred_sec_ra <- as.data.frame(rf_pred_model_sec_ra_c)
resp_sec_ra <- as.data.frame(responses_sec_ra)
rf_sec_ra <- cbind(pred_sec_ra, responses_sec_ra) |>
  dplyr::rename(observed = responses_sec_ra,
         predicted = rf_pred_model_sec_ra_c)

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# With k-index as a response 
pred_var_k <- as.data.frame(rf_pred_model_var_k_c)
resp_var_k <- as.data.frame(responses_var_k)
rf_var_k <- cbind(pred_var_k, responses_var_k) |>
  dplyr::rename(observed = responses_var_k,
         predicted = rf_pred_model_var_k_c)

# With shannon index as a response 
pred_var_s <- as.data.frame(rf_pred_model_var_s_c)
resp_var_s <- as.data.frame(responses_var_s)
rf_var_s <- cbind(pred_var_s, responses_var_s) |>
  dplyr::rename(observed = responses_var_s,
         predicted = rf_pred_model_var_s_c)

# With abundance as a response 
pred_var_a <- as.data.frame(rf_pred_model_var_a_c)
resp_var_a <- as.data.frame(responses_var_a)
rf_var_a <- cbind(pred_var_a, responses_var_a) |>
  dplyr::rename(observed = responses_var_a,
         predicted = rf_pred_model_var_a_c)

# With relative abundance as a response 
pred_var_ra <- as.data.frame(rf_pred_model_var_ra_c)
resp_var_ra <- as.data.frame(responses_var_ra)
rf_var_ra <- cbind(pred_var_ra, responses_var_ra) |>
  dplyr::rename(observed = responses_var_ra,
         predicted = rf_pred_model_var_ra_c)
```

### LM Models
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_k <- lm(predicted ~ observed, data = rf_v_k)
sum_v_k <- summary(regr_v_k)
p_v_k <- sum_v_k$coefficients["observed", "Pr(>|t|)"]
s_v_k <- sum_v_k$coefficients["observed", "Estimate"]

# with shannon index as response
regr_v_s <- lm(predicted ~ observed, data = rf_v_s)
sum_v_s <- summary(regr_v_s)
p_v_s <- sum_v_s$coefficients["observed", "Pr(>|t|)"]
s_v_s <- sum_v_s$coefficients["observed", "Estimate"]

# with abundance as response
regr_v_a <- lm(predicted ~ observed, data = rf_v_a)
sum_v_a <- summary(regr_v_a)
p_v_a <- sum_v_a$coefficients["observed", "Pr(>|t|)"]
s_v_a <- sum_v_a$coefficients["observed", "Estimate"]

# with rel_abundance as response
regr_v_ra <- lm(predicted ~ observed, data = rf_v_ra)
sum_v_ra <- summary(regr_v_ra)
p_v_ra <- sum_v_ra$coefficients["observed", "Pr(>|t|)"]
s_v_ra <- sum_v_ra$coefficients["observed", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_k <- lm(predicted ~ observed, data = rf_wd_k)
sum_wd_k <- summary(regr_wd_k)
p_wd_k <- sum_wd_k$coefficients["observed", "Pr(>|t|)"]
s_wd_k <- sum_wd_k$coefficients["observed", "Estimate"]

# with shannon index as response
regr_wd_s <- lm(predicted ~ observed, data = rf_wd_s)
sum_wd_s <- summary(regr_wd_s)
p_wd_s <- sum_wd_s$coefficients["observed", "Pr(>|t|)"]
s_wd_s <- sum_wd_s$coefficients["observed", "Estimate"]

# with abundance as response
regr_wd_a <- lm(predicted ~ observed, data = rf_wd_a)
sum_wd_a <- summary(regr_wd_a)
p_wd_a <- sum_wd_a$coefficients["observed", "Pr(>|t|)"]
s_wd_a <- sum_wd_a$coefficients["observed", "Estimate"]

# with rel_abundance as response
regr_wd_ra <- lm(predicted ~ observed, data = rf_wd_ra)
sum_wd_ra <- summary(regr_wd_ra)
p_wd_ra <- sum_wd_ra$coefficients["observed", "Pr(>|t|)"]
s_wd_ra <- sum_wd_ra$coefficients["observed", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_k <- lm(predicted ~ observed, data = rf_samp_k)
sum_samp_k <- summary(regr_samp_k)
p_samp_k <- sum_samp_k$coefficients["observed", "Pr(>|t|)"]
s_samp_k <- sum_samp_k$coefficients["observed", "Estimate"]

# with shannon index as response
regr_samp_s <- lm(predicted ~ observed, data = rf_samp_s)
sum_samp_s <- summary(regr_samp_s)
p_samp_s <- sum_samp_s$coefficients["observed", "Pr(>|t|)"]
s_samp_s <- sum_samp_s$coefficients["observed", "Estimate"]

# with abundance as response
regr_samp_a <- lm(predicted ~ observed, data = rf_samp_a)
sum_samp_a <- summary(regr_samp_a)
p_samp_a <- sum_samp_a$coefficients["observed", "Pr(>|t|)"]
s_samp_a <- sum_samp_a$coefficients["observed", "Estimate"]

# with rel_abundance as response
regr_samp_ra <- lm(predicted ~ observed, data = rf_samp_ra)
sum_samp_ra <- summary(regr_samp_ra)
p_samp_ra <- sum_samp_ra$coefficients["observed", "Pr(>|t|)"]
s_samp_ra <- sum_samp_ra$coefficients["observed", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_k <- lm(predicted ~ observed, data = rf_sec_k)
sum_sec_k <- summary(regr_sec_k)
p_sec_k <- sum_sec_k$coefficients["observed", "Pr(>|t|)"]
s_sec_k <- sum_sec_k$coefficients["observed", "Estimate"]

# with shannon index as response
regr_sec_s <- lm(predicted ~ observed, data = rf_sec_s)
sum_sec_s <- summary(regr_sec_s)
p_sec_s <- sum_sec_s$coefficients["observed", "Pr(>|t|)"]
s_sec_s <- sum_sec_s$coefficients["observed", "Estimate"]

# with abundance as response
regr_sec_a <- lm(predicted ~ observed, data = rf_sec_a)
sum_sec_a <- summary(regr_sec_a)
p_sec_a <- sum_sec_a$coefficients["observed", "Pr(>|t|)"]
s_sec_a <- sum_sec_a$coefficients["observed", "Estimate"]

# with rel_abundance as response
regr_sec_ra <- lm(predicted ~ observed, data = rf_sec_ra)
sum_sec_ra <- summary(regr_sec_ra)
p_sec_ra <- sum_sec_ra$coefficients["observed", "Pr(>|t|)"]
s_sec_ra <- sum_sec_ra$coefficients["observed", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_k <- lm(predicted ~ observed, data = rf_var_k)
sum_var_k <- summary(regr_var_k)
p_var_k <- sum_var_k$coefficients["observed", "Pr(>|t|)"]
s_var_k <- sum_var_k$coefficients["observed", "Estimate"]

# with shannon index as response
regr_var_s <- lm(predicted ~ observed, data = rf_var_s)
sum_var_s <- summary(regr_var_s)
p_var_s <- sum_var_s$coefficients["observed", "Pr(>|t|)"]
s_var_s <- sum_var_s$coefficients["observed", "Estimate"]

# with abundance as response
regr_var_a <- lm(predicted ~ observed, data = rf_var_a)
sum_var_a <- summary(regr_var_a)
p_var_a <- sum_var_a$coefficients["observed", "Pr(>|t|)"]
s_var_a <- sum_var_a$coefficients["observed", "Estimate"]

# with rel_abundance as response
regr_var_ra <- lm(predicted ~ observed, data = rf_var_ra)
sum_var_ra <- summary(regr_var_ra)
p_var_ra <- sum_var_ra$coefficients["observed", "Pr(>|t|)"]
s_var_ra <- sum_var_ra$coefficients["observed", "Estimate"]
```


## Write Evaluation Results 
```{r}
# write evaluation metrics into df
metric_results <- data.frame(lm_p_value = c(p_v_k, p_v_s, p_v_a, p_v_ra,  
                                           p_wd_k, p_wd_s, p_wd_a,
                                           p_wd_ra, p_samp_k, p_samp_s, p_samp_a,
                                           p_samp_ra, p_sec_k, p_sec_s, p_sec_a,
                                           p_sec_ra, p_var_k, p_var_s, p_var_a,
                                           p_var_ra),
                          
                          lm_slope = c(s_v_k, s_v_s, s_v_a, s_v_ra,  
                                           s_wd_k, s_wd_s, s_wd_a,
                                           s_wd_ra, s_samp_k, s_samp_s, s_samp_a,
                                           s_samp_ra, s_sec_k, s_sec_s, s_sec_a,
                                           s_sec_ra, s_var_k, s_var_s, s_var_a,
                                           s_var_ra),
                          
                             nse = c(nse_model_v_k_c, nse_model_v_s_c, nse_model_v_a_c, nse_model_v_ra_c, nse_model_wd_k_c, nse_model_wd_s_c, nse_model_wd_a_c, nse_model_wd_ra_c, nse_model_samp_k_c, nse_model_samp_s_c, nse_model_samp_a_c, nse_model_samp_ra_c, nse_model_sec_k_c, nse_model_sec_s_c, nse_model_sec_a_c, nse_model_sec_ra_c, nse_model_var_k_c, nse_model_var_s_c, nse_model_var_a_c, nse_model_var_ra_c),

bias = c(bias_model_v_k_c, bias_model_v_s_c, bias_model_v_a_c, bias_model_v_ra_c, bias_model_wd_k_c,bias_model_wd_s_c, bias_model_wd_a_c, bias_model_wd_ra_c, bias_model_samp_k_c, bias_model_samp_s_c, bias_model_samp_a_c, bias_model_samp_ra_c, bias_model_sec_k_c, bias_model_sec_s_c, bias_model_sec_a_c, bias_model_sec_ra_c, bias_model_var_k_c, bias_model_var_s_c, bias_model_var_a_c, bias_model_var_ra_c),

mae = c(mae_model_v_k_c, mae_model_v_s_c, mae_model_v_a_c, mae_model_v_ra_c, mae_model_wd_k_c, mae_model_wd_s_c, mae_model_wd_a_c, mae_model_wd_ra_c, mae_model_samp_k_c, mae_model_samp_s_c, mae_model_samp_a_c, mae_model_samp_ra_c, mae_model_sec_k_c, mae_model_sec_s_c, mae_model_sec_a_c, mae_model_sec_ra_c, mae_model_var_k_c, mae_model_var_s_c, mae_model_var_a_c, mae_model_var_ra_c), 

rmse = c(rmse_model_v_k_c, rmse_model_v_s_c, rmse_model_v_a_c, rmse_model_v_ra_c, rmse_model_wd_k_c, rmse_model_wd_s_c, rmse_model_wd_a_c, rmse_model_wd_ra_c, rmse_model_samp_k_c, rmse_model_samp_s_c, rmse_model_samp_a_c, rmse_model_samp_ra_c, rmse_model_sec_k_c, rmse_model_sec_s_c, rmse_model_sec_a_c, rmse_model_sec_ra_c, rmse_model_var_k_c, rmse_model_var_s_c, rmse_model_var_a_c, rmse_model_var_ra_c),

r2 = c(r2_v_k, r2_v_s, r2_v_a, r2_v_ra, r2_wd_k, r2_wd_s, r2_wd_a, r2_wd_ra, r2_samp_k, r2_samp_s, r2_samp_a, r2_samp_ra, r2_sec_k, r2_sec_s, r2_sec_a, r2_sec_ra, r2_var_k, r2_var_s, r2_var_a, r2_var_ra), 

index = c("k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance",
          "k_index", "shannon", "abundance", "rel_abundance"),

predictor = c("v", "v", "v", "v", 
              "v + wd", "v + wd", "v + wd", "v + wd",  
              "samp", "samp", "samp", "samp", 
              "all", "all", "all", "all",
              "var", "var", "var", "var"),

model = c("rf", "rf", "rf", "rf", 
          "rf", "rf", "rf", "rf", 
          "rf", "rf", "rf", "rf",
          "rf", "rf", "rf", "rf",
          "rf", "rf", "rf", "rf"))

# write results into a .csv 
write.csv(metric_results, "Stat_Analysis/ml_evaluation_metrics_rf.csv", row.names = FALSE)
```
 
# Extract 
## Read rasters
```{r}
# read rasters containing wd and velocity 
GL1_ezg <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg.grd")
GL1_v_ezg <- stack("Pre_Processing/raster_files/GL1_v_2_56_ezg.tif")
GL1_ezg_var <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg_var.grd")

GL2_ezg <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg.grd")
GL2_v_ezg <- stack("Pre_Processing/raster_files/GL2_v_2_37_ezg.tif")
GL2_ezg_var <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg_var.grd")

L2_ezg <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg.grd")
L2_v_ezg <- stack("Pre_Processing/raster_files/L2_v_9_54_ezg.tif")
L2_ezg_var <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg_var.grd")


M1_ezg <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg.grd")
M1_v_ezg <- stack("Pre_Processing/raster_files/M1_v_1_50_ezg.tif")
M1_ezg_var <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg_var.grd")

S1_ezg <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg.grd")
S1_v_ezg <- stack("Pre_Processing/raster_files/S1_v_1_94_ezg.tif")
S1_ezg_var <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg_var.grd")

S2_ezg <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg.grd")
S2_v_ezg <- stack("Pre_Processing/raster_files/S2_v_1_93_ezg.tif")
S2_ezg_var <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg_var.grd")

TH4_ezg <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg.grd")
TH4_v_ezg <- stack("Pre_Processing/raster_files/TH4_v_35_12_ezg.tif")
TH4_ezg_var <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg_var.grd")

VR3_ezg <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg.grd")
VR3_v_ezg <- stack("Pre_Processing/raster_files/VR3_v_21_51_ezg.tif")
VR3_ezg_var <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg_var.grd")

# rename rasters in stacks for extraction 
names(GL1_ezg) <- c("velocity", "wd_m")  
names(GL1_v_ezg) <- c("velocity")
#names(GL1_q) <- c("velocity", "wd_m") 

names(GL2_ezg) <- c("velocity", "wd_m") 
names(GL2_v_ezg) <- c("velocity")
#names(GL2_q) <- c("velocity", "wd_m")

names(L2_ezg) <- c("velocity", "wd_m")
names(L2_v_ezg) <- c("velocity")
#names(L2_q) <- c("velocity", "wd_m")

names(M1_ezg) <- c("velocity", "wd_m") 
names(M1_v_ezg) <- c("velocity")
#names(M1_q) <- c("velocity", "wd_m") 

names(S1_ezg) <- c("velocity", "wd_m") 
names(S1_v_ezg) <- c("velocity")
#names(S1_q) <- c("velocity", "wd_m")  

names(S2_ezg) <- c("velocity", "wd_m")
names(S2_v_ezg) <- c("velocity")
#names(S2_q) <- c("velocity", "wd_m") 

names(TH4_ezg) <- c("velocity", "wd_m") 
names(TH4_v_ezg) <- c("velocity")
#names(TH4_q) <- c("velocity", "wd_m") 

names(VR3_ezg) <- c("velocity", "wd_m")
names(VR3_v_ezg) <- c("velocity")
#names(VR3_q) <- c("velocity", "wd_m") 

# assign coordinate system 
crs(GL1_ezg) <- "EPSG: 2056"
#crs(GL1_q) <- "EPSG: 2056"

crs(GL2_ezg) <- "EPSG: 2056"
#crs(GL2_q) <- "EPSG: 2056"

crs(L2_ezg) <- "EPSG: 2056"
#crs(L2_q) <- "EPSG: 2056"

crs(M1_ezg) <- "EPSG: 2056"
#crs(M1_q) <- "EPSG: 2056"

crs(S1_ezg) <- "EPSG: 2056"
#crs(S1_q) <- "EPSG: 2056"

crs(S2_ezg) <- "EPSG: 2056"
#crs(S2_q) <- "EPSG: 2056"

crs(TH4_ezg) <- "EPSG: 2056"
#crs(TH4_q) <- "EPSG: 2056"

crs(VR3_ezg) <- "EPSG: 2056"
#crs(VR3_q) <- "EPSG: 2056"
```

## Predict Models to Maps 
### GL1
```{r}
# predict ML model to rasters with velocity and wd 
# GL1 - predictors: v + wd ----------------------------------------------------
GL1_ezg_wd_k <- raster::predict(GL1_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_wd_s <- raster::predict(GL1_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_wd_a <- raster::predict(GL1_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_wd_ra <- raster::predict(GL1_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# GL1 - predictor: velocity ---------------------------------------------------
GL1_ezg_v_k <- raster::predict(GL1_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_v_s <- raster::predict(GL1_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_v_a <- raster::predict(GL1_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_v_ra <- raster::predict(GL1_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# GL1 - predictors: selected variables ----------------------------------------
GL1_ezg_var_k <- raster::predict(GL1_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_var_s <- raster::predict(GL1_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_var_a <- raster::predict(GL1_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_var_ra <- raster::predict(GL1_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### GL2
```{r}
# GL2 - predictors: v + wd ----------------------------------------------------
GL2_ezg_wd_k <- raster::predict(GL2_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_wd_s <- raster::predict(GL2_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_wd_a <- raster::predict(GL2_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_wd_ra <- raster::predict(GL2_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# GL2 - predictor: velocity ---------------------------------------------------
GL2_ezg_v_k <- raster::predict(GL2_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_v_s <- raster::predict(GL2_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_v_a <- raster::predict(GL2_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_v_ra <- raster::predict(GL2_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# GL2 - predictor: selected variables -------------------------------------------
GL2_ezg_var_k <- raster::predict(GL2_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_var_s <- raster::predict(GL2_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_var_a <- raster::predict(GL2_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_var_ra <- raster::predict(GL2_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### L2
```{r}
# L2 - predictors: v + wd -----------------------------------------------------
L2_ezg_wd_k <- raster::predict(L2_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_wd_s <- raster::predict(L2_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_wd_a <- raster::predict(L2_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_wd_ra <- raster::predict(L2_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# L2 - predictor: velocity ----------------------------------------------------
L2_ezg_v_k <- raster::predict(L2_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_v_s <- raster::predict(L2_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_v_a <- raster::predict(L2_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_v_ra <- raster::predict(L2_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# L2 - predictors: selected variables -----------------------------------------
L2_ezg_var_k <- raster::predict(L2_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_var_s <- raster::predict(L2_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_var_a <- raster::predict(L2_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_var_ra <- raster::predict(L2_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### M1
```{r}
# M1  - predictors: v + wd -----------------------------------------------------
M1_ezg_wd_k <- raster::predict(M1_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_wd_s <- raster::predict(M1_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_wd_a <- raster::predict(M1_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_wd_ra <- raster::predict(M1_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# M1  - predictor: velocity ---------------------------------------------------
M1_ezg_v_k <- raster::predict(M1_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_v_s <- raster::predict(M1_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_v_a <- raster::predict(M1_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_v_ra <- raster::predict(M1_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# M1  - predictors: selected variables ----------------------------------------
M1_ezg_var_k <- raster::predict(M1_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_var_s <- raster::predict(M1_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_var_a <- raster::predict(M1_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_var_ra <- raster::predict(M1_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### S1
```{r}
# S1  - predictors: v + wd ----------------------------------------------------
S1_ezg_wd_k <- raster::predict(S1_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_wd_s <- raster::predict(S1_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_wd_a <- raster::predict(S1_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_wd_ra <- raster::predict(S1_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# S1  - predictor: velocity ---------------------------------------------------
S1_ezg_v_k <- raster::predict(S1_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_v_s <- raster::predict(S1_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_v_a <- raster::predict(S1_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_v_ra <- raster::predict(S1_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# S1  - predictors: selected variables ------------------------------------------
S1_ezg_var_k <- raster::predict(S1_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_var_s <- raster::predict(S1_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_var_a <- raster::predict(S1_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_var_ra <- raster::predict(S1_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### S2
```{r}
# S2  - predictors: v + wd ----------------------------------------------------
S2_ezg_wd_k <- raster::predict(S2_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_wd_s <- raster::predict(S2_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_wd_a <- raster::predict(S2_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_wd_ra <- raster::predict(S2_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# S2  - predictor: velocity ---------------------------------------------------
S2_ezg_v_k <- raster::predict(S2_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_v_s <- raster::predict(S2_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_v_a <- raster::predict(S2_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_v_ra <- raster::predict(S2_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# S2  - predictors: selected variables -------------------------------------------
S2_ezg_var_k <- raster::predict(S2_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_var_s <- raster::predict(S2_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_var_a <- raster::predict(S2_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_var_ra <- raster::predict(S2_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### TH4
```{r}
# TH4  - predictors: v + wd ---------------------------------------------------
TH4_ezg_wd_k <- raster::predict(TH4_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_wd_s <- raster::predict(TH4_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_wd_a <- raster::predict(TH4_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_wd_ra <- raster::predict(TH4_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# TH4  - predictor: velocity --------------------------------------------------
TH4_ezg_v_k <- raster::predict(TH4_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_v_s <- raster::predict(TH4_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_v_a <- raster::predict(TH4_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_v_ra <- raster::predict(TH4_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# TH4  - predictors: selected variables ---------------------------------------
TH4_ezg_var_k <- raster::predict(TH4_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_var_s <- raster::predict(TH4_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_var_a <- raster::predict(TH4_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_var_ra <- raster::predict(TH4_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### VR3
```{r}
# VR3  - predictors: v + wd ---------------------------------------------------
VR3_ezg_wd_k <- raster::predict(VR3_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_wd_s <- raster::predict(VR3_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_wd_a <- raster::predict(VR3_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_wd_ra <- raster::predict(VR3_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# VR3  - predictor: velocity --------------------------------------------------
VR3_ezg_v_k <- raster::predict(VR3_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_v_s <- raster::predict(VR3_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_v_a <- raster::predict(VR3_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_v_ra <- raster::predict(VR3_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# VR3  - predictors: selected variables --------------------------------------
VR3_ezg_var_k <- raster::predict(VR3_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_var_s <- raster::predict(VR3_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_var_a <- raster::predict(VR3_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_var_ra <- raster::predict(VR3_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### Read data
```{r}
# read all raster results (one time flow velocity classes and one time for habitat suitability)
# prep extraction data 
## GL1
coord_GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1") |>
  dplyr::select(x, y) 

GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1")

## GL2
coord_GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2") |>
  dplyr::select(x, y) 

GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2")

## L2
coord_L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2") |>
  dplyr::select(x, y) 

L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2")

## M1
coord_M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1") |>
  dplyr::select(x, y) 

M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1")

## S1
coord_S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1") |>
  dplyr::select(x, y) 

S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1")

## S2
coord_S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2") |>
  dplyr::select(x, y) 

S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2")

## TH4
coord_TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4") |>
  dplyr::select(x, y) 

TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4")

## VR3
coord_VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3") |>
  dplyr::select(x, y) 

VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3")
```

## Extract Results
```{r}
# extract raster information for regression analysis later
# GL1 -------------------------------------------------------------------------
regr_GL1_wd_k <- raster::extract(GL1_ezg_wd_k, coord_GL1) 
regr_GL1_wd_s <- raster::extract(GL1_ezg_wd_s, coord_GL1) 
regr_GL1_wd_a <- raster::extract(GL1_ezg_wd_a, coord_GL1) 
regr_GL1_wd_ra <- raster::extract(GL1_ezg_wd_ra, coord_GL1) 

regr_GL1_v_k <- raster::extract(GL1_ezg_v_k, coord_GL1) 
regr_GL1_v_s <- raster::extract(GL1_ezg_v_s, coord_GL1) 
regr_GL1_v_a <- raster::extract(GL1_ezg_v_a, coord_GL1) 
regr_GL1_v_ra <- raster::extract(GL1_ezg_v_ra, coord_GL1)

regr_GL1_var_k <- raster::extract(GL1_ezg_var_k, coord_GL1) 
regr_GL1_var_s <- raster::extract(GL1_ezg_var_s, coord_GL1) 
regr_GL1_var_a <- raster::extract(GL1_ezg_var_a, coord_GL1) 
regr_GL1_var_ra <- raster::extract(GL1_ezg_var_ra, coord_GL1)

# GL2 -------------------------------------------------------------------------
regr_GL2_wd_k <- raster::extract(GL2_ezg_wd_k, coord_GL2) 
regr_GL2_wd_s <- raster::extract(GL2_ezg_wd_s, coord_GL2) 
regr_GL2_wd_a <- raster::extract(GL2_ezg_wd_a, coord_GL2) 
regr_GL2_wd_ra <- raster::extract(GL2_ezg_wd_ra, coord_GL2)

regr_GL2_v_k <- raster::extract(GL2_ezg_v_k, coord_GL2) 
regr_GL2_v_s <- raster::extract(GL2_ezg_v_s, coord_GL2) 
regr_GL2_v_a <- raster::extract(GL2_ezg_v_a, coord_GL2)
regr_GL2_v_ra <- raster::extract(GL2_ezg_v_ra, coord_GL2)

regr_GL2_var_k <- raster::extract(GL2_ezg_var_k, coord_GL2) 
regr_GL2_var_s <- raster::extract(GL2_ezg_var_s, coord_GL2) 
regr_GL2_var_a <- raster::extract(GL2_ezg_var_a, coord_GL2)
regr_GL2_var_ra <- raster::extract(GL2_ezg_var_ra, coord_GL2)

# L2 --------------------------------------------------------------------------
regr_L2_wd_k <- raster::extract(L2_ezg_wd_k, coord_L2) 
regr_L2_wd_s <- raster::extract(L2_ezg_wd_s, coord_L2) 
regr_L2_wd_a <- raster::extract(L2_ezg_wd_a, coord_L2) 
regr_L2_wd_ra <- raster::extract(L2_ezg_wd_ra, coord_L2) 

regr_L2_v_k <- raster::extract(L2_ezg_v_k, coord_L2) 
regr_L2_v_s <- raster::extract(L2_ezg_v_s, coord_L2) 
regr_L2_v_a <- raster::extract(L2_ezg_v_a, coord_L2)
regr_L2_v_ra <- raster::extract(L2_ezg_v_ra, coord_L2)

regr_L2_var_k <- raster::extract(L2_ezg_var_k, coord_L2) 
regr_L2_var_s <- raster::extract(L2_ezg_var_s, coord_L2) 
regr_L2_var_a <- raster::extract(L2_ezg_var_a, coord_L2)
regr_L2_var_ra <- raster::extract(L2_ezg_var_ra, coord_L2)

# M1 --------------------------------------------------------------------------
regr_M1_wd_k <- raster::extract(M1_ezg_wd_k, coord_M1) 
regr_M1_wd_s <- raster::extract(M1_ezg_wd_s, coord_M1) 
regr_M1_wd_a <- raster::extract(M1_ezg_wd_a, coord_M1) 
regr_M1_wd_ra <- raster::extract(M1_ezg_wd_ra, coord_M1) 

regr_M1_v_k <- raster::extract(M1_ezg_v_k, coord_M1) 
regr_M1_v_s <- raster::extract(M1_ezg_v_s, coord_M1) 
regr_M1_v_a <- raster::extract(M1_ezg_v_a, coord_M1)
regr_M1_v_ra <- raster::extract(M1_ezg_v_ra, coord_M1)

regr_M1_var_k <- raster::extract(M1_ezg_var_k, coord_M1) 
regr_M1_var_s <- raster::extract(M1_ezg_var_s, coord_M1) 
regr_M1_var_a <- raster::extract(M1_ezg_var_a, coord_M1)
regr_M1_var_ra <- raster::extract(M1_ezg_var_ra, coord_M1)

# S1 --------------------------------------------------------------------------
regr_S1_wd_k <- raster::extract(S1_ezg_wd_k, coord_S1) 
regr_S1_wd_s <- raster::extract(S1_ezg_wd_s, coord_S1) 
regr_S1_wd_a <- raster::extract(S1_ezg_wd_a, coord_S1) 
regr_S1_wd_ra <- raster::extract(S1_ezg_wd_ra, coord_S1) 

regr_S1_v_k <- raster::extract(S1_ezg_v_k, coord_S1) 
regr_S1_v_s <- raster::extract(S1_ezg_v_s, coord_S1) 
regr_S1_v_a <- raster::extract(S1_ezg_v_a, coord_S1)
regr_S1_v_ra <- raster::extract(S1_ezg_v_ra, coord_S1)

regr_S1_var_k <- raster::extract(S1_ezg_var_k, coord_S1) 
regr_S1_var_s <- raster::extract(S1_ezg_var_s, coord_S1) 
regr_S1_var_a <- raster::extract(S1_ezg_var_a, coord_S1)
regr_S1_var_ra <- raster::extract(S1_ezg_var_ra, coord_S1)

# S2 --------------------------------------------------------------------------
regr_S2_wd_k <- raster::extract(S2_ezg_wd_k, coord_S2) 
regr_S2_wd_s <- raster::extract(S2_ezg_wd_s, coord_S2) 
regr_S2_wd_a <- raster::extract(S2_ezg_wd_a, coord_S2) 
regr_S2_wd_ra <- raster::extract(S2_ezg_wd_ra, coord_S2)

regr_S2_v_k <- raster::extract(S2_ezg_v_k, coord_S2) 
regr_S2_v_s <- raster::extract(S2_ezg_v_s, coord_S2) 
regr_S2_v_a <- raster::extract(S2_ezg_v_a, coord_S2)
regr_S2_v_ra <- raster::extract(S2_ezg_v_ra, coord_S2)

regr_S2_var_k <- raster::extract(S2_ezg_var_k, coord_S2) 
regr_S2_var_s <- raster::extract(S2_ezg_var_s, coord_S2) 
regr_S2_var_a <- raster::extract(S2_ezg_var_a, coord_S2)
regr_S2_var_ra <- raster::extract(S2_ezg_var_ra, coord_S2)

# TH4 -------------------------------------------------------------------------
regr_TH4_wd_k <- raster::extract(TH4_ezg_wd_k, coord_TH4) 
regr_TH4_wd_s <- raster::extract(TH4_ezg_wd_s, coord_TH4) 
regr_TH4_wd_a <- raster::extract(TH4_ezg_wd_a, coord_TH4) 
regr_TH4_wd_ra <- raster::extract(TH4_ezg_wd_ra, coord_TH4) 

regr_TH4_v_k <- raster::extract(TH4_ezg_v_k, coord_TH4) 
regr_TH4_v_s <- raster::extract(TH4_ezg_v_s, coord_TH4) 
regr_TH4_v_a <- raster::extract(TH4_ezg_v_a, coord_TH4)
regr_TH4_v_ra <- raster::extract(TH4_ezg_v_ra, coord_TH4)

regr_TH4_var_k <- raster::extract(TH4_ezg_var_k, coord_TH4) 
regr_TH4_var_s <- raster::extract(TH4_ezg_var_s, coord_TH4) 
regr_TH4_var_a <- raster::extract(TH4_ezg_var_a, coord_TH4)
regr_TH4_var_ra <- raster::extract(TH4_ezg_var_ra, coord_TH4)

# VR3 -------------------------------------------------------------------------
regr_VR3_wd_k <- raster::extract(VR3_ezg_wd_k, coord_VR3) 
regr_VR3_wd_s <- raster::extract(VR3_ezg_wd_s, coord_VR3) 
regr_VR3_wd_a <- raster::extract(VR3_ezg_wd_a, coord_VR3) 
regr_VR3_wd_ra <- raster::extract(VR3_ezg_wd_ra, coord_VR3)

regr_VR3_v_k <- raster::extract(VR3_ezg_v_k, coord_VR3) 
regr_VR3_v_s <- raster::extract(VR3_ezg_v_s, coord_VR3) 
regr_VR3_v_a <- raster::extract(VR3_ezg_v_a, coord_VR3)
regr_VR3_v_ra <- raster::extract(VR3_ezg_v_ra, coord_VR3)

regr_VR3_var_k <- raster::extract(VR3_ezg_var_k, coord_VR3) 
regr_VR3_var_s <- raster::extract(VR3_ezg_var_s, coord_VR3) 
regr_VR3_var_a <- raster::extract(VR3_ezg_var_a, coord_VR3)
regr_VR3_var_ra <- raster::extract(VR3_ezg_var_ra, coord_VR3)
```

## Combine into DF
```{r}
# combine all results into dataframe
# GL1 -------------------------------------------------------------------------
data_GL1 <- cbind(regr_GL1_wd_k, regr_GL1_wd_s, regr_GL1_wd_a, regr_GL1_wd_ra, regr_GL1_v_k, regr_GL1_v_s, regr_GL1_v_a, regr_GL1_v_ra, regr_GL1_var_k, regr_GL1_var_s, regr_GL1_var_a, regr_GL1_var_ra, GL1) |>
  dplyr::rename(
         k_index_wd = regr_GL1_wd_k,
         shannon_wd = regr_GL1_wd_s,
         abundance_wd = regr_GL1_wd_a,
         rel_abundance_wd = regr_GL1_wd_ra,
         k_index_v = regr_GL1_v_k,
         shannon_v = regr_GL1_v_s,
         abundance_v = regr_GL1_v_a,
         rel_abundance_v = regr_GL1_v_ra,
         k_index_var = regr_GL1_var_k,
         shannon_var = regr_GL1_var_s,
         abundance_var = regr_GL1_var_a,
         rel_abundance_var = regr_GL1_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# GL2 -------------------------------------------------------------------------
data_GL2 <- cbind(regr_GL2_wd_k, regr_GL2_wd_s, regr_GL2_wd_a, regr_GL2_wd_ra, regr_GL2_v_k, regr_GL2_v_s, regr_GL2_v_a, regr_GL2_v_ra, regr_GL2_var_k, regr_GL2_var_s, regr_GL2_var_a, regr_GL2_var_ra, GL2) |>
  dplyr::rename(
         k_index_wd = regr_GL2_wd_k,
         shannon_wd = regr_GL2_wd_s,
         abundance_wd = regr_GL2_wd_a,
         rel_abundance_wd = regr_GL2_wd_ra,
         k_index_v = regr_GL2_v_k,
         shannon_v = regr_GL2_v_s,
         abundance_v = regr_GL2_v_a,
         rel_abundance_v = regr_GL2_v_ra,
         k_index_var = regr_GL2_var_k,
         shannon_var = regr_GL2_var_s,
         abundance_var = regr_GL2_var_a,
         rel_abundance_var = regr_GL2_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# L2 --------------------------------------------------------------------------
data_L2 <- cbind(regr_L2_wd_k, regr_L2_wd_s, regr_L2_wd_a, regr_L2_wd_ra, regr_L2_v_k, regr_L2_v_s, regr_L2_v_a, regr_L2_v_ra, regr_L2_var_k, regr_L2_var_s, regr_L2_var_a, regr_L2_var_ra, L2) |>
  dplyr::rename(
         k_index_wd = regr_L2_wd_k,
         shannon_wd = regr_L2_wd_s,
         abundance_wd = regr_L2_wd_a,
         rel_abundance_wd = regr_L2_wd_ra,
         k_index_v = regr_L2_v_k,
         shannon_v = regr_L2_v_s,
         abundance_v = regr_L2_v_a,
         rel_abundance_v = regr_L2_v_ra,
         k_index_var = regr_L2_var_k,
         shannon_var = regr_L2_var_s,
         abundance_var = regr_L2_var_a,
         rel_abundance_var = regr_L2_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# M1 --------------------------------------------------------------------------
data_M1 <- cbind(regr_M1_wd_k, regr_M1_wd_s, regr_M1_wd_a, regr_M1_wd_ra, regr_M1_v_k, regr_M1_v_s, regr_M1_v_a, regr_M1_v_ra, regr_M1_var_k, regr_M1_var_s, regr_M1_var_a, regr_M1_var_ra, M1) |>
  dplyr::rename(
         k_index_wd = regr_M1_wd_k,
         shannon_wd = regr_M1_wd_s,
         abundance_wd = regr_M1_wd_a,
         rel_abundance_wd = regr_M1_wd_ra,
         k_index_v = regr_M1_v_k,
         shannon_v = regr_M1_v_s,
         abundance_v = regr_M1_v_a,
         rel_abundance_v = regr_M1_v_ra,
         k_index_var = regr_M1_var_k,
         shannon_var = regr_M1_var_s,
         abundance_var = regr_M1_var_a,
         rel_abundance_var = regr_M1_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# S1 --------------------------------------------------------------------------
data_S1 <- cbind(regr_S1_wd_k, regr_S1_wd_s, regr_S1_wd_a, regr_S1_wd_ra, regr_S1_v_k, regr_S1_v_s, regr_S1_v_a, regr_S1_v_ra, regr_S1_var_k, regr_S1_var_s, regr_S1_var_a, regr_S1_var_ra, S1) |>
  dplyr::rename(
         k_index_wd = regr_S1_wd_k,
         shannon_wd = regr_S1_wd_s,
         abundance_wd = regr_S1_wd_a,
         rel_abundance_wd = regr_S1_wd_ra,
         k_index_v = regr_S1_v_k,
         shannon_v = regr_S1_v_s,
         abundance_v = regr_S1_v_a,
         rel_abundance_v = regr_S1_v_ra,
         k_index_var = regr_S1_var_k,
         shannon_var = regr_S1_var_s,
         abundance_var = regr_S1_var_a,
         rel_abundance_var = regr_S1_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# S2 --------------------------------------------------------------------------
data_S2 <- cbind(regr_S2_wd_k, regr_S2_wd_s, regr_S2_wd_a, regr_S2_wd_ra, regr_S2_v_k, regr_S2_v_s, regr_S2_v_a, regr_S2_v_ra, regr_S2_var_k, regr_S2_var_s, regr_S2_var_a, regr_S2_var_ra, S2) |>
  dplyr::rename(
         k_index_wd = regr_S2_wd_k,
         shannon_wd = regr_S2_wd_s,
         abundance_wd = regr_S2_wd_a,
         rel_abundance_wd = regr_S2_wd_ra,
         k_index_v = regr_S2_v_k,
         shannon_v = regr_S2_v_s,
         abundance_v = regr_S2_v_a,
         rel_abundance_v = regr_S2_v_ra,
         k_index_var = regr_S2_var_k,
         shannon_var = regr_S2_var_s,
         abundance_var = regr_S2_var_a,
         rel_abundance_var = regr_S2_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)


# TH4 -------------------------------------------------------------------------
data_TH4 <- cbind(regr_TH4_wd_k, regr_TH4_wd_s, regr_TH4_wd_a, regr_TH4_wd_ra, regr_TH4_v_k, regr_TH4_v_s, regr_TH4_v_a, regr_TH4_v_ra, regr_TH4_var_k, regr_TH4_var_s, regr_TH4_var_a, regr_TH4_var_ra, TH4) |>
  dplyr::rename(
         k_index_wd = regr_TH4_wd_k,
         shannon_wd = regr_TH4_wd_s,
         abundance_wd = regr_TH4_wd_a,
         rel_abundance_wd = regr_TH4_wd_ra,
         k_index_v = regr_TH4_v_k,
         shannon_v = regr_TH4_v_s,
         abundance_v = regr_TH4_v_a,
         rel_abundance_v = regr_TH4_v_ra,
         k_index_var = regr_TH4_var_k,
         shannon_var = regr_TH4_var_s,
         abundance_var = regr_TH4_var_a,
         rel_abundance_var = regr_TH4_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)


# VR3 -------------------------------------------------------------------------
data_VR3 <- cbind(regr_VR3_wd_k, regr_VR3_wd_s, regr_VR3_wd_a, regr_VR3_wd_ra, regr_VR3_v_k, regr_VR3_v_s, regr_VR3_v_a, regr_VR3_v_ra, regr_VR3_var_k, regr_VR3_var_s, regr_VR3_var_a, regr_VR3_var_ra, VR3) |>
  dplyr::rename(
         k_index_wd = regr_VR3_wd_k,
         shannon_wd = regr_VR3_wd_s,
         abundance_wd = regr_VR3_wd_a,
         rel_abundance_wd = regr_VR3_wd_ra,
         k_index_v = regr_VR3_v_k,
         shannon_v = regr_VR3_v_s,
         abundance_v = regr_VR3_v_a,
         rel_abundance_v = regr_VR3_v_ra,
         k_index_var = regr_VR3_var_k,
         shannon_var = regr_VR3_var_s,
         abundance_var = regr_VR3_var_a,
         rel_abundance_var = regr_VR3_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)
```

## Results from Extraction 
```{r}
# bind results together 
regr_analysis <- rbind(data_GL1, data_GL2, data_L2, data_M1, data_S1, data_S2, data_TH4, data_VR3)

# export to .csv file
write.csv(regr_analysis, "Stat_Analysis/stat_analysis_data/regr_analysis_rf.csv", row.names = FALSE)
```

# Scenario Simulations 
# Read rasters
```{r}
# read rasters containing wd and velocity 
# GL1 ------------------------------------------------------------
GL1_min_v <- stack("Pre_Processing/raster_files/GL1_v_3_28.tif")
GL1_max_v <- stack("Pre_Processing/raster_files/GL1_v_31_76.tif")

# GL2 --------------------------------------------------------------
GL2_min_v <- stack("Pre_Processing/raster_files/GL2_v_3_21.tif")
GL2_max_v <- stack("Pre_Processing/raster_files/GL2_v_31_53.tif")

# L2 --------------------------------------------------------------
L2_base_v <- stack("Pre_Processing/raster_files/L2_v_2_40.tif")
L2_peak_v <- stack("Pre_Processing/raster_files/L2_v_9_24.tif") 
L2_max_v <- stack("Pre_Processing/raster_files/L2_v_18_90.tif") 

# M1 --------------------------------------------------------------
M1_base_v <- stack("Pre_Processing/raster_files/M1_v_0_47.tif") 
M1_peak_v <- stack("Pre_Processing/raster_files/M1_v_18_84.tif") 
M1_max_v <- stack("Pre_Processing/raster_files/M1_v_22_84.tif") 

# S1 --------------------------------------------------------------
S1_base_v <- stack("Pre_Processing/raster_files/S1_v_2_00.tif") 
S1_peak_v <- stack("Pre_Processing/raster_files/S1_v_18_00.tif") 
S1_max_v <- stack("Pre_Processing/raster_files/S1_v_20_00.tif") 

# S2 --------------------------------------------------------------
S2_base_v <- stack("Pre_Processing/raster_files/S2_v_2_00.tif") 
S2_peak_v <- stack("Pre_Processing/raster_files/S2_v_18_00.tif") 
S2_max_v <- stack("Pre_Processing/raster_files/S2_v_20_00.tif") 

# TH4 ---------------------------------------------------------------
TH4_min_v <- stack("Pre_Processing/raster_files/TH4_v_11_45.tif") 
TH4_max_v <- stack("Pre_Processing/raster_files/TH4_v_32_93.tif")

# VR3 ----------------------------------------------------------------
VR3_base_v <- stack("Pre_Processing/raster_files/VR3_v_2_90.tif") 
VR3_peak_v <- stack("Pre_Processing/raster_files/VR3_v_40_10.tif") 
VR3_max_v <- stack("Pre_Processing/raster_files/VR3_v_52_90.tif")

# rename rasters in stacks for extraction 
names(GL1_min_v) <- c("velocity") 
names(GL1_max_v) <- c("velocity") 

names(GL2_min_v) <- c("velocity") 
names(GL2_max_v) <- c("velocity")

names(L2_base_v) <- c("velocity")
names(L2_peak_v) <- c("velocity")
names(L2_max_v) <- c("velocity")

names(M1_base_v) <- c("velocity") 
names(M1_peak_v) <- c("velocity") 
names(M1_max_v) <- c("velocity")

names(S1_base_v) <- c("velocity")
names(S1_peak_v) <- c("velocity")  
names(S1_max_v) <- c("velocity") 

names(S2_base_v) <- c("velocity")
names(S2_peak_v) <- c("velocity")  
names(S2_max_v) <- c("velocity") 

names(TH4_min_v) <- c("velocity")
names(TH4_max_v) <- c("velocity")

names(VR3_base_v) <- c("velocity")
names(VR3_peak_v) <- c("velocity") 
names(VR3_max_v) <- c("velocity") 
```

## Predict Models to Maps 
```{r}
# predict ML model to rasters with velocity and wd 
# GL1 - predictor: velocity ---------------------------------------------------
GL1_a_min_v <- raster::predict(GL1_min_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
GL1_a_max_v <- raster::predict(GL1_max_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
GL1_a_pers_v <- mask(GL1_a_max_v, GL1_a_min_v)

GL1_ra_min_v <- raster::predict(GL1_min_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
GL1_ra_max_v <- raster::predict(GL1_max_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
GL1_ra_pers_v <- mask(GL1_ra_max_v, GL1_ra_min_v)

# GL1 write rasters ---------------------
writeRaster(GL1_a_min_v, "ML_model/scenarios/GL1_a_min_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(GL1_a_max_v, "ML_model/scenarios/GL1_a_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(GL1_a_pers_v, "ML_model/scenarios/GL1_a_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

writeRaster(GL1_ra_min_v, "ML_model/scenarios/GL1_ra_min_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(GL1_ra_max_v, "ML_model/scenarios/GL1_ra_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(GL1_ra_pers_v, "ML_model/scenarios/GL1_ra_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

# GL2 - predictor: velocity ---------------------------------------------------
GL2_a_min_v <- raster::predict(GL2_min_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
GL2_a_max_v <- raster::predict(GL2_max_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
GL2_a_pers_v <- mask(GL2_a_max_v, GL2_a_min_v)

GL2_ra_min_v <- raster::predict(GL2_min_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
GL2_ra_max_v <- raster::predict(GL2_max_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
GL2_ra_pers_v <- mask(GL2_ra_max_v, GL2_ra_min_v)

# GL2 write rasters ---------------------
writeRaster(GL2_a_min_v, "ML_model/scenarios/GL2_a_min_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(GL2_a_max_v, "ML_model/scenarios/GL2_a_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(GL2_a_pers_v, "ML_model/scenarios/GL2_a_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

writeRaster(GL2_ra_min_v, "ML_model/scenarios/GL2_ra_min_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(GL2_ra_max_v, "ML_model/scenarios/GL2_ra_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(GL2_ra_pers_v, "ML_model/scenarios/GL2_ra_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

# L2 - predictor: velocity ----------------------------------------------------
L2_a_base_v <- raster::predict(L2_base_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
L2_a_peak_v <- raster::predict(L2_peak_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
L2_a_max_v <- raster::predict(L2_max_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
L2_a_pers_v <- mask(L2_a_peak_v, L2_a_base_v)

L2_ra_base_v <- raster::predict(L2_base_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
L2_ra_peak_v <- raster::predict(L2_peak_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
L2_ra_max_v <- raster::predict(L2_max_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
L2_ra_pers_v <- mask(L2_ra_peak_v, L2_ra_base_v)

# L2 write rasters ---------------------
writeRaster(L2_a_base_v, "ML_model/scenarios/L2_a_base_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(L2_a_peak_v, "ML_model/scenarios/L2_a_peak_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(L2_a_max_v, "ML_model/scenarios/L2_a_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(L2_a_pers_v, "ML_model/scenarios/L2_a_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

writeRaster(L2_ra_base_v, "ML_model/scenarios/L2_ra_base_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(L2_ra_peak_v, "ML_model/scenarios/L2_ra_peak_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(L2_ra_max_v, "ML_model/scenarios/L2_ra_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(L2_ra_pers_v, "ML_model/scenarios/L2_ra_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

# M1  - predictor: velocity ---------------------------------------------------
M1_a_base_v <- raster::predict(M1_base_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
M1_a_peak_v <- raster::predict(M1_peak_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
M1_a_max_v <- raster::predict(M1_max_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
M1_a_pers_v <- mask(M1_a_peak_v, M1_a_base_v)

M1_ra_base_v <- raster::predict(M1_base_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
M1_ra_peak_v <- raster::predict(M1_peak_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
M1_ra_max_v <- raster::predict(M1_max_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
M1_ra_pers_v <- mask(M1_ra_peak_v, M1_ra_base_v)

# M1 write rasters ---------------------
writeRaster(M1_a_base_v, "ML_model/scenarios/M1_a_base_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(M1_a_peak_v, "ML_model/scenarios/M1_a_peak_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(M1_a_max_v, "ML_model/scenarios/M1_a_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(M1_a_pers_v, "ML_model/scenarios/M1_a_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

writeRaster(M1_ra_base_v, "ML_model/scenarios/M1_ra_base_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(M1_ra_peak_v, "ML_model/scenarios/M1_ra_peak_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(M1_ra_max_v, "ML_model/scenarios/M1_ra_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(M1_ra_pers_v, "ML_model/scenarios/M1_ra_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

# S1  - predictor: velocity ---------------------------------------------------
S1_a_base_v <- raster::predict(S1_base_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
S1_a_peak_v <- raster::predict(S1_peak_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
S1_a_max_v <- raster::predict(S1_max_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
S1_a_pers_v <- mask(S1_a_peak_v, S1_a_base_v)

S1_ra_base_v <- raster::predict(S1_base_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
S1_ra_peak_v <- raster::predict(S1_peak_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
S1_ra_max_v <- raster::predict(S1_max_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
S1_ra_pers_v <- mask(S1_ra_peak_v, S1_ra_base_v)

# S1 write rasters ---------------------
writeRaster(S1_a_base_v, "ML_model/scenarios/S1_a_base_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S1_a_peak_v, "ML_model/scenarios/S1_a_peak_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S1_a_max_v, "ML_model/scenarios/S1_a_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S1_a_pers_v, "ML_model/scenarios/S1_a_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

writeRaster(S1_ra_base_v, "ML_model/scenarios/S1_ra_base_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S1_ra_peak_v, "ML_model/scenarios/S1_ra_peak_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S1_ra_max_v, "ML_model/scenarios/S1_ra_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S1_ra_pers_v, "ML_model/scenarios/S1_ra_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

# S2  - predictor: velocity ---------------------------------------------------
S2_a_base_v <- raster::predict(S2_base_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
S2_a_peak_v <- raster::predict(S2_peak_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
S2_a_max_v <- raster::predict(S2_max_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
S2_a_pers_v <- mask(S2_a_peak_v, S2_a_base_v)

S2_ra_base_v <- raster::predict(S2_base_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
S2_ra_peak_v <- raster::predict(S2_peak_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
S2_ra_max_v <- raster::predict(S2_max_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
S2_ra_pers_v <- mask(S2_ra_peak_v, S2_ra_base_v)

# S2 write rasters ---------------------
writeRaster(S2_a_base_v, "ML_model/scenarios/S2_a_base_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S2_a_peak_v, "ML_model/scenarios/S2_a_peak_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S2_a_max_v, "ML_model/scenarios/S2_a_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S2_a_pers_v, "ML_model/scenarios/S2_a_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

writeRaster(S2_ra_base_v, "ML_model/scenarios/S2_ra_base_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S2_ra_peak_v, "ML_model/scenarios/S2_ra_peak_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S2_ra_max_v, "ML_model/scenarios/S2_ra_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S2_ra_pers_v, "ML_model/scenarios/S2_ra_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

# TH4  - predictor: velocity --------------------------------------------------
TH4_a_min_v <- raster::predict(TH4_min_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
TH4_a_max_v <- raster::predict(TH4_max_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
TH4_a_pers_v <- mask(TH4_a_max_v, TH4_a_min_v)

TH4_ra_min_v <- raster::predict(TH4_min_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
TH4_ra_max_v <- raster::predict(TH4_max_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
TH4_ra_pers_v <- mask(TH4_ra_max_v, TH4_ra_min_v)

# TH4 write rasters ---------------------
writeRaster(TH4_a_min_v, "ML_model/scenarios/TH4_a_min_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(TH4_a_max_v, "ML_model/scenarios/TH4_a_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(TH4_a_pers_v, "ML_model/scenarios/TH4_a_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

writeRaster(TH4_ra_min_v, "ML_model/scenarios/TH4_ra_min_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(TH4_ra_max_v, "ML_model/scenarios/TH4_ra_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(TH4_ra_pers_v, "ML_model/scenarios/TH4_ra_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

# VR3  - predictor: velocity --------------------------------------------------
VR3_a_base_v <- raster::predict(VR3_base_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
VR3_a_peak_v <- raster::predict(VR3_peak_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
VR3_a_max_v <- raster::predict(VR3_max_v, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
VR3_a_pers_v <- mask(VR3_a_peak_v, VR3_a_base_v)

VR3_ra_base_v <- raster::predict(VR3_base_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
VR3_ra_peak_v <- raster::predict(VR3_peak_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
VR3_ra_max_v <- raster::predict(VR3_max_v, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
VR3_ra_pers_v <- mask(VR3_ra_peak_v, VR3_ra_base_v)

# VR3 write rasters ---------------------
writeRaster(VR3_a_base_v, "ML_model/scenarios/VR3_a_base_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(VR3_a_peak_v, "ML_model/scenarios/VR3_a_peak_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(VR3_a_max_v, "ML_model/scenarios/VR3_a_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(VR3_a_pers_v, "ML_model/scenarios/VR3_a_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)

writeRaster(VR3_ra_base_v, "ML_model/scenarios/VR3_ra_base_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(VR3_ra_peak_v, "ML_model/scenarios/VR3_ra_peak_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(VR3_ra_max_v, "ML_model/scenarios/VR3_ra_max_v_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(VR3_ra_pers_v, "ML_model/scenarios/VR3_ra_pers_v_rf.tif", format = "GTiff", overwrite = TRUE)
```

## WUA
```{r}
# load self-written functions 
source("mth_functions.R")

# calculate WUA -------------------------------------------------
# GL1 -----------------------------------------------------------
wua_GL1_min <- wua(GL1_s_min_v)
wua_GL1_max <- wua(GL1_s_max_v)
wua_GL1_pers <- wua(GL1_s_pers_v)

# GL2 -----------------------------------------------------------
wua_GL2_min <- wua(GL2_s_min_v)
wua_GL2_max <- wua(GL2_s_max_v)
wua_GL2_pers <- wua(GL2_s_pers_v)

# L2 -----------------------------------------------------------
wua_L2_base <- wua(L2_s_base_v)
wua_L2_peak <- wua(L2_s_peak_v)
wua_L2_pers <- wua(L2_s_pers_v)

# M1 -----------------------------------------------------------
wua_M1_base <- wua(M1_s_base_v)
wua_M1_peak <- wua(M1_s_peak_v)
wua_M1_pers <- wua(M1_s_pers_v)

# S1 -----------------------------------------------------------
wua_S1_base <- wua(S1_s_base_v)
wua_S1_peak <- wua(S1_s_peak_v)
wua_S1_pers <- wua(S1_s_pers_v)

# S2 -----------------------------------------------------------
wua_S2_base <- wua(S2_s_base_v)
wua_S2_peak <- wua(S2_s_peak_v)
wua_S2_pers <- wua(S2_s_pers_v)

# TH4 ----------------------------------------------------------
wua_TH4_min <- wua(TH4_s_min_v)
wua_TH4_max <- wua(TH4_s_max_v)
wua_TH4_pers <- wua(TH4_s_pers_v)

# VR3 ----------------------------------------------------------
wua_VR3_base <- wua(VR3_s_base_v)
wua_VR3_peak <- wua(VR3_s_peak_v)
wua_VR3_pers <- wua(VR3_s_pers_v)
```


## HHS
```{r}
# 1. calculate frequency tables ---------------------------------------
# GL1 -----------------------------------------------------------
freq_GL1_min <- freq_table(GL1_s_min_v)
freq_GL1_max <- freq_table(GL1_s_max_v)
freq_GL1_pers <- freq_table(GL1_s_pers_v)

# GL2 -----------------------------------------------------------
freq_GL2_min <- freq_table(GL2_s_min_v)
freq_GL2_max <- freq_table(GL2_s_max_v)
freq_GL2_pers <- freq_table(GL2_s_pers_v)

# L2 -----------------------------------------------------------
freq_L2_base <- freq_table(L2_s_base_v)
freq_L2_peak <- freq_table(L2_s_peak_v)
freq_L2_pers <- freq_table(L2_s_pers_v)

# M1 -----------------------------------------------------------
freq_M1_base <- freq_table(M1_s_base_v)
freq_M1_peak <- freq_table(M1_s_peak_v)
freq_M1_pers <- freq_table(M1_s_pers_v)

# S1 -----------------------------------------------------------
freq_S1_base <- freq_table(S1_s_base_v)
freq_S1_peak <- freq_table(S1_s_peak_v)
freq_S1_pers <- freq_table(S1_s_pers_v)

# S2 -----------------------------------------------------------
freq_S2_base <- freq_table(S2_s_base_v)
freq_S2_peak <- freq_table(S2_s_peak_v)
freq_S2_pers <- freq_table(S2_s_pers_v)

# TH4 -----------------------------------------------------------
freq_TH4_min <- freq_table(TH4_s_min_v)
freq_TH4_max <- freq_table(TH4_s_max_v)
freq_TH4_pers <- freq_table(TH4_s_pers_v)

# VR3 -----------------------------------------------------------
freq_VR3_base <- freq_table(VR3_s_base_v)
freq_VR3_peak <- freq_table(VR3_s_peak_v)
freq_VR3_pers <- freq_table(VR3_s_pers_v)

# 2. calculate wetted area -----------------------------------------------
# GL1 -----------------------------------------------------------
wa_GL1_min <- wa_tot(freq_GL1_min, column_name = "count")
wa_GL1_max <- wa_tot(freq_GL1_max, column_name = "count")
wa_GL1_pers <- wa_tot(freq_GL1_pers, column_name = "count")

# GL2 -----------------------------------------------------------
wa_GL2_min <- wa_tot(freq_GL2_min, column_name = "count")
wa_GL2_max <- wa_tot(freq_GL2_max, column_name = "count")
wa_GL2_pers <- wa_tot(freq_GL2_pers, column_name = "count")

# L2 -----------------------------------------------------------
wa_L2_base <- wa_tot(freq_L2_base, column_name = "count")
wa_L2_peak <- wa_tot(freq_L2_peak, column_name = "count")
wa_L2_pers <- wa_tot(freq_L2_pers, column_name = "count")

# M1 -----------------------------------------------------------
wa_M1_base <- wa_tot(freq_M1_base, column_name = "count")
wa_M1_peak <- wa_tot(freq_M1_peak, column_name = "count")
wa_M1_pers <- wa_tot(freq_M1_pers, column_name = "count")

# S1 -----------------------------------------------------------
wa_S1_base <- wa_tot(freq_S1_base, column_name = "count")
wa_S1_peak <- wa_tot(freq_S1_peak, column_name = "count")
wa_S1_pers <- wa_tot(freq_S1_pers, column_name = "count")

# S2 -----------------------------------------------------------
wa_S2_base <- wa_tot(freq_S2_base, column_name = "count")
wa_S2_peak <- wa_tot(freq_S2_peak, column_name = "count")
wa_S2_pers <- wa_tot(freq_S2_pers, column_name = "count")

# TH4 -----------------------------------------------------------
wa_TH4_min <- wa_tot(freq_TH4_min, column_name = "count")
wa_TH4_max <- wa_tot(freq_TH4_max, column_name = "count")
wa_TH4_pers <- wa_tot(freq_TH4_pers, column_name = "count")

# VR3 -----------------------------------------------------------
wa_VR3_base <- wa_tot(freq_VR3_base, column_name = "count")
wa_VR3_peak <- wa_tot(freq_VR3_peak, column_name = "count")
wa_VR3_pers <- wa_tot(freq_VR3_pers, column_name = "count")


# 3. calculate HHS ------------------------------------------------------
# GL1 -----------------------------------------------------------
hhs_GL1_min <- wua_GL1_min/wa_GL1_min
hhs_GL1_max <- wua_GL1_max/wa_GL1_max
hhs_GL1_pers <- wua_GL1_pers/wa_GL1_pers

# GL2 -----------------------------------------------------------
hhs_GL2_min <- wua_GL2_min/wa_GL2_min
hhs_GL2_max <- wua_GL2_max/wa_GL2_max
hhs_GL2_pers <- wua_GL2_pers/wa_GL2_pers

# L2 -----------------------------------------------------------
hhs_L2_base <- wua_L2_base/wa_L2_base
hhs_L2_peak <- wua_L2_peak/wa_L2_peak
hhs_L2_pers <- wua_L2_pers/wa_L2_pers

# M1 -----------------------------------------------------------
hhs_M1_base <- wua_M1_base/wa_M1_base
hhs_M1_peak <- wua_M1_peak/wa_M1_peak
hhs_M1_pers <- wua_M1_pers/wa_M1_pers

# S1 -----------------------------------------------------------
hhs_S1_base <- wua_S1_base/wa_S1_base
hhs_S1_peak <- wua_S1_peak/wa_S1_peak
hhs_S1_pers <- wua_S1_pers/wa_S1_pers

# S2 -----------------------------------------------------------
hhs_S2_base <- wua_S2_base/wa_S2_base
hhs_S2_peak <- wua_S2_peak/wa_S2_peak
hhs_S2_pers <- wua_S2_pers/wa_S2_pers

# TH4 -----------------------------------------------------------
hhs_TH4_min <- wua_TH4_min/wa_TH4_min
hhs_TH4_max <- wua_TH4_max/wa_TH4_max
hhs_TH4_pers <- wua_TH4_pers/wa_TH4_pers

# VR3 -----------------------------------------------------------
hhs_VR3_base <- wua_VR3_base/wa_VR3_base
hhs_VR3_peak <- wua_VR3_peak/wa_VR3_peak
hhs_VR3_pers <- wua_VR3_pers/wa_VR3_pers
```

## Results 
```{r}
results <- data.frame(section = c("GL1", "GL1", "GL1",
                                  "GL2", "GL2", "GL2",
                                  "L2", "L2", "L2",
                                  "M1", "M1", "M1",
                                  "S1", "S1", "S1",
                                  "S2", "S2", "S2",
                                  "TH4", "TH4", "TH4",
                                  "VR3", "VR3", "VR3"),
                      hydro_cond = c("min", "max", "pers",
                                     "min", "max", "pers",
                                     "base", "peak", "pers",
                                     "base", "peak", "pers",
                                     "base", "peak", "pers",
                                     "base", "peak", "pers",
                                     "min", "max", "pers",
                                     "base", "peak", "pers"),
                      wua = c(wua_GL1_min, wua_GL1_max, wua_GL1_pers,
                              wua_GL2_min, wua_GL2_max, wua_GL2_pers,
                              wua_L2_base, wua_L2_peak, wua_L2_pers,
                              wua_M1_base, wua_M1_peak, wua_M1_pers,
                              wua_S1_base, wua_S1_peak, wua_S1_pers,
                              wua_S2_base, wua_S2_peak, wua_S2_pers,
                              wua_TH4_min, wua_TH4_max, wua_TH4_pers,
                              wua_VR3_base, wua_VR3_peak, wua_VR3_pers),
                      hhs = c(hhs_GL1_min, hhs_GL1_max, hhs_GL1_pers,
                              hhs_GL2_min, hhs_GL2_max, hhs_GL2_pers,
                              hhs_L2_base, hhs_L2_peak, hhs_L2_pers,
                              hhs_M1_base, hhs_M1_peak, hhs_M1_pers,
                              hhs_S1_base, hhs_S1_peak, hhs_S1_pers,
                              hhs_S2_base, hhs_S2_peak, hhs_S2_pers,
                              hhs_TH4_min, hhs_TH4_max, hhs_TH4_pers,
                              hhs_VR3_base, hhs_VR3_peak, hhs_VR3_pers))

# write .csv file of results 
write.csv(results, "ML_model/scenarios/wua_hhs_shannon_vbrt.csv", row.names = FALSE)
```