---
title: "RF_model"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("gbm")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
```


# Load & prepare data 
```{r}
# Load data containing only v, and v + wd explanatory variables
data_v <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_v.csv")
data_wd <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_wd_v.csv")

data_sampling <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_sampling_add.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type)

data_section <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_section_add.csv") |>
    dplyr::select(-Hydropeaking_river_type, -Hydrokeaking_residual_flow_natural_near_natural, -Category_Water_depth, -date, -time, -time_before, -time_during, -time_after, -clog_3_class, -clog_6_class, -sub_type, -ox_sat_after, -ox_sat_before, -ox_sat_during, -Number_Taxa, -EPT_Taxa)
```

```{r}
# w/o hydr. models "GL1", "GL2", "L2", "M1", "S1", "S2", "TH4", "VR3"
# training set containing velocity 
training_v <- data_v |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

# training set containing velocity + wd
training_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location 
training_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location and overall river section 
training_section <- data_section |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

# w/ hydr. models 
# test set containing velocity 
test_v <- data_v |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")

# test set containing velocity + wd
test_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location 
test_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location and overall river section 
test_section <- data_section |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")
```

### Training Sets w/ coordinates
```{r}
# Prep data to model 
# TRAINING SETS
### PREDICTOR: VELOCITY ###
# With k_index as response variable & velocity 
training_v_k <- training_v |>
  dplyr::select(k_index, velocity, x, y)

# With shannon index as response variable & velocity 
training_v_s <- training_v |>
  dplyr::select(shannon, velocity, x, y)

# With abundance as response variable & velocity 
training_v_a <- training_v |>
  dplyr::select(abundance, velocity, x, y)

# With relative abundance as response variable & velocity 
training_v_ra <- training_v |>
  dplyr::select(rel_abundance, velocity, x, y)
```

```{r}
### PREDICTOR: VELOCITY AND WD ###
# With k_index as response variable & velocity + wd
training_wd_k <- training_wd |>
  dplyr::select(k_index, velocity, wd_m, x, y)

# With shannon index as response variable & velocity + wd
training_wd_s <- training_wd |>
  dplyr::select(shannon, velocity, wd_m, x, y)

# With abundance index as response variable & velocity + wd
training_wd_a <- training_wd |>
  dplyr::select(abundance, velocity, wd_m, x, y)

# With relative abundance index as response variable & velocity + wd
training_wd_ra <- training_wd |>
  dplyr::select(rel_abundance, velocity, wd_m, x, y)
```

```{r}
### PREDICTOR: SAMPLING LOCATIONS ###
# With k_index as response variable & sampling location 
# -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
training_samp_k <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance)

# With shannon index as response variable & sampling location 
# -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
training_samp_s <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance)

# With abundance index as response variable & sampling location 
# -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
training_samp_a <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance)

# With relative abundance index as response variable & sampling location
# -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
training_samp_ra <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index)
```

```{r}
### PREDICTOR: ALL POSSIBLE PREDICTORS ###
# With k_index as response variable & all predictors
# -ox_sat, -date_time, -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
training_sec_k <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance)

# With shannon index as response variable & all predictors 
# -ox_sat, -date_time, -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
training_sec_s <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance)

# With abundance index as response variable & all predictors 
# -ox_sat, -date_time, -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
training_sec_a <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance)

# With relative abundance index as response variable & all predictors 
# -ox_sat, -date_time, -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
training_sec_ra <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index)
```

### Training Sets w/o coordinates
```{r}
# w/o coordinates
training_v_k_c <- training_v |>
  dplyr::select(k_index, velocity)

# w/o coordinates
training_v_s_c <- training_v |>
  dplyr::select(shannon, velocity)

# w/o coordinates
training_v_a_c <- training_v |>
  dplyr::select(abundance, velocity)

# w/o coordinates
training_v_ra_c <- training_v |>
  dplyr::select(rel_abundance, velocity)

# w/o coordinates
training_wd_k_c <- training_wd |>
  dplyr::select(k_index, velocity, wd_m)

# w/o coordinates
training_wd_s_c <- training_wd |>
  dplyr::select(shannon, velocity, wd_m)

# w/o coordinates
training_wd_a_c <- training_wd |>
  dplyr::select(abundance, velocity, wd_m)

# w/o coordinates
training_wd_ra_c <- training_wd |>
  dplyr::select(rel_abundance, velocity, wd_m)

# w/o coordinates
training_samp_k_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y)

# w/o coordinates
training_samp_s_c <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y)

# w/o coordinates
training_samp_a_c <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y)

# w/o coordinates
training_samp_ra_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y)

# w/o coordinates
training_sec_k_c <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y)

# w/o coordinates
training_sec_s_c <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y)

# w/o coordinates
training_sec_a_c <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y)

# w/o coordinates
training_sec_ra_c <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y)
```

### Test Sets w/ coordinates
```{r}
# TEST SETS
### PREDICTOR: VELOCITY ###
# With k_index as response variable & velocity
test_v_k <- test_v |>
  dplyr::select(k_index, velocity, x, y) 

# With shannon index as response variable & velocity
test_v_s <- test_v |>
  dplyr::select(shannon, velocity, x, y) 

# With abundance as response variable & velocity
test_v_a <- test_v |>
  dplyr::select(abundance, velocity, x, y) 

# With relative abundance as response variable & velocity
test_v_ra <- test_v |>
  dplyr::select(rel_abundance, velocity, x, y)
```

```{r}
### PREDICTOR: VELOCITY + WD ###
# With k_index as response variable & velocity + wd
test_wd_k <- test_wd |>
  dplyr::select(k_index, velocity, wd_m, x, y) 

# With shannon index as response variable & velocity + wd
test_wd_s <- test_wd |>
  dplyr::select(shannon, velocity, wd_m, x, y) 

# With abundance as response variable & velocity + wd
test_wd_a <- test_wd |>
  dplyr::select(abundance, velocity, wd_m, x, y)

# With relative abundance as response variable & velocity + wd
test_wd_ra <- test_wd |>
  dplyr::select(rel_abundance, velocity, wd_m, x, y)
```

```{r}
### PREDICTOR: SAMPLING LOCATIONS ###
# With k_index as response variable & sampling location 
# -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
test_samp_k <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance) 

# With shannon index as response variable & sampling location 
# -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
test_samp_s <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance)

# With abundance index as response variable & sampling location 
# -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
test_samp_a <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance)

# With relative abundance index as response variable & sampling location 
# -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
test_samp_ra <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index)
```

```{r}
### PREDICTOR: ALL POSSIBLE PREDICTORS ###
# With k_index as response variable & all predictors
# -ox_sat, -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
test_sec_k <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance)

# With shannon index as response variable & all predictors 
# -ox_sat, -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
test_sec_s <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance)

# With abundance index as response variable & all predictors 
# -ox_sat, -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
test_sec_a <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance)

# With relative abundance index as response variable & all predictors 
# -ox_sat, -Reach_Untersuchungsstelle, -clog_3_class, -clog_6_class, -sub_type
test_sec_ra <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index)
```

### Test Sets w/o coordinates
```{r}
# w/o coordinates
test_v_k_c <- test_v |>
  dplyr::select(k_index, velocity)

# w/o coordinates
test_v_s_c <- test_v |>
  dplyr::select(shannon, velocity) 

# w/o coordinates
test_v_a_c <- test_v |>
  dplyr::select(abundance, velocity) 

# w/o coordinates
test_v_ra_c <- test_v |>
  dplyr::select(rel_abundance, velocity)

# w/o coordinates
test_wd_k_c <- test_wd |>
  dplyr::select(k_index, velocity, wd_m) 

# w/o coordinates
test_wd_s_c <- test_wd |>
  dplyr::select(shannon, velocity, wd_m)

# w/o coordinates
test_wd_a_c <- test_wd |>
  dplyr::select(abundance, velocity, wd_m)

# w/o coordinates
test_wd_ra_c <- test_wd |>
  dplyr::select(rel_abundance, velocity, wd_m)

# w/o coordinates
test_samp_k_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y) 

# w/o coordinates
test_samp_s_c <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y)

# w/o coordinates
test_samp_a_c <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y)

# w/o coordinates
test_samp_ra_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y)

# w/o coordinates
test_sec_k_c <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y)

# w/o coordinates
test_sec_s_c <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y)

# w/o coordinates
test_sec_a_c <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y)

# w/o coordinates
test_sec_ra_c <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y)
```


```{r}
# convert dataframes into spatial objects for mlr3 spatial hyperparameter tuning
### PREDICTOR: VELOCITY ###
# for k_index and velocity 
data_v_k_sp <-  st_as_sf(training_v_k, coords =  c("x", "y"))
st_crs(data_v_k_sp) <- "EPSG: 2056"

# for shannon index and velocity 
data_v_s_sp <-  st_as_sf(training_v_s, coords =  c("x", "y"))
st_crs(data_v_s_sp) <- "EPSG: 2056"

# for abundance and velocity 
data_v_a_sp <-  st_as_sf(training_v_a, coords =  c("x", "y"))
st_crs(data_v_a_sp) <- "EPSG: 2056"

# for relative abundance and velocity 
data_v_ra_sp <-  st_as_sf(training_v_ra, coords =  c("x", "y"))
st_crs(data_v_ra_sp) <- "EPSG: 2056"

### PREDICTOR: VELOCITY + WD ###
# for k_index and velocity + wd
data_wd_k_sp <-  st_as_sf(training_wd_k, coords =  c("x", "y"))
st_crs(data_wd_k_sp) <- "EPSG: 2056"

# for shannon index and velocity + wd
data_wd_s_sp <-  st_as_sf(training_wd_s, coords =  c("x", "y"))
st_crs(data_wd_s_sp) <- "EPSG: 2056"

# for abundance and velocity + wd
data_wd_a_sp <-  st_as_sf(training_wd_a, coords =  c("x", "y"))
st_crs(data_wd_a_sp) <- "EPSG: 2056"

# for relative abundance and velocity + wd
data_wd_ra_sp <-  st_as_sf(training_wd_ra, coords =  c("x", "y"))
st_crs(data_wd_ra_sp) <- "EPSG: 2056"

### PREDICTOR: SAMPLING LOCATIONS ###
# for k_index and sampling locations
data_samp_k_sp <-  st_as_sf(training_samp_k, coords =  c("x", "y"))
st_crs(data_samp_k_sp) <- "EPSG: 2056"

# for shannon index and sampling locations
data_samp_s_sp <-  st_as_sf(training_samp_s, coords =  c("x", "y"))
st_crs(data_samp_s_sp) <- "EPSG: 2056"

# for abundance and sampling locations
data_samp_a_sp <-  st_as_sf(training_samp_a, coords =  c("x", "y"))
st_crs(data_samp_a_sp) <- "EPSG: 2056"

# for relative abundance and sampling locations
data_samp_ra_sp <-  st_as_sf(training_samp_ra, coords =  c("x", "y"))
st_crs(data_samp_ra_sp) <- "EPSG: 2056"

### PREDICTOR: ALL POSSIBLE PREDICTORS ###
# for k_index and all predictors
data_sec_k_sp <-  st_as_sf(training_sec_k, coords =  c("x", "y"))
st_crs(data_sec_k_sp) <- "EPSG: 2056"

# for shannon index and all predictors
data_sec_s_sp <-  st_as_sf(training_sec_s, coords =  c("x", "y"))
st_crs(data_sec_s_sp) <- "EPSG: 2056"

# for abundance and all predictors
data_sec_a_sp <-  st_as_sf(training_sec_a, coords =  c("x", "y"))
st_crs(data_sec_a_sp) <- "EPSG: 2056"

# for relative abundance and all predictors
data_sec_ra_sp <-  st_as_sf(training_sec_ra, coords =  c("x", "y"))
st_crs(data_sec_ra_sp) <- "EPSG: 2056"
```


# Random Forest 
## Hyperparameter tuning 
### Create Task & Learner
```{r}
### ONLY VELOCITY AS PREDICTOR (& x, y for spatial hyperparameter tuning) ###
# create task for k_index and velocity
task_rf_v_k <- mlr3spatiotempcv::as_task_regr_st(data_v_k_sp,
  id = "velocity", target = "k_index")

# create task for shannon index and velocity
task_rf_v_s <- mlr3spatiotempcv::as_task_regr_st(data_v_s_sp,
  id = "velocity", target = "shannon")

# create task for abundance and velocity
task_rf_v_a <- mlr3spatiotempcv::as_task_regr_st(data_v_a_sp,
  id = "velocity", target = "abundance")

# create task for relative abundance and velocity
task_rf_v_ra <- mlr3spatiotempcv::as_task_regr_st(data_v_ra_sp,
  id = "velocity", target = "rel_abundance")

### VELOCITY + WD AS PREDICTORS (& x, y for spatial hyperparameter tuning) ###
# create task for k_index and velocity + wd
task_rf_wd_k <- mlr3spatiotempcv::as_task_regr_st(data_wd_k_sp,
  id = "velocity", target = "k_index")

# create task for shannon index and velocity + wd
task_rf_wd_s <- mlr3spatiotempcv::as_task_regr_st(data_wd_s_sp,
  id = "velocity", target = "shannon")

# create task for abundance and velocity + wd
task_rf_wd_a <- mlr3spatiotempcv::as_task_regr_st(data_wd_a_sp,
  id = "velocity", target = "abundance")

# create task for relative abundance and velocity + wd
task_rf_wd_ra <- mlr3spatiotempcv::as_task_regr_st(data_wd_ra_sp,
  id = "velocity", target = "rel_abundance")

### PREDICTORS: SAMPLING LOCATIONS (& x, y for spatial hyperparameter tuning) ###
# create task for k_index and sampling locations
task_rf_samp_k <- mlr3spatiotempcv::as_task_regr_st(data_samp_k_sp,
  id = "sampling", target = "k_index")

# create task for shannon index and sampling locations
task_rf_samp_s <- mlr3spatiotempcv::as_task_regr_st(data_samp_s_sp,
  id = "sampling", target = "shannon")

# create task for abundance and sampling locations
task_rf_samp_a <- mlr3spatiotempcv::as_task_regr_st(data_samp_a_sp,
  id = "sampling", target = "abundance")

# create task for relative abundance and sampling locations
task_rf_samp_ra <- mlr3spatiotempcv::as_task_regr_st(data_samp_ra_sp,
  id = "sampling", target = "rel_abundance")

### PREDICTORS: ALL PREDICTORS (& x, y for spatial hyperparameter tuning) ###
# create task for k_index and all predictors 
task_rf_sec_k <- mlr3spatiotempcv::as_task_regr_st(data_sec_k_sp,
  id = "section", target = "k_index")

# create task for shannon index and all predictors 
task_rf_sec_s <- mlr3spatiotempcv::as_task_regr_st(data_sec_s_sp,
  id = "section", target = "shannon")

# create task for abundance and all predictors 
task_rf_sec_a <- mlr3spatiotempcv::as_task_regr_st(data_sec_a_sp,
  id = "section", target = "abundance")

# create task for relative abundance and all predictors 
task_rf_sec_ra <- mlr3spatiotempcv::as_task_regr_st(data_sec_ra_sp,
  id = "section", target = "rel_abundance")
```


```{r}
### LEARNER ###
# create learner for a random forest model from the ranger package
# for k_index, shannon index and abundance + velocity + wd valid
lrn_rf <- lrn("regr.ranger", predict_type = "response", importance = "permutation")

# performance estimation level
# perf_level <- mlr3::rsmp("repeated_spcv_coords", folds = 5, repeats = 100) # wo brauche ich das??
```

### Specify search space
```{r}
### ONLY VELOCITY AS PREDICTOR ###
# specifying the search space for k_index and velocity
search_space_v_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specifying the search space for shannon index and velocity
search_space_v_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specifying the search space for abundance and velocity
search_space_v_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specifying the search space for relative abundance and velocity
search_space_v_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)
```


```{r}
### VELOCITY + WD AS PREDICTORS ###
# specifying the search space for k_index and velocity + wd
search_space_wd_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specifying the search space for shannon index and velocity + wd
search_space_wd_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specifying the search space for abundance and velocity + wd
search_space_wd_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specifying the search space for relative abundance and velocity + wd
search_space_wd_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# num.trees noch suchen? 
```

```{r}
### PREDICTORS: SAMPLING LOCATIONS ###
# specifying the search space for k_index and sampling locations
search_space_samp_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specifying the search space for shannon index and sampling locations
search_space_samp_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specifying the search space for abundance and sampling locations
search_space_samp_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specifying the search space for relative abundance and sampling locations
search_space_samp_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# num.trees noch suchen? 
```

```{r}
### PREDICTORS: ALL PREDICTORS ###
# specifying the search space for k_index and all predictors
search_space_sec_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specifying the search space for shannon index and all predictors
search_space_sec_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specifying the search space for abundance and all predictors
search_space_sec_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specifying the search space for relative abundance and all predictors
search_space_sec_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# num.trees noch suchen? 
```


### Hyperparameter tuning 
resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning # gibt kein richtig, falsch, je mehr folds desto mehr modelle müssen trainiert werden
```{r}
### VELOCITY AS PREDICTOR ###
# with k_index and velocity 
autotuner_rf_v_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning  (rechenintensiver), 5 ist relativ üblich 
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_v_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# with shannon index and velocity 
autotuner_rf_v_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_v_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# with abundance and velocity 
autotuner_rf_v_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_v_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# with relative abundance and velocity 
autotuner_rf_v_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_v_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)
```


```{r}
### VELOCITY AND WD AS PREDICTORS ###
# with k_index and velocity + wd
autotuner_rf_wd_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_wd_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# with shannon index and velocity + wd
autotuner_rf_wd_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_wd_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# with abundance and velocity + wd
autotuner_rf_wd_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_wd_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# with relative abundance and velocity + wd
autotuner_rf_wd_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_wd_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)
```

```{r}
### PREDICTORS: SAMPLING LOCATION ###
# with k_index and sampling location
autotuner_rf_samp_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_samp_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# with shannon index and sampling location
autotuner_rf_samp_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_samp_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# with abundance and sampling location
autotuner_rf_samp_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_samp_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# with relative abundance and sampling location
autotuner_rf_samp_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_samp_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)
```

```{r}
### PREDICTORS: ALL PREDICTORS ###
# with k_index and all predictors
autotuner_rf_sec_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_sec_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# with shannon index and all predictors
autotuner_rf_sec_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_sec_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# with abundance and all predictors
autotuner_rf_sec_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_sec_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# with relative abundance and all predictors
autotuner_rf_sec_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf,
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations / run 50 models
  search_space = search_space_sec_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)
```


```{r}
# set seed to obtain the same results with each run
set.seed(0412022)

# hyperparameter tuning
### VELOCITY AS PREDICTOR ###
# k_index and velocity 
autotuner_rf_v_k$train(task_rf_v_k)

# shannon index and velocity 
autotuner_rf_v_s$train(task_rf_v_s)

# abundance and velocity 
autotuner_rf_v_a$train(task_rf_v_a)

# relative abundance and velocity 
autotuner_rf_v_ra$train(task_rf_v_ra)

### VELOCITY + WD AS PREDICTORS ###
# k_index and velocity + wd
autotuner_rf_wd_k$train(task_rf_wd_k)

# shannon index and velocity + wd 
autotuner_rf_wd_s$train(task_rf_wd_s)

# abundance and velocity + wd
autotuner_rf_wd_a$train(task_rf_wd_a)

# relative abundance and velocity + wd
autotuner_rf_wd_ra$train(task_rf_wd_ra)

### PREDICTORS: SAMPLING LOCATION ###
# k_index and sampling locations
autotuner_rf_samp_k$train(task_rf_samp_k)

# shannon index and sampling locations 
autotuner_rf_samp_s$train(task_rf_samp_s)

# abundance and sampling locations
autotuner_rf_samp_a$train(task_rf_samp_a)

# relative abundance and sampling locations
autotuner_rf_samp_ra$train(task_rf_samp_ra)

### PREDICTORS: ALL PREDICTORS ###
# k_index and all predictors
autotuner_rf_sec_k$train(task_rf_sec_k)

# shannon index and all predictors 
autotuner_rf_sec_s$train(task_rf_sec_s)

# abundance and all predictors
autotuner_rf_sec_a$train(task_rf_sec_a)

# relative abundance and all predictors
autotuner_rf_sec_ra$train(task_rf_sec_ra)
```

```{r}
# read the results 
### VELOCITY AS PREDICTOR ###
# for k_index and velocity
autotuner_rf_v_k$tuning_result

# for shannon index and velocity
autotuner_rf_v_s$tuning_result

# for abundance and velocity
autotuner_rf_v_a$tuning_result

# for relative abundance and velocity
autotuner_rf_v_ra$tuning_result

### VELOCITY + WD AS PREDICTORS ###
# for k_index and velocity + wd
autotuner_rf_wd_k$tuning_result

# for shannon index and velocity + wd
autotuner_rf_wd_s$tuning_result

# for abundance and velocity + wd
autotuner_rf_wd_a$tuning_result

# for relative abundance and velocity + wd
autotuner_rf_wd_ra$tuning_result

### PREDICTORS: SAMPLING LOCATIONS ###
# for k_index and sampling locations
autotuner_rf_samp_k$tuning_result

# for shannon index and sampling locations
autotuner_rf_samp_s$tuning_result

# for abundance and sampling locations
autotuner_rf_samp_a$tuning_result

# for relative abundance and sampling locations
autotuner_rf_samp_ra$tuning_result

### PREDICTORS: ALL PREDICTORS ###
# for k_index and all predictors
autotuner_rf_sec_k$tuning_result

# for shannon index and all predictors
autotuner_rf_sec_s$tuning_result

# for abundance and all predictors
autotuner_rf_sec_a$tuning_result

# for relative abundance and all predictors
autotuner_rf_sec_ra$tuning_result
```

## Make models 
### w/ coordinates 
```{r}
# Create and train the random forest model with only velocity
# VELOCITY AS PREDICTOR
# for k_index and velocity
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2059293            10          <list[4]> <list[3]> 0.1413796
rf_model_v_k <- ranger(formula = k_index ~., data = training_v_k, mtry = 1, sample.fraction = 0.2059293, min.node.size = 10, importance = "impurity")

# for shannon index and velocity
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2426534             7          <list[4]> <list[3]> 0.5703676
rf_model_v_s <- ranger(formula = shannon ~., data = training_v_s, mtry = 1, sample.fraction = 0.2426534, min.node.size = 7, importance = "impurity")

# for abundance and velocity
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.3763677             9          <list[4]> <list[3]>  741.6989
rf_model_v_a <- ranger(formula = abundance ~., data = training_v_a, mtry = 1, sample.fraction = 0.3763677, min.node.size = 9, importance = "impurity")

# for relative abundance and velocity
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2451874             9          <list[5]> <list[3]> 0.2023601
rf_model_v_ra <- ranger(formula = rel_abundance ~., data = training_v_ra, mtry = 1, sample.fraction = 0.2451874, min.node.size = 9, importance = "impurity")

# Create and train the random forest model with velocity + wd
# VELOCITY + WD AS PREDICTORS 
# for k_index and velocity + wd
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2451874             9          <list[4]> <list[3]> 0.1371224
rf_model_wd_k <- ranger(formula = k_index ~., data = training_wd_k, mtry = 1, sample.fraction = 0.2451874, min.node.size = 9, importance = "impurity")

# for shannon index and velocity + wd
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2019869             6          <list[4]> <list[3]> 0.5556115
rf_model_wd_s <- ranger(formula = shannon ~., data = training_wd_s, mtry = 1, sample.fraction = 0.2019869, min.node.size = 6, importance = "impurity")

# for abundance and velocity + wd
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2068668             5          <list[4]> <list[3]>  730.9148
rf_model_wd_a <- ranger(formula = abundance ~., data = training_wd_a, mtry = 1, sample.fraction = 0.2068668, min.node.size = 5, importance = "impurity")

# for relative abundance and velocity + wd
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2172103             9          <list[5]> <list[3]> 0.1853219
rf_model_wd_ra <- ranger(formula = rel_abundance ~., data = training_wd_ra, mtry = 1, sample.fraction = 0.2172103, min.node.size = 9, importance = "impurity")

# Create and train the random forest model with sampling locations
# SAMPLING LOCATIONS AS PREDICTORS 
# for k_index and sampling locations
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.4889214             9          <list[5]> <list[3]> 0.1445254
rf_model_samp_k <- ranger(formula = k_index ~., data = training_samp_k, mtry = 1, sample.fraction = 0.4889214, min.node.size = 9, importance = "impurity")

# for shannon index and sampling locations
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    4       0.7329741             6          <list[5]> <list[3]> 0.6053854
rf_model_samp_s <- ranger(formula = shannon ~., data = training_samp_s, mtry = 4, sample.fraction = 0.7329741, min.node.size = 6, importance = "impurity")

# for abundance and sampling locations
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    4       0.7439564             1          <list[5]> <list[3]>  789.2746
rf_model_samp_a <- ranger(formula = abundance ~., data = training_samp_a, mtry = 4, sample.fraction = 0.7439564, min.node.size = 1, importance = "impurity")

# for relative abundance and sampling locations
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    2         0.52377             8          <list[5]> <list[3]> 0.1930686
rf_model_samp_ra <- ranger(formula = rel_abundance ~., data = training_samp_ra, mtry = 2, sample.fraction = 0.52377, min.node.size = 8, importance = "impurity")

# Create and train the random forest model with all predictors possible
# WITH ALL PREDICTORS 
# for k_index and all predictors
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:   27       0.8202065             2          <list[5]> <list[3]> 0.0533179
rf_model_sec_k <- ranger(formula = k_index ~., data = training_sec_k, mtry = 27, sample.fraction = 0.8202065, min.node.size = 2, importance = "impurity")

# for shannon index and all predictors
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:   35       0.8171567             6          <list[5]> <list[3]> 0.6060034
rf_model_sec_s <- ranger(formula = shannon ~., data = training_sec_s, mtry = 35, sample.fraction = 0.8171567, min.node.size = 6, importance = "impurity")

# for abundance and all predictors
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:   36       0.7833582             2          <list[5]> <list[3]>  635.7558
rf_model_sec_a <- ranger(formula = abundance ~., data = training_sec_a, mtry = 36, sample.fraction = 0.7833582, min.node.size = 2, importance = "impurity")

# for relative abundance and all predictors
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:   16       0.3304285             6          <list[5]> <list[3]> 0.1867454
rf_model_sec_ra <- ranger(formula = rel_abundance ~., data = training_sec_ra, mtry = 16, sample.fraction = 0.3304285, min.node.size = 6, importance = "impurity")
```

### w/o coordinates 
```{r}
# Create and train the random forest model with only velocity
# VELOCITY AS PREDICTOR
# for k_index and velocity
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2059293            10          <list[4]> <list[3]> 0.1413796
rf_model_v_k_c <- ranger(formula = k_index ~., data = training_v_k_c, mtry = 1, sample.fraction = 0.2059293, min.node.size = 10, importance = "impurity")

# for shannon index and velocity
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2426534             7          <list[4]> <list[3]> 0.5703676
rf_model_v_s_c <- ranger(formula = shannon ~., data = training_v_s_c, mtry = 1, sample.fraction = 0.2426534, min.node.size = 7, importance = "impurity")

# for abundance and velocity
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.3763677             9          <list[4]> <list[3]>  741.6989
rf_model_v_a_c <- ranger(formula = abundance ~., data = training_v_a_c, mtry = 1, sample.fraction = 0.3763677, min.node.size = 9, importance = "impurity")

# for relative abundance and velocity
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2451874             9          <list[5]> <list[3]> 0.2023601
rf_model_v_ra_c <- ranger(formula = rel_abundance ~., data = training_v_ra_c, mtry = 1, sample.fraction = 0.2451874, min.node.size = 9, importance = "impurity")

# Create and train the random forest model with velocity + wd
# VELOCITY + WD AS PREDICTORS 
# for k_index and velocity + wd
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2451874             9          <list[4]> <list[3]> 0.1371224
rf_model_wd_k_c <- ranger(formula = k_index ~., data = training_wd_k_c, mtry = 1, sample.fraction = 0.2451874, min.node.size = 9, importance = "impurity")

# for shannon index and velocity + wd
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2019869             6          <list[4]> <list[3]> 0.5556115
rf_model_wd_s_c <- ranger(formula = shannon ~., data = training_wd_s_c, mtry = 1, sample.fraction = 0.2019869, min.node.size = 6, importance = "impurity")

# for abundance and velocity + wd
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2068668             5          <list[4]> <list[3]>  730.9148
rf_model_wd_a_c <- ranger(formula = abundance ~., data = training_wd_a_c, mtry = 1, sample.fraction = 0.2068668, min.node.size = 5, importance = "impurity")

# for relative abundance and velocity + wd
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.2172103             9          <list[5]> <list[3]> 0.1853219
rf_model_wd_ra_c <- ranger(formula = rel_abundance ~., data = training_wd_ra_c, mtry = 1, sample.fraction = 0.2172103, min.node.size = 9, importance = "impurity")

# Create and train the random forest model with sampling locations
# SAMPLING LOCATIONS AS PREDICTORS 
# for k_index and sampling locations
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    1       0.4889214             9          <list[5]> <list[3]> 0.1445254
rf_model_samp_k_c <- ranger(formula = k_index ~., data = training_samp_k_c, mtry = 1, sample.fraction = 0.4889214, min.node.size = 9, importance = "impurity")

# for shannon index and sampling locations
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    4       0.7329741             6          <list[5]> <list[3]> 0.6053854
rf_model_samp_s_c <- ranger(formula = shannon ~., data = training_samp_s_c, mtry = 4, sample.fraction = 0.7329741, min.node.size = 6, importance = "impurity")

# for abundance and sampling locations
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    4       0.7439564             1          <list[5]> <list[3]>  789.2746
rf_model_samp_a_c <- ranger(formula = abundance ~., data = training_samp_a_c, mtry = 4, sample.fraction = 0.7439564, min.node.size = 1, importance = "impurity")

# for relative abundance and sampling locations
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:    2         0.52377             8          <list[5]> <list[3]> 0.1930686
rf_model_samp_ra_c <- ranger(formula = rel_abundance ~., data = training_samp_ra_c, mtry = 2, sample.fraction = 0.52377, min.node.size = 8, importance = "impurity")

# Create and train the random forest model with all predictors possible
# WITH ALL PREDICTORS 
# for k_index and all predictors
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:   27       0.8202065             2          <list[5]> <list[3]> 0.0533179
rf_model_sec_k_c <- ranger(formula = k_index ~., data = training_sec_k_c, mtry = 27, sample.fraction = 0.8202065, min.node.size = 2, importance = "impurity")

# for shannon index and all predictors
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:   35       0.8171567             6          <list[5]> <list[3]> 0.6060034
rf_model_sec_s_c <- ranger(formula = shannon ~., data = training_sec_s_c, mtry = 27, sample.fraction = 0.8171567, min.node.size = 6, importance = "impurity")

# for abundance and all predictors
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:   36       0.7833582             2          <list[5]> <list[3]>  635.7558
rf_model_sec_a_c <- ranger(formula = abundance ~., data = training_sec_a_c, mtry = 27, sample.fraction = 0.7833582, min.node.size = 2, importance = "impurity")

# for relative abundance and all predictors
#   mtry sample.fraction min.node.size learner_param_vals  x_domain regr.rmse
#1:   16       0.3304285             6          <list[5]> <list[3]> 0.1867454
rf_model_sec_ra_c <- ranger(formula = rel_abundance ~., data = training_sec_ra_c, mtry = 16, sample.fraction = 0.3304285, min.node.size = 6, importance = "impurity")
```

# Model Evaluation 
## Variable Importance
```{r}
### PREDICTORS: ONLY VELOCITY ###
# w/ coordinates
vi_v_k <- importance(rf_model_v_k)
vi_rel_v_k <- vi_v_k/sum(vi_v_k)

vi_v_s <- importance(rf_model_v_s)
vi_rel_v_s <- vi_v_s/sum(vi_v_s)

vi_v_a <- importance(rf_model_v_a)
vi_rel_v_a <- vi_v_a/sum(vi_v_a)

vi_v_ra <- importance(rf_model_v_ra)
vi_rel_v_ra <- vi_v_ra/sum(vi_v_ra)

# w/o coordinates
vi_v_k_c <- importance(rf_model_v_k_c)
vi_rel_v_k_c <- vi_v_k_c/sum(vi_v_k_c)

vi_v_s_c <- importance(rf_model_v_s_c)
vi_rel_v_s_c <- vi_v_s_c/sum(vi_v_s_c)

vi_v_a_c <- importance(rf_model_v_a_c)
vi_rel_v_a_c <- vi_v_a_c/sum(vi_v_a_c)

vi_v_ra_c <- importance(rf_model_v_ra_c)
vi_rel_v_ra_c <- vi_v_ra_c/sum(vi_v_ra_c)


### PREDICTORS: VELOCITY AND WD ###
# w/ coordinates
vi_wd_k <- importance(rf_model_wd_k)
vi_rel_wd_k <- vi_wd_k/sum(vi_wd_k)

vi_wd_s <- importance(rf_model_wd_s)
vi_rel_wd_s <- vi_wd_s/sum(vi_wd_s)

vi_wd_a <- importance(rf_model_wd_a)
vi_rel_wd_a <- vi_wd_a/sum(vi_wd_a)

vi_wd_ra <- importance(rf_model_wd_ra)
vi_rel_wd_ra <- vi_wd_ra/sum(vi_wd_ra)

# w/o coordinates
vi_wd_k_c <- importance(rf_model_wd_k_c)
vi_rel_wd_k_c <- vi_wd_k_c/sum(vi_wd_k_c)

vi_wd_s_c <- importance(rf_model_wd_s_c)
vi_rel_wd_s_c <- vi_wd_s_c/sum(vi_wd_s_c)

vi_wd_a_c <- importance(rf_model_wd_a_c)
vi_rel_wd_a_c <- vi_wd_a_c/sum(vi_wd_a_c)

vi_wd_ra_c <- importance(rf_model_wd_ra_c)
vi_rel_wd_ra_c <- vi_wd_ra_c/sum(vi_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ###
# w/ coordinates
vi_samp_k <- importance(rf_model_samp_k)
vi_rel_samp_k <- vi_samp_k/sum(vi_samp_k)

vi_samp_s <- importance(rf_model_samp_s)
vi_rel_samp_s <- vi_samp_s/sum(vi_samp_s)

vi_samp_a <- importance(rf_model_samp_a)
vi_rel_samp_a <- vi_samp_a/sum(vi_samp_a)

vi_samp_ra <- importance(rf_model_samp_ra)
vi_rel_samp_ra <- vi_samp_ra/sum(vi_samp_ra)

# w/o coordinates
vi_samp_k_c <- importance(rf_model_samp_k_c)
vi_rel_samp_k_c <- vi_samp_k_c/sum(vi_samp_k_c)

vi_samp_s_c <- importance(rf_model_samp_s_c)
vi_rel_samp_s_c <- vi_samp_s_c/sum(vi_samp_s_c)

vi_samp_a_c <- importance(rf_model_samp_a_c)
vi_rel_samp_a_c <- vi_samp_a_c/sum(vi_samp_a_c)

vi_samp_ra_c <- importance(rf_model_samp_ra_c)
vi_rel_samp_ra_c <- vi_samp_ra_c/sum(vi_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ###
# w/ coordinates
vi_sec_k <- importance(rf_model_sec_k)
vi_rel_sec_k <- vi_sec_k/sum(vi_sec_k)

vi_sec_s <- importance(rf_model_sec_s)
vi_rel_sec_s <- vi_sec_s/sum(vi_sec_s)

vi_sec_a <- importance(rf_model_sec_a)
vi_rel_sec_a <- vi_sec_a/sum(vi_sec_a)

vi_sec_ra <- importance(rf_model_sec_ra)
vi_rel_sec_ra <- vi_sec_ra/sum(vi_sec_ra)

# w/o coordinates
vi_sec_k_c <- importance(rf_model_sec_k_c)
vi_rel_sec_k_c <- vi_sec_k_c/sum(vi_sec_k_c)

vi_sec_s_c <- importance(rf_model_sec_s_c)
vi_rel_sec_s_c <- vi_sec_s_c/sum(vi_sec_s_c)

vi_sec_a_c <- importance(rf_model_sec_a_c)
vi_rel_sec_a_c <- vi_sec_a_c/sum(vi_sec_a_c)

vi_sec_ra_c <- importance(rf_model_sec_ra_c)
vi_rel_sec_ra_c <- vi_sec_ra_c/sum(vi_sec_ra_c)

# bind results together
vi_rf_model_v <- rbind(vi_v_k, vi_v_s, vi_v_a, vi_v_ra)
vi_rel_rf_model_v <- rbind(vi_rel_v_k, vi_rel_v_s, vi_rel_v_a, vi_rel_v_ra)

vi_rf_model_v_c <- rbind(vi_v_k_c, vi_v_s_c, vi_v_a_c, vi_v_ra_c)
vi_rel_rf_model_v_c <- rbind(vi_rel_v_k_c, vi_rel_v_s_c, vi_rel_v_a_c, vi_rel_v_ra_c)

vi_rf_model_wd <- rbind(vi_wd_k, vi_wd_s, vi_wd_a, vi_wd_ra)
vi_rel_rf_model_wd <- rbind(vi_rel_wd_k, vi_rel_wd_s, vi_rel_wd_a, vi_rel_wd_ra)

vi_rf_model_wd_c <- rbind(vi_wd_k_c, vi_wd_s_c, vi_wd_a_c, vi_wd_ra_c)
vi_rel_rf_model_wd_c <- rbind(vi_rel_wd_k_c, vi_rel_wd_s_c, vi_rel_wd_a_c, vi_rel_wd_ra_c)

vi_rf_model_samp <- rbind(vi_samp_k, vi_samp_s, vi_samp_a, vi_samp_ra)
vi_rel_rf_model_samp <- rbind(vi_rel_samp_k, vi_rel_samp_s, vi_rel_samp_a, vi_rel_samp_ra)

vi_rf_model_samp_c <- rbind(vi_samp_k_c, vi_samp_s_c, vi_samp_a_c, vi_samp_ra_c)
vi_rel_rf_model_samp_c <- rbind(vi_rel_samp_k_c, vi_rel_samp_s_c, vi_rel_samp_a_c, vi_rel_samp_ra_c)

vi_rf_model_sec <- rbind(vi_sec_k, vi_sec_s, vi_sec_a, vi_sec_ra)
vi_rel_rf_model_sec <- rbind(vi_rel_sec_k, vi_rel_sec_s, vi_rel_sec_a, vi_rel_sec_ra)

vi_rf_model_sec_c <- rbind(vi_sec_k_c, vi_sec_s_c, vi_sec_a_c, vi_sec_ra_c)
vi_rel_rf_model_sec_c <- rbind(vi_rel_sec_k_c, vi_rel_sec_s_c, vi_rel_sec_a_c, vi_rel_sec_ra_c)

# write results into .csv
write.csv(vi_rf_model_v, "ML_model/vi_rf_model_v_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_v, "ML_model/vi_rel_rf_model_v_add.csv", row.names = FALSE)

write.csv(vi_rf_model_v_c, "ML_model/vi_rf_model_v_c_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_v_c, "ML_model/vi_rel_rf_model_v_c_add.csv", row.names = FALSE)

write.csv(vi_rf_model_wd, "ML_model/vi_rf_model_wd_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_wd, "ML_model/vi_rel_rf_model_wd_add.csv", row.names = FALSE)

write.csv(vi_rf_model_wd_c, "ML_model/vi_rf_model_wd_c_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_wd_c, "ML_model/vi_rel_rf_model_wd_c_add.csv", row.names = FALSE)

write.csv(vi_rf_model_samp, "ML_model/vi_rf_model_samp_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_samp, "ML_model/vi_rel_rf_model_samp_add.csv", row.names = FALSE)

write.csv(vi_rf_model_samp_c, "ML_model/vi_rf_model_samp_c_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_samp_c, "ML_model/vi_rel_rf_model_samp_c_add.csv", row.names = FALSE)

write.csv(vi_rf_model_sec, "ML_model/vi_rf_model_sec_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_sec, "ML_model/vi_rel_rf_model_sec_add.csv", row.names = FALSE)

write.csv(vi_rf_model_sec_c, "ML_model/vi_rf_model_sec_c_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_sec_c, "ML_model/vi_rel_rf_model_sec_c_add.csv", row.names = FALSE)
```

```{r}
### PREDICTORS: ONLY VELOCITY ###
var_imp_rf_v_k <- autotuner_rf_v_k$importance()
var_rel_imp_rf_v_k <- var_imp_rf_v_k/sum(var_imp_rf_v_k)

var_imp_rf_v_s <- autotuner_rf_v_s$importance()
var_rel_imp_rf_v_s <- var_imp_rf_v_s/sum(var_imp_rf_v_s)

var_imp_rf_v_a <- autotuner_rf_v_a$importance()
var_rel_imp_rf_v_a <- var_imp_rf_v_a/sum(var_imp_rf_v_a)

var_imp_rf_v_ra <- autotuner_rf_v_ra$importance()
var_rel_imp_rf_v_ra <- var_imp_rf_v_ra/sum(var_imp_rf_v_ra)

### PREDICTORS: VELOCITY AND WD ###
var_imp_rf_wd_k <- autotuner_rf_wd_k$importance()
var_rel_imp_rf_wd_k <- var_imp_rf_wd_k/sum(var_imp_rf_wd_k)

var_imp_rf_wd_s <- autotuner_rf_wd_s$importance()
var_rel_imp_rf_wd_s <- var_imp_rf_wd_s/sum(var_imp_rf_wd_s)

var_imp_rf_wd_a <- autotuner_rf_wd_a$importance()
var_rel_imp_rf_wd_a <- var_imp_rf_wd_a/sum(var_imp_rf_wd_a)

var_imp_rf_wd_ra <- autotuner_rf_wd_ra$importance()
var_rel_imp_rf_wd_ra <- var_imp_rf_wd_ra/sum(var_imp_rf_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ###
var_imp_rf_samp_k <- autotuner_rf_samp_k$importance()
var_rel_imp_rf_samp_k <- var_imp_rf_samp_k/sum(var_imp_rf_samp_k)

var_imp_rf_samp_s <- autotuner_rf_samp_s$importance()
var_rel_imp_rf_samp_s <- var_imp_rf_samp_s/sum(var_imp_rf_samp_s)

var_imp_rf_samp_a <- autotuner_rf_samp_a$importance()
var_rel_imp_rf_samp_a <- var_imp_rf_samp_a/sum(var_imp_rf_samp_a)

var_imp_rf_samp_ra <- autotuner_rf_samp_ra$importance()
var_rel_imp_rf_samp_ra <- var_imp_rf_samp_ra/sum(var_imp_rf_samp_ra)

### PREDICTORS: ALL PREDICTORS ###
var_imp_rf_sec_k <- autotuner_rf_sec_k$importance()
var_rel_imp_rf_sec_k <- var_imp_rf_sec_k/sum(var_imp_rf_sec_k)

var_imp_rf_sec_s <- autotuner_rf_sec_s$importance()
var_rel_imp_rf_sec_s <- var_imp_rf_sec_s/sum(var_imp_rf_sec_s)

var_imp_rf_sec_a <- autotuner_rf_sec_a$importance()
var_rel_imp_rf_sec_a <- var_imp_rf_sec_a/sum(var_imp_rf_sec_a)

var_imp_rf_sec_ra <- autotuner_rf_sec_ra$importance()
var_rel_imp_rf_sec_ra <- var_imp_rf_sec_ra/sum(var_imp_rf_sec_ra)

# bind results together
vi_rf_v <- rbind(var_imp_rf_v_k, var_imp_rf_v_s, var_imp_rf_v_a, var_imp_rf_v_ra)
vi_rel_rf_v <- rbind(var_rel_imp_rf_v_k, var_rel_imp_rf_v_s, var_rel_imp_rf_v_a, var_rel_imp_rf_v_ra)

vi_rf_wd <- rbind(var_imp_rf_wd_k, var_imp_rf_wd_s, var_imp_rf_wd_a, var_imp_rf_wd_ra)
vi_rel_rf_wd <- rbind(var_rel_imp_rf_wd_k, var_rel_imp_rf_wd_s, var_rel_imp_rf_wd_a, var_rel_imp_rf_wd_ra)

vi_rf_samp <- rbind(var_imp_rf_samp_k, var_imp_rf_samp_s, var_imp_rf_samp_a, var_imp_rf_samp_ra)
vi_rel_rf_samp <- rbind(var_rel_imp_rf_samp_k, var_rel_imp_rf_samp_s, var_rel_imp_rf_samp_a, var_rel_imp_rf_samp_ra)

vi_rf_sec <- rbind(var_imp_rf_sec_k, var_imp_rf_sec_s, var_imp_rf_sec_a, var_imp_rf_sec_ra)
vi_rel_rf_sec <- rbind(var_rel_imp_rf_sec_k, var_rel_imp_rf_sec_s, var_rel_imp_rf_sec_a, var_rel_imp_rf_sec_ra)

# write results into .csv
write.csv(vi_rf_v, "ML_model/vi_rf_v_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_v, "ML_model/vi_rel_rf_v_add.csv", row.names = FALSE)

write.csv(vi_rf_wd, "ML_model/vi_rf_wd_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_wd, "ML_model/vi_rel_rf_wd_add.csv", row.names = FALSE)

write.csv(vi_rf_samp, "ML_model/vi_rf_samp_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_samp, "ML_model/vi_rel_rf_samp_add.csv", row.names = FALSE)

write.csv(vi_rf_sec, "ML_model/vi_rf_sec_add.csv", row.names = FALSE)
write.csv(vi_rel_rf_sec, "ML_model/vi_rel_rf_sec_add.csv", row.names = FALSE)
```

## - Partial dependence plots
```{r}
# Create DFs for PDPs
### PREDICTOR: VELOCITY ###
### k_index
#pdp_v_k <- partial(autotuner_rf_v_k, pred.var = c("velocity"))
pdp_model_v_k <- partial(rf_model_v_k, pred.var = "velocity") |>
  mutate(model = "ranger")
pdp_model_v_k_c <- partial(rf_model_v_k_c, pred.var = "velocity") |>
  mutate(model = "ranger w/o coordinates")

pdp_v_k <- rbind(pdp_model_v_k, pdp_model_v_k_c)

### shannon index
# pdp_v_s <- partial(autotuner_rf_v_s, pred.var = c("velocity"))
pdp_model_v_s <- partial(rf_model_v_s, pred.var = "velocity") |>
  mutate(model = "ranger")
pdp_model_v_s_c <- partial(rf_model_v_s_c, pred.var = "velocity") |>
  mutate(model = "ranger w/o coordinates")

pdp_v_s <- rbind(pdp_model_v_s, pdp_model_v_s_c)

### abundance
# pdp_v_a <- partial(autotuner_rf_v_a, pred.var = c("velocity"))
pdp_model_v_a <- partial(rf_model_v_a, pred.var = "velocity") |>
  mutate(model = "ranger")
pdp_model_v_a_c <- partial(rf_model_v_a_c, pred.var = "velocity") |>
  mutate(model = "ranger w/o coordinates")

pdp_v_a <- rbind(pdp_model_v_a, pdp_model_v_a_c)

### relative abundance
# pdp_v_ra <- partial(autotuner_rf_v_ra, pred.var = c("velocity"))
pdp_model_v_ra <- partial(rf_model_v_ra, pred.var = "velocity") |>
  mutate(model = "ranger")
pdp_model_v_ra_c <- partial(rf_model_v_ra_c, pred.var = "velocity") |>
  mutate(model = "ranger w/o coordinates")

pdp_v_ra <- rbind(pdp_model_v_ra, pdp_model_v_ra_c)
```

```{r}
ggplot(pdp_v_k, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  facet_wrap(~model, scales = "free_x") + 
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "k-index"
  ) +
  theme_minimal() 

ggplot(pdp_v_s, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  facet_wrap(~model, scales = "free_x") + 
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index"
  ) +
  theme_minimal() 

ggplot(pdp_v_a, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  facet_wrap(~model, scales = "free_x") + 
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() 

ggplot(pdp_v_ra, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  facet_wrap(~model, scales = "free_x") + 
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() 
```


```{r}
### PREDICTOR: VELOCITY AND WD ###
### k_index
# pdp_wd_k <- partial(autotuner_rf_wd_k, pred.var = c("velocity"))
pdp_model_wd_k <- partial(rf_model_wd_k, pred.var = "velocity")
pdp_model_wd_k_c <- partial(rf_model_wd_k_c, pred.var = "velocity")

### shannon index
# pdp_wd_s <- partial(autotuner_rf_wd_s, pred.var = c("velocity"))
pdp_model_wd_s <- partial(rf_model_wd_s, pred.var = "velocity")
pdp_model_wd_s_c <- partial(rf_model_wd_s_c, pred.var = "velocity")

### abundance
# pdp_wd_a <- partial(autotuner_rf_wd_a, pred.var = c("velocity"))
pdp_model_wd_a <- partial(rf_model_wd_a, pred.var = "velocity")
pdp_model_wd_a_c <- partial(rf_model_wd_a_c, pred.var = "velocity")

### relative abundance
# pdp_wd_ra <- partial(autotuner_rf_wd_ra, pred.var = c("velocity"))
pdp_model_wd_ra <- partial(rf_model_wd_ra, pred.var = "velocity")
pdp_model_wd_ra_c <- partial(rf_model_wd_ra_c, pred.var = "velocity")
```

```{r}
### PREDICTOR: SAMPLING LOCATIONS ###
### k_index
# pdp_samp_k <- partial(autotuner_rf_samp_k, pred.var = c("velocity"))
pdp_model_samp_k <- partial(rf_model_samp_k, pred.var = c("velocity"))
pdp_model_samp_k_c <- partial(rf_model_samp_k_c, pred.var = "velocity")

### shannon index
# pdp_samp_s <- partial(autotuner_rf_samp_s, pred.var = c("velocity"))
pdp_model_samp_s <- partial(rf_model_samp_s, pred.var = "velocity")
pdp_model_samp_s_c <- partial(rf_model_samp_s_c, pred.var = "velocity")

### abundance
# pdp_samp_a <- partial(autotuner_rf_samp_a, pred.var = c("velocity"))
pdp_model_samp_a <- partial(rf_model_samp_a, pred.var = "velocity")
pdp_model_samp_a_c <- partial(rf_model_samp_a_c, pred.var = "velocity")

### relative abundance
# pdp_samp_ra <- partial(autotuner_rf_samp_ra, pred.var = c("velocity"))
pdp_model_samp_ra <- partial(rf_model_samp_ra, pred.var = "velocity")

pdp_model_samp_ra_c_v <- partial(rf_model_samp_ra_c, pred.var = "velocity") |>
  mutate(var_name = "velocity",
         var_val = velocity) |>
  dplyr::select(-velocity)

pdp_model_samp_ra_c_wd <- partial(rf_model_samp_ra_c, pred.var = "wd_m") |>
  mutate(var_name = "wd_m",
         var_val = wd_m) |>
  dplyr::select(-wd_m)

pdp_model_samp_ra_c_reach <- partial(rf_model_samp_ra_c, pred.var = "Reach_Untersuchungsstelle") |>
  mutate(var_name = "Reach_Untersuchungsstelle",
         var_val = Reach_Untersuchungsstelle) |>
  dplyr::select(-Reach_Untersuchungsstelle)

pdp_model_samp_ra_c_z <- partial(rf_model_samp_ra_c, pred.var = "z") |>
  mutate(var_name = "z",
         var_val = z) |>
  dplyr::select(-z)

pdp_model_samp_ra_c_dw <- partial(rf_model_samp_ra_c, pred.var = "dist_w") |>
  mutate(var_name = "dist_w",
         var_val = dist_w) |>
  dplyr::select(-dist_w)

pdp_model_samp_ra_c_cv <- partial(rf_model_samp_ra_c, pred.var = "cat_velocity") |>
  mutate(var_name = "cat_velocity",
         var_val = cat_velocity) |>
  dplyr::select(-cat_velocity)

pdp_model_samp_ra_c_ac <- partial(rf_model_samp_ra_c, pred.var = "alg_cover") |>
  mutate(var_name = "alg_cover",
         var_val = alg_cover) |>
  dplyr::select(-alg_cover)


pdp_model_samp_ra_c_mc <- partial(rf_model_samp_ra_c, pred.var = "moos_cover") |>
  mutate(var_name = "moos_cover",
         var_val = moos_cover) |>
  dplyr::select(-moos_cover)

pdp_all <- rbind(pdp_model_samp_ra_c_v, pdp_model_samp_ra_c_wd, pdp_model_samp_ra_c_z, pdp_model_samp_ra_c_dw, pdp_model_samp_ra_c_cv, pdp_model_samp_ra_c_ac, pdp_model_samp_ra_c_mc)
```

```{r}
### PREDICTOR: SAMPLING LOCATIONS ###
### k_index
# pdp_sec_k <- partial(autotuner_rf_sec_k, pred.var = c("velocity"))
pdp_model_sec_k <- partial(rf_model_sec_k, pred.var = c("velocity"))
pdp_model_sec_k_c <- partial(rf_model_sec_k_c, pred.var = "velocity")

### shannon index
# pdp_sec_s <- partial(autotuner_rf_sec_s, pred.var = c("velocity"))
pdp_model_sec_s <- partial(rf_model_sec_s, pred.var = "velocity")
pdp_model_sec_s_c <- partial(rf_model_sec_s_c, pred.var = "velocity")

### abundance
# pdp_sec_a <- partial(autotuner_rf_sec_a, pred.var = c("velocity"))
pdp_model_sec_a <- partial(rf_model_sec_a, pred.var = "velocity")
pdp_model_sec_a_c <- partial(rf_model_sec_a_c, pred.var = "velocity")

### relative abundance
# pdp_sec_ra <- partial(autotuner_rf_sec_ra, pred.var = c("velocity"))
pdp_model_sec_ra <- partial(rf_model_sec_ra, pred.var = "velocity")

pdp_model_sec_ra_c_v <- partial(rf_model_sec_ra_c, pred.var = "velocity") |>
  mutate(var_name = "velocity",
         var_val = velocity) |>
  dplyr::select(-velocity)

pdp_model_sec_ra_c_wd <- partial(rf_model_sec_ra_c, pred.var = "wd_m") |>
  mutate(var_name = "wd_m",
         var_val = wd_m) |>
  dplyr::select(-wd_m)

pdp_model_sec_ra_c_reach <- partial(rf_model_sec_ra_c, pred.var = "Reach_Untersuchungsstelle") |>
  mutate(var_name = "Reach_Untersuchungsstelle",
         var_val = Reach_Untersuchungsstelle) |>
  dplyr::select(-Reach_Untersuchungsstelle)

pdp_model_sec_ra_c_z <- partial(rf_model_sec_ra_c, pred.var = "z") |>
  mutate(var_name = "z",
         var_val = z) |>
  dplyr::select(-z)

pdp_model_sec_ra_c_dw <- partial(rf_model_sec_ra_c, pred.var = "dist_w") |>
  mutate(var_name = "dist_w",
         var_val = dist_w) |>
  dplyr::select(-dist_w)

pdp_model_sec_ra_c_cv <- partial(rf_model_sec_ra_c, pred.var = "cat_velocity") |>
  mutate(var_name = "cat_velocity",
         var_val = cat_velocity) |>
  dplyr::select(-cat_velocity)

pdp_model_sec_ra_c_ac <- partial(rf_model_sec_ra_c, pred.var = "alg_cover") |>
  mutate(var_name = "alg_cover",
         var_val = alg_cover) |>
  dplyr::select(-alg_cover)


pdp_model_sec_ra_c_mc <- partial(rf_model_sec_ra_c, pred.var = "moos_cover") |>
  mutate(var_name = "moos_cover",
         var_val = moos_cover) |>
  dplyr::select(-moos_cover)

pdp_all <- rbind(pdp_model_sec_ra_c_v, pdp_model_sec_ra_c_wd, pdp_model_sec_ra_c_z, pdp_model_sec_ra_c_dw, pdp_model_sec_ra_c_cv, pdp_model_sec_ra_c_ac, pdp_model_sec_ra_c_mc)
```

```{r}
pdp_wd_k <- partial(autotuner_rf_v_k, pred.var = "velocity") |>
  mutate(var_name = "velocity",
         var_val = velocity) |>
  dplyr::select(-velocity)


pdp_all <- rbind(pdp_plot_wd_k, pdp_plot_wd_v_k)

# Plot the PDP
# Create custom labels for each facet
#custom_labels <- c("Algae Cover (Cat)", "Cat. Velocity", "Dist. Waterline", "Moos Cover", "Velocity", "Water Depth", "Z (m.a.s.l.")  # Replace with your desired labels
#  facet_wrap(~var_name, scales = "free_x", labeller = labeller(var_name = custom_labels)) + 

ggplot(pdp_all, aes(var_val, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  facet_wrap(~var_name, scales = "free_x") + 
  geom_line() + 
  labs(
    x = "Value",
    y = "k-index"
  ) +
  theme_minimal() 
```

## Obs and Pred
```{r}
### ONLY VELOCITY AS PREDICTOR ###
# k_index and velocity
rf_predictions_v_k <- predict(autotuner_rf_v_k, newdata = test_v_k)
rf_pred_model_v_k <- predict(rf_model_v_k, data = test_v_k)$predictions
rf_pred_model_v_k_c <- predict(rf_model_v_k_c, data = test_v_k_c)$predictions

# shannon index and velocity
rf_predictions_v_s <- predict(autotuner_rf_v_s, newdata = test_v_s)
rf_pred_model_v_s <- predict(rf_model_v_s, data = test_v_s)$predictions
rf_pred_model_v_s_c <- predict(rf_model_v_s_c, data = test_v_s_c)$predictions

# abundance and velocity
rf_predictions_v_a <- predict(autotuner_rf_v_a, newdata = test_v_a)
rf_pred_model_v_a <- predict(rf_model_v_a, data = test_v_a)$predictions
rf_pred_model_v_a_c <- predict(rf_model_v_a_c, data = test_v_a_c)$predictions

# relative abundance and velocity
rf_predictions_v_ra <- predict(autotuner_rf_v_ra, newdata = test_v_ra)
rf_pred_model_v_ra <- predict(rf_model_v_ra, data = test_v_ra)$predictions
rf_pred_model_v_ra_c <- predict(rf_model_v_ra_c, data = test_v_ra_c)$predictions

### VELOCITY + WD AS PREDICTORS ###
# k_index and velocity + wd
rf_predictions_wd_k <- predict(autotuner_rf_wd_k, newdata = test_wd_k)
rf_pred_model_wd_k <- predict(rf_model_wd_k, data = test_wd_k)$predictions
rf_pred_model_wd_k_c <- predict(rf_model_wd_k_c, data = test_wd_k_c)$predictions

# shannon index and velocity + wd
rf_predictions_wd_s <- predict(autotuner_rf_wd_s, newdata = test_wd_s)
rf_pred_model_wd_s <- predict(rf_model_wd_s, data = test_wd_s)$predictions
rf_pred_model_wd_s_c <- predict(rf_model_wd_s_c, data = test_wd_s_c)$predictions

# abundance and velocity + wd
rf_predictions_wd_a <- predict(autotuner_rf_wd_a, newdata = test_wd_a)
rf_pred_model_wd_a <- predict(rf_model_wd_a, data = test_wd_a)$predictions
rf_pred_model_wd_a_c <- predict(rf_model_wd_a_c, data = test_wd_a_c)$predictions

# relative abundance and velocity + wd
rf_predictions_wd_ra <- predict(autotuner_rf_wd_ra, newdata = test_wd_ra)
rf_pred_model_wd_ra <- predict(rf_model_wd_ra, data = test_wd_ra)$predictions
rf_pred_model_wd_ra_c <- predict(rf_model_wd_ra_c, data = test_wd_ra_c)$predictions

### PREDICTORS: SAMPLING LOCATIONS ###
# k_index and sampling locations
rf_predictions_samp_k <- predict(autotuner_rf_samp_k, newdata = test_samp_k)
rf_pred_model_samp_k <- predict(rf_model_samp_k, data = test_samp_k)$predictions
rf_pred_model_samp_k_c <- predict(rf_model_samp_k_c, data = test_samp_k_c)$predictions

# shannon index and sampling locations
rf_predictions_samp_s <- predict(autotuner_rf_samp_s, newdata = test_samp_s)
rf_pred_model_samp_s <- predict(rf_model_samp_s, data = test_samp_s)$predictions
rf_pred_model_samp_s_c <- predict(rf_model_samp_s_c, data = test_samp_s_c)$predictions

# abundance and sampling locations
rf_predictions_samp_a <- predict(autotuner_rf_samp_a, newdata = test_samp_a)
rf_pred_model_samp_a <- predict(rf_model_samp_a, data = test_samp_a)$predictions
rf_pred_model_samp_a_c <- predict(rf_model_samp_a_c, data = test_samp_a_c)$predictions

# abundance and sampling locations
rf_predictions_samp_ra <- predict(autotuner_rf_samp_ra, newdata = test_samp_ra)
rf_pred_model_samp_ra <- predict(rf_model_samp_ra, data = test_samp_ra)$predictions
rf_pred_model_samp_ra_c <- predict(rf_model_samp_ra_c, data = test_samp_ra_c)$predictions

### PREDICTORS: ALL PREDICTORS ###
# k_index and all predictors
rf_predictions_sec_k <- predict(autotuner_rf_sec_k, newdata = test_sec_k)
rf_pred_model_sec_k <- predict(rf_model_sec_k, data = test_sec_k)$predictions
rf_pred_model_sec_k_c <- predict(rf_model_sec_k_c, data = test_sec_k_c)$predictions

# shannon index and all predictors
rf_predictions_sec_s <- predict(autotuner_rf_sec_s, newdata = test_sec_s)
rf_pred_model_sec_s <- predict(rf_model_sec_s, data = test_sec_s)$predictions
rf_pred_model_sec_s_c <- predict(rf_model_sec_s_c, data = test_sec_s_c)$predictions

# abundance and all predictors
rf_predictions_sec_a <- predict(autotuner_rf_sec_a, newdata = test_sec_a)
rf_pred_model_sec_a <- predict(rf_model_sec_a, data = test_sec_a)$predictions
rf_pred_model_sec_a_c <- predict(rf_model_sec_a_c, data = test_sec_a_c)$predictions

# abundance and all predictors
rf_predictions_sec_ra <- predict(autotuner_rf_sec_ra, newdata = test_sec_ra)
rf_pred_model_sec_ra <- predict(rf_model_sec_ra, data = test_sec_ra)$predictions
rf_pred_model_sec_ra_c <- predict(rf_model_sec_ra_c, data = test_sec_ra_c)$predictions
```

```{r}
### ONLY VELOCITY AS PREDICTOR ###
# k_index and velocity
responses_v_k <- test_v_k$k_index

# shannon index and velocity
responses_v_s <- test_v_s$shannon

# abundance and velocity
responses_v_a <- test_v_a$abundance

# relative abundance and velocity
responses_v_ra <- test_v_ra$rel_abundance

### VELOCITY + WD AS PREDICTORS ###
# k_index and velocity + wd
responses_wd_k <- test_wd_k$k_index

# shannon index and velocity + wd
responses_wd_s <- test_wd_s$shannon

# abundance and velocity + wd
responses_wd_a <- test_wd_a$abundance

# relative abundance and velocity + wd
responses_wd_ra <- test_wd_ra$rel_abundance

### PREDICTORS: SAMPLING LOCATIONS ###
# k_index and sampling locations
responses_samp_k <- test_samp_k$k_index

# shannon index and sampling locations
responses_samp_s <- test_samp_s$shannon

# abundance and sampling locations
responses_samp_a <- test_samp_a$abundance

# relative abundance and sampling locations
responses_samp_ra <- test_samp_ra$rel_abundance

### PREDICTORS: ALL PREDICTORS ###
# k_index and all predictors
responses_sec_k <- test_sec_k$k_index

# shannon index and all predictors
responses_sec_s <- test_sec_s$shannon

# abundance and all predictors
responses_sec_a <- test_sec_a$abundance

# relative abundance and all predictors
responses_sec_ra <- test_sec_ra$rel_abundance
```

## Deviance explained (R2)
```{r}
# Calculate R-squared
### ONLY VELOCITY AS PREDICTOR ###
# k_index and velocity 
r2_v_k <- R2(pred = rf_predictions_v_k, obs = responses_v_k)
r2_model_v_k <- R2(pred = rf_pred_model_v_k, obs = responses_v_k)
r2_model_v_k_c <- R2(pred = rf_pred_model_v_k_c, obs = responses_v_k)

# shannon index and velocity 
r2_v_s <- R2(pred = rf_predictions_v_s, obs = responses_v_s)
r2_model_v_s <- R2(pred = rf_pred_model_v_s, obs = responses_v_s)
r2_model_v_s_c <- R2(pred = rf_pred_model_v_s_c, obs = responses_v_s)

# abundance and velocity 
r2_v_a <- R2(pred = rf_predictions_v_a, obs = responses_v_a)
r2_model_v_a <- R2(pred = rf_pred_model_v_a, obs = responses_v_a)
r2_model_v_a_c <- R2(pred = rf_pred_model_v_a_c, obs = responses_v_a)

# relative abundance and velocity 
r2_v_ra <- R2(pred = rf_predictions_v_ra, obs = responses_v_ra)
r2_model_v_ra <- R2(pred = rf_pred_model_v_ra, obs = responses_v_ra)
r2_model_v_ra_c <- R2(pred = rf_pred_model_v_ra_c, obs = responses_v_ra)

### VELOCITY + WD AS PREDICTORS ###
# k_index and velocity + wd
r2_wd_k <- R2(pred = rf_predictions_wd_k, obs = responses_wd_k)
r2_model_wd_k <- R2(pred = rf_pred_model_wd_k, obs = responses_wd_k)
r2_model_wd_k_c <- R2(pred = rf_pred_model_wd_k_c, obs = responses_wd_k)

# shannon index and velocity + wd 
r2_wd_s <- R2(pred = rf_predictions_wd_s, obs = responses_wd_s)
r2_model_wd_s <- R2(pred = rf_pred_model_wd_s, obs = responses_wd_s)
r2_model_wd_s_c <- R2(pred = rf_pred_model_wd_s_c, obs = responses_wd_s)

# abundance and velocity + wd 
r2_wd_a <- R2(pred = rf_predictions_wd_a, obs = responses_wd_a)
r2_model_wd_a <- R2(pred = rf_pred_model_wd_a, obs = responses_wd_a)
r2_model_wd_a_c <- R2(pred = rf_pred_model_wd_a_c, obs = responses_wd_a)

# relative abundance and velocity + wd 
r2_wd_ra <- R2(pred = rf_predictions_wd_ra, obs = responses_wd_ra)
r2_model_wd_ra <- R2(pred = rf_pred_model_wd_ra, obs = responses_wd_ra)
r2_model_wd_ra_c <- R2(pred = rf_pred_model_wd_ra_c, obs = responses_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ###
# k_index and sampling locations
r2_samp_k <- R2(pred = rf_predictions_samp_k, obs = responses_samp_k)
r2_model_samp_k <- R2(pred = rf_pred_model_samp_k, obs = responses_samp_k)
r2_model_samp_k_c <- R2(pred = rf_pred_model_samp_k_c, obs = responses_samp_k)

# shannon index and sampling locations
r2_samp_s <- R2(pred = rf_predictions_samp_s, obs = responses_samp_s)
r2_model_samp_s <- R2(pred = rf_pred_model_samp_s, obs = responses_samp_s)
r2_model_samp_s_c <- R2(pred = rf_pred_model_samp_s_c, obs = responses_samp_s)

# abundance and sampling locations
r2_samp_a <- R2(pred = rf_predictions_samp_a, obs = responses_samp_a)
r2_model_samp_a <- R2(pred = rf_pred_model_samp_a, obs = responses_samp_a)
r2_model_samp_a_c <- R2(pred = rf_pred_model_samp_a_c, obs = responses_samp_a)

# relative abundance and sampling locations
r2_samp_ra <- R2(pred = rf_predictions_samp_ra, obs = responses_samp_ra)
r2_model_samp_ra <- R2(pred = rf_pred_model_samp_ra, obs = responses_samp_ra)
r2_model_samp_ra_c <- R2(pred = rf_pred_model_samp_ra_c, obs = responses_samp_ra)

### PREDICTORS: ALL PREDICTORS ###
# k_index and all predictors
r2_sec_k <- R2(pred = rf_predictions_sec_k, obs = responses_sec_k)
r2_model_sec_k <- R2(pred = rf_pred_model_sec_k, obs = responses_sec_k)
r2_model_sec_k_c <- R2(pred = rf_pred_model_sec_k_c, obs = responses_sec_k)

# shannon index and all predictors
r2_sec_s <- R2(pred = rf_predictions_sec_s, obs = responses_sec_s)
r2_model_sec_s <- R2(pred = rf_pred_model_sec_s, obs = responses_sec_s)
r2_model_sec_s_c <- R2(pred = rf_pred_model_sec_s_c, obs = responses_sec_s)

# abundance and all predictors
r2_sec_a <- R2(pred = rf_predictions_sec_a, obs = responses_sec_a)
r2_model_sec_a <- R2(pred = rf_pred_model_sec_a, obs = responses_sec_a)
r2_model_sec_a_c <- R2(pred = rf_pred_model_sec_a_c, obs = responses_sec_a)

# relative abundance and all predictors
r2_sec_ra <- R2(pred = rf_predictions_sec_ra, obs = responses_sec_ra)
r2_model_sec_ra <- R2(pred = rf_pred_model_sec_ra, obs = responses_sec_ra)
r2_model_sec_ra_c <- R2(pred = rf_pred_model_sec_ra_c, obs = responses_sec_ra)
```

## RMSE & MAE
```{r}
### ONLY VELOCITY AS PREDICTOR ###
# k_index and velocity
rmse_v_k <- rmse(actual = responses_v_k, predicted = rf_predictions_v_k)
rmse_model_v_k <- rmse(actual = responses_v_k, predicted = rf_pred_model_v_k)
rmse_model_v_k_c <- rmse(actual = responses_v_k, predicted = rf_pred_model_v_k_c)

mae_v_k <- mae(actual = responses_v_k, predicted = rf_predictions_v_k)
mae_model_v_k <- mae(actual = responses_v_k, predicted = rf_pred_model_v_k)
mae_model_v_k_c <- mae(actual = responses_v_k, predicted = rf_pred_model_v_k_c)

# shannon index and velocity
rmse_v_s <- rmse(actual = responses_v_s, predicted = rf_predictions_v_s)
rmse_model_v_s <- rmse(actual = responses_v_s, predicted = rf_pred_model_v_s)
rmse_model_v_s_c <- rmse(actual = responses_v_s, predicted = rf_pred_model_v_s_c)

mae_v_s <- mae(actual = responses_v_s, predicted = rf_predictions_v_s)
mae_model_v_s <- mae(actual = responses_v_s, predicted = rf_pred_model_v_s)
mae_model_v_s_c <- mae(actual = responses_v_s, predicted = rf_pred_model_v_s_c)

# abundance and velocity
rmse_v_a <- rmse(actual = responses_v_a, predicted = rf_predictions_v_a)
rmse_model_v_a <- rmse(actual = responses_v_a, predicted = rf_pred_model_v_a)
rmse_model_v_a_c <- rmse(actual = responses_v_a, predicted = rf_pred_model_v_a_c)

mae_v_a <- mae(actual = responses_v_a, predicted = rf_predictions_v_a)
mae_model_v_a <- mae(actual = responses_v_a, predicted = rf_pred_model_v_a)
mae_model_v_a_c <- mae(actual = responses_v_a, predicted = rf_pred_model_v_a_c)

# relative abundance and velocity
rmse_v_ra <- rmse(actual = responses_v_ra, predicted = rf_predictions_v_ra)
rmse_model_v_ra <- rmse(actual = responses_v_ra, predicted = rf_pred_model_v_ra)
rmse_model_v_ra_c <- rmse(actual = responses_v_ra, predicted = rf_pred_model_v_ra_c)

mae_v_ra <- mae(actual = responses_v_ra, predicted = rf_predictions_v_ra)
mae_model_v_ra <- mae(actual = responses_v_ra, predicted = rf_pred_model_v_ra)
mae_model_v_ra_c <- mae(actual = responses_v_ra, predicted = rf_pred_model_v_ra_c)
```

```{r}
### VELOCITY + WD AS PREDICTORS ###
# k_index and velocity + wd
rmse_wd_k <- rmse(actual = responses_wd_k, predicted = rf_predictions_wd_k)
rmse_model_wd_k <- rmse(actual = responses_wd_k, predicted = rf_pred_model_wd_k)
rmse_model_wd_k_c <- rmse(actual = responses_wd_k, predicted = rf_pred_model_wd_k_c)

mae_wd_k <- mae(actual = responses_wd_k, predicted = rf_predictions_wd_k)
mae_model_wd_k <- mae(actual = responses_wd_k, predicted = rf_pred_model_wd_k)
mae_model_wd_k_c <- mae(actual = responses_wd_k, predicted = rf_pred_model_wd_k_c)

# shannon index and velocity + wd
rmse_wd_s <- rmse(actual = responses_wd_s, predicted = rf_predictions_wd_s)
rmse_model_wd_s <- rmse(actual = responses_wd_s, predicted = rf_pred_model_wd_s)
rmse_model_wd_s_c <- rmse(actual = responses_wd_s, predicted = rf_pred_model_wd_s_c)

mae_wd_s <- mae(actual = responses_wd_s, predicted = rf_predictions_wd_s)
mae_model_wd_s <- mae(actual = responses_wd_s, predicted = rf_pred_model_wd_s)
mae_model_wd_s_c <- mae(actual = responses_wd_s, predicted = rf_pred_model_wd_s_c)

# abundance and velocity + wd
rmse_wd_a <- rmse(actual = responses_wd_a, predicted = rf_predictions_wd_a)
rmse_model_wd_a <- rmse(actual = responses_wd_a, predicted = rf_pred_model_wd_a)
rmse_model_wd_a_c <- rmse(actual = responses_wd_a, predicted = rf_pred_model_wd_a_c)

mae_wd_a <- mae(actual = responses_wd_a, predicted = rf_predictions_wd_a)
mae_model_wd_a <- mae(actual = responses_wd_a, predicted = rf_pred_model_wd_a)
mae_model_wd_a_c <- mae(actual = responses_wd_a, predicted = rf_pred_model_wd_a_c)

# relative abundance and velocity + wd
rmse_wd_ra <- rmse(actual = responses_wd_ra, predicted = rf_predictions_wd_ra)
rmse_model_wd_ra <- rmse(actual = responses_wd_ra, predicted = rf_pred_model_wd_ra)
rmse_model_wd_ra_c <- rmse(actual = responses_wd_ra, predicted = rf_pred_model_wd_ra_c)

mae_wd_ra <- mae(actual = responses_wd_ra, predicted = rf_predictions_wd_ra)
mae_model_wd_ra <- mae(actual = responses_wd_ra, predicted = rf_pred_model_wd_ra)
mae_model_wd_ra_c <- mae(actual = responses_wd_ra, predicted = rf_pred_model_wd_ra_c)
```

```{r}
### PREDICTORS: SAMPLING LOCATIONS ###
# k_index and sampling locations
rmse_samp_k <- rmse(actual = responses_samp_k, predicted = rf_predictions_samp_k)
rmse_model_samp_k <- rmse(actual = responses_samp_k, predicted = rf_pred_model_samp_k)
rmse_model_samp_k_c <- rmse(actual = responses_samp_k, predicted = rf_pred_model_samp_k_c)

mae_samp_k <- mae(actual = responses_samp_k, predicted = rf_predictions_samp_k)
mae_model_samp_k <- mae(actual = responses_samp_k, predicted = rf_pred_model_samp_k)
mae_model_samp_k_c <- mae(actual = responses_samp_k, predicted = rf_pred_model_samp_k_c)

# shannon index and sampling locations
rmse_samp_s <- rmse(actual = responses_samp_s, predicted = rf_predictions_samp_s)
rmse_model_samp_s <- rmse(actual = responses_samp_s, predicted = rf_pred_model_samp_s)
rmse_model_samp_s_c <- rmse(actual = responses_samp_s, predicted = rf_pred_model_samp_s_c)

mae_samp_s <- mae(actual = responses_samp_s, predicted = rf_predictions_samp_s)
mae_model_samp_s <- mae(actual = responses_samp_s, predicted = rf_pred_model_samp_s)
mae_model_samp_s_c <- mae(actual = responses_samp_s, predicted = rf_pred_model_samp_s_c)

# abundance and sampling locations
rmse_samp_a <- rmse(actual = responses_samp_a, predicted = rf_predictions_samp_a)
rmse_model_samp_a <- rmse(actual = responses_samp_a, predicted = rf_pred_model_samp_a)
rmse_model_samp_a_c <- rmse(actual = responses_samp_a, predicted = rf_pred_model_samp_a_c)

mae_samp_a <- mae(actual = responses_samp_a, predicted = rf_predictions_samp_a)
mae_model_samp_a <- mae(actual = responses_samp_a, predicted = rf_pred_model_samp_a)
mae_model_samp_a_c <- mae(actual = responses_samp_a, predicted = rf_pred_model_samp_a_c)

# relative abundance and sampling locations
rmse_samp_ra <- rmse(actual = responses_samp_ra, predicted = rf_predictions_samp_ra)
rmse_model_samp_ra <- rmse(actual = responses_samp_ra, predicted = rf_pred_model_samp_ra)
rmse_model_samp_ra_c <- rmse(actual = responses_samp_ra, predicted = rf_pred_model_samp_ra_c)

mae_samp_ra <- mae(actual = responses_samp_ra, predicted = rf_predictions_samp_ra)
mae_model_samp_ra <- mae(actual = responses_samp_ra, predicted = rf_pred_model_samp_ra)
mae_model_samp_ra_c <- mae(actual = responses_samp_ra, predicted = rf_pred_model_samp_ra_c)
```

```{r}
### PREDICTORS: ALL PREDICTORS ###
# k_index and all predictors
rmse_sec_k <- rmse(actual = responses_sec_k, predicted = rf_predictions_sec_k)
rmse_model_sec_k <- rmse(actual = responses_sec_k, predicted = rf_pred_model_sec_k)
rmse_model_sec_k_c <- rmse(actual = responses_sec_k, predicted = rf_pred_model_sec_k_c)

mae_sec_k <- mae(actual = responses_sec_k, predicted = rf_predictions_sec_k)
mae_model_sec_k <- mae(actual = responses_sec_k, predicted = rf_pred_model_sec_k)
mae_model_sec_k_c <- mae(actual = responses_sec_k, predicted = rf_pred_model_sec_k_c)

# shannon index and all predictors
rmse_sec_s <- rmse(actual = responses_sec_s, predicted = rf_predictions_sec_s)
rmse_model_sec_s <- rmse(actual = responses_sec_s, predicted = rf_pred_model_sec_s)
rmse_model_sec_s_c <- rmse(actual = responses_sec_s, predicted = rf_pred_model_sec_s_c)

mae_sec_s <- mae(actual = responses_sec_s, predicted = rf_predictions_sec_s)
mae_model_sec_s <- mae(actual = responses_sec_s, predicted = rf_pred_model_sec_s)
mae_model_sec_s_c <- mae(actual = responses_sec_s, predicted = rf_pred_model_sec_s_c)

# abundance and all predictors
rmse_sec_a <- rmse(actual = responses_sec_a, predicted = rf_predictions_sec_a)
rmse_model_sec_a <- rmse(actual = responses_sec_a, predicted = rf_pred_model_sec_a)
rmse_model_sec_a_c <- rmse(actual = responses_sec_a, predicted = rf_pred_model_sec_a_c)

mae_sec_a <- mae(actual = responses_sec_a, predicted = rf_predictions_sec_a)
mae_model_sec_a <- mae(actual = responses_sec_a, predicted = rf_pred_model_sec_a)
mae_model_sec_a_c <- mae(actual = responses_sec_a, predicted = rf_pred_model_sec_a_c)

# relative abundance and all predictors
rmse_sec_ra <- rmse(actual = responses_sec_ra, predicted = rf_predictions_sec_ra)
rmse_model_sec_ra <- rmse(actual = responses_sec_ra, predicted = rf_pred_model_sec_ra)
rmse_model_sec_ra_c <- rmse(actual = responses_sec_ra, predicted = rf_pred_model_sec_ra_c)

mae_sec_ra <- mae(actual = responses_sec_ra, predicted = rf_predictions_sec_ra)
mae_model_sec_ra <- mae(actual = responses_sec_ra, predicted = rf_pred_model_sec_ra)
mae_model_sec_ra_c <- mae(actual = responses_sec_ra, predicted = rf_pred_model_sec_ra_c)
```

## Bias 
```{r}
library(Fgmutils) # for bias calculation (bias() function)
# Calculate the differences between predicted and actual values
### ONLY VELOCITY AS PREDICTOR ###
# k_index and velocity
bias_v_k <- bias(observados = responses_v_k, estimados = rf_predictions_v_k)
bias_model_v_k <- bias(observados = responses_v_k, estimados = rf_pred_model_v_k)
bias_model_v_k_c <- bias(observados = responses_v_k, estimados = rf_pred_model_v_k_c)

# shannon index and velocity
bias_v_s <- bias(observados = responses_v_s, estimados = rf_predictions_v_s)
bias_model_v_s <- bias(observados = responses_v_s, estimados = rf_pred_model_v_s)
bias_model_v_s_c <- bias(observados = responses_v_s, estimados = rf_pred_model_v_s_c)

# abundance and velocity
bias_v_a <- bias(observados = responses_v_a, estimados = rf_predictions_v_a)
bias_model_v_a <- bias(observados = responses_v_a, estimados = rf_pred_model_v_a)
bias_model_v_a_c <- bias(observados = responses_v_a, estimados = rf_pred_model_v_a_c)

# relative abundance and velocity
bias_v_ra <- bias(observados = responses_v_ra, estimados = rf_predictions_v_ra)
bias_model_v_ra <- bias(observados = responses_v_ra, estimados = rf_pred_model_v_ra)
bias_model_v_ra_c <- bias(observados = responses_v_ra, estimados = rf_pred_model_v_ra_c)

### VELOCITY + WD AS PREDICTORS ###
# k_index and velocity + wd
bias_wd_k <- bias(observados = responses_wd_k, estimados = rf_predictions_wd_k)
bias_model_wd_k <- bias(observados = responses_wd_k, estimados = rf_pred_model_wd_k)
bias_model_wd_k_c <- bias(observados = responses_wd_k, estimados = rf_pred_model_wd_k_c)

# shannon index and velocity + wd
bias_wd_s <- bias(observados = responses_wd_s, estimados = rf_predictions_wd_s)
bias_model_wd_s <- bias(observados = responses_wd_s, estimados = rf_pred_model_wd_s)
bias_model_wd_s_c <- bias(observados = responses_wd_s, estimados = rf_pred_model_wd_s_c)

# abundance and velocity + wd
bias_wd_a <- bias(observados = responses_wd_a, estimados = rf_predictions_wd_a)
bias_model_wd_a <- bias(observados = responses_wd_a, estimados = rf_pred_model_wd_a)
bias_model_wd_a_c <- bias(observados = responses_wd_a, estimados = rf_pred_model_wd_a_c)

# relative abundance and velocity + wd
bias_wd_ra <- bias(observados = responses_wd_ra, estimados = rf_predictions_wd_ra)
bias_model_wd_ra <- bias(observados = responses_wd_ra, estimados = rf_pred_model_wd_ra)
bias_model_wd_ra_c <- bias(observados = responses_wd_ra, estimados = rf_pred_model_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ###
# k_index and sampling locations
bias_samp_k <- bias(observados = responses_samp_k, 
                    estimados = rf_predictions_samp_k)
bias_model_samp_k <- bias(observados = responses_samp_k, 
                    estimados = rf_pred_model_samp_k)
bias_model_samp_k_c <- bias(observados = responses_samp_k, 
                    estimados = rf_pred_model_samp_k_c)

# shannon index and sampling locations
bias_samp_s <- bias(observados = responses_samp_s, 
                    estimados = rf_predictions_samp_s)
bias_model_samp_s <- bias(observados = responses_samp_s, 
                    estimados = rf_pred_model_samp_s)
bias_model_samp_s_c <- bias(observados = responses_samp_s, 
                    estimados = rf_pred_model_samp_s_c)

# abundance and sampling locations
bias_samp_a <- bias(observados = responses_samp_a, 
                    estimados = rf_predictions_samp_a)
bias_model_samp_a <- bias(observados = responses_samp_a, 
                    estimados = rf_pred_model_samp_a)
bias_model_samp_a_c <- bias(observados = responses_samp_a, 
                    estimados = rf_pred_model_samp_a_c)

# relative abundance and sampling locations
bias_samp_ra <- bias(observados = responses_samp_ra, 
                    estimados = rf_predictions_samp_ra)
bias_model_samp_ra <- bias(observados = responses_samp_ra, 
                    estimados = rf_pred_model_samp_ra)
bias_model_samp_ra_c <- bias(observados = responses_samp_ra, 
                    estimados = rf_pred_model_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ###
# k_index and all predictors
bias_sec_k <- bias(observados = responses_sec_k, 
                    estimados = rf_predictions_sec_k)
bias_model_sec_k <- bias(observados = responses_sec_k, 
                    estimados = rf_pred_model_sec_k)
bias_model_sec_k_c <- bias(observados = responses_sec_k, 
                    estimados = rf_pred_model_sec_k_c)

# shannon index and all predictors
bias_sec_s <- bias(observados = responses_sec_s, 
                    estimados = rf_predictions_sec_s)
bias_model_sec_s <- bias(observados = responses_sec_s, 
                    estimados = rf_pred_model_sec_s)
bias_model_sec_s_c <- bias(observados = responses_sec_s, 
                    estimados = rf_pred_model_sec_s_c)

# abundance and all predictors
bias_sec_a <- bias(observados = responses_sec_a, 
                    estimados = rf_predictions_sec_a)
bias_model_sec_a <- bias(observados = responses_sec_a, 
                    estimados = rf_pred_model_sec_a)
bias_model_sec_a_c <- bias(observados = responses_sec_a, 
                    estimados = rf_pred_model_sec_a_c)

# relative abundance and all predictors
bias_sec_ra <- bias(observados = responses_sec_ra, 
                    estimados = rf_predictions_sec_ra)
bias_model_sec_ra <- bias(observados = responses_sec_ra, 
                    estimados = rf_pred_model_sec_ra)
bias_model_sec_ra_c <- bias(observados = responses_sec_ra, 
                    estimados = rf_pred_model_sec_ra_c)
```

## Nash-Sutcliffe efficiency (NSE) 
```{r}
#install.packages("hydroGOF")
library(hydroGOF) # for NSE calculation with NSE() function 
# Calculate the NSE
### ONLY VELOCITY AS PREDICTOR ###
# k_index and velocity
nse_v_k <- NSE(sim = rf_predictions_v_k, obs = responses_v_k)
nse_model_v_k <- NSE(sim = rf_pred_model_v_k, obs = responses_v_k)
nse_model_v_k_c <- NSE(sim = rf_pred_model_v_k_c, obs = responses_v_k)

# shannon index and velocity
nse_v_s <- NSE(sim = rf_predictions_v_s, obs = responses_v_s)
nse_model_v_s <- NSE(sim = rf_pred_model_v_s, obs = responses_v_s)
nse_model_v_s_c <- NSE(sim = rf_pred_model_v_s_c, obs = responses_v_s)

# abundance and velocity
nse_v_a <- NSE(sim = rf_predictions_v_a, obs = responses_v_a)
nse_model_v_a <- NSE(sim = rf_pred_model_v_a, obs = responses_v_a)
nse_model_v_a_c <- NSE(sim = rf_pred_model_v_a_c, obs = responses_v_a)

# relative abundance and velocity
nse_v_ra <- NSE(sim = rf_predictions_v_ra, obs = responses_v_ra)
nse_model_v_ra <- NSE(sim = rf_pred_model_v_ra, obs = responses_v_ra)
nse_model_v_ra_c <- NSE(sim = rf_pred_model_v_ra_c, obs = responses_v_ra)

### VELOCITY + WD AS PREDICTORS ###
# k_index and velocity + wd
nse_wd_k <- NSE(sim = rf_predictions_wd_k, obs = responses_wd_k)
nse_model_wd_k <- NSE(sim = rf_pred_model_wd_k, obs = responses_wd_k)
nse_model_wd_k_c <- NSE(sim = rf_pred_model_wd_k_c, obs = responses_wd_k)

# shannon index and velocity + wd
nse_wd_s <- NSE(sim = rf_predictions_wd_s, obs = responses_wd_s)
nse_model_wd_s <- NSE(sim = rf_pred_model_wd_s, obs = responses_wd_s)
nse_model_wd_s_c <- NSE(sim = rf_pred_model_wd_s_c, obs = responses_wd_s)

# abundance and velocity + wd
nse_wd_a <- NSE(sim = rf_predictions_wd_a, obs = responses_wd_a)
nse_model_wd_a <- NSE(sim = rf_pred_model_wd_a, obs = responses_wd_a)
nse_model_wd_a_c <- NSE(sim = rf_pred_model_wd_a_c, obs = responses_wd_a)

# relative abundance and velocity + wd
nse_wd_ra <- NSE(sim = rf_predictions_wd_ra, obs = responses_wd_ra)
nse_model_wd_ra <- NSE(sim = rf_pred_model_wd_ra, obs = responses_wd_ra)
nse_model_wd_ra_c <- NSE(sim = rf_pred_model_wd_ra_c, obs = responses_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ###
# k_index and sampling locations
nse_samp_k <- NSE(sim = rf_predictions_samp_k, obs = responses_samp_k)
nse_model_samp_k <- NSE(sim = rf_pred_model_samp_k, obs = responses_samp_k)
nse_model_samp_k_c <- NSE(sim = rf_pred_model_samp_k_c, obs = responses_samp_k)

# shannon index and sampling locations
nse_samp_s <- NSE(sim = rf_predictions_samp_s, obs = responses_samp_s)
nse_model_samp_s <- NSE(sim = rf_pred_model_samp_s, obs = responses_samp_s)
nse_model_samp_s_c <- NSE(sim = rf_pred_model_samp_s_c, obs = responses_samp_s)

# abundance and sampling locations
nse_samp_a <- NSE(sim = rf_predictions_samp_a, obs = responses_samp_a)
nse_model_samp_a <- NSE(sim = rf_pred_model_samp_a, obs = responses_samp_a)
nse_model_samp_a_c <- NSE(sim = rf_pred_model_samp_a_c, obs = responses_samp_a)

# relative abundance and sampling locations
nse_samp_ra <- NSE(sim = rf_predictions_samp_ra, obs = responses_samp_ra)
nse_model_samp_ra <- NSE(sim = rf_pred_model_samp_ra, obs = responses_samp_ra)
nse_model_samp_ra_c <- NSE(sim = rf_pred_model_samp_ra_c, obs = responses_samp_ra)

### PREDICTORS: ALL PREDICTORS ###
# k_index and all predictors
nse_sec_k <- NSE(sim = rf_predictions_sec_k, obs = responses_sec_k)
nse_model_sec_k <- NSE(sim = rf_pred_model_sec_k, obs = responses_sec_k)
nse_model_sec_k_c <- NSE(sim = rf_pred_model_sec_k_c, obs = responses_sec_k)

# shannon index and all predictors
nse_sec_s <- NSE(sim = rf_predictions_sec_s, obs = responses_sec_s)
nse_model_sec_s <- NSE(sim = rf_pred_model_sec_s, obs = responses_sec_s)
nse_model_sec_s_c <- NSE(sim = rf_pred_model_sec_s_c, obs = responses_sec_s)

# abundance and all predictors
nse_sec_a <- NSE(sim = rf_predictions_sec_a, obs = responses_sec_a)
nse_model_sec_a <- NSE(sim = rf_pred_model_sec_a, obs = responses_sec_a)
nse_model_sec_a_c <- NSE(sim = rf_pred_model_sec_a_c, obs = responses_sec_a)

# relative abundance and all predictors
nse_sec_ra <- NSE(sim = rf_predictions_sec_ra, obs = responses_sec_ra)
nse_model_sec_ra <- NSE(sim = rf_pred_model_sec_ra, obs = responses_sec_ra)
nse_model_sec_ra_c <- NSE(sim = rf_pred_model_sec_ra_c, obs = responses_sec_ra)
```

## Write Evaluation Results 
```{r}
# write evaluation metrics into df
metric_results <- data.frame(nse = c(nse_v_k, nse_model_v_k, nse_model_v_k_c, nse_v_s, nse_model_v_s, nse_model_v_s_c, nse_v_a, nse_model_v_a, nse_model_v_a_c, nse_v_ra, nse_model_v_ra, nse_model_v_ra_c, nse_wd_k, nse_model_wd_k, nse_model_wd_k_c, nse_wd_s, nse_model_wd_s, nse_model_wd_s_c, nse_wd_a, nse_model_wd_a, nse_model_wd_a_c, nse_wd_ra, nse_model_wd_ra, nse_model_wd_ra_c, nse_samp_k, nse_model_samp_k, nse_model_samp_k_c, nse_samp_s, nse_model_samp_s, nse_model_samp_s_c, nse_samp_a, nse_model_samp_a, nse_model_samp_a_c, nse_samp_ra, nse_model_samp_ra, nse_model_samp_ra_c, nse_sec_k, nse_model_sec_k, nse_model_sec_k_c, nse_sec_s, nse_model_sec_s, nse_model_sec_s_c, nse_sec_a, nse_model_sec_a, nse_model_sec_a_c, nse_sec_ra, nse_model_sec_ra, nse_model_sec_ra_c),

r2 = c(r2_v_k, r2_model_v_k, r2_model_v_k_c, r2_v_s, r2_model_v_s, r2_model_v_s_c, r2_v_a, r2_model_v_a, r2_model_v_a_c, r2_v_ra, r2_model_v_ra, r2_model_v_ra_c, r2_wd_k, r2_model_wd_k, r2_model_wd_k_c, r2_wd_s, r2_model_wd_s, r2_model_wd_s_c, r2_wd_a, r2_model_wd_a, r2_model_wd_a_c, r2_wd_ra, r2_model_wd_ra, r2_model_wd_ra_c, r2_samp_k, r2_model_samp_k, r2_model_samp_k_c, r2_samp_s, r2_model_samp_s, r2_model_samp_s_c, r2_samp_a, r2_model_samp_a, r2_model_samp_a_c, r2_samp_ra, r2_model_samp_ra, r2_model_samp_ra_c, r2_sec_k, r2_model_sec_k, r2_model_sec_k_c, r2_sec_s, r2_model_sec_s, r2_model_sec_s_c, r2_sec_a, r2_model_sec_a, r2_model_sec_a_c, r2_sec_ra, r2_model_sec_ra, r2_model_sec_ra_c),

bias = c(bias_v_k, bias_model_v_k, bias_model_v_k_c, bias_v_s, bias_model_v_s, bias_model_v_s_c, bias_v_a, bias_model_v_a, bias_model_v_a_c, bias_v_ra, bias_model_v_ra, bias_model_v_ra_c, bias_wd_k, bias_model_wd_k, bias_model_wd_k_c, bias_wd_s, bias_model_wd_s, bias_model_wd_s_c, bias_wd_a, bias_model_wd_a, bias_model_wd_a_c, bias_wd_ra, bias_model_wd_ra, bias_model_wd_ra_c, bias_samp_k, bias_model_samp_k, bias_model_samp_k_c, bias_samp_s, bias_model_samp_s, bias_model_samp_s_c, bias_samp_a, bias_model_samp_a, bias_model_samp_a_c, bias_samp_ra, bias_model_samp_ra, bias_model_samp_ra_c, bias_sec_k, bias_model_sec_k, bias_model_sec_k_c, bias_sec_s, bias_model_sec_s, bias_model_sec_s_c, bias_sec_a, bias_model_sec_a, bias_model_sec_a_c, bias_sec_ra, bias_model_sec_ra, bias_model_sec_ra_c),

rmse = c(rmse_v_k, rmse_model_v_k, rmse_model_v_k_c, rmse_v_s, rmse_model_v_s, rmse_model_v_s_c, rmse_v_a, rmse_model_v_a, rmse_model_v_a_c, rmse_v_ra, rmse_model_v_ra, rmse_model_v_ra_c, rmse_wd_k, rmse_model_wd_k, rmse_model_wd_k_c, rmse_wd_s, rmse_model_wd_s, rmse_model_wd_s_c, rmse_wd_a, rmse_model_wd_a, rmse_model_wd_a_c, rmse_wd_ra, rmse_model_wd_ra, rmse_model_wd_ra_c, rmse_samp_k, rmse_model_samp_k, rmse_model_samp_k_c, rmse_samp_s, rmse_model_samp_s, rmse_model_samp_s_c, rmse_samp_a, rmse_model_samp_a, rmse_model_samp_a_c, rmse_samp_ra, rmse_model_samp_ra, rmse_model_samp_ra_c, rmse_sec_k, rmse_model_sec_k, rmse_model_sec_k_c, rmse_sec_s, rmse_model_sec_s, rmse_model_sec_s_c, rmse_sec_a, rmse_model_sec_a, rmse_model_sec_a_c, rmse_sec_ra, rmse_model_sec_ra, rmse_model_sec_ra_c), 

mae = c(mae_v_k, mae_model_v_k, mae_model_v_k_c, mae_v_s, mae_model_v_s, mae_model_v_s_c, mae_v_a, mae_model_v_a, mae_model_v_a_c, mae_v_ra, mae_model_v_ra, mae_model_v_ra_c, mae_wd_k, mae_model_wd_k, mae_model_wd_k_c, mae_wd_s, mae_model_wd_s, mae_model_wd_s_c, mae_wd_a, mae_model_wd_a, mae_model_wd_a_c, mae_wd_ra, mae_model_wd_ra, mae_model_wd_ra_c, mae_samp_k, mae_model_samp_k, mae_model_samp_k_c, mae_samp_s, mae_model_samp_s, mae_model_samp_s_c, mae_samp_a, mae_model_samp_a, mae_model_samp_a_c, mae_samp_ra, mae_model_samp_ra, mae_model_samp_ra_c, mae_sec_k, mae_model_sec_k, mae_model_sec_k_c, mae_sec_s, mae_model_sec_s, mae_model_sec_s_c, mae_sec_a, mae_model_sec_a, mae_model_sec_a_c, mae_sec_ra, mae_model_sec_ra, mae_model_sec_ra_c), 

index = c("k_index", "k_index", "k_index", "shannon", "shannon", "shannon", "abundance", "abundance", "abundance", "rel_abundance", "rel_abundance", "rel_abundance", "k_index", "k_index", "k_index", "shannon", "shannon", "shannon", "abundance", "abundance", "abundance", "rel_abundance", "rel_abundance", "rel_abundance", "k_index", "k_index", "k_index", "shannon", "shannon", "shannon", "abundance", "abundance", "abundance", "rel_abundance", "rel_abundance", "rel_abundance", "k_index", "k_index", "k_index", "shannon", "shannon", "shannon", "abundance", "abundance", "abundance", "rel_abundance", "rel_abundance", "rel_abundance"),

predictor = c("v", "v", "v", "v", "v", "v", "v", "v", "v", "v", "v", "v",
"v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", "v + wd", 
"samp", "samp", "samp", "samp", "samp", "samp", "samp", "samp", "samp", "samp", "samp", "samp",
"all", "all", "all", "all", "all", "all", "all", "all", "all", "all", "all", "all"),

model = c("autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord", "autotuner", "ranger", "ranger w/o coord"))

# write results into a .csv 
write.csv(metric_results, "Stat_Analysis/ml_evaluation_metrics_rf.csv", row.names = FALSE)
```
 
# Extract 
### Predict to maps ML models - here RF
Ersetze Raster durch Raster vom MZB Sampling Tag 
```{r}
# read rasters containing wd and velocity 
GL1_ezg <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg.grd")
GL1_q <- stack("Pre_Processing/rasters_stacked/GL1_3_28.grd")

GL2_ezg <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg.grd")
GL2_q <- stack("Pre_Processing/rasters_stacked/GL2_3_21.grd")

L2_ezg <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg.grd")
L2_q <- stack("Pre_Processing/rasters_stacked/L2_2_40.grd")

M1_ezg <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg.grd")
M1_q <- stack("Pre_Processing/rasters_stacked/M1_0_47.grd")

S1_ezg <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg.grd")
S1_q <- stack("Pre_Processing/rasters_stacked/S1_2_00.grd")

S2_ezg <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg.grd")
S2_q <- stack("Pre_Processing/rasters_stacked/S2_2_00.grd")

TH4_ezg <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg.grd")
TH4_q <- stack("Pre_Processing/rasters_stacked/TH4_11_45.grd")

VR3_ezg <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg.grd")
VR3_q <- stack("Pre_Processing/rasters_stacked/VR3_2_90.grd")

# rename rasters in stacks for extraction 
names(GL1_ezg) <- c("velocity", "wd_m")  
names(GL1_q) <- c("velocity", "wd_m") 

names(GL2_ezg) <- c("velocity", "wd_m") 
names(GL2_q) <- c("velocity", "wd_m")

names(L2_ezg) <- c("velocity", "wd_m")
names(L2_q) <- c("velocity", "wd_m")

names(M1_ezg) <- c("velocity", "wd_m") 
names(M1_q) <- c("velocity", "wd_m") 

names(S1_ezg) <- c("velocity", "wd_m")  
names(S1_q) <- c("velocity", "wd_m")  

names(S2_ezg) <- c("velocity", "wd_m") 
names(S2_q) <- c("velocity", "wd_m") 

names(TH4_ezg) <- c("velocity", "wd_m") 
names(TH4_q) <- c("velocity", "wd_m") 

names(VR3_ezg) <- c("velocity", "wd_m")
names(VR3_q) <- c("velocity", "wd_m") 

# assign coordinate system 
crs(GL1_ezg) <- "EPSG: 2056"
crs(GL1_q) <- "EPSG: 2056"

crs(GL2_ezg) <- "EPSG: 2056"
crs(GL2_q) <- "EPSG: 2056"

crs(L2_ezg) <- "EPSG: 2056"
crs(L2_q) <- "EPSG: 2056"

crs(M1_ezg) <- "EPSG: 2056"
crs(M1_q) <- "EPSG: 2056"

crs(S1_ezg) <- "EPSG: 2056"
crs(S1_q) <- "EPSG: 2056"

crs(S2_ezg) <- "EPSG: 2056"
crs(S2_q) <- "EPSG: 2056"

crs(TH4_ezg) <- "EPSG: 2056"
crs(TH4_q) <- "EPSG: 2056"

crs(VR3_ezg) <- "EPSG: 2056"
crs(VR3_q) <- "EPSG: 2056"
```

### Predict Models to Maps 
```{r}
# predict ML model to rasters with velocity and wd 
# GL1 - all indices with velocity and wd as predictors
GL1_ezg_rf_wd_k <- terra::predict(GL1_ezg, model = autotuner_rf_wd_k, fun = predict, index = 2)
GL1_q_rf_wd_k <- terra::predict(GL1_q, model = autotuner_rf_wd_k, fun = predict, index = 2)

GL1_ezg_rf_wd_s <- terra::predict(GL1_ezg, model = autotuner_rf_wd_s, fun = predict, index = 2)
GL1_q_rf_wd_s <- terra::predict(GL1_q, model = autotuner_rf_wd_s, fun = predict, index = 2)

GL1_ezg_rf_wd_a <- terra::predict(GL1_ezg, model = autotuner_rf_wd_a, fun = predict, index = 2)
GL1_q_rf_wd_a <- terra::predict(GL1_q, model = autotuner_rf_wd_a, fun = predict, index = 2)

GL1_ezg_rf_wd_ra <- terra::predict(GL1_ezg, model = autotuner_rf_wd_ra, fun = predict, index = 2)
GL1_q_rf_wd_ra <- terra::predict(GL1_q, model = autotuner_rf_wd_ra, fun = predict, index = 2)

# GL1 - all indices with only velocity as predictor
GL1_ezg_rf_v_k <- terra::predict(GL1_ezg, model = autotuner_rf_v_k, fun = predict, index = "velocity")
GL1_q_rf_v_k <- terra::predict(GL1_q, model = autotuner_rf_v_k, fun = predict, index = "velocity")

GL1_ezg_rf_v_s <- terra::predict(GL1_ezg, model = autotuner_rf_v_s, fun = predict, index = "velocity")
GL1_q_rf_v_s <- terra::predict(GL1_q, model = autotuner_rf_v_s, fun = predict, index = "velocity")

GL1_ezg_rf_v_a <- terra::predict(GL1_ezg, model = autotuner_rf_v_a, fun = predict, index = "velocity")
GL1_q_rf_v_a <- terra::predict(GL1_q, model = autotuner_rf_v_a, fun = predict, index = "velocity")

GL1_ezg_rf_v_ra <- terra::predict(GL1_ezg, model = autotuner_rf_v_ra, fun = predict, index = "velocity")
GL1_q_rf_v_ra <- terra::predict(GL1_q, model = autotuner_rf_v_ra, fun = predict, index = "velocity")
```


```{r}
# GL2 - all indices with velocity and wd as predictors 
GL2_ezg_rf_wd_k <- terra::predict(GL2_ezg, model = autotuner_rf_wd_k, fun = predict, index = 2)
GL2_q_rf_wd_k <- terra::predict(GL2_q, model = autotuner_rf_wd_k, fun = predict, index = 2)

GL2_ezg_rf_wd_s <- terra::predict(GL2_ezg, model = autotuner_rf_wd_s, fun = predict, index = 2)
GL2_q_rf_wd_s <- terra::predict(GL2_q, model = autotuner_rf_wd_s, fun = predict, index = 2)

GL2_ezg_rf_wd_a <- terra::predict(GL2_ezg, model = autotuner_rf_wd_a, fun = predict, index = 2)
GL2_q_rf_wd_a <- terra::predict(GL2_q, model = autotuner_rf_wd_a, fun = predict, index = 2)

GL2_ezg_rf_wd_ra <- terra::predict(GL2_ezg, model = autotuner_rf_wd_ra, fun = predict, index = 2)
GL2_q_rf_wd_ra <- terra::predict(GL2_q, model = autotuner_rf_wd_ra, fun = predict, index = 2)

# GL2 - all indices with only velocity predictor
GL2_ezg_rf_v_k <- terra::predict(GL2_ezg, model = autotuner_rf_v_k, fun = predict, index = "velocity")
GL2_q_rf_v_k <- terra::predict(GL2_q, model = autotuner_rf_v_k, fun = predict, index = "velocity")

GL2_ezg_rf_v_s <- terra::predict(GL2_ezg, model = autotuner_rf_v_s, fun = predict, index = "velocity")
GL2_q_rf_v_s <- terra::predict(GL2_q, model = autotuner_rf_v_s, fun = predict, index = "velocity")

GL2_ezg_rf_v_a <- terra::predict(GL2_ezg, model = autotuner_rf_v_a, fun = predict, index = "velocity")
GL2_q_rf_v_a <- terra::predict(GL2_q, model = autotuner_rf_v_a, fun = predict, index = "velocity")

GL2_ezg_rf_v_ra <- terra::predict(GL2_ezg, model = autotuner_rf_v_ra, fun = predict, index = "velocity")
GL2_q_rf_v_ra <- terra::predict(GL2_q, model = autotuner_rf_v_ra, fun = predict, index = "velocity")

# L2 - all indices with velocity and wd as predictors 
L2_ezg_rf_wd_k <- terra::predict(L2_ezg, model = autotuner_rf_wd_k, fun = predict, index = 2)
L2_q_rf_wd_k <- terra::predict(L2_q, model = autotuner_rf_wd_k, fun = predict, index = 2)

L2_ezg_rf_wd_s <- terra::predict(L2_ezg, model = autotuner_rf_wd_s, fun = predict, index = 2)
L2_q_rf_wd_s <- terra::predict(L2_q, model = autotuner_rf_wd_s, fun = predict, index = 2)

L2_ezg_rf_wd_a <- terra::predict(L2_ezg, model = autotuner_rf_wd_a, fun = predict, index = 2)
L2_q_rf_wd_a <- terra::predict(L2_q, model = autotuner_rf_wd_a, fun = predict, index = 2)

L2_ezg_rf_wd_ra <- terra::predict(L2_ezg, model = autotuner_rf_wd_ra, fun = predict, index = 2)
L2_q_rf_wd_ra <- terra::predict(L2_q, model = autotuner_rf_wd_ra, fun = predict, index = 2)

# L2 - all indices with only velocity as predictor
L2_ezg_rf_v_k <- terra::predict(L2_ezg, model = autotuner_rf_v_k, fun = predict, index = "velocity")
L2_q_rf_v_k <- terra::predict(L2_q, model = autotuner_rf_v_k, fun = predict, index = "velocity")

L2_ezg_rf_v_s <- terra::predict(L2_ezg, model = autotuner_rf_v_s, fun = predict, index = "velocity")
L2_q_rf_v_s <- terra::predict(L2_q, model = autotuner_rf_v_s, fun = predict, index = "velocity")

L2_ezg_rf_v_a <- terra::predict(L2_ezg, model = autotuner_rf_v_a, fun = predict, index = "velocity")
L2_q_rf_v_a <- terra::predict(L2_q, model = autotuner_rf_v_a, fun = predict, index = "velocity")

L2_ezg_rf_v_ra <- terra::predict(L2_ezg, model = autotuner_rf_v_ra, fun = predict, index = "velocity")
L2_q_rf_v_ra <- terra::predict(L2_q, model = autotuner_rf_v_ra, fun = predict, index = "velocity")

# M1  - all indices with velocity and wd as predictors 
M1_ezg_rf_wd_k <- terra::predict(M1_ezg, model = autotuner_rf_wd_k, fun = predict, index = 2)
M1_q_rf_wd_k <- terra::predict(M1_q, model = autotuner_rf_wd_k, fun = predict, index = 2)

M1_ezg_rf_wd_s <- terra::predict(M1_samp, model = autotuner_rf_wd_s, fun = predict, index = 2)
M1_ezg_rf_wd_a <- terra::predict(M1_samp, model = autotuner_rf_wd_a, fun = predict, index = 2)

# M1  - all indices with only velocity as predictor
M1_ezg_rf_v_k <- terra::predict(M1_samp, model = autotuner_rf_v_k, fun = predict, index = "velocity")
M1_ezg_rf_v_s <- terra::predict(M1_samp, model = autotuner_rf_v_s, fun = predict, index = "velocity")
M1_ezg_rf_v_a <- terra::predict(M1_samp, model = autotuner_rf_v_a, fun = predict, index = "velocity")

# S1  - all indices with velocity and wd as predictors 
S1_ezg_rf_wd_k <- terra::predict(S1_samp, model = autotuner_rf_wd_k, fun = predict, index = 2)
S1_ezg_rf_wd_s <- terra::predict(S1_samp, model = autotuner_rf_wd_s, fun = predict, index = 2)
S1_ezg_rf_wd_a <- terra::predict(S1_samp, model = autotuner_rf_wd_a, fun = predict, index = 2)

# S1  - all indices with only velocity as predictor
S1_ezg_rf_v_k <- terra::predict(S1_samp, model = autotuner_rf_v_k, fun = predict, index = "velocity")
S1_ezg_rf_v_s <- terra::predict(S1_samp, model = autotuner_rf_v_s, fun = predict, index = "velocity")
S1_ezg_rf_v_a <- terra::predict(S1_samp, model = autotuner_rf_v_a, fun = predict, index = "velocity")

# S2  - all indices with velocity and wd as predictors 
S2_ezg_rf_wd_k <- terra::predict(S2_samp, model = autotuner_rf_wd_k, fun = predict, index = 2)
S2_ezg_rf_wd_s <- terra::predict(S2_samp, model = autotuner_rf_wd_s, fun = predict, index = 2)
S2_ezg_rf_wd_a <- terra::predict(S2_samp, model = autotuner_rf_wd_a, fun = predict, index = 2)

# S2  - all indices with only velocity as predictor
S2_ezg_rf_v_k <- terra::predict(S2_samp, model = autotuner_rf_v_k, fun = predict, index = "velocity")
S2_ezg_rf_v_s <- terra::predict(S2_samp, model = autotuner_rf_v_s, fun = predict, index = "velocity")
S2_ezg_rf_v_a <- terra::predict(S2_samp, model = autotuner_rf_v_a, fun = predict, index = "velocity")

# TH4  - all indices with velocity and wd as predictors 
TH4_ezg_rf_wd_k <- terra::predict(TH4_samp, model = autotuner_rf_wd_k, fun = predict, index = 2)
TH4_ezg_rf_wd_s <- terra::predict(TH4_samp, model = autotuner_rf_wd_s, fun = predict, index = 2)
TH4_ezg_rf_wd_a <- terra::predict(TH4_samp, model = autotuner_rf_wd_a, fun = predict, index = 2)

# TH4  - all indices with only velocity as predictor
TH4_ezg_rf_v_k <- terra::predict(TH4_samp, model = autotuner_rf_v_k, fun = predict, index = "velocity")
TH4_ezg_rf_v_s <- terra::predict(TH4_samp, model = autotuner_rf_v_s, fun = predict, index = "velocity")
TH4_ezg_rf_v_a <- terra::predict(TH4_samp, model = autotuner_rf_v_a, fun = predict, index = "velocity")

# VR3  - all indices with velocity and wd as predictors 
VR3_ezg_rf_wd_k <- terra::predict(VR3_samp, model = autotuner_rf_wd_k, fun = predict, index = 2)
VR3_ezg_rf_wd_s <- terra::predict(VR3_samp, model = autotuner_rf_wd_s, fun = predict, index = 2)
VR3_ezg_rf_wd_a <- terra::predict(VR3_samp, model = autotuner_rf_wd_a, fun = predict, index = 2)

# VR3  - all indices with only velocity as predictor
VR3_ezg_rf_v_k <- terra::predict(VR3_samp, model = autotuner_rf_v_k, fun = predict, index = "velocity")
VR3_ezg_rf_v_s <- terra::predict(VR3_samp, model = autotuner_rf_v_s, fun = predict, index = "velocity")
VR3_ezg_rf_v_a <- terra::predict(VR3_samp, model = autotuner_rf_v_a, fun = predict, index = "velocity")
```

```{r}
# read all raster results (one time flow velocity classes and one time for habitat suitability)
# prep extraction data 
## GL1
coord_GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1") |>
  dplyr::select(x, y) 

GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1")

## GL2
coord_GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2") |>
  dplyr::select(x, y) 

GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2")

## L2
coord_L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2") |>
  dplyr::select(x, y) 

L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2")

## M1
coord_M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1") |>
  dplyr::select(x, y) 

M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1")

## S1
coord_S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1") |>
  dplyr::select(x, y) 

S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1")

## S2
coord_S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2") |>
  dplyr::select(x, y) 

S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2")

## TH4
coord_TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4") |>
  dplyr::select(x, y) 

TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4")

## VR3
coord_VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3") |>
  dplyr::select(x, y) 

VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3")
```

### Extract Results
```{r}
# extract raster information for regression analysis later
# GL1 
regr_rf_data_GL1_wd_k <- raster::extract(GL1_ezg_rf_wd_k, coord_GL1) 
regr_rf_data_GL1_wd_s <- raster::extract(GL1_ezg_rf_wd_s, coord_GL1) 
regr_rf_data_GL1_wd_a <- raster::extract(GL1_ezg_rf_wd_a, coord_GL1) 

regr_rf_data_GL1_v_k <- raster::extract(GL1_ezg_rf_v_k, coord_GL1) 
regr_rf_data_GL1_v_s <- raster::extract(GL1_ezg_rf_v_s, coord_GL1) 
regr_rf_data_GL1_v_a <- raster::extract(GL1_ezg_rf_v_a, coord_GL1) 

# GL2
regr_rf_data_GL2_wd_k <- raster::extract(GL2_ezg_rf_wd_k, coord_GL2) 
regr_rf_data_GL2_wd_s <- raster::extract(GL2_ezg_rf_wd_s, coord_GL2) 
regr_rf_data_GL2_wd_a <- raster::extract(GL2_ezg_rf_wd_a, coord_GL2) 

regr_rf_data_GL2_v_k <- raster::extract(GL2_ezg_rf_v_k, coord_GL2) 
regr_rf_data_GL2_v_s <- raster::extract(GL2_ezg_rf_v_s, coord_GL2) 
regr_rf_data_GL2_v_a <- raster::extract(GL2_ezg_rf_v_a, coord_GL2)

# L2
regr_rf_data_L2_wd_k <- raster::extract(L2_ezg_rf_wd_k, coord_L2) 
regr_rf_data_L2_wd_s <- raster::extract(L2_ezg_rf_wd_s, coord_L2) 
regr_rf_data_L2_wd_a <- raster::extract(L2_ezg_rf_wd_a, coord_L2) 

regr_rf_data_L2_v_k <- raster::extract(L2_ezg_rf_v_k, coord_L2) 
regr_rf_data_L2_v_s <- raster::extract(L2_ezg_rf_v_s, coord_L2) 
regr_rf_data_L2_v_a <- raster::extract(L2_ezg_rf_v_a, coord_L2)


# M1
regr_rf_data_M1_wd_k <- raster::extract(M1_ezg_rf_wd_k, coord_M1) 
regr_rf_data_M1_wd_s <- raster::extract(M1_ezg_rf_wd_s, coord_M1) 
regr_rf_data_M1_wd_a <- raster::extract(M1_ezg_rf_wd_a, coord_M1) 

regr_rf_data_M1_v_k <- raster::extract(M1_ezg_rf_v_k, coord_M1) 
regr_rf_data_M1_v_s <- raster::extract(M1_ezg_rf_v_s, coord_M1) 
regr_rf_data_M1_v_a <- raster::extract(M1_ezg_rf_v_a, coord_M1)


# S1
regr_rf_data_S1_wd_k <- raster::extract(S1_ezg_rf_wd_k, coord_S1) 
regr_rf_data_S1_wd_s <- raster::extract(S1_ezg_rf_wd_s, coord_S1) 
regr_rf_data_S1_wd_a <- raster::extract(S1_ezg_rf_wd_a, coord_S1) 

regr_rf_data_S1_v_k <- raster::extract(S1_ezg_rf_v_k, coord_S1) 
regr_rf_data_S1_v_s <- raster::extract(S1_ezg_rf_v_s, coord_S1) 
regr_rf_data_S1_v_a <- raster::extract(S1_ezg_rf_v_a, coord_S1)

# S2
regr_rf_data_S2_wd_k <- raster::extract(S2_ezg_rf_wd_k, coord_S2) 
regr_rf_data_S2_wd_s <- raster::extract(S2_ezg_rf_wd_s, coord_S2) 
regr_rf_data_S2_wd_a <- raster::extract(S2_ezg_rf_wd_a, coord_S2) 

regr_rf_data_S2_v_k <- raster::extract(S2_ezg_rf_v_k, coord_S2) 
regr_rf_data_S2_v_s <- raster::extract(S2_ezg_rf_v_s, coord_S2) 
regr_rf_data_S2_v_a <- raster::extract(S2_ezg_rf_v_a, coord_S2)

# TH4
regr_rf_data_TH4_wd_k <- raster::extract(TH4_ezg_rf_wd_k, coord_TH4) 
regr_rf_data_TH4_wd_s <- raster::extract(TH4_ezg_rf_wd_s, coord_TH4) 
regr_rf_data_TH4_wd_a <- raster::extract(TH4_ezg_rf_wd_a, coord_TH4) 

regr_rf_data_TH4_v_k <- raster::extract(TH4_ezg_rf_v_k, coord_TH4) 
regr_rf_data_TH4_v_s <- raster::extract(TH4_ezg_rf_v_s, coord_TH4) 
regr_rf_data_TH4_v_a <- raster::extract(TH4_ezg_rf_v_a, coord_TH4)

# VR3
regr_rf_data_VR3_wd_k <- raster::extract(VR3_ezg_rf_wd_k, coord_VR3) 
regr_rf_data_VR3_wd_s <- raster::extract(VR3_ezg_rf_wd_s, coord_VR3) 
regr_rf_data_VR3_wd_a <- raster::extract(VR3_ezg_rf_wd_a, coord_VR3) 

regr_rf_data_VR3_v_k <- raster::extract(VR3_ezg_rf_v_k, coord_VR3) 
regr_rf_data_VR3_v_s <- raster::extract(VR3_ezg_rf_v_s, coord_VR3) 
regr_rf_data_VR3_v_a <- raster::extract(VR3_ezg_rf_v_a, coord_VR3)
```

### Combine into DF
```{r}
# combine all results into dataframe
# GL1
data_GL1 <- cbind(regr_rf_data_GL1_wd_k, regr_rf_data_GL1_wd_s, regr_rf_data_GL1_wd_a, regr_rf_data_GL1_v_k, regr_rf_data_GL1_v_s, regr_rf_data_GL1_v_a, GL1) |>
  rename(rf_pred_k_index_2 = regr_rf_data_GL1_wd_k,
         rf_pred_shannon_2 = regr_rf_data_GL1_wd_s,
         rf_pred_abundance_2 = regr_rf_data_GL1_wd_a,
         rf_pred_k_index_v = regr_rf_data_GL1_v_k,
         rf_pred_shannon_v = regr_rf_data_GL1_v_s,
         rf_pred_abundance_v = regr_rf_data_GL1_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# GL2
data_GL2 <- cbind(regr_rf_data_GL2_wd_k, regr_rf_data_GL2_wd_s, regr_rf_data_GL2_wd_a, regr_rf_data_GL2_v_k, regr_rf_data_GL2_v_s, regr_rf_data_GL2_v_a, GL2) |>
  rename(rf_pred_k_index_2 = regr_rf_data_GL2_wd_k,
         rf_pred_shannon_2 = regr_rf_data_GL2_wd_s,
         rf_pred_abundance_2 = regr_rf_data_GL2_wd_a,
         rf_pred_k_index_v = regr_rf_data_GL2_v_k,
         rf_pred_shannon_v = regr_rf_data_GL2_v_s,
         rf_pred_abundance_v = regr_rf_data_GL2_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# L2
data_L2 <- cbind(regr_rf_data_L2_wd_k, regr_rf_data_L2_wd_s, regr_rf_data_L2_wd_a, regr_rf_data_L2_v_k, regr_rf_data_L2_v_s, regr_rf_data_L2_v_a, L2) |>
  rename(rf_pred_k_index_2 = regr_rf_data_L2_wd_k,
         rf_pred_shannon_2 = regr_rf_data_L2_wd_s,
         rf_pred_abundance_2 = regr_rf_data_L2_wd_a,
         rf_pred_k_index_v = regr_rf_data_L2_v_k,
         rf_pred_shannon_v = regr_rf_data_L2_v_s,
         rf_pred_abundance_v = regr_rf_data_L2_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# M1
data_M1 <- cbind(regr_rf_data_M1_wd_k, regr_rf_data_M1_wd_s, regr_rf_data_M1_wd_a, regr_rf_data_M1_v_k, regr_rf_data_M1_v_s, regr_rf_data_M1_v_a, M1) |>
  rename(rf_pred_k_index_2 = regr_rf_data_M1_wd_k,
         rf_pred_shannon_2 = regr_rf_data_M1_wd_s,
         rf_pred_abundance_2 = regr_rf_data_M1_wd_a,
         rf_pred_k_index_v = regr_rf_data_M1_v_k,
         rf_pred_shannon_v = regr_rf_data_M1_v_s,
         rf_pred_abundance_v = regr_rf_data_M1_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# S1
data_S1 <- cbind(regr_rf_data_S1_wd_k, regr_rf_data_S1_wd_s, regr_rf_data_S1_wd_a, regr_rf_data_S1_v_k, regr_rf_data_S1_v_s, regr_rf_data_S1_v_a, S1) |>
  rename(rf_pred_k_index_2 = regr_rf_data_S1_wd_k,
         rf_pred_shannon_2 = regr_rf_data_S1_wd_s,
         rf_pred_abundance_2 = regr_rf_data_S1_wd_a,
         rf_pred_k_index_v = regr_rf_data_S1_v_k,
         rf_pred_shannon_v = regr_rf_data_S1_v_s,
         rf_pred_abundance_v = regr_rf_data_S1_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# S2
data_S2 <- cbind(regr_rf_data_S2_wd_k, regr_rf_data_S2_wd_s, regr_rf_data_S2_wd_a, regr_rf_data_S2_v_k, regr_rf_data_S2_v_s, regr_rf_data_S2_v_a, S2) |>
  rename(rf_pred_k_index_2 = regr_rf_data_S2_wd_k,
         rf_pred_shannon_2 = regr_rf_data_S2_wd_s,
         rf_pred_abundance_2 = regr_rf_data_S2_wd_a,
         rf_pred_k_index_v = regr_rf_data_S2_v_k,
         rf_pred_shannon_v = regr_rf_data_S2_v_s,
         rf_pred_abundance_v = regr_rf_data_S2_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# TH4
data_TH4 <- cbind(regr_rf_data_TH4_wd_k, regr_rf_data_TH4_wd_s, regr_rf_data_TH4_wd_a, regr_rf_data_TH4_v_k, regr_rf_data_TH4_v_s, regr_rf_data_TH4_v_a, TH4) |>
  rename(rf_pred_k_index_2 = regr_rf_data_TH4_wd_k,
         rf_pred_shannon_2 = regr_rf_data_TH4_wd_s,
         rf_pred_abundance_2 = regr_rf_data_TH4_wd_a,
         rf_pred_k_index_v = regr_rf_data_TH4_v_k,
         rf_pred_shannon_v = regr_rf_data_TH4_v_s,
         rf_pred_abundance_v = regr_rf_data_TH4_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance)

# VR3
data_VR3 <- cbind(regr_rf_data_VR3_wd_k, regr_rf_data_VR3_wd_s, regr_rf_data_VR3_wd_a, regr_rf_data_VR3_v_k, regr_rf_data_VR3_v_s, regr_rf_data_VR3_v_a, VR3) |>
  rename(rf_pred_k_index_2 = regr_rf_data_VR3_wd_k,
         rf_pred_shannon_2 = regr_rf_data_VR3_wd_s,
         rf_pred_abundance_2 = regr_rf_data_VR3_wd_a,
         rf_pred_k_index_v = regr_rf_data_VR3_v_k,
         rf_pred_shannon_v = regr_rf_data_VR3_v_s,
         rf_pred_abundance_v = regr_rf_data_VR3_v_a,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance) 
```

### Results from Extraction 
```{r}
# bind results together 
# data_TH4 fehlt noch
regr_analysis <- rbind(data_GL1, data_GL2, data_L2, data_M1, data_S1, data_S2, data_TH4, data_VR3)

# export to .csv file
write.csv(regr_analysis, "Stat_Analysis/ml_regr_analysis_rf.csv", row.names = FALSE)
```