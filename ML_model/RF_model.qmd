---
title: "RF_model"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
pkgCheck("Fgmutils") # for bias calculation (bias() function)
pkgCheck("hydroGOF") # for NSE calculation with NSE() function 
```

# Load & prepare data 
```{r}
# Load data containing velocity as predictor variable 
data_v <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_v.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing velocity and wd as predictors 
data_wd <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_wd_v.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing all variables measured at each sampling locations and remove all other "chr" variables
data_sampling <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_sampling.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type) |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing all variables measured at each river section and remove all other "chr" variables
# Additionally, remove ox_sat columns, as they contain NA values
data_section <- read_delim("Pre_Processing/abiotic_mi_sampling/ml_sel_var_2.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach) |>
  na.omit()

# load data containing selected variables 
data_var <- read_delim("Pre_Processing/abiotic_mi_sampling/ml_sel_var_2.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)|>
  na.omit() |>
  dplyr::select(Reach_Untersuchungsstelle, z, x, y, velocity, wd_m, k_index, shannon, abundance, rel_abundance, ecomorph_class, biogeo_int, mean_diff_nitrogen, mean_diff_phosphor) 
```
    
```{r}
### TRAINING SETS ###
# w/o hydr. models "GL1", "GL2", "L2", "M1", "S1", "S2", "TH4", "VR3"
# training set containing velocity 
training_v <- data_v |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing velocity + wd
training_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location 
training_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location and overall river section 
training_section <- data_section |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all variables selected 
training_var <- data_var |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4",
         Reach_Untersuchungsstelle != "VR3")

### TEST SETS ###
# test set containing velocity 
test_v <- data_v |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing velocity + wd
test_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location 
test_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location and overall river section 
test_section <- data_section |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# training set containing all variables selected 
test_var <- data_var |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")
```

## Training Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response 
training_v_k <- training_v |>
  dplyr::select(k_index, velocity, x, y)

# With shannon index as response 
training_v_s <- training_v |>
  dplyr::select(shannon, velocity, x, y)

# With abundance as response 
training_v_a <- training_v |>
  dplyr::select(abundance, velocity, x, y)

# With relative abundance as response  
training_v_ra <- training_v |>
  dplyr::select(rel_abundance, velocity, x, y)

### PREDICTOR: VELOCITY AND WD ### ---------------------------------------------
# With k_index as response 
training_wd_k <- training_wd |>
  dplyr::select(k_index, velocity, wd_m, x, y)

# With shannon index as response 
training_wd_s <- training_wd |>
  dplyr::select(shannon, velocity, wd_m, x, y)

# With abundance index as response 
training_wd_a <- training_wd |>
  dplyr::select(abundance, velocity, wd_m, x, y)

# With relative abundance index as response 
training_wd_ra <- training_wd |>
  dplyr::select(rel_abundance, velocity, wd_m, x, y)

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response 
training_samp_k <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_samp_a <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_samp_ra <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response 
training_sec_k <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_sec_a <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_sec_ra <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------------
# With k_index as response 
training_var_k <- training_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_var_s <- training_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_var_a <- training_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_var_ra <- training_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Training Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response 
training_v_k_c <- training_v |>
  dplyr::select(k_index, velocity)

# With shannon index as response
training_v_s_c <- training_v |>
  dplyr::select(shannon, velocity)

# With abundance as response
training_v_a_c <- training_v |>
  dplyr::select(abundance, velocity)

# With rel_abundance as response
training_v_ra_c <- training_v |>
  dplyr::select(rel_abundance, velocity)

### PREDICTOR: VELOCITY AND WD ### ----------------------------------
# With k_index as response 
training_wd_k_c <- training_wd |>
  dplyr::select(k_index, velocity, wd_m)

# With shannon index as response 
training_wd_s_c <- training_wd |>
  dplyr::select(shannon, velocity, wd_m)

# With abundance as response 
training_wd_a_c <- training_wd |>
  dplyr::select(abundance, velocity, wd_m)

# With rel_abundance as response 
training_wd_ra_c <- training_wd |>
  dplyr::select(rel_abundance, velocity, wd_m)

### PREDICTOR: SAMPLING LOCATIONS ### --------------------------------
# With k_index as response 
training_samp_k_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s_c <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_samp_a_c <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_samp_ra_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### ----------------------------------
# With k_index as response 
training_sec_k_c <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s_c <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_sec_a_c <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_sec_ra_c <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------------
# With k_index as response 
training_var_k_c <- training_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With shannon index as response 
training_var_s_c <- training_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With abundance index as response 
training_var_a_c <- training_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With relative abundance index as response 
training_var_ra_c <- training_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle, -x, -y)
```

## Test Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ------------------------------------------
# With k_index as response
test_v_k <- test_v |>
  dplyr::select(k_index, velocity, x, y) 

# With shannon index as response
test_v_s <- test_v |>
  dplyr::select(shannon, velocity, x, y) 

# With abundance as response 
test_v_a <- test_v |>
  dplyr::select(abundance, velocity, x, y) 

# With relative abundance as response 
test_v_ra <- test_v |>
  dplyr::select(rel_abundance, velocity, x, y)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k <- test_wd |>
  dplyr::select(k_index, velocity, wd_m, x, y) 

# With shannon index as response 
test_wd_s <- test_wd |>
  dplyr::select(shannon, velocity, wd_m, x, y) 

# With abundance as response 
test_wd_a <- test_wd |>
  dplyr::select(abundance, velocity, wd_m, x, y)

# With relative abundance as response 
test_wd_ra <- test_wd |>
  dplyr::select(rel_abundance, velocity, wd_m, x, y)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response
test_samp_a <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_samp_ra <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
test_sec_s <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
test_sec_a <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_sec_ra <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------
# With k_index as response 
test_var_k <- test_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
test_var_s <- test_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
test_var_a <- test_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_var_ra <- test_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Test Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response
test_v_k_c <- test_v |>
  dplyr::select(k_index, velocity)

# With shannon index as response
test_v_s_c <- test_v |>
  dplyr::select(shannon, velocity) 

# With abundance as response
test_v_a_c <- test_v |>
  dplyr::select(abundance, velocity) 

# With rel_abundance as response
test_v_ra_c <- test_v |>
  dplyr::select(rel_abundance, velocity)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k_c <- test_wd |>
  dplyr::select(k_index, velocity, wd_m) 

# With shannon index as response 
test_wd_s_c <- test_wd |>
  dplyr::select(shannon, velocity, wd_m)

# With abundance as response 
test_wd_a_c <- test_wd |>
  dplyr::select(abundance, velocity, wd_m)

# With rel_abundance as response 
test_wd_ra_c <- test_wd |>
  dplyr::select(rel_abundance, velocity, wd_m)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s_c <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
test_samp_a_c <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
test_samp_ra_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k_c <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response
test_sec_s_c <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response
test_sec_a_c <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response
test_sec_ra_c <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------
# With k_index as response 
test_var_k_c <- test_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With shannon index as response 
test_var_s_c <- test_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With abundance index as response 
test_var_a_c <- test_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With relative abundance index as response 
test_var_ra_c <- test_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle, -x, -y)
```

# Random Forest 
## Hyperparameter tuning 
```{r}
# convert dataframes into spatial objects for mlr3 spatial hyperparameter tuning
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
data_v_k_sp <-  st_as_sf(training_v_k, coords =  c("x", "y"))
st_crs(data_v_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_v_s_sp <-  st_as_sf(training_v_s, coords =  c("x", "y"))
st_crs(data_v_s_sp) <- "EPSG: 2056"

# With abundance as response
data_v_a_sp <-  st_as_sf(training_v_a, coords =  c("x", "y"))
st_crs(data_v_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_v_ra_sp <-  st_as_sf(training_v_ra, coords =  c("x", "y"))
st_crs(data_v_ra_sp) <- "EPSG: 2056"

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# With k_index as response
data_wd_k_sp <-  st_as_sf(training_wd_k, coords =  c("x", "y"))
st_crs(data_wd_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_wd_s_sp <-  st_as_sf(training_wd_s, coords =  c("x", "y"))
st_crs(data_wd_s_sp) <- "EPSG: 2056"

# With abundance as response
data_wd_a_sp <-  st_as_sf(training_wd_a, coords =  c("x", "y"))
st_crs(data_wd_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_wd_ra_sp <-  st_as_sf(training_wd_ra, coords =  c("x", "y"))
st_crs(data_wd_ra_sp) <- "EPSG: 2056"

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response
data_samp_k_sp <-  st_as_sf(training_samp_k, coords =  c("x", "y"))
st_crs(data_samp_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_samp_s_sp <-  st_as_sf(training_samp_s, coords =  c("x", "y"))
st_crs(data_samp_s_sp) <- "EPSG: 2056"

# With abundance as response
data_samp_a_sp <-  st_as_sf(training_samp_a, coords =  c("x", "y"))
st_crs(data_samp_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_samp_ra_sp <-  st_as_sf(training_samp_ra, coords =  c("x", "y"))
st_crs(data_samp_ra_sp) <- "EPSG: 2056"

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response
data_sec_k_sp <-  st_as_sf(training_sec_k, coords =  c("x", "y"))
st_crs(data_sec_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_sec_s_sp <-  st_as_sf(training_sec_s, coords =  c("x", "y"))
st_crs(data_sec_s_sp) <- "EPSG: 2056"

# With abundance as response
data_sec_a_sp <-  st_as_sf(training_sec_a, coords =  c("x", "y"))
st_crs(data_sec_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_sec_ra_sp <-  st_as_sf(training_sec_ra, coords =  c("x", "y"))
st_crs(data_sec_ra_sp) <- "EPSG: 2056"

### PREDICTOR: SELECTED VARIABLES ### -------------------------------------
# With k_index as response
data_var_k_sp <-  st_as_sf(training_var_k, coords =  c("x", "y"))
st_crs(data_var_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_var_s_sp <-  st_as_sf(training_var_s, coords =  c("x", "y"))
st_crs(data_var_s_sp) <- "EPSG: 2056"

# With abundance as response
data_var_a_sp <-  st_as_sf(training_var_a, coords =  c("x", "y"))
st_crs(data_var_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_var_ra_sp <-  st_as_sf(training_var_ra, coords =  c("x", "y"))
st_crs(data_var_ra_sp) <- "EPSG: 2056"

```

### Create Task & Learner
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# TASK with k_index as response
task_rf_v_k <- mlr3spatiotempcv::as_task_regr_st(data_v_k_sp,
  id = "velocity_k_index", target = "k_index")

# TASK with shannon index as response
task_rf_v_s <- mlr3spatiotempcv::as_task_regr_st(data_v_s_sp,
  id = "velocity_shannon", target = "shannon")

# TASK with abundance as response
task_rf_v_a <- mlr3spatiotempcv::as_task_regr_st(data_v_a_sp,
  id = "velocity_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_v_ra <- mlr3spatiotempcv::as_task_regr_st(data_v_ra_sp,
  id = "velocity_rel_abundance", target = "rel_abundance")

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# TASK with k_index as response
task_rf_wd_k <- mlr3spatiotempcv::as_task_regr_st(data_wd_k_sp,
  id = "wd_k_index", target = "k_index")

# TASK with shannon index as response
task_rf_wd_s <- mlr3spatiotempcv::as_task_regr_st(data_wd_s_sp,
  id = "wd_shannon", target = "shannon")

# TASK with abundance as response
task_rf_wd_a <- mlr3spatiotempcv::as_task_regr_st(data_wd_a_sp,
  id = "wd_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_wd_ra <- mlr3spatiotempcv::as_task_regr_st(data_wd_ra_sp,
  id = "wd_rel_abundance", target = "rel_abundance")

### PREDICTORS: SAMPLING LOCATIONS ### -----------------------------------------
# TASK with k_index as response
task_rf_samp_k <- mlr3spatiotempcv::as_task_regr_st(data_samp_k_sp,
  id = "sampling_k_index", target = "k_index")

# TASK with shannon index as response
task_rf_samp_s <- mlr3spatiotempcv::as_task_regr_st(data_samp_s_sp,
  id = "sampling_shannon", target = "shannon")

# TASK with abundance as response
task_rf_samp_a <- mlr3spatiotempcv::as_task_regr_st(data_samp_a_sp,
  id = "sampling_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_samp_ra <- mlr3spatiotempcv::as_task_regr_st(data_samp_ra_sp,
  id = "sampling_rel_abundance", target = "rel_abundance")

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# TASK with k_index as response
task_rf_sec_k <- mlr3spatiotempcv::as_task_regr_st(data_sec_k_sp,
  id = "section_k_index", target = "k_index")

# TASK with shannon index as response 
task_rf_sec_s <- mlr3spatiotempcv::as_task_regr_st(data_sec_s_sp,
  id = "section_shannon", target = "shannon")

# TASK with abundance as response
task_rf_sec_a <- mlr3spatiotempcv::as_task_regr_st(data_sec_a_sp,
  id = "section_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_sec_ra <- mlr3spatiotempcv::as_task_regr_st(data_sec_ra_sp,
  id = "section_rel_abundance", target = "rel_abundance")

### PREDICTORS: SELECTED VARIABLES ### ---------------------------------------
# TASK with k_index as response
task_rf_var_k <- mlr3spatiotempcv::as_task_regr_st(data_var_k_sp,
  id = "var_k_index", target = "k_index")

# TASK with shannon index as response 
task_rf_var_s <- mlr3spatiotempcv::as_task_regr_st(data_var_s_sp,
  id = "var_shannon", target = "shannon")

# TASK with abundance as response
task_rf_var_a <- mlr3spatiotempcv::as_task_regr_st(data_var_a_sp,
  id = "var_abundance", target = "abundance")

# TASK with rel_abundance as response
task_rf_var_ra <- mlr3spatiotempcv::as_task_regr_st(data_var_ra_sp,
  id = "var_rel_abundance", target = "rel_abundance")

### LEARNER ### ---------------------------------------------------------------
# learner for a random forest model from the ranger package
lrn_rf <- lrn("regr.ranger", predict_type = "response", importance = "permutation")
```

### Specify Search Space
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# specify the search space for k_index as response
search_space_v_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_v_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_v_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_v_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_v_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# specify the search space for k_index as response
search_space_wd_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_wd_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_wd_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_wd_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_wd_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)


### PREDICTORS: SAMPLING LOCATIONS ### -----------------------------------------
# specify the search space for k_index as response
search_space_samp_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_samp_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_samp_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_samp_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_samp_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# specify the search space for k_index as response
search_space_sec_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_sec_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_sec_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_sec_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_sec_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# specify the search space for k_index as response
search_space_var_k <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_var_k$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for shannon index as response
search_space_var_s <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_var_s$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for abundance as response
search_space_var_a <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_var_a$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)

# specify the search space for rel_abundance as response
search_space_var_ra <- paradox::ps(
  mtry = paradox::p_int(lower = 1, upper = ncol(task_rf_var_ra$data()) - 1),
  sample.fraction = paradox::p_dbl(lower = 0.2, upper = 0.9),
  min.node.size = paradox::p_int(lower = 1, upper = 10)
)
```


### Specify Autotuner  
resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning # gibt kein richtig, falsch, je mehr folds desto mehr modelle müssen trainiert werden
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
autotuner_rf_v_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning  
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_v_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response 
autotuner_rf_v_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_v_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_v_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_v_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_v_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_v_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: VELOCITY AND WD ### --------------------------------------------
# With k_index as response
autotuner_rf_wd_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_wd_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_rf_wd_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_wd_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_wd_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_wd_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_wd_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_wd_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: SAMPLING LOCATION ### ------------------------------------------
# With k_index as response
autotuner_rf_samp_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_samp_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_rf_samp_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_samp_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_samp_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_samp_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_samp_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_samp_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# With k_index as response
autotuner_rf_sec_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_sec_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_rf_sec_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_sec_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_sec_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_sec_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_sec_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_sec_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
autotuner_rf_var_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_var_k, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_rf_var_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_var_s, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_rf_var_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_var_a, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_rf_var_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_rf, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_var_ra, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)
```

### Train Autotuner
```{r}
# set seed to obtain the same results with each run
set.seed(0412022)

### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
autotuner_rf_v_k$train(task_rf_v_k)

# With shannon index as response
autotuner_rf_v_s$train(task_rf_v_s)

# With abundance as response
autotuner_rf_v_a$train(task_rf_v_a)

# With rel_abundance as response 
autotuner_rf_v_ra$train(task_rf_v_ra)

### PREDICTORS: VELOCITY + WD ### ----------------------------------------------
# With k_index as response
autotuner_rf_wd_k$train(task_rf_wd_k)

# With shannon index as response
autotuner_rf_wd_s$train(task_rf_wd_s)

# With abundance as response
autotuner_rf_wd_a$train(task_rf_wd_a)

# With rel_abundance as response
autotuner_rf_wd_ra$train(task_rf_wd_ra)

### PREDICTORS: SAMPLING LOCATION ### ------------------------------------------
# With k_index as response
autotuner_rf_samp_k$train(task_rf_samp_k)

# With shannon index as response 
autotuner_rf_samp_s$train(task_rf_samp_s)

# With abundance as response
autotuner_rf_samp_a$train(task_rf_samp_a)

# With rel_abundance as response
autotuner_rf_samp_ra$train(task_rf_samp_ra)

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# With k_index as response
autotuner_rf_sec_k$train(task_rf_sec_k)

# With shannon index as response 
autotuner_rf_sec_s$train(task_rf_sec_s)

# With abundance as response
autotuner_rf_sec_a$train(task_rf_sec_a)

# With rel_abundance as response
autotuner_rf_sec_ra$train(task_rf_sec_ra)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
autotuner_rf_var_k$train(task_rf_var_k)

# With shannon index as response 
autotuner_rf_var_s$train(task_rf_var_s)

# With abundance as response
autotuner_rf_var_a$train(task_rf_var_a)

# With rel_abundance as response
autotuner_rf_var_ra$train(task_rf_var_ra)
```

### Tuned Hyperparameters
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
autotuner_rf_v_k$tuning_result

# With shannon index as response
autotuner_rf_v_s$tuning_result

# With abundance as response
autotuner_rf_v_a$tuning_result

# With rel_abundance as response
autotuner_rf_v_ra$tuning_result

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
autotuner_rf_wd_k$tuning_result

# With shannon index as response
autotuner_rf_wd_s$tuning_result

# With abundance as response
autotuner_rf_wd_a$tuning_result

# With rel_abundance as response
autotuner_rf_wd_ra$tuning_result

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
autotuner_rf_samp_k$tuning_result

# With shannon index as response
autotuner_rf_samp_s$tuning_result

# With abundance as response
autotuner_rf_samp_a$tuning_result

# With rel_abundance as response
autotuner_rf_samp_ra$tuning_result

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
autotuner_rf_sec_k$tuning_result

# With shannon index as response
autotuner_rf_sec_s$tuning_result

# With abundance as response
autotuner_rf_sec_a$tuning_result

# With rel_abundance as response
autotuner_rf_sec_ra$tuning_result

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
autotuner_rf_var_k$tuning_result

# With shannon index as response
autotuner_rf_var_s$tuning_result

# With abundance as response
autotuner_rf_var_a$tuning_result

# With rel_abundance as response
autotuner_rf_var_ra$tuning_result
```

# Ranger Models 
## Ranger w/o coordinates 
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# With k_index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2145317             7                   
rf_model_v_k_c <- ranger(formula = k_index ~., data = training_v_k_c, mtry = 1, sample.fraction = 0.2145317, min.node.size = 7, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2834015            10                   
rf_model_v_s_c <- ranger(formula = shannon ~., data = training_v_s_c, mtry = 1, sample.fraction = 0.2834015, min.node.size = 10, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2879012             8                 
rf_model_v_a_c <- ranger(formula = abundance ~., data = training_v_a_c, mtry = 1, sample.fraction = 0.2879012, min.node.size = 8, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2798592            10                  
rf_model_v_ra_c <- ranger(formula = rel_abundance ~., data = training_v_ra_c, mtry = 1, sample.fraction = 0.2798592, min.node.size = 10, importance = "impurity")

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
#  mtry sample.fraction min.node.size 
#1:    2       0.2295754             9                 
rf_model_wd_k_c <- ranger(formula = k_index ~., data = training_wd_k_c, mtry = 2, sample.fraction = 0.2295754, min.node.size = 9, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2537032             9                   
rf_model_wd_s_c <- ranger(formula = shannon ~., data = training_wd_s_c, mtry = 1, sample.fraction = 0.2537032, min.node.size = 9, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    2       0.2353055             6                     
rf_model_wd_a_c <- ranger(formula = abundance ~., data = training_wd_a_c, mtry = 2, sample.fraction = 0.2353055, min.node.size = 6, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    2       0.2361047            10                   
rf_model_wd_ra_c <- ranger(formula = rel_abundance ~., data = training_wd_ra_c, mtry = 2, sample.fraction = 0.2361047, min.node.size = 10, importance = "impurity")

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2922811             1                 
rf_model_samp_k_c <- ranger(formula = k_index ~., data = training_samp_k_c, mtry = 1, sample.fraction = 0.2922811, min.node.size = 1, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2967033             5                   
rf_model_samp_s_c <- ranger(formula = shannon ~., data = training_samp_s_c, mtry = 1, sample.fraction = 0.2967033, min.node.size = 5, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.6010324             9                  
rf_model_samp_a_c <- ranger(formula = abundance ~., data = training_samp_a_c, mtry = 1, sample.fraction = 0.6010324, min.node.size = 9, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    2       0.6187799            10                    
rf_model_samp_ra_c <- ranger(formula = rel_abundance ~., data = training_samp_ra_c, mtry = 2, sample.fraction = 0.6187799, min.node.size = 10, importance = "impurity")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
#   mtry sample.fraction min.node.size 
#1:    7       0.2378954             6                 
rf_model_sec_k_c <- ranger(formula = k_index ~., data = training_sec_k_c, mtry = 7, sample.fraction = 0.2378954, min.node.size = 6, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    2       0.8106988             8                   
rf_model_sec_s_c <- ranger(formula = shannon ~., data = training_sec_s_c, mtry = 2, sample.fraction = 0.8106988, min.node.size = 8, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2782563             3                   
rf_model_sec_a_c <- ranger(formula = abundance ~., data = training_sec_a_c, mtry = 1, sample.fraction = 0.2782563, min.node.size = 3, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.5788006             5                    
rf_model_sec_ra_c <- ranger(formula = rel_abundance ~., data = training_sec_ra_c, mtry = 1, sample.fraction = 0.5788006, min.node.size = 5, importance = "impurity")

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
#   mtry sample.fraction min.node.size 
#1:    6       0.4852908             9                 
rf_model_var_k_c <- ranger(formula = k_index ~., data = training_var_k_c, mtry = 6, sample.fraction = 0.4852908, min.node.size = 9, importance = "impurity")

# With shannon index as response
#   mtry sample.fraction min.node.size 
#1:    1       0.2760746             7                  
rf_model_var_s_c <- ranger(formula = shannon ~., data = training_var_s_c, mtry = 1, sample.fraction = 0.2760746, min.node.size = 7, importance = "impurity")

# With abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.4807631             5                    
rf_model_var_a_c <- ranger(formula = abundance ~., data = training_var_a_c, mtry = 1, sample.fraction = 0.4807631, min.node.size = 5, importance = "impurity")

# With rel_abundance as response
#   mtry sample.fraction min.node.size 
#1:    1       0.4656714             9                   
rf_model_var_ra_c <- ranger(formula = rel_abundance ~., data = training_var_ra_c, mtry = 1, sample.fraction = 0.4656714, min.node.size = 9, importance = "impurity")
```

# Model Evaluation 
## Variable Importance
```{r}
### VARIABLE IMPORTANCE FROM RANGER MODELS ### --------------------------------
### PREDICTOR: ONLY VELOCITY ### ----------------------------------------------
# w/o coordinates
vi_v_k_c <- importance(rf_model_v_k_c) 
vi_rel_v_k_c <- vi_v_k_c/sum(vi_v_k_c) 

vi_v_s_c <- importance(rf_model_v_s_c) 
vi_rel_v_s_c <- vi_v_s_c/sum(vi_v_s_c) 

vi_v_a_c <- importance(rf_model_v_a_c) 
vi_rel_v_a_c <- vi_v_a_c/sum(vi_v_a_c) 

vi_v_ra_c <- importance(rf_model_v_ra_c) 
vi_rel_v_ra_c <- vi_v_ra_c/sum(vi_v_ra_c) 


### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# w/o coordinates
vi_wd_k_c <- importance(rf_model_wd_k_c) 
vi_rel_wd_k_c <- vi_wd_k_c/sum(vi_wd_k_c) 

vi_wd_s_c <- importance(rf_model_wd_s_c) 
vi_rel_wd_s_c <- vi_wd_s_c/sum(vi_wd_s_c) 

vi_wd_a_c <- importance(rf_model_wd_a_c) 
vi_rel_wd_a_c <- vi_wd_a_c/sum(vi_wd_a_c) 

vi_wd_ra_c <- importance(rf_model_wd_ra_c) 
vi_rel_wd_ra_c <- vi_wd_ra_c/sum(vi_wd_ra_c) 

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# w/o coordinates
vi_samp_k_c <- importance(rf_model_samp_k_c) 
vi_rel_samp_k_c <- vi_samp_k_c/sum(vi_samp_k_c) 

vi_samp_s_c <- importance(rf_model_samp_s_c) 
vi_rel_samp_s_c <- vi_samp_s_c/sum(vi_samp_s_c) 

vi_samp_a_c <- importance(rf_model_samp_a_c) 
vi_rel_samp_a_c <- vi_samp_a_c/sum(vi_samp_a_c) 

vi_samp_ra_c <- importance(rf_model_samp_ra_c) 
vi_rel_samp_ra_c <- vi_samp_ra_c/sum(vi_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# w/o coordinates
vi_sec_k_c <- importance(rf_model_sec_k_c) 
vi_rel_sec_k_c <- vi_sec_k_c/sum(vi_sec_k_c) 

vi_sec_s_c <- importance(rf_model_sec_s_c) 
vi_rel_sec_s_c <- vi_sec_s_c/sum(vi_sec_s_c) 

vi_sec_a_c <- importance(rf_model_sec_a_c) 
vi_rel_sec_a_c <- vi_sec_a_c/sum(vi_sec_a_c) 

vi_sec_ra_c <- importance(rf_model_sec_ra_c)
vi_rel_sec_ra_c <- vi_sec_ra_c/sum(vi_sec_ra_c) 

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# w/o coordinates
vi_var_k_c <- importance(rf_model_var_k_c) 
vi_rel_var_k_c <- vi_var_k_c/sum(vi_var_k_c) 

vi_var_s_c <- importance(rf_model_var_s_c) 
vi_rel_var_s_c <- vi_var_s_c/sum(vi_var_s_c) 

vi_var_a_c <- importance(rf_model_var_a_c) 
vi_rel_var_a_c <- vi_var_a_c/sum(vi_var_a_c) 

vi_var_ra_c <- importance(rf_model_var_ra_c)
vi_rel_var_ra_c <- vi_var_ra_c/sum(vi_var_ra_c) 

# bind results together ------------------------------------------------------
vi_rf_model_v_c <- rbind(vi_v_k_c, vi_v_s_c, vi_v_a_c, vi_v_ra_c) |>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rel_rf_model_v_c <- rbind(vi_rel_v_k_c, vi_rel_v_s_c, vi_rel_v_a_c, vi_rel_v_ra_c) |>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rf_model_wd_c <- rbind(vi_wd_k_c, vi_wd_s_c, vi_wd_a_c, vi_wd_ra_c) |>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rel_rf_model_wd_c <- rbind(vi_rel_wd_k_c, vi_rel_wd_s_c, vi_rel_wd_a_c, vi_rel_wd_ra_c)|>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rf_model_samp_c <- rbind(vi_samp_k_c, vi_samp_s_c, vi_samp_a_c, vi_samp_ra_c)|>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rel_rf_model_samp_c <- rbind(vi_rel_samp_k_c, vi_rel_samp_s_c, vi_rel_samp_a_c, vi_rel_samp_ra_c)|>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rf_model_sec_c <- rbind(vi_sec_k_c, vi_sec_s_c, vi_sec_a_c, vi_sec_ra_c)|>
 as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rel_rf_model_sec_c <- rbind(vi_rel_sec_k_c, vi_rel_sec_s_c, vi_rel_sec_a_c, vi_rel_sec_ra_c)|>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rf_model_var_c <- rbind(vi_var_k_c, vi_var_s_c, vi_var_a_c, vi_var_ra_c)|>
 as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

vi_rel_rf_model_var_c <- rbind(vi_rel_var_k_c, vi_rel_var_s_c, vi_rel_var_a_c, vi_rel_var_ra_c)|>
  as.data.frame() |>
  mutate(index = c("k_index", "shannon", "abundance", "rel_abundance"))

# write results into .csv ------------------------------------------------------
write.csv(vi_rf_model_v_c, "ML_model/var_imp/vi_rf_model_v_woc.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_v_c, "ML_model/var_imp/vi_rel_rf_model_v_woc.csv", row.names = FALSE)
write.csv(vi_rf_model_wd_c, "ML_model/var_imp/vi_rf_model_wd_woc.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_wd_c, "ML_model/var_imp/vi_rel_rf_model_wd_woc.csv", row.names = FALSE)
write.csv(vi_rf_model_samp_c, "ML_model/var_imp/vi_rf_model_samp_woc.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_samp_c, "ML_model/var_imp/vi_rel_rf_model_samp_woc.csv", row.names = FALSE)
write.csv(vi_rf_model_sec_c, "ML_model/var_imp/vi_rf_model_sec_woc.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_sec_c, "ML_model/var_imp/vi_rel_rf_model_sec_woc.csv", row.names = FALSE)
write.csv(vi_rf_model_var_c, "ML_model/var_imp/vi_rf_model_var_woc.csv", row.names = FALSE)
write.csv(vi_rel_rf_model_var_c, "ML_model/var_imp/vi_rel_rf_model_var_woc.csv", row.names = FALSE)
```

## Obs and Pred
```{r}
# read in predicted values from rasters extracted
pred_rast <- read_delim("Stat_Analysis/stat_analysis_data/regr_analysis_rf.csv")

### PREDICTED VALUES ### ----------------------------------------------
### PREDICTOR: VELOCITY ### -------------------------------------------
# With k_index as response --------------------------------
# with model using measured values - test set
rf_pred_model_v_k_c <- predict(rf_model_v_k_c, data = test_v_k_c)$predictions

# with model using raster extracted values - test set
p_rast_v_k <- pred_rast$k_index_v

# with training data 
pred_train_v_k <- predict(rf_model_v_k_c, data = training_v_k_c)$predictions

# With shannon index as response --------------------------
# with model using measured values - test set
rf_pred_model_v_s_c <- predict(rf_model_v_s_c, data = test_v_s_c)$predictions

# with model using raster extracted values - test set
p_rast_v_s <- pred_rast$shannon_v

# with training data 
pred_train_v_s <- predict(rf_model_v_s_c, data = training_v_s_c)$predictions

# With abundance as response ---------------------------
# with model using measured values - test set
rf_pred_model_v_a_c <- predict(rf_model_v_a_c, data = test_v_a_c)$predictions

# with model using raster extracted values - test set
p_rast_v_a <- pred_rast$abundance_v

# with training data 
pred_train_v_a <- predict(rf_model_v_a_c, data = training_v_a_c)$predictions

# With rel_abundance as response --------------------------
# with model using measured values - test set
rf_pred_model_v_ra_c <- predict(rf_model_v_ra_c, data = test_v_ra_c)$predictions

# with model using raster extracted values - test set
p_rast_v_ra <- pred_rast$rel_abundance_v

# with training data 
pred_train_v_ra <- predict(rf_model_v_ra_c, data = training_v_ra_c)$predictions

### PREDICTORS: VELOCITY + WD ### ------------------------------
# With k_index as response --------------------------
# with model using measured values - test set
rf_pred_model_wd_k_c <- predict(rf_model_wd_k_c, data = test_wd_k_c)$predictions

# with model using raster extracted values - test set
p_rast_wd_k <- pred_rast$k_index_wd

# with training data 
pred_train_wd_k <- predict(rf_model_wd_k_c, data = training_wd_k_c)$predictions

# With shannon index as response --------------------
# with model using measured values - test set
rf_pred_model_wd_s_c <- predict(rf_model_wd_s_c, data = test_wd_s_c)$predictions

# with model using raster extracted values - test set
p_rast_wd_s <- pred_rast$shannon_wd

# with training data 
pred_train_wd_s <- predict(rf_model_wd_s_c, data = training_wd_s_c)$predictions

# With abundance as response --------------------
# with model using measured values - test set
rf_pred_model_wd_a_c <- predict(rf_model_wd_a_c, data = test_wd_a_c)$predictions

# with model using raster extracted values - test set
p_rast_wd_a <- pred_rast$abundance_wd

# with training data 
pred_train_wd_a <- predict(rf_model_wd_a_c, data = training_wd_a_c)$predictions


# With rel_abundance as response -----------------
# with model using measured values - test set
rf_pred_model_wd_ra_c <- predict(rf_model_wd_ra_c, data = test_wd_ra_c)$predictions

# with model using raster extracted values - test set
p_rast_wd_ra <- pred_rast$rel_abundance_wd

# with training data 
pred_train_wd_ra <- predict(rf_model_wd_ra_c, data = training_wd_ra_c)$predictions

### PREDICTORS: SAMPLING LOCATIONS ### ------------------------------
# With k_index as response ------------------------
# with model using measured values - test set
rf_pred_model_samp_k_c <- predict(rf_model_samp_k_c, data = test_samp_k_c)$predictions

# with training data 
pred_train_samp_k <- predict(rf_model_samp_k_c, data = training_samp_k_c)$predictions

# With shannon index as response ---------------------
# with model using measured values - test set
rf_pred_model_samp_s_c <- predict(rf_model_samp_s_c, data = test_samp_s_c)$predictions

# with training data 
pred_train_samp_s <- predict(rf_model_samp_s_c, data = training_samp_s_c)$predictions

# With abundance as response -------------------------
# with model using measured values - test set
rf_pred_model_samp_a_c <- predict(rf_model_samp_a_c, data = test_samp_a_c)$predictions

# with training data 
pred_train_samp_a <- predict(rf_model_samp_a_c, data = training_samp_a_c)$predictions

# With rel_abundance as response ----------------------
# with model using measured values - test set
rf_pred_model_samp_ra_c <- predict(rf_model_samp_ra_c, data = test_samp_ra_c)$predictions

# with training data 
pred_train_samp_ra <- predict(rf_model_samp_ra_c, data = training_samp_ra_c)$predictions

### PREDICTORS: ALL PREDICTORS ### -----------------------------
# With k_index as response ---------------------------
# with model using measured values - test set
rf_pred_model_sec_k_c <- predict(rf_model_sec_k_c, data = test_sec_k_c)$predictions

# with training data 
pred_train_sec_k <- predict(rf_model_sec_k_c, data = training_sec_k_c)$predictions

# With shannon index as response ----------------------
# with model using measured values - test set
rf_pred_model_sec_s_c <- predict(rf_model_sec_s_c, data = test_sec_s_c)$predictions

# with training data 
pred_train_sec_s <- predict(rf_model_sec_s_c, data = training_sec_s_c)$predictions

# With abundance as response -------------------------
# with model using measured values - test set
rf_pred_model_sec_a_c <- predict(rf_model_sec_a_c, data = test_sec_a_c)$predictions

# with training data 
pred_train_sec_a <- predict(rf_model_sec_a_c, data = training_sec_a_c)$predictions

# With rel_abundance as response -----------------------
# with model using measured values - test set
rf_pred_model_sec_ra_c <- predict(rf_model_sec_ra_c, data = test_sec_ra_c)$predictions

# with training data 
pred_train_sec_ra <- predict(rf_model_sec_ra_c, data = training_sec_ra_c)$predictions


### PREDICTORS: SELECTED VARIABLES ### -----------------------------
# With k_index as response ---------------------------
# with model using measured values - test set
rf_pred_model_var_k_c <- predict(rf_model_var_k_c, data = test_var_k_c)$predictions

# with model using raster extracted values - test set
p_rast_var_k <- pred_rast$k_index_var

# with training data 
pred_train_var_k <- predict(rf_model_var_k_c, data = training_var_k_c)$predictions

# With shannon index as response ----------------------
# with model using measured values - test set
rf_pred_model_var_s_c <- predict(rf_model_var_s_c, data = test_var_s_c)$predictions

# with model using raster extracted values - test set
p_rast_var_s <- pred_rast$shannon_var

# with training data 
pred_train_var_s <- predict(rf_model_var_s_c, data = training_var_s_c)$predictions

# With abundance as response -----------------------
# with model using measured values - test set
rf_pred_model_var_a_c <- predict(rf_model_var_a_c, data = test_var_a_c)$predictions

# with model using raster extracted values - test set
p_rast_var_a <- pred_rast$abundance_var

# with training data 
pred_train_var_a <- predict(rf_model_var_a_c, data = training_var_a_c)$predictions

# With rel_abundance as response ----------------------
# with model using measured values - test set
rf_pred_model_var_ra_c <- predict(rf_model_var_ra_c, data = test_var_ra_c)$predictions

# with model using raster extracted values - test set
p_rast_var_ra <- pred_rast$rel_abundance_var

# with training data 
pred_train_var_ra <- predict(rf_model_var_ra_c, data = training_var_ra_c)$predictions

### OBSERVED VALUES ### ---------------------------------------------
### PREDICTOR: VELOCITY ### -----------------------------------------
# With k_index as response --------------------------
responses_v_k <- test_v_k$k_index

# With shannon index as response ---------------------
responses_v_s <- test_v_s$shannon

# With abundance as response -----------------------
responses_v_a <- test_v_a$abundance

# With rel_abundance as response ------------------------
responses_v_ra <- test_v_ra$rel_abundance

### PREDICTORS: VELOCITY + WD ### ----------------------------------
# With k_index as response --------------------------
responses_wd_k <- test_wd_k$k_index

# With shannon index as response --------------------
responses_wd_s <- test_wd_s$shannon

# With abundance as response --------------------
responses_wd_a <- test_wd_a$abundance

# With rel_abundance as response -----------------------
responses_wd_ra <- test_wd_ra$rel_abundance

### PREDICTORS: SAMPLING LOCATIONS ### -------------------------------
# With k_index as response --------------------------
responses_samp_k <- test_samp_k$k_index

# With shannon index as response ----------------------
responses_samp_s <- test_samp_s$shannon

# With abundance as response -----------------------
responses_samp_a <- test_samp_a$abundance

# With rel_abundance as response ---------------------------
responses_samp_ra <- test_samp_ra$rel_abundance

### PREDICTORS: ALL PREDICTORS ### ----------------------------------
# With k_index as response -------------------------
responses_sec_k <- test_sec_k$k_index

# With shannon index as response --------------------
responses_sec_s <- test_sec_s$shannon

# With abundance as response -----------------------
responses_sec_a <- test_sec_a$abundance

# With rel_abundance as response ---------------------
responses_sec_ra <- test_sec_ra$rel_abundance

### PREDICTORS: SELECTED VARIABLES ### ----------------------------
# With k_index as response ----------------------
responses_var_k <- test_var_k$k_index

# With shannon index as response ------------------
responses_var_s <- test_var_s$shannon

# With abundance as response --------------------
responses_var_a <- test_var_a$abundance

# With rel_abundance as response -------------------
responses_var_ra <- test_var_ra$rel_abundance

### bind resulting predicted indices into dataframes and save them ### --------
pred_test <- cbind(pred_rast, rf_pred_model_v_k_c, rf_pred_model_v_s_c, rf_pred_model_v_a_c, rf_pred_model_v_ra_c, rf_pred_model_wd_k_c, rf_pred_model_wd_s_c, rf_pred_model_wd_a_c, rf_pred_model_wd_ra_c, rf_pred_model_samp_k_c, rf_pred_model_samp_s_c, rf_pred_model_samp_a_c, rf_pred_model_samp_ra_c) |>
  na.omit()

pred_test_2 <- cbind(rf_pred_model_sec_k_c, rf_pred_model_sec_s_c, rf_pred_model_sec_a_c, rf_pred_model_sec_ra_c, rf_pred_model_var_k_c, rf_pred_model_var_s_c, rf_pred_model_var_a_c, rf_pred_model_var_ra_c, test_var) |>
  na.omit()

pred_train <- cbind(pred_train_v_k, pred_train_v_s, pred_train_v_a, pred_train_v_ra, pred_train_wd_k, pred_train_wd_s, pred_train_wd_a, pred_train_wd_ra, pred_train_samp_k, pred_train_samp_s, pred_train_samp_a, pred_train_samp_ra, pred_train_sec_k, pred_train_sec_s, pred_train_sec_a, pred_train_sec_ra, pred_train_var_k, pred_train_var_s, pred_train_var_a, pred_train_var_ra, training_var)

# write .csv files 
write.csv(pred_test, "Stat_Analysis/stat_analysis_data/regr_pred_test_rf.csv", row.names = FALSE)
write.csv(pred_test_2, "Stat_Analysis/stat_analysis_data/regr_pred_test_2_rf.csv", row.names = FALSE)
write.csv(pred_train, "Stat_Analysis/stat_analysis_data/regr_pred_train_rf.csv", row.names = FALSE)
```

## R2
```{r}
### PREDICTOR: VELOCITY ### ------------------------------------
# With k_index as response ------------------------
# with model using measured values - test set
r2_v_k <- R2(pred = rf_pred_model_v_k_c, obs = responses_v_k)

# with model using raster extracted values - test set
r2_rast_v_k <- R2(pred = p_rast_v_k, obs = responses_v_k, na.rm = TRUE)

# with training data 
r2_train_v_k <- R2(pred = pred_train_v_k, obs = training_v_k_c$k_index)

# With shannon index as response ------------------------
# with model using measured values - test set
r2_v_s <- R2(pred = rf_pred_model_v_s_c, obs = responses_v_s)

# with model using raster extracted values - test set
r2_rast_v_s <- R2(pred = p_rast_v_s, obs = responses_v_s, na.rm = TRUE)

# with training data 
r2_train_v_s <- R2(pred = pred_train_v_s, obs = training_v_s_c$shannon)

# With abundance as response --------------------------------
# with model using measured values - test set
r2_v_a <- R2(pred = rf_pred_model_v_a_c, obs = responses_v_a)

# with model using raster extracted values - test set
r2_rast_v_a <- R2(pred = p_rast_v_a, obs = responses_v_a, na.rm = TRUE)

# with training data 
r2_train_v_a <- R2(pred = pred_train_v_a, obs = training_v_a_c$abundance)

# With rel_abundance as response  --------------------------
# with model using measured values - test set
r2_v_ra <- R2(pred = rf_pred_model_v_ra_c, obs = responses_v_ra)

# with model using raster extracted values - test set
r2_rast_v_ra <- R2(pred = p_rast_v_ra, obs = responses_v_ra, na.rm = TRUE)

# with training data 
r2_train_v_ra <- R2(pred = pred_train_v_ra, obs = training_v_ra_c$rel_abundance)

### PREDICTORS: VELOCITY + WD ### -------------------------------------
# With k_index as response ----------------------
# with model using measured values - test set
r2_wd_k <- R2(pred = rf_pred_model_wd_k_c, obs = responses_wd_k)

# with model using raster extracted values - test set
r2_rast_wd_k <- R2(pred = p_rast_wd_k, obs = responses_wd_k, na.rm = TRUE)

# with training data 
r2_train_wd_k <- R2(pred = pred_train_wd_k, obs = training_wd_k_c$k_index)

# With shannon index as response -------------------
# with model using measured values - test set
r2_wd_s <- R2(pred = rf_pred_model_wd_s_c, obs = responses_wd_s)

# with model using raster extracted values - test set
r2_rast_wd_s <- R2(pred = p_rast_wd_s, obs = responses_wd_s, na.rm = TRUE)

# with training data 
r2_train_wd_s <- R2(pred = pred_train_wd_s, obs = training_wd_s_c$shannon)

# With abundance as response ----------------------------
# with model using measured values - test set
r2_wd_a <- R2(pred = rf_pred_model_wd_a_c, obs = responses_wd_a)

# with model using raster extracted values - test set
r2_rast_wd_a <- R2(pred = p_rast_wd_a, obs = responses_wd_a, na.rm = TRUE)

# with training data 
r2_train_wd_a <- R2(pred = pred_train_wd_a, obs = training_wd_a_c$abundance)

# With rel_abundance as response --------------------------
# with model using measured values - test set
r2_wd_ra <- R2(pred = rf_pred_model_wd_ra_c, obs = responses_wd_ra)

# with model using raster extracted values - test set
r2_rast_wd_ra <- R2(pred = p_rast_wd_ra, obs = responses_wd_ra, na.rm = TRUE)

# with training data 
r2_train_wd_ra <- R2(pred = pred_train_wd_ra, obs = training_wd_ra_c$rel_abundance)

### PREDICTORS: SAMPLING LOCATIONS ### --------------------------------
# With k_index as response ------------------------------
# with model using measured values - test set
r2_samp_k <- R2(pred = rf_pred_model_samp_k_c, obs = responses_samp_k)

# with training data 
r2_train_samp_k <- R2(pred = pred_train_samp_k, obs = training_v_k_c$k_index)

# With shannon index as response ----------------------------
# with model using measured values - test set
r2_samp_s <- R2(pred = rf_pred_model_samp_s_c, obs = responses_samp_s)

# with training data 
r2_train_samp_s <- R2(pred = pred_train_samp_s, obs = training_v_s_c$shannon)

# With abundance as response -----------------------------
# with model using measured values - test set
r2_samp_a <- R2(pred = rf_pred_model_samp_a_c, obs = responses_samp_a)

# with training data 
r2_train_samp_a <- R2(pred = pred_train_samp_a, obs = training_v_a_c$abundance)

# With rel_abundance as response -----------------------------
# with model using measured values - test set
r2_samp_ra <- R2(pred = rf_pred_model_samp_ra_c, obs = responses_samp_ra)

# with training data 
r2_train_samp_ra <- R2(pred = pred_train_samp_ra, obs = training_v_ra_c$rel_abundance)

### PREDICTORS: ALL PREDICTORS ### ----------------------------------
# With k_index as response --------------------
# with model using measured values - test set
r2_sec_k <- R2(pred = rf_pred_model_sec_k_c, obs = responses_sec_k)

# with training data 
r2_train_sec_k <- R2(pred = pred_train_sec_k, obs = training_sec_k_c$k_index)

# With shannon index as response ----------------
# with model using measured values - test set
r2_sec_s <- R2(pred = rf_pred_model_sec_s_c, obs = responses_sec_s)

# with training data 
r2_train_sec_s <- R2(pred = pred_train_sec_s, obs = training_sec_s_c$shannon)

# With abundance as response --------------------------
# with model using measured values - test set
r2_sec_a <- R2(pred = rf_pred_model_sec_a_c, obs = responses_sec_a)

# with training data 
r2_train_sec_a <- R2(pred = pred_train_sec_a, obs = training_sec_a_c$abundance)

# With rel_abundance as response ------------------------
# with model using measured values - test set
r2_sec_ra <- R2(pred = rf_pred_model_sec_ra_c, obs = responses_sec_ra)

# with training data 
r2_train_sec_ra <- R2(pred = pred_train_sec_ra, obs = training_sec_ra_c$rel_abundance)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------
# With k_index as response --------------------------
# with model using measured values - test set
r2_var_k <- R2(pred = rf_pred_model_var_k_c, obs = responses_var_k)

# with model using raster extracted values - test set
r2_rast_var_k <- R2(pred = pred_test$k_index_var, obs = pred_test$obs_k_index, na.rm = TRUE)

# with training data 
r2_train_var_k <- R2(pred = pred_train_var_k, obs = training_var_k_c$k_index)

# With shannon index as response -------------------
# with model using measured values - test set
r2_var_s <- R2(pred = rf_pred_model_var_s_c, obs = responses_var_s)

# with model using raster extracted values - test set
r2_rast_var_s <- R2(pred = pred_test$shannon_var, obs = pred_test$obs_shannon, na.rm = TRUE)

# with training data 
r2_train_var_s <- R2(pred = pred_train_var_s, obs = training_var_s_c$shannon)

# With abundance as response -----------------------
# with model using measured values - test set
r2_var_a <- R2(pred = rf_pred_model_var_a_c, obs = responses_var_a)

# with model using raster extracted values - test set
r2_rast_var_a <- R2(pred = pred_test$abundance_var, obs = pred_test$obs_abundance, na.rm = TRUE)

# with training data 
r2_train_var_a <- R2(pred = pred_train_var_a, obs = training_var_a_c$abundance)

# With rel_abundance as response ------------------------
# with model using measured values - test set
r2_var_ra <- R2(pred = rf_pred_model_var_ra_c, obs = responses_var_ra)

# with model using raster extracted values - test set
r2_rast_var_ra <- R2(pred = pred_test$rel_abundance_var, obs = pred_test$obs_rel_abundance, na.rm = TRUE)

# with training data 
r2_train_var_ra <- R2(pred = pred_train_var_ra, obs = training_var_ra_c$rel_abundance)
```

## RMSE & MAE
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------
# With k_index as response ----------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_v_k_c <- Metrics::rmse(actual = responses_v_k, predicted = rf_pred_model_v_k_c)

# with model using raster extracted values - test set
rmse_rast_v_k <- Metrics::rmse(actual = pred_test$k_index_v, predicted = pred_test$obs_k_index)

# with training data 
rmse_train_v_k <- Metrics::rmse(actual = training_v_k_c$k_index, predicted = pred_train_v_k)

#### MAE ####
# with model using measured values - test set
mae_model_v_k_c <- Metrics::mae(actual = responses_v_k, predicted = rf_pred_model_v_k_c)

# with model using raster extracted values - test set
mae_rast_v_k <- Metrics::mae(actual = pred_test$k_index_v, predicted = pred_test$obs_k_index)

# with training data 
mae_train_v_k <- Metrics::mae(actual = training_v_k_c$k_index, predicted = pred_train_v_k)

# With shannon index as response ------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_v_s_c <- Metrics::rmse(actual = responses_v_s, predicted = rf_pred_model_v_s_c)

# with model using raster extracted values - test set
rmse_rast_v_s <- Metrics::rmse(actual = pred_test$shannon_v, predicted = pred_test$obs_shannon)

# with training data 
rmse_train_v_s <- Metrics::rmse(actual = training_v_s_c$shannon, predicted = pred_train_v_s)

#### MAE ####
# with model using measured values - test set
mae_model_v_s_c <- Metrics::mae(actual = responses_v_s, predicted = rf_pred_model_v_s_c)

# with model using raster extracted values - test set
mae_rast_v_s <- Metrics::mae(actual = pred_test$shannon_v, predicted = pred_test$obs_shannon)

# with training data 
mae_train_v_s <- Metrics::mae(actual = training_v_s_c$shannon, predicted = pred_train_v_s)

# With abundance as response -------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_v_a_c <- Metrics::rmse(actual = responses_v_a, predicted = rf_pred_model_v_a_c)

# with model using raster extracted values - test set
rmse_rast_v_a <- Metrics::rmse(actual = pred_test$abundance_v, predicted = pred_test$obs_abundance)

# with training data 
rmse_train_v_a <- Metrics::rmse(actual = training_v_a_c$abundance, predicted = pred_train_v_a)

#### MAE ####
# with model using measured values - test set
mae_model_v_a_c <- Metrics::mae(actual = responses_v_a, predicted = rf_pred_model_v_a_c)

# with model using raster extracted values - test set
mae_rast_v_a <- Metrics::mae(actual = pred_test$abundance_v, predicted = pred_test$obs_abundance)

# with training data 
mae_train_v_a <- Metrics::mae(actual = training_v_a_c$abundance, predicted = pred_train_v_a)

# With rel_abundance as response --------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_v_ra_c <- Metrics::rmse(actual = responses_v_ra, predicted = rf_pred_model_v_ra_c)

# with model using raster extracted values - test set
rmse_rast_v_ra <- Metrics::rmse(actual = pred_test$rel_abundance_v, predicted = pred_test$obs_rel_abundance)

# with training data 
rmse_train_v_ra <- Metrics::rmse(actual = training_v_ra_c$rel_abundance, predicted = pred_train_v_ra)

#### MAE ####
# with model using measured values - test set
mae_model_v_ra_c <- Metrics::mae(actual = responses_v_ra, predicted = rf_pred_model_v_ra_c)

# with model using raster extracted values - test set
mae_rast_v_ra <- Metrics::mae(actual = pred_test$rel_abundance_v, predicted = pred_test$obs_rel_abundance)

# with training data 
mae_train_v_ra <- Metrics::mae(actual = training_v_ra_c$rel_abundance, predicted = pred_train_v_ra)

### PREDICTORS: VELOCITY + WD ### -----------------------------------
# With k_index as response ---------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_wd_k_c <- Metrics::rmse(actual = responses_wd_k, predicted = rf_pred_model_wd_k_c)

# with model using raster extracted values - test set
rmse_rast_wd_k <- Metrics::rmse(actual = pred_test$k_index_wd, predicted = pred_test$obs_k_index)

# with training data 
rmse_train_wd_k <- Metrics::rmse(actual = training_v_k_c$k_index, predicted = pred_train_wd_k)

#### MAE ####
# with model using measured values - test set
mae_model_wd_k_c <- Metrics::mae(actual = responses_wd_k, predicted = rf_pred_model_wd_k_c)

# with model using raster extracted values - test set
mae_rast_wd_k <- Metrics::mae(actual = pred_test$k_index_wd, predicted = pred_test$obs_k_index)

# with training data 
mae_train_wd_k <- Metrics::mae(actual = training_v_k_c$k_index, predicted = pred_train_wd_k)

# With shannon index as response -----------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_wd_s_c <- Metrics::rmse(actual = responses_wd_s, predicted = rf_pred_model_wd_s_c)

# with model using raster extracted values - test set
rmse_rast_wd_s <- Metrics::rmse(actual = pred_test$shannon_wd, predicted = pred_test$obs_shannon)

# with training data 
rmse_train_wd_s <- Metrics::rmse(actual = training_wd_s_c$shannon, predicted = pred_train_wd_s)

#### MAE ####
# with model using measured values - test set
mae_model_wd_s_c <- Metrics::mae(actual = responses_wd_s, predicted = rf_pred_model_wd_s_c)

# with model using raster extracted values - test set
mae_rast_wd_s <- Metrics::mae(actual = pred_test$shannon_wd, predicted = pred_test$obs_shannon)

# with training data 
mae_train_wd_s <- Metrics::mae(actual = training_v_s_c$shannon, predicted = pred_train_wd_s)

# With abundance as response -----------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_wd_a_c <- Metrics::rmse(actual = responses_wd_a, predicted = rf_pred_model_wd_a_c)

# with model using raster extracted values - test set
rmse_rast_wd_a <- Metrics::rmse(actual = pred_test$abundance_wd, predicted = pred_test$obs_abundance)

# with training data 
rmse_train_wd_a <- Metrics::rmse(actual = training_wd_a_c$abundance, predicted = pred_train_wd_a)

#### MAE ####
# with model using measured values - test set
mae_model_wd_a_c <- Metrics::mae(actual = responses_wd_a, predicted = rf_pred_model_wd_a_c)

# with model using raster extracted values - test set
mae_rast_wd_a <- Metrics::mae(actual = pred_test$abundance_wd, predicted = pred_test$obs_abundance)

# with training data 
mae_train_wd_a <- Metrics::mae(actual = training_wd_a_c$abundance, predicted = pred_train_wd_a)

# With rel_abundance as response --------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_wd_ra_c <- Metrics::rmse(actual = responses_wd_ra, predicted = rf_pred_model_wd_ra_c)

# with model using raster extracted values - test set
rmse_rast_wd_ra <- Metrics::rmse(actual = pred_test$rel_abundance_wd, predicted = pred_test$obs_rel_abundance)

# with training data 
rmse_train_wd_ra <- Metrics::rmse(actual = training_wd_ra_c$rel_abundance, predicted = pred_train_wd_ra)

#### MAE ####
# with model using measured values - test set
mae_model_wd_ra_c <- Metrics::mae(actual = responses_wd_ra, predicted = rf_pred_model_wd_ra_c)

# with model using raster extracted values - test set
mae_rast_wd_ra <- Metrics::mae(actual = pred_test$rel_abundance_wd, predicted = pred_test$obs_rel_abundance)

# with training data 
mae_train_wd_ra <- Metrics::mae(actual = training_wd_ra_c$rel_abundance, predicted = pred_train_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------
# With k_index as response ------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_samp_k_c <- Metrics::rmse(actual = responses_samp_k, predicted = rf_pred_model_samp_k_c)

# with training data 
rmse_train_samp_k <- Metrics::rmse(actual = training_v_k_c$k_index, predicted = pred_train_samp_k)

#### MAE ####
# with model using measured values - test set
mae_model_samp_k_c <- Metrics::mae(actual = responses_samp_k, predicted = rf_pred_model_samp_k_c)

# with training data 
mae_train_samp_k <- Metrics::mae(actual = training_v_k_c$k_index, predicted = pred_train_samp_k)

# With shannon index as response ----------------
#### RMSE ####
# with model using measured values - test set
rmse_model_samp_s_c <- Metrics::rmse(actual = responses_samp_s, predicted = rf_pred_model_samp_s_c)

# with training data 
rmse_train_samp_s <- Metrics::rmse(actual = training_v_s_c$shannon, predicted = pred_train_samp_s)

#### MAE ####
# with model using measured values - test set
mae_model_samp_s_c <- Metrics::mae(actual = responses_samp_s, predicted = rf_pred_model_samp_s_c)

# with training data 
mae_train_samp_s <- Metrics::mae(actual = training_v_s_c$shannon, predicted = pred_train_samp_s)

# With abundance as response ---------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_samp_a_c <- Metrics::rmse(actual = responses_samp_a, predicted = rf_pred_model_samp_a_c)

# with training data 
rmse_train_samp_a <- Metrics::rmse(actual = training_v_a_c$abundance, predicted = pred_train_samp_a)

#### MAE ####
# with model using measured values - test set
mae_model_samp_a_c <- Metrics::mae(actual = responses_samp_a, predicted = rf_pred_model_samp_a_c)

# with training data 
mae_train_samp_a <- Metrics::mae(actual = training_v_a_c$abundance, predicted = pred_train_samp_a)

# With rel_abundance as response -----------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_samp_ra_c <- Metrics::rmse(actual = responses_samp_ra, predicted = rf_pred_model_samp_ra_c)

# with training data 
rmse_train_samp_ra <- Metrics::rmse(actual = training_v_ra_c$rel_abundance, predicted = pred_train_samp_ra)

#### MAE ####
# with model using measured values - test set
mae_model_samp_ra_c <- Metrics::mae(actual = responses_samp_ra, predicted = rf_pred_model_samp_ra_c)

# with training data 
mae_train_samp_ra <- Metrics::mae(actual = training_v_ra_c$rel_abundance, predicted = pred_train_samp_ra)

### PREDICTORS: ALL PREDICTORS ### -------------------------------------
# With k_index as response ------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_sec_k_c <- Metrics::rmse(actual = responses_sec_k, predicted = rf_pred_model_sec_k_c)

# with training data 
rmse_train_sec_k <- Metrics::rmse(actual = training_sec_k_c$k_index, predicted = pred_train_sec_k)

#### MAE ####
# with model using measured values - test set
mae_model_sec_k_c <- Metrics::mae(actual = responses_sec_k, predicted = rf_pred_model_sec_k_c)

# with training data 
mae_train_sec_k <- Metrics::mae(actual = training_sec_k_c$k_index, predicted = pred_train_sec_k)

# With shannon index as response --------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_sec_s_c <- Metrics::rmse(actual = responses_sec_s, predicted = rf_pred_model_sec_s_c)

# with training data 
rmse_train_sec_s <- Metrics::rmse(actual = training_sec_s_c$shannon, predicted = pred_train_sec_s)

#### MAE ####
# with model using measured values - test set
mae_model_sec_s_c <- Metrics::mae(actual = responses_sec_s, predicted = rf_pred_model_sec_s_c)

# with training data 
mae_train_sec_s <- Metrics::mae(actual = training_sec_s_c$shannon, predicted = pred_train_sec_s)

# With abundance as response ------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_sec_a_c <- Metrics::rmse(actual = responses_sec_a, predicted = rf_pred_model_sec_a_c)

# with training data 
rmse_train_sec_a <- Metrics::rmse(actual = training_sec_a_c$abundance, predicted = pred_train_sec_a)

#### MAE ####
# with model using measured values - test set
mae_model_sec_a_c <- Metrics::mae(actual = responses_sec_a, predicted = rf_pred_model_sec_a_c)

# with training data 
mae_train_sec_a <- Metrics::mae(actual = training_sec_a_c$abundance, predicted = pred_train_sec_a)

# With rel_abundance as response ---------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_sec_ra_c <- Metrics::rmse(actual = responses_sec_ra, predicted = rf_pred_model_sec_ra_c)

# with training data 
rmse_train_sec_ra <- Metrics::rmse(actual = training_sec_ra_c$rel_abundance, predicted = pred_train_sec_ra)

#### MAE ####
# with model using measured values - test set
mae_model_sec_ra_c <- Metrics::mae(actual = responses_sec_ra, predicted = rf_pred_model_sec_ra_c)

# with training data 
mae_train_sec_ra <- Metrics::mae(actual = training_sec_ra_c$rel_abundance, predicted = pred_train_sec_ra)

### PREDICTORS: SELECTED VARIABLES ### -------------------------------
# With k_index as response ----------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_var_k_c <- Metrics::rmse(actual = responses_var_k, predicted = rf_pred_model_var_k_c)

# with model using raster extracted values - test set
rmse_rast_var_k <- Metrics::rmse(actual = pred_test$k_index_var, predicted = pred_test$obs_k_index)

# with training data 
rmse_train_var_k <- Metrics::rmse(actual = training_var_k_c$k_index, predicted = pred_train_var_k)

#### MAE ####
# with model using measured values - test set
mae_model_var_k_c <- Metrics::mae(actual = responses_var_k, predicted = rf_pred_model_var_k_c)

# with model using raster extracted values - test set
mae_rast_var_k <- Metrics::mae(actual = pred_test$k_index_var, predicted = pred_test$obs_k_index)

# with training data 
mae_train_var_k <- Metrics::mae(actual = training_var_k_c$k_index, predicted = pred_train_var_k)

# With shannon index as response -------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_var_s_c <- Metrics::rmse(actual = responses_var_s, predicted = rf_pred_model_var_s_c)

# with model using raster extracted values - test set
rmse_rast_var_s <- Metrics::rmse(actual = pred_test$shannon_var, predicted = pred_test$obs_shannon)

# with training data 
rmse_train_var_s <- Metrics::rmse(actual = training_var_s_c$shannon, predicted = pred_train_var_s)

#### MAE ####
# with model using measured values - test set
mae_model_var_s_c <- Metrics::mae(actual = responses_var_s, predicted = rf_pred_model_var_s_c)

# with model using raster extracted values - test set
mae_rast_var_s <- Metrics::mae(actual = pred_test$shannon_var, predicted = pred_test$obs_shannon)

# with training data 
mae_train_var_s <- Metrics::mae(actual = training_var_s_c$shannon, predicted = pred_train_var_s)

# With abundance as response -----------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_var_a_c <- Metrics::rmse(actual = responses_var_a, predicted = rf_pred_model_var_a_c)

# with model using raster extracted values - test set
rmse_rast_var_a <- Metrics::rmse(actual = pred_test$abundance_var, predicted = pred_test$obs_abundance)

# with training data 
rmse_train_var_a <- Metrics::rmse(actual = training_var_a_c$abundance, predicted = pred_train_var_a)

#### MAE ####
# with model using measured values - test set
mae_model_var_a_c <- Metrics::mae(actual = responses_var_a, predicted = rf_pred_model_var_a_c)

# with model using raster extracted values - test set
mae_rast_var_a <- Metrics::mae(actual = pred_test$abundance_var, predicted = pred_test$obs_abundance)

# with training data 
mae_train_var_a <- Metrics::mae(actual = training_var_a_c$abundance, predicted = pred_train_var_a)

# With rel_abundance as response ----------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_var_ra_c <- Metrics::rmse(actual = responses_var_ra, predicted = rf_pred_model_var_ra_c)

# with model using raster extracted values - test set
rmse_rast_var_ra <- Metrics::rmse(actual = pred_test$rel_abundance_var, predicted = pred_test$obs_rel_abundance)

# with training data 
rmse_train_var_ra <- Metrics::rmse(actual = training_var_ra_c$rel_abundance, predicted = pred_train_var_ra)

#### MAE ####
# with model using measured values - test set
mae_model_var_ra_c <- Metrics::mae(actual = responses_var_ra, predicted = rf_pred_model_var_ra_c)

# with model using raster extracted values - test set
mae_rast_var_ra <- Metrics::mae(actual = pred_test$rel_abundance_var, predicted = pred_test$obs_rel_abundance)

# with training data 
mae_train_var_ra <- Metrics::mae(actual = training_var_ra_c$rel_abundance, predicted = pred_train_var_ra)
```

## Bias 
```{r}
### ONLY VELOCITY AS PREDICTOR ### ---------------------------------
# With k_index as response --------------------
# with model using measured values - test set
bias_model_v_k_c <- bias(observados = responses_v_k, estimados = rf_pred_model_v_k_c)

# with model using raster extracted values - test set
bias_rast_v_k <- bias(observados = pred_test$k_index_v, estimados = pred_test$obs_k_index)

# with training data 
bias_train_v_k <- bias(observados = training_v_k_c$k_index, estimados = pred_train_v_k)

# With shannon index as response ---------------------
# with model using measured values - test set
bias_model_v_s_c <- bias(observados = responses_v_s, estimados = rf_pred_model_v_s_c)

# with model using raster extracted values - test set
bias_rast_v_s <- bias(observados = pred_test$shannon_v, estimados = pred_test$obs_shannon)

# with training data 
bias_train_v_s <- bias(observados = training_v_s_c$shannon, estimados = pred_train_v_s)

# With abundance as response --------------------
# with model using measured values - test set
bias_model_v_a_c <- bias(observados = responses_v_a, estimados = rf_pred_model_v_a_c)

# with model using raster extracted values - test set
bias_rast_v_a <- bias(observados = pred_test$abundance_v, estimados = pred_test$obs_abundance)

# with training data 
bias_train_v_a <- bias(observados = training_v_a_c$abundance, estimados = pred_train_v_a)

# With rel_abundance as response ---------------------
# with model using measured values - test set
bias_model_v_ra_c <- bias(observados = responses_v_ra, estimados = rf_pred_model_v_ra_c)

# with model using raster extracted values - test set
bias_rast_v_ra <- bias(observados = pred_test$rel_abundance_v, estimados = pred_test$obs_rel_abundance)

# with training data 
bias_train_v_ra <- bias(observados = training_v_ra_c$rel_abundance, estimados = pred_train_v_ra)

### PREDICTORS: VELOCITY + WD ### -----------------------------------
# With k_index as response ------------------------
# with model using measured values - test set
bias_model_wd_k_c <- bias(observados = responses_wd_k, estimados = rf_pred_model_wd_k_c)

# with model using raster extracted values - test set
bias_rast_wd_k <- bias(observados = pred_test$k_index_wd, estimados = pred_test$obs_k_index)

# with training data 
bias_train_wd_k <- bias(observados = training_v_k_c$k_index, estimados = pred_train_wd_k)

# With shannon index as response --------------------
# with model using measured values - test set
bias_model_wd_s_c <- bias(observados = responses_wd_s, estimados = rf_pred_model_wd_s_c)

# with model using raster extracted values - test set
bias_rast_wd_s <- bias(observados = pred_test$shannon_wd, estimados = pred_test$obs_shannon)

# with training data 
bias_train_wd_s <- bias(observados = training_v_s_c$shannon, estimados = pred_train_wd_s)

# With abundance as response ---------------------
# with model using measured values - test set
bias_model_wd_a_c <- bias(observados = responses_wd_a, estimados = rf_pred_model_wd_a_c)

# with model using raster extracted values - test set
bias_rast_wd_a <- bias(observados = pred_test$abundance_wd, estimados = pred_test$obs_abundance)

# with training data 
bias_train_wd_a <- bias(observados = training_v_a_c$abundance, estimados = pred_train_wd_a)

# With rel_abundance as response ---------------------
# with model using measured values - test set
bias_model_wd_ra_c <- bias(observados = responses_wd_ra, estimados = rf_pred_model_wd_ra_c)

# with model using raster extracted values - test set
bias_rast_wd_ra <- bias(observados = pred_test$rel_abundance_wd, estimados = pred_test$obs_rel_abundance)

# with training data 
bias_train_wd_ra <- bias(observados = training_v_ra_c$rel_abundance, estimados = pred_train_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------
# With k_index as response --------------------------
# with model using measured values - test set
bias_model_samp_k_c <- bias(observados = responses_samp_k, estimados = rf_pred_model_samp_k_c)

# with training data 
bias_train_samp_k <- bias(observados = training_v_k_c$k_index, estimados = pred_train_samp_k)

# With shannon index as response ---------------------
# with model using measured values - test set
bias_model_samp_s_c <- bias(observados = responses_samp_s, estimados = rf_pred_model_samp_s_c)

# with training data 
bias_train_samp_s <- bias(observados = training_v_s_c$shannon, estimados = pred_train_samp_s)

# With abundance as response -----------------------
# with model using measured values - test set
bias_model_samp_a_c <- bias(observados = responses_samp_a, estimados = rf_pred_model_samp_a_c)

# with training data 
bias_train_samp_a <- bias(observados = training_v_a_c$abundance, estimados = pred_train_samp_a)

# With rel_abundance as response -------------------------
# with model using measured values - test set
bias_model_samp_ra_c <- bias(observados = responses_samp_ra, estimados = rf_pred_model_samp_ra_c)

# with training data 
bias_train_samp_ra <- bias(observados = training_v_ra_c$rel_abundance, estimados = pred_train_samp_ra)

### PREDICTORS: ALL PREDICTORS ### ---------------------------------
# With k_index as response --------------------------
# with model using measured values - test set
bias_model_sec_k_c <- bias(observados = responses_sec_k, estimados = rf_pred_model_sec_k_c)

# with training data 
bias_train_sec_k <- bias(observados = training_v_k_c$k_index, estimados = pred_train_sec_k)

# With shannon index as response -------------------
# with model using measured values - test set
bias_model_sec_s_c <- bias(observados = responses_sec_s, estimados = rf_pred_model_sec_s_c)

# with training data 
bias_train_sec_s <- bias(observados = training_v_s_c$shannon, estimados = pred_train_sec_s)

# With abundance as response ----------------------
# with model using measured values - test set
bias_model_sec_a_c <- bias(observados = responses_sec_a, estimados = rf_pred_model_sec_a_c)

# with training data 
bias_train_sec_a <- bias(observados = training_v_a_c$abundance, estimados = pred_train_sec_a)

# With rel_abundance as response -------------------
# with model using measured values - test set
bias_model_sec_ra_c <- bias(observados = responses_sec_ra, estimados = rf_pred_model_sec_ra_c)

# with training data 
bias_train_sec_ra <- bias(observados = training_v_ra_c$rel_abundance, estimados = pred_train_sec_ra)

### PREDICTORS: SELECTED VARIABLES ### -----------------------------
# With k_index as response ------------------------
# with model using measured values - test set
bias_model_var_k_c <- bias(observados = responses_var_k, estimados = rf_pred_model_var_k_c)

# with model using raster extracted values - test set
bias_rast_var_k <- bias(observados = pred_test$k_index_var, estimados = pred_test$obs_k_index)

# with training data 
bias_train_var_k <- bias(observados = training_v_k_c$k_index, estimados = pred_train_var_k)

# With shannon index as response ---------------------
# with model using measured values - test set
bias_model_var_s_c <- bias(observados = responses_var_s, estimados = rf_pred_model_var_s_c)

# with model using raster extracted values - test set
bias_rast_var_s <- bias(observados = pred_test$shannon_var, estimados = pred_test$obs_shannon)

# with training data 
bias_train_var_s <- bias(observados = training_v_s_c$shannon, estimados = pred_train_var_s)

# With abundance as response ------------------------
# with model using measured values - test set
bias_model_var_a_c <- bias(observados = responses_var_a, estimados = rf_pred_model_var_a_c)

# with model using raster extracted values - test set
bias_rast_var_a <- bias(observados = pred_test$abundance_var, estimados = pred_test$obs_abundance)

# with training data 
bias_train_var_a <- bias(observados = training_v_a_c$abundance, estimados = pred_train_var_a)

# With rel_abundance as response ---------------------
# with model using measured values - test set
bias_model_var_ra_c <- bias(observados = responses_var_ra, estimados = rf_pred_model_var_ra_c)

# with model using raster extracted values - test set
bias_rast_var_ra <- bias(observados = pred_test$rel_abundance_var, estimados = pred_test$obs_rel_abundance)

# with training data 
bias_train_var_ra <- bias(observados = training_v_ra_c$rel_abundance, estimados = pred_train_var_ra)
```

## Nash-Sutcliffe efficiency (NSE) 
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------
# With k_index as response --------------------
# with model using measured values - test set
nse_model_v_k_c <- NSE(sim = rf_pred_model_v_k_c, obs = responses_v_k)

# with model using raster extracted values - test set
nse_rast_v_k <- NSE(sim = p_rast_v_k, obs = responses_v_k)

# with training data 
nse_train_v_k <- NSE(sim = pred_train_v_k, obs = training_v_k_c$k_index)

# With shannon index as response --------------------
# with model using measured values - test set
nse_model_v_s_c <- NSE(sim = rf_pred_model_v_s_c, obs = responses_v_s)

# with model using raster extracted values - test set
nse_rast_v_s <- NSE(sim = p_rast_v_s, obs = responses_v_s)

# with training data 
nse_train_v_s <- NSE(sim = pred_train_v_s, obs = training_v_s_c$shannon)

# With abundance as response --------------------
# with model using measured values - test set
nse_model_v_a_c <- NSE(sim = rf_pred_model_v_a_c, obs = responses_v_a)

# with model using raster extracted values - test set
nse_rast_v_a <- NSE(sim = p_rast_v_a, obs = responses_v_a)

# with training data 
nse_train_v_a <- NSE(sim = pred_train_v_a, obs = training_v_a_c$abundance)

# With rel_abundance as response ---------------------
# with model using measured values - test set
nse_model_v_ra_c <- NSE(sim = rf_pred_model_v_ra_c, obs = responses_v_ra)

# with model using raster extracted values - test set
nse_rast_v_ra <- NSE(sim = p_rast_v_ra, obs = responses_v_ra)

# with training data 
nse_train_v_ra <- NSE(sim = pred_train_v_ra, obs = training_v_ra_c$rel_abundance)

### PREDICTORS: VELOCITY + WD ### -------------------------------------
# With k_index as response -------------------------
# with model using measured values - test set
nse_model_wd_k_c <- NSE(sim = rf_pred_model_wd_k_c, obs = responses_wd_k)

# with model using raster extracted values - test set
nse_rast_wd_k <- NSE(sim = p_rast_wd_k, obs = responses_wd_k)

# with training data 
nse_train_wd_k <- NSE(sim = pred_train_wd_k, obs = training_v_k_c$k_index)

# With shannon index as response ------------------------
# with model using measured values - test set
nse_model_wd_s_c <- NSE(sim = rf_pred_model_wd_s_c, obs = responses_wd_s)

# with model using raster extracted values - test set
nse_rast_wd_s <- NSE(sim = p_rast_wd_s, obs = responses_wd_s)

# with training data 
nse_train_wd_s <- NSE(sim = pred_train_wd_s, obs = training_v_s_c$shannon)

# With abundance as response ---------------------
# with model using measured values - test set
nse_model_wd_a_c <- NSE(sim = rf_pred_model_wd_a_c, obs = responses_wd_a)

# with model using raster extracted values - test set
nse_rast_wd_a <- NSE(sim = p_rast_wd_a, obs = responses_wd_a)

# with training data 
nse_train_wd_a <- NSE(sim = pred_train_wd_a, obs = training_v_a_c$abundance)

# With rel_abundance as response -----------------------
# with model using measured values - test set
nse_model_wd_ra_c <- NSE(sim = rf_pred_model_wd_ra_c, obs = responses_wd_ra)

# with model using raster extracted values - test set
nse_rast_wd_ra <- NSE(sim = p_rast_wd_ra, obs = responses_wd_ra)

# with training data 
nse_train_wd_ra <- NSE(sim = pred_train_wd_ra, obs = training_v_ra_c$rel_abundance)

### PREDICTORS: SAMPLING LOCATIONS ### -------------------------------
# With k_index as response --------------------------
# with model using measured values - test set
nse_model_samp_k_c <- NSE(sim = rf_pred_model_samp_k_c, obs = responses_samp_k)

# with training data 
nse_train_samp_k <- NSE(sim = pred_train_samp_k, obs = training_v_k_c$k_index)

# With shannon index as response ---------------------------
# with model using measured values - test set
nse_model_samp_s_c <- NSE(sim = rf_pred_model_samp_s_c, obs = responses_samp_s)

# with training data 
nse_train_samp_s <- NSE(sim = pred_train_samp_s, obs = training_v_s_c$shannon)

# With abundance as response ----------------------
# with model using measured values - test set
nse_model_samp_a_c <- NSE(sim = rf_pred_model_samp_a_c, obs = responses_samp_a)

# with training data 
nse_train_samp_a <- NSE(sim = pred_train_samp_a, obs = training_v_a_c$abundance)

# With rel_abundance as response -------------------
# with model using measured values - test set
nse_model_samp_ra_c <- NSE(sim = rf_pred_model_samp_ra_c, obs = responses_samp_ra)

# with training data 
nse_train_samp_ra <- NSE(sim = pred_train_samp_ra, obs = training_v_ra_c$rel_abundance)

### PREDICTORS: ALL PREDICTORS ### ------------------------------------
# With k_index as response -------------------------
# with model using measured values - test set
nse_model_sec_k_c <- NSE(sim = rf_pred_model_sec_k_c, obs = responses_sec_k)

# with training data 
nse_train_sec_k <- NSE(sim = pred_train_sec_k, obs = training_sec_k_c$k_index)

# With shannon index as response -------------------------
# with model using measured values - test set
nse_model_sec_s_c <- NSE(sim = rf_pred_model_sec_s_c, obs = responses_sec_s)

# with training data 
nse_train_sec_s <- NSE(sim = pred_train_sec_s, obs = training_sec_s_c$shannon)

# With abundance as response ----------------------------
# with model using measured values - test set
nse_model_sec_a_c <- NSE(sim = rf_pred_model_sec_a_c, obs = responses_sec_a)

# with training data 
nse_train_sec_a <- NSE(sim = pred_train_sec_a, obs = training_sec_a_c$abundance)

# With rel_abundance as response ----------------------------
# with model using measured values - test set
nse_model_sec_ra_c <- NSE(sim = rf_pred_model_sec_ra_c, obs = responses_sec_ra)

# with training data 
nse_train_sec_ra <- NSE(sim = pred_train_sec_ra, obs = training_sec_ra_c$rel_abundance)

### PREDICTORS: SELECTED VARIABLES ### ---------------------------------
# With k_index as response --------------------------
# with model using measured values - test set
nse_model_var_k_c <- NSE(sim = rf_pred_model_var_k_c, obs = responses_var_k)

# with model using raster extracted values - test set
nse_rast_var_k <- NSE(sim = pred_test$k_index_var, obs = pred_test$obs_k_index)

# with training data 
nse_train_var_k <- NSE(sim = pred_train_var_k, obs = training_var_k_c$k_index)

# With shannon index as response ---------------------
# with model using measured values - test set
nse_model_var_s_c <- NSE(sim = rf_pred_model_var_s_c, obs = responses_var_s)

# with model using raster extracted values - test set
nse_rast_var_s <- NSE(sim = pred_test$shannon_var, obs = pred_test$obs_shannon)

# with training data 
nse_train_var_s <- NSE(sim = pred_train_var_s, obs = training_var_s_c$shannon)

# With abundance as response -----------------------------
# with model using measured values - test set
nse_model_var_a_c <- NSE(sim = rf_pred_model_var_a_c, obs = responses_var_a)

# with model using raster extracted values - test set
nse_rast_var_a <- NSE(sim = pred_test$abundance_var, obs = pred_test$obs_abundance)

# with training data 
nse_train_var_a <- NSE(sim = pred_train_var_a, obs = training_var_a_c$abundance)

# With rel_abundance as response
# with model using measured values - test set
nse_model_var_ra_c <- NSE(sim = rf_pred_model_var_ra_c, obs = responses_var_ra)

# with model using raster extracted values - test set
nse_rast_var_ra <- NSE(sim = pred_test$rel_abundance_var, obs = pred_test$obs_rel_abundance)

# with training data 
nse_train_var_ra <- NSE(sim = pred_train_var_ra, obs = training_var_ra_c$rel_abundance)
```


## Write Evaluation Results 
```{r}
# write evaluation metrics into df
# metric results calculated from simulated values extracted from rasters
metric_results_raster <- data.frame(nse = c(nse_rast_v_k, nse_rast_v_s, nse_rast_v_a, nse_rast_v_ra,
nse_rast_wd_k, nse_rast_wd_s, nse_rast_wd_a, nse_rast_wd_ra,
nse_rast_var_k, nse_rast_var_s, nse_rast_var_a, nse_rast_var_ra),

r2 = c(r2_rast_v_k, r2_rast_v_s, r2_rast_v_a, r2_rast_v_ra,
r2_rast_wd_k, r2_rast_wd_s, r2_rast_wd_a, r2_rast_wd_ra,
r2_rast_var_k, r2_rast_var_s, r2_rast_var_a, r2_rast_var_ra),

bias = c(bias_rast_v_k, bias_rast_v_s, bias_rast_v_a, bias_rast_v_ra,
bias_rast_wd_k, bias_rast_wd_s, bias_rast_wd_a, bias_rast_wd_ra,
bias_rast_var_k, bias_rast_var_s, bias_rast_var_a, bias_rast_var_ra),

rmse = c(rmse_rast_v_k, rmse_rast_v_s, rmse_rast_v_a, rmse_rast_v_ra,
rmse_rast_wd_k, rmse_rast_wd_s, rmse_rast_wd_a, rmse_rast_wd_ra,
rmse_rast_var_k, rmse_rast_var_s, rmse_rast_var_a, rmse_rast_var_ra),

mae = c(mae_rast_v_k, mae_rast_v_s, mae_rast_v_a, mae_rast_v_ra,
mae_rast_wd_k, mae_rast_wd_s, mae_rast_wd_a, mae_rast_wd_ra,
mae_rast_var_k, mae_rast_var_s, mae_rast_var_a, mae_rast_var_ra),

index = c("k_index", "shannon", "abundance", "rel_abundance",
"k_index", "shannon", "abundance", "rel_abundance",
"k_index", "shannon", "abundance", "rel_abundance"),

model = c("rf", "rf", "rf", "rf",
"rf", "rf", "rf", "rf",
"rf", "rf", "rf", "rf"),

predictor = c("v", "v", "v", "v", 
              "v + wd", "v + wd", "v + wd", "v + wd",  
              "var", "var", "var", "var"),

origin = c("raster_extract", "raster_extract", "raster_extract","raster_extract",
"raster_extract", "raster_extract", "raster_extract","raster_extract", 
"raster_extract", "raster_extract", "raster_extract","raster_extract"))

# metric results calculated from simulated values using measured v and wd
metric_results_measured <- data.frame(nse = c(nse_model_v_k_c, nse_model_v_s_c, nse_model_v_a_c, nse_model_v_ra_c, nse_model_wd_k_c, nse_model_wd_s_c, nse_model_wd_a_c, nse_model_wd_ra_c, nse_model_samp_k_c, nse_model_samp_s_c, nse_model_samp_a_c, nse_model_samp_ra_c, nse_model_sec_k_c, nse_model_sec_s_c, nse_model_sec_a_c, nse_model_sec_ra_c, nse_model_var_k_c, nse_model_var_s_c, nse_model_var_a_c, nse_model_var_ra_c),

                                      r2 = c(r2_v_k, r2_v_s, r2_v_a, r2_v_ra, r2_wd_k, r2_wd_s, r2_wd_a, r2_wd_ra, r2_samp_k, r2_samp_s, r2_samp_a, r2_samp_ra, r2_sec_k, r2_sec_s, r2_sec_a, r2_sec_ra, r2_var_k, r2_var_s, r2_var_a, r2_var_ra),
                                      
bias = c(bias_model_v_k_c, bias_model_v_s_c, bias_model_v_a_c, bias_model_v_ra_c, bias_model_wd_k_c,bias_model_wd_s_c, bias_model_wd_a_c, bias_model_wd_ra_c, bias_model_samp_k_c, bias_model_samp_s_c, bias_model_samp_a_c, bias_model_samp_ra_c, bias_model_sec_k_c, bias_model_sec_s_c, bias_model_sec_a_c, bias_model_sec_ra_c, bias_model_var_k_c, bias_model_var_s_c, bias_model_var_a_c, bias_model_var_ra_c),

rmse = c(rmse_model_v_k_c, rmse_model_v_s_c, rmse_model_v_a_c, rmse_model_v_ra_c, rmse_model_wd_k_c, rmse_model_wd_s_c, rmse_model_wd_a_c, rmse_model_wd_ra_c, rmse_model_samp_k_c, rmse_model_samp_s_c, rmse_model_samp_a_c, rmse_model_samp_ra_c, rmse_model_sec_k_c, rmse_model_sec_s_c, rmse_model_sec_a_c, rmse_model_sec_ra_c, rmse_model_var_k_c, rmse_model_var_s_c, rmse_model_var_a_c, rmse_model_var_ra_c),

mae = c(mae_model_v_k_c, mae_model_v_s_c, mae_model_v_a_c, mae_model_v_ra_c, mae_model_wd_k_c, mae_model_wd_s_c, mae_model_wd_a_c, mae_model_wd_ra_c, mae_model_samp_k_c, mae_model_samp_s_c, mae_model_samp_a_c, mae_model_samp_ra_c, mae_model_sec_k_c, mae_model_sec_s_c, mae_model_sec_a_c, mae_model_sec_ra_c, mae_model_var_k_c, mae_model_var_s_c, mae_model_var_a_c, mae_model_var_ra_c), 

index = c("k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance",
          "k_index", "shannon", "abundance", "rel_abundance"),

model = c("rf", "rf", "rf", "rf", 
          "rf", "rf", "rf", "rf", 
          "rf", "rf", "rf", "rf",
          "rf", "rf", "rf", "rf",
          "rf", "rf", "rf", "rf"),

predictor = c("v", "v", "v", "v", 
              "v + wd", "v + wd", "v + wd", "v + wd",  
              "samp", "samp", "samp", "samp", 
              "all", "all", "all", "all",
              "var", "var", "var", "var"),

origin = c("measured", "measured", "measured","measured",
"measured", "measured", "measured","measured", 
"measured", "measured", "measured","measured",
"measured", "measured", "measured","measured",
"measured", "measured", "measured","measured"))

# metric results calculated for training data
metrics_training <- data.frame(nse = c(nse_train_v_k, nse_train_v_s, nse_train_v_a, nse_train_v_ra,
nse_train_wd_k, nse_train_wd_s, nse_train_wd_a, nse_train_wd_ra,
nse_train_samp_k, nse_train_samp_s, nse_train_samp_a, nse_train_samp_ra,
nse_train_sec_k, nse_train_sec_s, nse_train_sec_a, nse_train_sec_ra,
nse_train_var_k, nse_train_var_s, nse_train_var_a, nse_train_var_ra),

r2 = c(r2_train_v_k, r2_train_v_s, r2_train_v_a, r2_train_v_ra,
r2_train_wd_k, r2_train_wd_s, r2_train_wd_a, r2_train_wd_ra,
r2_train_samp_k, r2_train_samp_s, r2_train_samp_a, r2_train_samp_ra,
r2_train_sec_k, r2_train_sec_s, r2_train_sec_a, r2_train_sec_ra,
r2_train_var_k, r2_train_var_s, r2_train_var_a, r2_train_var_ra),

bias = c(bias_train_v_k, bias_train_v_s, bias_train_v_a, bias_train_v_ra,
bias_train_wd_k, bias_train_wd_s, bias_train_wd_a, bias_train_wd_ra,
bias_train_samp_k, bias_train_samp_s, bias_train_samp_a, bias_train_samp_ra,
bias_train_sec_k, bias_train_sec_s, bias_train_sec_a, bias_train_sec_ra,
bias_train_var_k, bias_train_var_s, bias_train_var_a, bias_train_var_ra),

rmse = c(rmse_train_v_k, rmse_train_v_s, rmse_train_v_a, rmse_train_v_ra,
rmse_train_wd_k, rmse_train_wd_s, rmse_train_wd_a, rmse_train_wd_ra,
rmse_train_samp_k, rmse_train_samp_s, rmse_train_samp_a, rmse_train_samp_ra,
rmse_train_sec_k, rmse_train_sec_s, rmse_train_sec_a, rmse_train_sec_ra,
rmse_train_var_k, rmse_train_var_s, rmse_train_var_a, rmse_train_var_ra),

mae = c(mae_train_v_k, mae_train_v_s, mae_train_v_a, mae_train_v_ra,
mae_train_wd_k, mae_train_wd_s, mae_train_wd_a, mae_train_wd_ra,
mae_train_samp_k, mae_train_samp_s, mae_train_samp_a, mae_train_samp_ra,
mae_train_sec_k, mae_train_sec_s, mae_train_sec_a, mae_train_sec_ra,
mae_train_var_k, mae_train_var_s, mae_train_var_a, mae_train_var_ra),

index = c("k_index", "shannon", "abundance", "rel_abundance",
"k_index", "shannon", "abundance", "rel_abundance",
"k_index", "shannon", "abundance", "rel_abundance",
"k_index", "shannon", "abundance", "rel_abundance",
"k_index", "shannon", "abundance", "rel_abundance"),

model = c("rf", "rf", "rf", "rf", 
          "rf", "rf", "rf", "rf", 
          "rf", "rf", "rf", "rf",
          "rf", "rf", "rf", "rf",
          "rf", "rf", "rf", "rf"),

predictor = c("velocity", "velocity", "velocity", "velocity",
"wd", "wd", "wd", "wd",
"samp", "samp", "samp", "samp",
"all", "all", "all", "all", 
"var", "var", "var", "var"),

origin = c("training", "training", "training","training",
"training", "training", "training","training", 
"training", "training", "training","training",
"training", "training", "training","training",
"training", "training", "training","training"))

# bind all dataframes together into one cohesive dataframe 
all_metrics <- rbind(metric_results_measured, metric_results_raster, metrics_training)

# write results into a .csv 
write.csv(metric_results_measured, "Stat_Analysis/ml_evaluation_metrics_measured_rf.csv", row.names = FALSE)

write.csv(metric_results_raster, "Stat_Analysis/ml_evaluation_metrics_raster_rf.csv", row.names = FALSE)

write.csv(metrics_training, "Stat_Analysis/ml_evaluation_metrics_training_rf.csv", row.names = FALSE)

write.csv(all_metrics, "Stat_Analysis/ml_evaluation_metrics_all_rf.csv", row.names = FALSE)
```
 
## - PDP - *sec*

# Extract 
## Read rasters
```{r}
# read rasters containing wd and velocity 
GL1_ezg <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg.grd")
GL1_v_ezg <- stack("Pre_Processing/raster_files/GL1_v_2_56_ezg.tif")
GL1_ezg_var <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg_var.grd")

GL2_ezg <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg.grd")
GL2_v_ezg <- stack("Pre_Processing/raster_files/GL2_v_2_37_ezg.tif")
GL2_ezg_var <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg_var.grd")

L2_ezg <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg.grd")
L2_v_ezg <- stack("Pre_Processing/raster_files/L2_v_9_54_ezg.tif")
L2_ezg_var <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg_var.grd")


M1_ezg <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg.grd")
M1_v_ezg <- stack("Pre_Processing/raster_files/M1_v_1_50_ezg.tif")
M1_ezg_var <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg_var.grd")

S1_ezg <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg.grd")
S1_v_ezg <- stack("Pre_Processing/raster_files/S1_v_1_94_ezg.tif")
S1_ezg_var <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg_var.grd")

S2_ezg <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg.grd")
S2_v_ezg <- stack("Pre_Processing/raster_files/S2_v_1_93_ezg.tif")
S2_ezg_var <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg_var.grd")

TH4_ezg <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg.grd")
TH4_v_ezg <- stack("Pre_Processing/raster_files/TH4_v_35_12_ezg.tif")
TH4_ezg_var <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg_var.grd")

VR3_ezg <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg.grd")
VR3_v_ezg <- stack("Pre_Processing/raster_files/VR3_v_21_51_ezg.tif")
VR3_ezg_var <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg_var.grd")

# rename rasters in stacks for extraction 
names(GL1_ezg) <- c("velocity", "wd_m")  
names(GL1_v_ezg) <- c("velocity")
#names(GL1_q) <- c("velocity", "wd_m") 

names(GL2_ezg) <- c("velocity", "wd_m") 
names(GL2_v_ezg) <- c("velocity")
#names(GL2_q) <- c("velocity", "wd_m")

names(L2_ezg) <- c("velocity", "wd_m")
names(L2_v_ezg) <- c("velocity")
#names(L2_q) <- c("velocity", "wd_m")

names(M1_ezg) <- c("velocity", "wd_m") 
names(M1_v_ezg) <- c("velocity")
#names(M1_q) <- c("velocity", "wd_m") 

names(S1_ezg) <- c("velocity", "wd_m") 
names(S1_v_ezg) <- c("velocity")
#names(S1_q) <- c("velocity", "wd_m")  

names(S2_ezg) <- c("velocity", "wd_m")
names(S2_v_ezg) <- c("velocity")
#names(S2_q) <- c("velocity", "wd_m") 

names(TH4_ezg) <- c("velocity", "wd_m") 
names(TH4_v_ezg) <- c("velocity")
#names(TH4_q) <- c("velocity", "wd_m") 

names(VR3_ezg) <- c("velocity", "wd_m")
names(VR3_v_ezg) <- c("velocity")
#names(VR3_q) <- c("velocity", "wd_m") 

# assign coordinate system 
crs(GL1_ezg) <- "EPSG: 2056"
#crs(GL1_q) <- "EPSG: 2056"

crs(GL2_ezg) <- "EPSG: 2056"
#crs(GL2_q) <- "EPSG: 2056"

crs(L2_ezg) <- "EPSG: 2056"
#crs(L2_q) <- "EPSG: 2056"

crs(M1_ezg) <- "EPSG: 2056"
#crs(M1_q) <- "EPSG: 2056"

crs(S1_ezg) <- "EPSG: 2056"
#crs(S1_q) <- "EPSG: 2056"

crs(S2_ezg) <- "EPSG: 2056"
#crs(S2_q) <- "EPSG: 2056"

crs(TH4_ezg) <- "EPSG: 2056"
#crs(TH4_q) <- "EPSG: 2056"

crs(VR3_ezg) <- "EPSG: 2056"
#crs(VR3_q) <- "EPSG: 2056"
```

## Predict Models to Maps 
### GL1
```{r}
# predict ML model to rasters with velocity and wd 
# GL1 - predictors: v + wd ----------------------------------------------------
GL1_ezg_wd_k <- raster::predict(GL1_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_wd_s <- raster::predict(GL1_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_wd_a <- raster::predict(GL1_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_wd_ra <- raster::predict(GL1_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# GL1 - predictor: velocity ---------------------------------------------------
GL1_ezg_v_k <- raster::predict(GL1_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_v_s <- raster::predict(GL1_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_v_a <- raster::predict(GL1_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_v_ra <- raster::predict(GL1_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# GL1 - predictors: selected variables ----------------------------------------
GL1_ezg_var_k <- raster::predict(GL1_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_var_s <- raster::predict(GL1_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_var_a <- raster::predict(GL1_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_ezg_var_ra <- raster::predict(GL1_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### GL2
```{r}
# GL2 - predictors: v + wd ----------------------------------------------------
GL2_ezg_wd_k <- raster::predict(GL2_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_wd_s <- raster::predict(GL2_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_wd_a <- raster::predict(GL2_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_wd_ra <- raster::predict(GL2_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# GL2 - predictor: velocity ---------------------------------------------------
GL2_ezg_v_k <- raster::predict(GL2_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_v_s <- raster::predict(GL2_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_v_a <- raster::predict(GL2_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_v_ra <- raster::predict(GL2_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# GL2 - predictor: selected variables -------------------------------------------
GL2_ezg_var_k <- raster::predict(GL2_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_var_s <- raster::predict(GL2_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_var_a <- raster::predict(GL2_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_ezg_var_ra <- raster::predict(GL2_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### L2
```{r}
# L2 - predictors: v + wd -----------------------------------------------------
L2_ezg_wd_k <- raster::predict(L2_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_wd_s <- raster::predict(L2_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_wd_a <- raster::predict(L2_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_wd_ra <- raster::predict(L2_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# L2 - predictor: velocity ----------------------------------------------------
L2_ezg_v_k <- raster::predict(L2_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_v_s <- raster::predict(L2_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_v_a <- raster::predict(L2_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_v_ra <- raster::predict(L2_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# L2 - predictors: selected variables -----------------------------------------
L2_ezg_var_k <- raster::predict(L2_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_var_s <- raster::predict(L2_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_var_a <- raster::predict(L2_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_ezg_var_ra <- raster::predict(L2_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### M1
```{r}
# M1  - predictors: v + wd -----------------------------------------------------
M1_ezg_wd_k <- raster::predict(M1_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_wd_s <- raster::predict(M1_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_wd_a <- raster::predict(M1_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_wd_ra <- raster::predict(M1_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# M1  - predictor: velocity ---------------------------------------------------
M1_ezg_v_k <- raster::predict(M1_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_v_s <- raster::predict(M1_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_v_a <- raster::predict(M1_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_v_ra <- raster::predict(M1_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# M1  - predictors: selected variables ----------------------------------------
M1_ezg_var_k <- raster::predict(M1_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_var_s <- raster::predict(M1_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_var_a <- raster::predict(M1_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_ezg_var_ra <- raster::predict(M1_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### S1
```{r}
# S1  - predictors: v + wd ----------------------------------------------------
S1_ezg_wd_k <- raster::predict(S1_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_wd_s <- raster::predict(S1_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_wd_a <- raster::predict(S1_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_wd_ra <- raster::predict(S1_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# S1  - predictor: velocity ---------------------------------------------------
S1_ezg_v_k <- raster::predict(S1_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_v_s <- raster::predict(S1_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_v_a <- raster::predict(S1_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_v_ra <- raster::predict(S1_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# S1  - predictors: selected variables ------------------------------------------
S1_ezg_var_k <- raster::predict(S1_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_var_s <- raster::predict(S1_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_var_a <- raster::predict(S1_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_ezg_var_ra <- raster::predict(S1_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### S2
```{r}
# S2  - predictors: v + wd ----------------------------------------------------
S2_ezg_wd_k <- raster::predict(S2_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_wd_s <- raster::predict(S2_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_wd_a <- raster::predict(S2_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_wd_ra <- raster::predict(S2_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# S2  - predictor: velocity ---------------------------------------------------
S2_ezg_v_k <- raster::predict(S2_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_v_s <- raster::predict(S2_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_v_a <- raster::predict(S2_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_v_ra <- raster::predict(S2_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# S2  - predictors: selected variables -------------------------------------------
S2_ezg_var_k <- raster::predict(S2_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_var_s <- raster::predict(S2_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_var_a <- raster::predict(S2_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_ezg_var_ra <- raster::predict(S2_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### TH4
```{r}
# TH4  - predictors: v + wd ---------------------------------------------------
TH4_ezg_wd_k <- raster::predict(TH4_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_wd_s <- raster::predict(TH4_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_wd_a <- raster::predict(TH4_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_wd_ra <- raster::predict(TH4_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# TH4  - predictor: velocity --------------------------------------------------
TH4_ezg_v_k <- raster::predict(TH4_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_v_s <- raster::predict(TH4_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_v_a <- raster::predict(TH4_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_v_ra <- raster::predict(TH4_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# TH4  - predictors: selected variables ---------------------------------------
TH4_ezg_var_k <- raster::predict(TH4_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_var_s <- raster::predict(TH4_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_var_a <- raster::predict(TH4_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_ezg_var_ra <- raster::predict(TH4_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### VR3
```{r}
# VR3  - predictors: v + wd ---------------------------------------------------
VR3_ezg_wd_k <- raster::predict(VR3_ezg, rf_model_wd_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_wd_s <- raster::predict(VR3_ezg, rf_model_wd_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_wd_a <- raster::predict(VR3_ezg, rf_model_wd_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_wd_ra <- raster::predict(VR3_ezg, rf_model_wd_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# VR3  - predictor: velocity --------------------------------------------------
VR3_ezg_v_k <- raster::predict(VR3_v_ezg, rf_model_v_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_v_s <- raster::predict(VR3_v_ezg, rf_model_v_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_v_a <- raster::predict(VR3_v_ezg, rf_model_v_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_v_ra <- raster::predict(VR3_v_ezg, rf_model_v_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

# VR3  - predictors: selected variables --------------------------------------
VR3_ezg_var_k <- raster::predict(VR3_ezg_var, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_var_s <- raster::predict(VR3_ezg_var, rf_model_var_s_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_var_a <- raster::predict(VR3_ezg_var, rf_model_var_a_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_ezg_var_ra <- raster::predict(VR3_ezg_var, rf_model_var_ra_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)
```

### Read data
```{r}
# read all raster results (one time flow velocity classes and one time for habitat suitability)
# prep extraction data 
## GL1
coord_GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1") |>
  dplyr::select(x, y) 

GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1")

## GL2
coord_GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2") |>
  dplyr::select(x, y) 

GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2")

## L2
coord_L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2") |>
  dplyr::select(x, y) 

L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2")

## M1
coord_M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1") |>
  dplyr::select(x, y) 

M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1")

## S1
coord_S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1") |>
  dplyr::select(x, y) 

S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1")

## S2
coord_S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2") |>
  dplyr::select(x, y) 

S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2")

## TH4
coord_TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4") |>
  dplyr::select(x, y) 

TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4")

## VR3
coord_VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3") |>
  dplyr::select(x, y) 

VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3")
```

## Extract Results
```{r}
# extract raster information for regression analysis later
# GL1 -------------------------------------------------------------------------
regr_GL1_wd_k <- raster::extract(GL1_ezg_wd_k, coord_GL1) 
regr_GL1_wd_s <- raster::extract(GL1_ezg_wd_s, coord_GL1) 
regr_GL1_wd_a <- raster::extract(GL1_ezg_wd_a, coord_GL1) 
regr_GL1_wd_ra <- raster::extract(GL1_ezg_wd_ra, coord_GL1) 

regr_GL1_v_k <- raster::extract(GL1_ezg_v_k, coord_GL1) 
regr_GL1_v_s <- raster::extract(GL1_ezg_v_s, coord_GL1) 
regr_GL1_v_a <- raster::extract(GL1_ezg_v_a, coord_GL1) 
regr_GL1_v_ra <- raster::extract(GL1_ezg_v_ra, coord_GL1)

regr_GL1_var_k <- raster::extract(GL1_ezg_var_k, coord_GL1) 
regr_GL1_var_s <- raster::extract(GL1_ezg_var_s, coord_GL1) 
regr_GL1_var_a <- raster::extract(GL1_ezg_var_a, coord_GL1) 
regr_GL1_var_ra <- raster::extract(GL1_ezg_var_ra, coord_GL1)

# GL2 -------------------------------------------------------------------------
regr_GL2_wd_k <- raster::extract(GL2_ezg_wd_k, coord_GL2) 
regr_GL2_wd_s <- raster::extract(GL2_ezg_wd_s, coord_GL2) 
regr_GL2_wd_a <- raster::extract(GL2_ezg_wd_a, coord_GL2) 
regr_GL2_wd_ra <- raster::extract(GL2_ezg_wd_ra, coord_GL2)

regr_GL2_v_k <- raster::extract(GL2_ezg_v_k, coord_GL2) 
regr_GL2_v_s <- raster::extract(GL2_ezg_v_s, coord_GL2) 
regr_GL2_v_a <- raster::extract(GL2_ezg_v_a, coord_GL2)
regr_GL2_v_ra <- raster::extract(GL2_ezg_v_ra, coord_GL2)

regr_GL2_var_k <- raster::extract(GL2_ezg_var_k, coord_GL2) 
regr_GL2_var_s <- raster::extract(GL2_ezg_var_s, coord_GL2) 
regr_GL2_var_a <- raster::extract(GL2_ezg_var_a, coord_GL2)
regr_GL2_var_ra <- raster::extract(GL2_ezg_var_ra, coord_GL2)

# L2 --------------------------------------------------------------------------
regr_L2_wd_k <- raster::extract(L2_ezg_wd_k, coord_L2) 
regr_L2_wd_s <- raster::extract(L2_ezg_wd_s, coord_L2) 
regr_L2_wd_a <- raster::extract(L2_ezg_wd_a, coord_L2) 
regr_L2_wd_ra <- raster::extract(L2_ezg_wd_ra, coord_L2) 

regr_L2_v_k <- raster::extract(L2_ezg_v_k, coord_L2) 
regr_L2_v_s <- raster::extract(L2_ezg_v_s, coord_L2) 
regr_L2_v_a <- raster::extract(L2_ezg_v_a, coord_L2)
regr_L2_v_ra <- raster::extract(L2_ezg_v_ra, coord_L2)

regr_L2_var_k <- raster::extract(L2_ezg_var_k, coord_L2) 
regr_L2_var_s <- raster::extract(L2_ezg_var_s, coord_L2) 
regr_L2_var_a <- raster::extract(L2_ezg_var_a, coord_L2)
regr_L2_var_ra <- raster::extract(L2_ezg_var_ra, coord_L2)

# M1 --------------------------------------------------------------------------
regr_M1_wd_k <- raster::extract(M1_ezg_wd_k, coord_M1) 
regr_M1_wd_s <- raster::extract(M1_ezg_wd_s, coord_M1) 
regr_M1_wd_a <- raster::extract(M1_ezg_wd_a, coord_M1) 
regr_M1_wd_ra <- raster::extract(M1_ezg_wd_ra, coord_M1) 

regr_M1_v_k <- raster::extract(M1_ezg_v_k, coord_M1) 
regr_M1_v_s <- raster::extract(M1_ezg_v_s, coord_M1) 
regr_M1_v_a <- raster::extract(M1_ezg_v_a, coord_M1)
regr_M1_v_ra <- raster::extract(M1_ezg_v_ra, coord_M1)

regr_M1_var_k <- raster::extract(M1_ezg_var_k, coord_M1) 
regr_M1_var_s <- raster::extract(M1_ezg_var_s, coord_M1) 
regr_M1_var_a <- raster::extract(M1_ezg_var_a, coord_M1)
regr_M1_var_ra <- raster::extract(M1_ezg_var_ra, coord_M1)

# S1 --------------------------------------------------------------------------
regr_S1_wd_k <- raster::extract(S1_ezg_wd_k, coord_S1) 
regr_S1_wd_s <- raster::extract(S1_ezg_wd_s, coord_S1) 
regr_S1_wd_a <- raster::extract(S1_ezg_wd_a, coord_S1) 
regr_S1_wd_ra <- raster::extract(S1_ezg_wd_ra, coord_S1) 

regr_S1_v_k <- raster::extract(S1_ezg_v_k, coord_S1) 
regr_S1_v_s <- raster::extract(S1_ezg_v_s, coord_S1) 
regr_S1_v_a <- raster::extract(S1_ezg_v_a, coord_S1)
regr_S1_v_ra <- raster::extract(S1_ezg_v_ra, coord_S1)

regr_S1_var_k <- raster::extract(S1_ezg_var_k, coord_S1) 
regr_S1_var_s <- raster::extract(S1_ezg_var_s, coord_S1) 
regr_S1_var_a <- raster::extract(S1_ezg_var_a, coord_S1)
regr_S1_var_ra <- raster::extract(S1_ezg_var_ra, coord_S1)

# S2 --------------------------------------------------------------------------
regr_S2_wd_k <- raster::extract(S2_ezg_wd_k, coord_S2) 
regr_S2_wd_s <- raster::extract(S2_ezg_wd_s, coord_S2) 
regr_S2_wd_a <- raster::extract(S2_ezg_wd_a, coord_S2) 
regr_S2_wd_ra <- raster::extract(S2_ezg_wd_ra, coord_S2)

regr_S2_v_k <- raster::extract(S2_ezg_v_k, coord_S2) 
regr_S2_v_s <- raster::extract(S2_ezg_v_s, coord_S2) 
regr_S2_v_a <- raster::extract(S2_ezg_v_a, coord_S2)
regr_S2_v_ra <- raster::extract(S2_ezg_v_ra, coord_S2)

regr_S2_var_k <- raster::extract(S2_ezg_var_k, coord_S2) 
regr_S2_var_s <- raster::extract(S2_ezg_var_s, coord_S2) 
regr_S2_var_a <- raster::extract(S2_ezg_var_a, coord_S2)
regr_S2_var_ra <- raster::extract(S2_ezg_var_ra, coord_S2)

# TH4 -------------------------------------------------------------------------
regr_TH4_wd_k <- raster::extract(TH4_ezg_wd_k, coord_TH4) 
regr_TH4_wd_s <- raster::extract(TH4_ezg_wd_s, coord_TH4) 
regr_TH4_wd_a <- raster::extract(TH4_ezg_wd_a, coord_TH4) 
regr_TH4_wd_ra <- raster::extract(TH4_ezg_wd_ra, coord_TH4) 

regr_TH4_v_k <- raster::extract(TH4_ezg_v_k, coord_TH4) 
regr_TH4_v_s <- raster::extract(TH4_ezg_v_s, coord_TH4) 
regr_TH4_v_a <- raster::extract(TH4_ezg_v_a, coord_TH4)
regr_TH4_v_ra <- raster::extract(TH4_ezg_v_ra, coord_TH4)

regr_TH4_var_k <- raster::extract(TH4_ezg_var_k, coord_TH4) 
regr_TH4_var_s <- raster::extract(TH4_ezg_var_s, coord_TH4) 
regr_TH4_var_a <- raster::extract(TH4_ezg_var_a, coord_TH4)
regr_TH4_var_ra <- raster::extract(TH4_ezg_var_ra, coord_TH4)

# VR3 -------------------------------------------------------------------------
regr_VR3_wd_k <- raster::extract(VR3_ezg_wd_k, coord_VR3) 
regr_VR3_wd_s <- raster::extract(VR3_ezg_wd_s, coord_VR3) 
regr_VR3_wd_a <- raster::extract(VR3_ezg_wd_a, coord_VR3) 
regr_VR3_wd_ra <- raster::extract(VR3_ezg_wd_ra, coord_VR3)

regr_VR3_v_k <- raster::extract(VR3_ezg_v_k, coord_VR3) 
regr_VR3_v_s <- raster::extract(VR3_ezg_v_s, coord_VR3) 
regr_VR3_v_a <- raster::extract(VR3_ezg_v_a, coord_VR3)
regr_VR3_v_ra <- raster::extract(VR3_ezg_v_ra, coord_VR3)

regr_VR3_var_k <- raster::extract(VR3_ezg_var_k, coord_VR3) 
regr_VR3_var_s <- raster::extract(VR3_ezg_var_s, coord_VR3) 
regr_VR3_var_a <- raster::extract(VR3_ezg_var_a, coord_VR3)
regr_VR3_var_ra <- raster::extract(VR3_ezg_var_ra, coord_VR3)
```

## Combine into DF
```{r}
# combine all results into dataframe
# GL1 -------------------------------------------------------------------------
data_GL1 <- cbind(regr_GL1_wd_k, regr_GL1_wd_s, regr_GL1_wd_a, regr_GL1_wd_ra, regr_GL1_v_k, regr_GL1_v_s, regr_GL1_v_a, regr_GL1_v_ra, regr_GL1_var_k, regr_GL1_var_s, regr_GL1_var_a, regr_GL1_var_ra, GL1) |>
  dplyr::rename(
         k_index_wd = regr_GL1_wd_k,
         shannon_wd = regr_GL1_wd_s,
         abundance_wd = regr_GL1_wd_a,
         rel_abundance_wd = regr_GL1_wd_ra,
         k_index_v = regr_GL1_v_k,
         shannon_v = regr_GL1_v_s,
         abundance_v = regr_GL1_v_a,
         rel_abundance_v = regr_GL1_v_ra,
         k_index_var = regr_GL1_var_k,
         shannon_var = regr_GL1_var_s,
         abundance_var = regr_GL1_var_a,
         rel_abundance_var = regr_GL1_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# GL2 -------------------------------------------------------------------------
data_GL2 <- cbind(regr_GL2_wd_k, regr_GL2_wd_s, regr_GL2_wd_a, regr_GL2_wd_ra, regr_GL2_v_k, regr_GL2_v_s, regr_GL2_v_a, regr_GL2_v_ra, regr_GL2_var_k, regr_GL2_var_s, regr_GL2_var_a, regr_GL2_var_ra, GL2) |>
  dplyr::rename(
         k_index_wd = regr_GL2_wd_k,
         shannon_wd = regr_GL2_wd_s,
         abundance_wd = regr_GL2_wd_a,
         rel_abundance_wd = regr_GL2_wd_ra,
         k_index_v = regr_GL2_v_k,
         shannon_v = regr_GL2_v_s,
         abundance_v = regr_GL2_v_a,
         rel_abundance_v = regr_GL2_v_ra,
         k_index_var = regr_GL2_var_k,
         shannon_var = regr_GL2_var_s,
         abundance_var = regr_GL2_var_a,
         rel_abundance_var = regr_GL2_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# L2 --------------------------------------------------------------------------
data_L2 <- cbind(regr_L2_wd_k, regr_L2_wd_s, regr_L2_wd_a, regr_L2_wd_ra, regr_L2_v_k, regr_L2_v_s, regr_L2_v_a, regr_L2_v_ra, regr_L2_var_k, regr_L2_var_s, regr_L2_var_a, regr_L2_var_ra, L2) |>
  dplyr::rename(
         k_index_wd = regr_L2_wd_k,
         shannon_wd = regr_L2_wd_s,
         abundance_wd = regr_L2_wd_a,
         rel_abundance_wd = regr_L2_wd_ra,
         k_index_v = regr_L2_v_k,
         shannon_v = regr_L2_v_s,
         abundance_v = regr_L2_v_a,
         rel_abundance_v = regr_L2_v_ra,
         k_index_var = regr_L2_var_k,
         shannon_var = regr_L2_var_s,
         abundance_var = regr_L2_var_a,
         rel_abundance_var = regr_L2_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# M1 --------------------------------------------------------------------------
data_M1 <- cbind(regr_M1_wd_k, regr_M1_wd_s, regr_M1_wd_a, regr_M1_wd_ra, regr_M1_v_k, regr_M1_v_s, regr_M1_v_a, regr_M1_v_ra, regr_M1_var_k, regr_M1_var_s, regr_M1_var_a, regr_M1_var_ra, M1) |>
  dplyr::rename(
         k_index_wd = regr_M1_wd_k,
         shannon_wd = regr_M1_wd_s,
         abundance_wd = regr_M1_wd_a,
         rel_abundance_wd = regr_M1_wd_ra,
         k_index_v = regr_M1_v_k,
         shannon_v = regr_M1_v_s,
         abundance_v = regr_M1_v_a,
         rel_abundance_v = regr_M1_v_ra,
         k_index_var = regr_M1_var_k,
         shannon_var = regr_M1_var_s,
         abundance_var = regr_M1_var_a,
         rel_abundance_var = regr_M1_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# S1 --------------------------------------------------------------------------
data_S1 <- cbind(regr_S1_wd_k, regr_S1_wd_s, regr_S1_wd_a, regr_S1_wd_ra, regr_S1_v_k, regr_S1_v_s, regr_S1_v_a, regr_S1_v_ra, regr_S1_var_k, regr_S1_var_s, regr_S1_var_a, regr_S1_var_ra, S1) |>
  dplyr::rename(
         k_index_wd = regr_S1_wd_k,
         shannon_wd = regr_S1_wd_s,
         abundance_wd = regr_S1_wd_a,
         rel_abundance_wd = regr_S1_wd_ra,
         k_index_v = regr_S1_v_k,
         shannon_v = regr_S1_v_s,
         abundance_v = regr_S1_v_a,
         rel_abundance_v = regr_S1_v_ra,
         k_index_var = regr_S1_var_k,
         shannon_var = regr_S1_var_s,
         abundance_var = regr_S1_var_a,
         rel_abundance_var = regr_S1_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# S2 --------------------------------------------------------------------------
data_S2 <- cbind(regr_S2_wd_k, regr_S2_wd_s, regr_S2_wd_a, regr_S2_wd_ra, regr_S2_v_k, regr_S2_v_s, regr_S2_v_a, regr_S2_v_ra, regr_S2_var_k, regr_S2_var_s, regr_S2_var_a, regr_S2_var_ra, S2) |>
  dplyr::rename(
         k_index_wd = regr_S2_wd_k,
         shannon_wd = regr_S2_wd_s,
         abundance_wd = regr_S2_wd_a,
         rel_abundance_wd = regr_S2_wd_ra,
         k_index_v = regr_S2_v_k,
         shannon_v = regr_S2_v_s,
         abundance_v = regr_S2_v_a,
         rel_abundance_v = regr_S2_v_ra,
         k_index_var = regr_S2_var_k,
         shannon_var = regr_S2_var_s,
         abundance_var = regr_S2_var_a,
         rel_abundance_var = regr_S2_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)


# TH4 -------------------------------------------------------------------------
data_TH4 <- cbind(regr_TH4_wd_k, regr_TH4_wd_s, regr_TH4_wd_a, regr_TH4_wd_ra, regr_TH4_v_k, regr_TH4_v_s, regr_TH4_v_a, regr_TH4_v_ra, regr_TH4_var_k, regr_TH4_var_s, regr_TH4_var_a, regr_TH4_var_ra, TH4) |>
  dplyr::rename(
         k_index_wd = regr_TH4_wd_k,
         shannon_wd = regr_TH4_wd_s,
         abundance_wd = regr_TH4_wd_a,
         rel_abundance_wd = regr_TH4_wd_ra,
         k_index_v = regr_TH4_v_k,
         shannon_v = regr_TH4_v_s,
         abundance_v = regr_TH4_v_a,
         rel_abundance_v = regr_TH4_v_ra,
         k_index_var = regr_TH4_var_k,
         shannon_var = regr_TH4_var_s,
         abundance_var = regr_TH4_var_a,
         rel_abundance_var = regr_TH4_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)


# VR3 -------------------------------------------------------------------------
data_VR3 <- cbind(regr_VR3_wd_k, regr_VR3_wd_s, regr_VR3_wd_a, regr_VR3_wd_ra, regr_VR3_v_k, regr_VR3_v_s, regr_VR3_v_a, regr_VR3_v_ra, regr_VR3_var_k, regr_VR3_var_s, regr_VR3_var_a, regr_VR3_var_ra, VR3) |>
  dplyr::rename(
         k_index_wd = regr_VR3_wd_k,
         shannon_wd = regr_VR3_wd_s,
         abundance_wd = regr_VR3_wd_a,
         rel_abundance_wd = regr_VR3_wd_ra,
         k_index_v = regr_VR3_v_k,
         shannon_v = regr_VR3_v_s,
         abundance_v = regr_VR3_v_a,
         rel_abundance_v = regr_VR3_v_ra,
         k_index_var = regr_VR3_var_k,
         shannon_var = regr_VR3_var_s,
         abundance_var = regr_VR3_var_a,
         rel_abundance_var = regr_VR3_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)
```

## Results from Extraction 
```{r}
# bind results together 
regr_analysis <- rbind(data_GL1, data_GL2, data_L2, data_M1, data_S1, data_S2, data_TH4, data_VR3)

# export to .csv file
write.csv(regr_analysis, "Stat_Analysis/stat_analysis_data/regr_analysis_rf.csv", row.names = FALSE)
```

# Scenario Simulations 
## Read rasters
```{r}
### GL1 ### ----------------------------------------------------------------
GL1_2_56_ezg <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg_var.grd")
GL1_min_3_28 <- stack("Pre_Processing/rasters_stacked/GL1_3_28_var.grd")
GL1_6_00 <- stack("Pre_Processing/rasters_stacked/GL1_6_00_var.grd")
GL1_9_00 <- stack("Pre_Processing/rasters_stacked/GL1_9_00_var.grd")
GL1_12_68 <- stack("Pre_Processing/rasters_stacked/GL1_12_68_var.grd")
GL1_16_00 <- stack("Pre_Processing/rasters_stacked/GL1_16_00_var.grd")
GL1_19_00 <- stack("Pre_Processing/rasters_stacked/GL1_19_00_var.grd")
GL1_22_00 <- stack("Pre_Processing/rasters_stacked/GL1_22_00_var.grd")
GL1_25_00 <- stack("Pre_Processing/rasters_stacked/GL1_25_00_var.grd")
GL1_28_00 <- stack("Pre_Processing/rasters_stacked/GL1_28_00_var.grd")
GL1_max_31_76 <- stack("Pre_Processing/rasters_stacked/GL1_31_76_var.grd")

### GL2 ### ----------------------------------------------------------------
GL2_2_37_ezg <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg_var.grd")
GL2_min_3_21 <- stack("Pre_Processing/rasters_stacked/GL2_3_21_var.grd")
GL2_6_00 <- stack("Pre_Processing/rasters_stacked/GL2_6_00_var.grd")
GL2_9_00 <- stack("Pre_Processing/rasters_stacked/GL2_9_00_var.grd")
GL2_11_00 <- stack("Pre_Processing/rasters_stacked/GL2_11_00_var.grd")
GL2_12_52 <- stack("Pre_Processing/rasters_stacked/GL2_12_52_var.grd")
GL2_16_00 <- stack("Pre_Processing/rasters_stacked/GL2_16_00_var.grd")
GL2_19_00 <- stack("Pre_Processing/rasters_stacked/GL2_19_00_var.grd")
GL2_22_00 <- stack("Pre_Processing/rasters_stacked/GL2_22_00_var.grd")
GL2_25_00 <- stack("Pre_Processing/rasters_stacked/GL2_25_00_var.grd")
GL2_28_00 <- stack("Pre_Processing/rasters_stacked/GL2_28_00_var.grd")
GL2_max_31_53 <- stack("Pre_Processing/rasters_stacked/GL2_31_53_var.grd")

### L2 ### -------------------------------------------------------------------
L2_base_2_40 <- stack("Pre_Processing/rasters_stacked/L2_2_40_var.grd")
L2_3_90 <- stack("Pre_Processing/rasters_stacked/L2_3_90_var.grd")
L2_7_00 <- stack("Pre_Processing/rasters_stacked/L2_7_00_var.grd")
L2_peak_9_24 <- stack("Pre_Processing/rasters_stacked/L2_9_24_var.grd")
L2_9_54_ezg <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg_var.grd")
L2_13_30 <- stack("Pre_Processing/rasters_stacked/L2_13_30_var.grd")
L2_16_50 <- stack("Pre_Processing/rasters_stacked/L2_16_50_var.grd")
L2_18_90 <- stack("Pre_Processing/rasters_stacked/L2_18_90_var.grd")

### M1 ### -----------------------------------------------------------------
M1_base_0_47 <- stack("Pre_Processing/rasters_stacked/M1_0_47_var.grd")
M1_0_60 <- stack("Pre_Processing/rasters_stacked/M1_0_60_var.grd")
M1_1_50_ezg <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg_var.grd")
M1_4_00 <- stack("Pre_Processing/rasters_stacked/M1_4_00_var.grd")
M1_6_00 <- stack("Pre_Processing/rasters_stacked/M1_6_00_var.grd")
M1_8_00 <- stack("Pre_Processing/rasters_stacked/M1_8_00_var.grd")
M1_10_00 <- stack("Pre_Processing/rasters_stacked/M1_10_00_var.grd")
M1_12_00 <- stack("Pre_Processing/rasters_stacked/M1_12_00_var.grd")
M1_14_00 <- stack("Pre_Processing/rasters_stacked/M1_14_00_var.grd")
M1_16_00 <- stack("Pre_Processing/rasters_stacked/M1_16_00_var.grd")
M1_peak_18_84 <- stack("Pre_Processing/rasters_stacked/M1_18_84_var.grd")
M1_22_84 <- stack("Pre_Processing/rasters_stacked/M1_22_84_var.grd")

### S1 ### ------------------------------------------------------------------
S1_1_94_ezg <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg_var.grd")
S1_base_2_00 <- stack("Pre_Processing/rasters_stacked/S1_2_00_var.grd")
S1_3_70 <- stack("Pre_Processing/rasters_stacked/S1_3_70_var.grd")
S1_6_50 <- stack("Pre_Processing/rasters_stacked/S1_6_50_var.grd")
S1_8_50 <- stack("Pre_Processing/rasters_stacked/S1_8_50_var.grd")
S1_10_68 <- stack("Pre_Processing/rasters_stacked/S1_10_68_var.grd")
S1_13_00 <- stack("Pre_Processing/rasters_stacked/S1_13_00_var.grd")
S1_15_00 <- stack("Pre_Processing/rasters_stacked/S1_15_00_var.grd")
S1_peak_18_00 <- stack("Pre_Processing/rasters_stacked/S1_18_00_var.grd")
S1_20_00 <- stack("Pre_Processing/rasters_stacked/S1_20_00_var.grd")

### S2 ### ----------------------------------------------------------------
S2_1_93_ezg <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg_var.grd")
S2_base_2_00 <- stack("Pre_Processing/rasters_stacked/S2_2_00_var.grd")
S2_3_20 <- stack("Pre_Processing/rasters_stacked/S2_3_20_var.grd")
S2_6_50 <- stack("Pre_Processing/rasters_stacked/S2_6_50_var.grd")
S2_8_50 <- stack("Pre_Processing/rasters_stacked/S2_8_50_var.grd")
S2_10_93 <- stack("Pre_Processing/rasters_stacked/S2_10_93_var.grd")
S2_13_00 <- stack("Pre_Processing/rasters_stacked/S2_13_00_var.grd")
S2_15_00 <- stack("Pre_Processing/rasters_stacked/S2_15_00_var.grd")
S2_peak_18_00 <- stack("Pre_Processing/rasters_stacked/S2_18_00_var.grd")
S2_20_00 <- stack("Pre_Processing/rasters_stacked/S2_20_00_var.grd")

### TH4 ### ---------------------------------------------------------------
TH4_min_11_45 <- stack("Pre_Processing/rasters_stacked/TH4_11_45_var.grd")
TH4_15_00 <- stack("Pre_Processing/rasters_stacked/TH4_15_00_var.grd")
TH4_18_00 <- stack("Pre_Processing/rasters_stacked/TH4_18_00_var.grd")
TH4_19_96 <- stack("Pre_Processing/rasters_stacked/TH4_19_96_var.grd")
TH4_22_50 <- stack("Pre_Processing/rasters_stacked/TH4_22_50_var.grd")
TH4_25_00 <- stack("Pre_Processing/rasters_stacked/TH4_25_00_var.grd")
TH4_27_00 <- stack("Pre_Processing/rasters_stacked/TH4_27_00_var.grd")
TH4_30_00 <- stack("Pre_Processing/rasters_stacked/TH4_30_00_var.grd")
TH4_max_32_93 <- stack("Pre_Processing/rasters_stacked/TH4_32_93_var.grd")
TH4_35_12_ezg <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg_var.grd")


### VR3 ### ------------------------------------------------------------------
VR3_base_2_90 <- stack("Pre_Processing/rasters_stacked/VR3_2_90_var.grd")
VR3_6_00 <- stack("Pre_Processing/rasters_stacked/VR3_6_00_var.grd")
VR3_9_00 <- stack("Pre_Processing/rasters_stacked/VR3_9_00_var.grd")
VR3_12_00 <- stack("Pre_Processing/rasters_stacked/VR3_12_00_var.grd")
VR3_15_00 <- stack("Pre_Processing/rasters_stacked/VR3_15_00_var.grd")
VR3_18_80 <- stack("Pre_Processing/rasters_stacked/VR3_18_80_var.grd")
VR3_21_51_ezg <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg_var.grd")
VR3_22_00 <- stack("Pre_Processing/rasters_stacked/VR3_22_00_var.grd")
VR3_25_00 <- stack("Pre_Processing/rasters_stacked/VR3_25_00_var.grd")
VR3_28_00 <- stack("Pre_Processing/rasters_stacked/VR3_28_00_var.grd")
VR3_31_00 <- stack("Pre_Processing/rasters_stacked/VR3_31_00_var.grd")
VR3_34_00 <- stack("Pre_Processing/rasters_stacked/VR3_34_00_var.grd")
VR3_37_00 <- stack("Pre_Processing/rasters_stacked/VR3_37_00_var.grd")
VR3_peak_40_10 <- stack("Pre_Processing/rasters_stacked/VR3_40_10_var.grd")
VR3_43_00 <- stack("Pre_Processing/rasters_stacked/VR3_43_00_var.grd")
VR3_46_00 <- stack("Pre_Processing/rasters_stacked/VR3_46_00_var.grd")
VR3_48_00 <- stack("Pre_Processing/rasters_stacked/VR3_48_00_var.grd")
VR3_50_00 <- stack("Pre_Processing/rasters_stacked/VR3_50_00_var.grd")
VR3_52_90 <- stack("Pre_Processing/rasters_stacked/VR3_52_90_var.grd")
```


## Predict Models to Maps
### GL1
```{r}
# predict ML model to rasters with velocity and wd 
# GL1 ------------------------------------------------------------------
GL1_k_2_56_ezg <- raster::predict(GL1_2_56_ezg, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_k_min_3_28 <- raster::predict(GL1_min_3_28, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_k_6_00 <- raster::predict(GL1_6_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_k_9_00 <- raster::predict(GL1_9_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_k_12_68 <- raster::predict(GL1_12_68, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_k_16_00 <- raster::predict(GL1_16_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_k_19_00 <- raster::predict(GL1_19_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_k_22_00 <- raster::predict(GL1_22_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_k_25_00 <- raster::predict(GL1_25_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_k_28_00 <- raster::predict(GL1_28_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_k_max_31_76 <- raster::predict(GL1_max_31_76, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL1_k_pers_2_56_ezg <- mask(GL1_k_2_56_ezg, GL1_k_min_3_28)
GL1_k_pers_3_28 <- mask(GL1_k_min_3_28, GL1_k_min_3_28)
GL1_k_pers_6_00 <- mask(GL1_k_6_00, GL1_k_min_3_28)
GL1_k_pers_9_00 <- mask(GL1_k_9_00, GL1_k_min_3_28)
GL1_k_pers_12_68 <- mask(GL1_k_12_68, GL1_k_min_3_28)
GL1_k_pers_16_00 <- mask(GL1_k_16_00, GL1_k_min_3_28)
GL1_k_pers_19_00 <- mask(GL1_k_19_00, GL1_k_min_3_28)
GL1_k_pers_22_00 <- mask(GL1_k_22_00, GL1_k_min_3_28)
GL1_k_pers_25_00 <- mask(GL1_k_25_00, GL1_k_min_3_28)
GL1_k_pers_28_00 <- mask(GL1_k_28_00, GL1_k_min_3_28)
GL1_k_pers_31_76 <- mask(GL1_k_max_31_76, GL1_k_min_3_28)
GL1_k_pers_var <- mask(GL1_k_max_31_76, GL1_k_min_3_28)

# GL1 write scenario rasters ---------------------
writeRaster(GL1_k_min_3_28, "ML_model/scenarios/GL1_k_min_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(GL1_k_max_31_76, "ML_model/scenarios/GL1_k_max_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(GL1_k_pers_var, "ML_model/scenarios/GL1_k_pers_var_rf.tif", format = "GTiff", overwrite = TRUE)
```

### GL2
```{r}
# GL2 - predictor: velocity ---------------------------------------------------
GL2_k_2_37_ezg <- raster::predict(GL2_2_37_ezg, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_k_min_3_21 <- raster::predict(GL2_min_3_21, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_k_6_00 <- raster::predict(GL2_6_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_k_9_00 <- raster::predict(GL2_9_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_k_11_00 <- raster::predict(GL2_11_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_k_12_52 <- raster::predict(GL2_12_52, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_k_16_00 <- raster::predict(GL2_16_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_k_19_00 <- raster::predict(GL2_19_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_k_22_00 <- raster::predict(GL2_22_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_k_25_00 <- raster::predict(GL2_25_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_k_28_00 <- raster::predict(GL2_28_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_k_max_31_53 <- raster::predict(GL2_max_31_53, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

GL2_k_pers_2_37_ezg <- mask(GL2_k_2_37_ezg, GL2_k_min_3_21)
GL2_k_pers_3_21 <- mask(GL2_k_min_3_21, GL2_k_min_3_21)
GL2_k_pers_6_00 <- mask(GL2_k_6_00, GL2_k_min_3_21)
GL2_k_pers_9_00 <- mask(GL2_k_9_00, GL2_k_min_3_21)
GL2_k_pers_11_00 <- mask(GL2_k_11_00, GL2_k_min_3_21)
GL2_k_pers_12_52 <- mask(GL2_k_12_52, GL2_k_min_3_21)
GL2_k_pers_16_00 <- mask(GL2_k_16_00, GL2_k_min_3_21)
GL2_k_pers_19_00 <- mask(GL2_k_19_00, GL2_k_min_3_21)
GL2_k_pers_22_00 <- mask(GL2_k_22_00, GL2_k_min_3_21)
GL2_k_pers_25_00 <- mask(GL2_k_25_00, GL2_k_min_3_21)
GL2_k_pers_28_00 <- mask(GL2_k_28_00, GL2_k_min_3_21)
GL2_k_pers_31_53 <- mask(GL2_k_max_31_53, GL2_k_min_3_21)
GL2_k_pers_var <- mask(GL2_k_max_31_53, GL2_k_min_3_21)

# GL2 write rasters ---------------------
writeRaster(GL2_k_min_3_21, "ML_model/scenarios/GL2_k_min_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(GL2_k_max_31_53, "ML_model/scenarios/GL2_k_max_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(GL2_k_pers_var, "ML_model/scenarios/GL2_k_pers_var_rf.tif", format = "GTiff", overwrite = TRUE)
```

### L2
```{r}
# L2 - predictor: velocity ----------------------------------------------------
L2_k_base_2_40 <- raster::predict(L2_base_2_40, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_k_3_90 <- raster::predict(L2_3_90, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_k_7_00 <- raster::predict(L2_7_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_k_peak_9_24 <- raster::predict(L2_peak_9_24, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_k_9_54_ezg <- raster::predict(L2_9_54_ezg, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_k_13_30 <- raster::predict(L2_13_30, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_k_16_50 <- raster::predict(L2_16_50, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_k_18_90 <- raster::predict(L2_18_90, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

L2_k_pers_2_40 <- mask(L2_k_base_2_40, L2_k_base_2_40)
L2_k_pers_3_90 <- mask(L2_k_3_90, L2_k_base_2_40)
L2_k_pers_7_00 <- mask(L2_k_7_00, L2_k_base_2_40)
L2_k_pers_9_24 <- mask(L2_k_peak_9_24, L2_k_base_2_40)
L2_k_pers_9_54_ezg <- mask(L2_k_9_54_ezg, L2_k_base_2_40)
L2_k_pers_13_30 <- mask(L2_k_13_30, L2_k_base_2_40)
L2_k_pers_16_50 <- mask(L2_k_16_50, L2_k_base_2_40)
L2_k_pers_18_90 <- mask(L2_k_18_90, L2_k_base_2_40)
L2_k_pers_var <- mask(L2_k_peak_9_24, L2_k_base_2_40)

# L2 write rasters ---------------------
writeRaster(L2_k_base_2_40, "ML_model/scenarios/L2_k_base_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(L2_k_peak_9_24, "ML_model/scenarios/L2_k_peak_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(L2_k_pers_var, "ML_model/scenarios/L2_k_pers_var_rf.tif", format = "GTiff", overwrite = TRUE)
```

### M1 
```{r}
# M1  - predictor: velocity ---------------------------------------------------
M1_k_base_0_47 <- raster::predict(M1_base_0_47, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_k_0_60 <- raster::predict(M1_0_60, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_k_1_50_ezg <- raster::predict(M1_1_50_ezg, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_k_4_00 <- raster::predict(M1_4_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_k_6_00 <- raster::predict(M1_6_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_k_8_00 <- raster::predict(M1_8_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_k_10_00 <- raster::predict(M1_10_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_k_12_00 <- raster::predict(M1_12_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_k_14_00 <- raster::predict(M1_14_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_k_16_00 <- raster::predict(M1_16_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_k_peak_18_84 <- raster::predict(M1_peak_18_84, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_k_22_84 <- raster::predict(M1_22_84, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

M1_k_pers_0_47 <- mask(M1_k_base_0_47, M1_k_base_0_47)
M1_k_pers_0_60 <- mask(M1_k_0_60, M1_k_base_0_47)
M1_k_pers_1_50_ezg <- mask(M1_k_1_50_ezg, M1_k_base_0_47)
M1_k_pers_4_00 <- mask(M1_k_4_00, M1_k_base_0_47)
M1_k_pers_6_00 <- mask(M1_k_6_00, M1_k_base_0_47)
M1_k_pers_8_00 <- mask(M1_k_8_00, M1_k_base_0_47)
M1_k_pers_10_00 <- mask(M1_k_10_00, M1_k_base_0_47)
M1_k_pers_12_00 <- mask(M1_k_12_00, M1_k_base_0_47)
M1_k_pers_14_00 <- mask(M1_k_14_00, M1_k_base_0_47)
M1_k_pers_16_00 <- mask(M1_k_16_00, M1_k_base_0_47)
M1_k_pers_18_84 <- mask(M1_k_peak_18_84, M1_k_base_0_47)
M1_k_pers_22_84 <- mask(M1_k_22_84, M1_k_base_0_47)
M1_k_pers_var <- mask(M1_k_peak_18_84, M1_k_base_0_47)

# M1 write rasters ---------------------
writeRaster(M1_k_base_0_47, "ML_model/scenarios/M1_k_base_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(M1_k_peak_18_84, "ML_model/scenarios/M1_k_peak_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(M1_k_pers_var, "ML_model/scenarios/M1_k_pers_var_rf.tif", format = "GTiff", overwrite = TRUE)
```

### S1
```{r}
# S1  - predictor: velocity ---------------------------------------------------
S1_k_1_94_ezg <- raster::predict(S1_1_94_ezg, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_k_base_2_00 <- raster::predict(S1_base_2_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_k_3_70 <- raster::predict(S1_3_70, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_k_6_50 <- raster::predict(S1_6_50, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_k_8_50 <- raster::predict(S1_8_50, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_k_10_68 <- raster::predict(S1_10_68, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_k_13_00 <- raster::predict(S1_13_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_k_15_00 <- raster::predict(S1_15_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_k_peak_18_00 <- raster::predict(S1_peak_18_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_k_20_00 <- raster::predict(S1_20_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S1_k_pers_1_94_ezg <- mask(S1_k_1_94_ezg, S1_k_base_2_00)
S1_k_pers_2_00 <- mask(S1_k_base_2_00, S1_k_base_2_00)
S1_k_pers_3_70 <- mask(S1_k_3_70, S1_k_base_2_00)
S1_k_pers_6_50 <- mask(S1_k_6_50, S1_k_base_2_00)
S1_k_pers_8_50 <- mask(S1_k_8_50, S1_k_base_2_00)
S1_k_pers_10_68 <- mask(S1_k_10_68, S1_k_base_2_00)
S1_k_pers_13_00 <- mask(S1_k_13_00, S1_k_base_2_00)
S1_k_pers_15_00 <- mask(S1_k_15_00, S1_k_base_2_00)
S1_k_pers_18_00 <- mask(S1_k_peak_18_00, S1_k_base_2_00)
S1_k_pers_20_00 <- mask(S1_k_20_00, S1_k_base_2_00)
S1_k_pers_var <- mask(S1_k_peak_18_00, S1_k_base_2_00)

# S1 write rasters ---------------------
writeRaster(S1_k_base_2_00, "ML_model/scenarios/S1_k_base_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S1_k_peak_18_00, "ML_model/scenarios/S1_k_peak_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S1_k_pers_var, "ML_model/scenarios/S1_k_pers_var_rf.tif", format = "GTiff", overwrite = TRUE)
```

### S2
```{r}
# S2  - predictor: velocity ---------------------------------------------------
S2_k_1_93_ezg <- raster::predict(S2_1_93_ezg, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_k_base_2_00 <- raster::predict(S2_base_2_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_k_3_20 <- raster::predict(S2_3_20, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_k_6_50 <- raster::predict(S2_6_50, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_k_8_50 <- raster::predict(S2_8_50, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_k_10_93 <- raster::predict(S2_10_93, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_k_13_00 <- raster::predict(S2_13_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_k_15_00 <- raster::predict(S2_15_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_k_peak_18_00 <- raster::predict(S2_peak_18_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_k_20_00 <- raster::predict(S2_20_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

S2_k_pers_1_93_ezg <- mask(S2_k_1_93_ezg, S2_k_base_2_00)
S2_k_pers_2_00 <- mask(S2_k_base_2_00, S2_k_base_2_00)
S2_k_pers_3_20 <- mask(S2_k_3_20, S2_k_base_2_00)
S2_k_pers_6_50 <- mask(S2_k_6_50, S2_k_base_2_00)
S2_k_pers_8_50 <- mask(S2_k_8_50, S2_k_base_2_00)
S2_k_pers_10_93 <- mask(S2_k_10_93, S2_k_base_2_00)
S2_k_pers_13_00 <- mask(S2_k_13_00, S2_k_base_2_00)
S2_k_pers_15_00 <- mask(S2_k_15_00, S2_k_base_2_00)
S2_k_pers_18_00 <- mask(S2_k_peak_18_00, S2_k_base_2_00)
S2_k_pers_20_00 <- mask(S2_k_20_00, S2_k_base_2_00)
S2_k_pers_var <- mask(S2_k_peak_18_00, S2_k_base_2_00)

# S2 write rasters ---------------------
writeRaster(S2_k_base_2_00, "ML_model/scenarios/S2_k_base_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S2_k_peak_18_00, "ML_model/scenarios/S2_k_peak_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(S2_k_pers_var, "ML_model/scenarios/S2_k_pers_var_rf.tif", format = "GTiff", overwrite = TRUE)
```

### TH4
```{r}
# TH4  - predictor: velocity --------------------------------------------------
TH4_k_min_11_45 <- raster::predict(TH4_min_11_45, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_k_15_00 <- raster::predict(TH4_15_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_k_18_00 <- raster::predict(TH4_18_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_k_19_96 <- raster::predict(TH4_19_96, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_k_22_50 <- raster::predict(TH4_22_50, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_k_25_00 <- raster::predict(TH4_25_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_k_27_00 <- raster::predict(TH4_27_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_k_30_00 <- raster::predict(TH4_30_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_k_max_32_93 <- raster::predict(TH4_max_32_93, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_k_35_12_ezg <- raster::predict(TH4_35_12_ezg, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

TH4_k_pers_11_45 <- mask(TH4_k_min_11_45, TH4_k_min_11_45)
TH4_k_pers_15_00 <- mask(TH4_k_15_00, TH4_k_min_11_45)
TH4_k_pers_18_00 <- mask(TH4_k_18_00, TH4_k_min_11_45)
TH4_k_pers_19_96 <- mask(TH4_k_19_96, TH4_k_min_11_45)
TH4_k_pers_22_50 <- mask(TH4_k_22_50, TH4_k_min_11_45)
TH4_k_pers_25_00 <- mask(TH4_k_25_00, TH4_k_min_11_45)
TH4_k_pers_27_00 <- mask(TH4_k_27_00, TH4_k_min_11_45)
TH4_k_pers_30_00 <- mask(TH4_k_30_00, TH4_k_min_11_45)
TH4_k_pers_32_93 <- mask(TH4_k_max_32_93, TH4_k_min_11_45)
TH4_k_pers_35_12_ezg <- mask(TH4_k_35_12_ezg, TH4_k_min_11_45)
TH4_k_pers_var <- mask(TH4_k_max_32_93, TH4_k_min_11_45)

# TH4 write rasters ---------------------
writeRaster(TH4_k_min_11_45, "ML_model/scenarios/TH4_k_min_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(TH4_k_max_32_93, "ML_model/scenarios/TH4_k_max_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(TH4_k_pers_var, "ML_model/scenarios/TH4_k_pers_var_rf.tif", format = "GTiff", overwrite = TRUE)
```

### VR3
```{r}
# VR3  - predictor: velocity --------------------------------------------------
VR3_k_base_2_90 <- raster::predict(VR3_base_2_90, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_6_00 <- raster::predict(VR3_6_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_9_00 <- raster::predict(VR3_9_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_12_00 <- raster::predict(VR3_12_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_15_00 <- raster::predict(VR3_15_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_18_80 <- raster::predict(VR3_18_80, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_21_51_ezg <- raster::predict(VR3_21_51_ezg, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_22_00 <- raster::predict(VR3_22_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_25_00 <- raster::predict(VR3_25_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_28_00 <- raster::predict(VR3_28_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_31_00 <- raster::predict(VR3_31_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_34_00 <- raster::predict(VR3_34_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_37_00 <- raster::predict(VR3_37_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_peak_40_10 <- raster::predict(VR3_peak_40_10, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_43_00 <- raster::predict(VR3_43_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_46_00 <- raster::predict(VR3_46_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_48_00 <- raster::predict(VR3_48_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_50_00 <- raster::predict(VR3_50_00, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_52_90 <- raster::predict(VR3_52_90, rf_model_var_k_c, type='response', progress='window', fun = function(model, ...) predict(model, ...)$predictions)

VR3_k_pers_2_90 <- mask(VR3_k_base_2_90, VR3_k_base_2_90)
VR3_k_pers_6_00 <- mask(VR3_k_6_00, VR3_k_base_2_90)
VR3_k_pers_9_00 <- mask(VR3_k_9_00, VR3_k_base_2_90)
VR3_k_pers_12_00 <- mask(VR3_k_12_00, VR3_k_base_2_90)
VR3_k_pers_15_00 <- mask(VR3_k_15_00, VR3_k_base_2_90)
VR3_k_pers_18_80 <- mask(VR3_k_18_80, VR3_k_base_2_90)
VR3_k_pers_21_51_ezg <- mask(VR3_k_21_51_ezg, VR3_k_base_2_90)
VR3_k_pers_22_00 <- mask(VR3_k_22_00, VR3_k_base_2_90)
VR3_k_pers_25_00 <- mask(VR3_k_25_00, VR3_k_base_2_90)
VR3_k_pers_28_00 <- mask(VR3_k_28_00, VR3_k_base_2_90)
VR3_k_pers_31_00 <- mask(VR3_k_31_00, VR3_k_base_2_90)
VR3_k_pers_34_00 <- mask(VR3_k_34_00, VR3_k_base_2_90)
VR3_k_pers_37_00 <- mask(VR3_k_37_00, VR3_k_base_2_90)
VR3_k_pers_40_10 <- mask(VR3_k_peak_40_10, VR3_k_base_2_90)
VR3_k_pers_43_00 <- mask(VR3_k_43_00, VR3_k_base_2_90)
VR3_k_pers_46_00 <- mask(VR3_k_46_00, VR3_k_base_2_90)
VR3_k_pers_48_00 <- mask(VR3_k_48_00, VR3_k_base_2_90)
VR3_k_pers_50_00 <- mask(VR3_k_50_00, VR3_k_base_2_90)
VR3_k_pers_52_90 <- mask(VR3_k_52_90, VR3_k_base_2_90)
VR3_k_pers_var <- mask(VR3_k_peak_40_10, VR3_k_base_2_90)

# VR3 write rasters ---------------------
writeRaster(VR3_k_base_2_90, "ML_model/scenarios/VR3_k_base_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(VR3_k_peak_40_10, "ML_model/scenarios/VR3_k_peak_var_rf.tif", format = "GTiff", overwrite = TRUE)
writeRaster(VR3_k_pers_var, "ML_model/scenarios/VR3_k_pers_var_rf.tif", format = "GTiff", overwrite = TRUE)
```

## WUA
```{r}
# load self-written functions 
source("mth_functions.R")

# calculate WUA -------------------------------------------------
# GL1 -----------------------------------------------------------
wua_GL1_2_56_ezg <- wua(GL1_k_2_56_ezg)
wua_GL1_min_3_28 <- wua(GL1_k_min_3_28)
wua_GL1_6_00 <- wua(GL1_k_6_00)
wua_GL1_9_00 <- wua(GL1_k_9_00)
wua_GL1_12_68 <- wua(GL1_k_12_68)
wua_GL1_16_00 <- wua(GL1_k_16_00)
wua_GL1_19_00 <- wua(GL1_k_19_00)
wua_GL1_22_00 <- wua(GL1_k_22_00)
wua_GL1_25_00 <- wua(GL1_k_25_00)
wua_GL1_28_00 <- wua(GL1_k_28_00)
wua_GL1_max_31_76 <- wua(GL1_k_max_31_76)

wua_GL1_2_56_ezg_pers <- wua(GL1_k_pers_2_56_ezg)
wua_GL1_min_3_28_pers <- wua(GL1_k_pers_3_28)
wua_GL1_6_00_pers <- wua(GL1_k_pers_6_00)
wua_GL1_9_00_pers <- wua(GL1_k_pers_9_00)
wua_GL1_12_68_pers <- wua(GL1_k_pers_12_68)
wua_GL1_16_00_pers <- wua(GL1_k_pers_16_00)
wua_GL1_19_00_pers <- wua(GL1_k_pers_19_00)
wua_GL1_22_00_pers <- wua(GL1_k_pers_22_00)
wua_GL1_25_00_pers <- wua(GL1_k_pers_25_00)
wua_GL1_28_00_pers <- wua(GL1_k_pers_28_00)
wua_GL1_max_31_76_pers <- wua(GL1_k_pers_31_76)

# GL2 -----------------------------------------------------------
wua_GL2_2_37_ezg <- wua(GL2_k_2_37_ezg)
wua_GL2_min_3_21 <- wua(GL2_k_min_3_21)
wua_GL2_6_00 <- wua(GL2_k_6_00)
wua_GL2_9_00 <- wua(GL2_k_9_00)
wua_GL2_11_00 <- wua(GL2_k_11_00)
wua_GL2_12_52 <- wua(GL2_k_12_52)
wua_GL2_16_00 <- wua(GL2_k_16_00)
wua_GL2_19_00 <- wua(GL2_k_19_00)
wua_GL2_22_00 <- wua(GL2_k_22_00)
wua_GL2_25_00 <- wua(GL2_k_25_00)
wua_GL2_28_00 <- wua(GL2_k_28_00)
wua_GL2_max_31_53 <- wua(GL2_k_max_31_53)

wua_GL2_2_37_ezg_pers <- wua(GL2_k_pers_2_37_ezg)
wua_GL2_min_3_21_pers <- wua(GL2_k_pers_3_21)
wua_GL2_6_00_pers <- wua(GL2_k_pers_6_00)
wua_GL2_9_00_pers <- wua(GL2_k_pers_9_00)
wua_GL2_11_00_pers <- wua(GL2_k_pers_11_00)
wua_GL2_12_52_pers <- wua(GL2_k_pers_12_52)
wua_GL2_16_00_pers <- wua(GL2_k_pers_16_00)
wua_GL2_19_00_pers <- wua(GL2_k_pers_19_00)
wua_GL2_22_00_pers <- wua(GL2_k_pers_22_00)
wua_GL2_25_00_pers <- wua(GL2_k_pers_25_00)
wua_GL2_28_00_pers <- wua(GL2_k_pers_28_00)
wua_GL2_max_31_53_pers <- wua(GL2_k_pers_31_53)

# L2 -----------------------------------------------------------
wua_L2_base_2_40 <- wua(L2_k_base_2_40)
wua_L2_3_90 <- wua(L2_k_3_90)
wua_L2_7_00 <- wua(L2_k_7_00)
wua_L2_peak_9_24 <- wua(L2_k_peak_9_24)
wua_L2_9_54_ezg <- wua(L2_k_9_54_ezg)
wua_L2_13_30 <- wua(L2_k_13_30)
wua_L2_16_50 <- wua(L2_k_16_50)
wua_L2_18_90 <- wua(L2_k_18_90)

wua_L2_base_2_40_pers <- wua(L2_k_pers_2_40)
wua_L2_3_90_pers <- wua(L2_k_pers_3_90)
wua_L2_7_00_pers <- wua(L2_k_pers_7_00)
wua_L2_peak_9_24_pers <- wua(L2_k_pers_9_24)
wua_L2_9_54_ezg_pers <- wua(L2_k_pers_9_54_ezg)
wua_L2_13_30_pers <- wua(L2_k_pers_13_30)
wua_L2_16_50_pers <- wua(L2_k_pers_16_50)
wua_L2_18_90_pers <- wua(L2_k_pers_18_90)

# M1 -----------------------------------------------------------
wua_M1_base_0_47 <- wua(M1_k_base_0_47)
wua_M1_0_60 <- wua(M1_k_0_60)
wua_M1_1_50_ezg <- wua(M1_k_1_50_ezg)
wua_M1_4_00 <- wua(M1_k_4_00)
wua_M1_6_00 <- wua(M1_k_6_00)
wua_M1_8_00 <- wua(M1_k_8_00)
wua_M1_10_00 <- wua(M1_k_10_00)
wua_M1_12_00 <- wua(M1_k_12_00)
wua_M1_14_00 <- wua(M1_k_14_00)
wua_M1_16_00 <- wua(M1_k_16_00)
wua_M1_peak_18_84 <- wua(M1_k_peak_18_84)
wua_M1_22_84 <- wua(M1_k_22_84)

wua_M1_base_0_47_pers <- wua(M1_k_pers_0_47)
wua_M1_0_60_pers <- wua(M1_k_pers_0_60)
wua_M1_1_50_ezg_pers <- wua(M1_k_pers_1_50_ezg)
wua_M1_4_00_pers <- wua(M1_k_pers_4_00)
wua_M1_6_00_pers <- wua(M1_k_pers_6_00)
wua_M1_8_00_pers <- wua(M1_k_pers_8_00)
wua_M1_10_00_pers <- wua(M1_k_pers_10_00)
wua_M1_12_00_pers <- wua(M1_k_pers_12_00)
wua_M1_14_00_pers <- wua(M1_k_pers_14_00)
wua_M1_16_00_pers <- wua(M1_k_pers_16_00)
wua_M1_peak_18_84_pers <- wua(M1_k_pers_18_84)
wua_M1_22_84_pers <- wua(M1_k_pers_22_84)

# S1 -----------------------------------------------------------
wua_S1_1_94_ezg <- wua(S1_k_1_94_ezg)
wua_S1_base_2_00 <- wua(S1_k_base_2_00)
wua_S1_3_70 <- wua(S1_k_3_70)
wua_S1_6_50 <- wua(S1_k_6_50)
wua_S1_8_50 <- wua(S1_k_8_50)
wua_S1_10_68 <- wua(S1_k_10_68)
wua_S1_13_00 <- wua(S1_k_13_00)
wua_S1_15_00 <- wua(S1_k_15_00)
wua_S1_peak_18_00 <- wua(S1_k_peak_18_00)
wua_S1_20_00 <- wua(S1_k_20_00)

wua_S1_1_94_ezg_pers <- wua(S1_k_pers_1_94_ezg)
wua_S1_base_2_00_pers <- wua(S1_k_pers_2_00)
wua_S1_3_70_pers <- wua(S1_k_pers_3_70)
wua_S1_6_50_pers <- wua(S1_k_pers_6_50)
wua_S1_8_50_pers <- wua(S1_k_pers_8_50)
wua_S1_10_68_pers <- wua(S1_k_pers_10_68)
wua_S1_13_00_pers <- wua(S1_k_pers_13_00)
wua_S1_15_00_pers <- wua(S1_k_pers_15_00)
wua_S1_peak_18_00_pers <- wua(S1_k_pers_18_00)
wua_S1_20_00_pers <- wua(S1_k_pers_20_00)

# S2 -----------------------------------------------------------
wua_S2_1_93_ezg <- wua(S2_k_1_93_ezg)
wua_S2_base_2_00 <- wua(S2_k_base_2_00)
wua_S2_3_20 <- wua(S2_k_3_20)
wua_S2_6_50 <- wua(S2_k_6_50)
wua_S2_8_50 <- wua(S2_k_8_50)
wua_S2_10_93 <- wua(S2_k_10_93)
wua_S2_13_00 <- wua(S2_k_13_00)
wua_S2_15_00 <- wua(S2_k_15_00)
wua_S2_peak_18_00 <- wua(S2_k_peak_18_00)
wua_S2_20_00 <- wua(S2_k_20_00)

wua_S2_1_93_ezg_pers <- wua(S2_k_pers_1_93_ezg)
wua_S2_base_2_00_pers <- wua(S2_k_pers_2_00)
wua_S2_3_20_pers <- wua(S2_k_pers_3_20)
wua_S2_6_50_pers <- wua(S2_k_pers_6_50)
wua_S2_8_50_pers <- wua(S2_k_pers_8_50)
wua_S2_10_93_pers <- wua(S2_k_pers_10_93)
wua_S2_13_00_pers <- wua(S2_k_pers_13_00)
wua_S2_15_00_pers <- wua(S2_k_pers_15_00)
wua_S2_peak_18_00_pers <- wua(S2_k_pers_18_00)
wua_S2_20_00_pers <- wua(S2_k_pers_20_00)

# TH4 ----------------------------------------------------------
wua_TH4_min_11_45 <- wua(TH4_k_min_11_45)
wua_TH4_15_00 <- wua(TH4_k_15_00)
wua_TH4_18_00 <- wua(TH4_k_18_00)
wua_TH4_19_96 <- wua(TH4_k_19_96)
wua_TH4_22_50 <- wua(TH4_k_22_50)
wua_TH4_25_00 <- wua(TH4_k_25_00)
wua_TH4_27_00 <- wua(TH4_k_27_00)
wua_TH4_30_00 <- wua(TH4_k_30_00)
wua_TH4_max_32_93 <- wua(TH4_k_max_32_93)
wua_TH4_35_12_ezg <- wua(TH4_k_35_12_ezg)

wua_TH4_min_11_45_pers <- wua(TH4_k_pers_11_45)
wua_TH4_15_00_pers <- wua(TH4_k_pers_15_00)
wua_TH4_18_00_pers <- wua(TH4_k_pers_18_00)
wua_TH4_19_96_pers <- wua(TH4_k_pers_19_96)
wua_TH4_22_50_pers <- wua(TH4_k_pers_22_50)
wua_TH4_25_00_pers <- wua(TH4_k_pers_25_00)
wua_TH4_27_00_pers <- wua(TH4_k_pers_27_00)
wua_TH4_30_00_pers <- wua(TH4_k_pers_30_00)
wua_TH4_max_32_93_pers <- wua(TH4_k_pers_32_93)
wua_TH4_35_12_ezg_pers <- wua(TH4_k_pers_35_12_ezg)


# VR3 ----------------------------------------------------------
wua_VR3_base_2_90 <- wua(VR3_k_base_2_90)
wua_VR3_6_00 <- wua(VR3_k_6_00)
wua_VR3_9_00 <- wua(VR3_k_9_00)
wua_VR3_12_00 <- wua(VR3_k_12_00)
wua_VR3_15_00 <- wua(VR3_k_15_00)
wua_VR3_18_80 <- wua(VR3_k_18_80)
wua_VR3_21_51_ezg <- wua(VR3_k_21_51_ezg)
wua_VR3_22_00 <- wua(VR3_k_22_00)
wua_VR3_25_00 <- wua(VR3_k_25_00)
wua_VR3_28_00 <- wua(VR3_k_28_00)
wua_VR3_31_00 <- wua(VR3_k_31_00)
wua_VR3_34_00 <- wua(VR3_k_34_00)
wua_VR3_37_00 <- wua(VR3_k_37_00)
wua_VR3_peak_40_10 <- wua(VR3_k_peak_40_10)
wua_VR3_43_00 <- wua(VR3_k_43_00)
wua_VR3_46_00 <- wua(VR3_k_46_00)
wua_VR3_48_00 <- wua(VR3_k_48_00)
wua_VR3_50_00 <- wua(VR3_k_50_00)
wua_VR3_52_90 <- wua(VR3_k_52_90)

wua_VR3_base_2_90_pers <- wua(VR3_k_pers_2_90)
wua_VR3_6_00_pers <- wua(VR3_k_pers_6_00)
wua_VR3_9_00_pers <- wua(VR3_k_pers_9_00)
wua_VR3_12_00_pers <- wua(VR3_k_pers_12_00)
wua_VR3_15_00_pers <- wua(VR3_k_pers_15_00)
wua_VR3_18_80_pers <- wua(VR3_k_pers_18_80)
wua_VR3_21_51_ezg_pers <- wua(VR3_k_pers_21_51_ezg)
wua_VR3_22_00_pers <- wua(VR3_k_pers_22_00)
wua_VR3_25_00_pers <- wua(VR3_k_pers_25_00)
wua_VR3_28_00_pers <- wua(VR3_k_pers_28_00)
wua_VR3_31_00_pers <- wua(VR3_k_pers_31_00)
wua_VR3_34_00_pers <- wua(VR3_k_pers_34_00)
wua_VR3_37_00_pers <- wua(VR3_k_pers_37_00)
wua_VR3_peak_40_10_pers <- wua(VR3_k_pers_40_10)
wua_VR3_43_00_pers <- wua(VR3_k_pers_43_00)
wua_VR3_46_00_pers <- wua(VR3_k_pers_46_00)
wua_VR3_48_00_pers <- wua(VR3_k_pers_48_00)
wua_VR3_50_00_pers <- wua(VR3_k_pers_50_00)
wua_VR3_52_90_pers <- wua(VR3_k_pers_52_90)
```


## HHS
```{r}
# 1. calculate frequency tables ---------------------------------------
# GL1 -----------------------------------------------------------
freq_GL1_2_56_ezg <- freq_table(GL1_k_2_56_ezg)
freq_GL1_min_3_28 <- freq_table(GL1_k_min_3_28)
freq_GL1_6_00 <- freq_table(GL1_k_6_00)
freq_GL1_9_00 <- freq_table(GL1_k_9_00)
freq_GL1_12_68 <- freq_table(GL1_k_12_68)
freq_GL1_16_00 <- freq_table(GL1_k_16_00)
freq_GL1_19_00 <- freq_table(GL1_k_19_00)
freq_GL1_22_00 <- freq_table(GL1_k_22_00)
freq_GL1_25_00 <- freq_table(GL1_k_25_00)
freq_GL1_28_00 <- freq_table(GL1_k_28_00)
freq_GL1_max_31_76 <- freq_table(GL1_k_max_31_76)

freq_GL1_2_56_ezg_pers <- freq_table(GL1_k_pers_2_56_ezg)
freq_GL1_min_3_28_pers <- freq_table(GL1_k_pers_3_28)
freq_GL1_6_00_pers <- freq_table(GL1_k_pers_6_00)
freq_GL1_9_00_pers <- freq_table(GL1_k_pers_9_00)
freq_GL1_12_68_pers <- freq_table(GL1_k_pers_12_68)
freq_GL1_16_00_pers <- freq_table(GL1_k_pers_16_00)
freq_GL1_19_00_pers <- freq_table(GL1_k_pers_19_00)
freq_GL1_22_00_pers <- freq_table(GL1_k_pers_22_00)
freq_GL1_25_00_pers <- freq_table(GL1_k_pers_25_00)
freq_GL1_28_00_pers <- freq_table(GL1_k_pers_28_00)
freq_GL1_max_31_76_pers <- freq_table(GL1_k_pers_31_76)

# GL2 -----------------------------------------------------------
freq_GL2_2_37_ezg <- freq_table(GL2_k_2_37_ezg)
freq_GL2_min_3_21 <- freq_table(GL2_k_min_3_21)
freq_GL2_6_00 <- freq_table(GL2_k_6_00)
freq_GL2_9_00 <- freq_table(GL2_k_9_00)
freq_GL2_11_00 <- freq_table(GL2_k_11_00)
freq_GL2_12_52 <- freq_table(GL2_k_12_52)
freq_GL2_16_00 <- freq_table(GL2_k_16_00)
freq_GL2_19_00 <- freq_table(GL2_k_19_00)
freq_GL2_22_00 <- freq_table(GL2_k_22_00)
freq_GL2_25_00 <- freq_table(GL2_k_25_00)
freq_GL2_28_00 <- freq_table(GL2_k_28_00)
freq_GL2_max_31_53 <- freq_table(GL2_k_max_31_53)

freq_GL2_2_37_ezg_pers <- freq_table(GL2_k_pers_2_37_ezg)
freq_GL2_min_3_21_pers <- freq_table(GL2_k_pers_3_21)
freq_GL2_6_00_pers <- freq_table(GL2_k_pers_6_00)
freq_GL2_9_00_pers <- freq_table(GL2_k_pers_9_00)
freq_GL2_11_00_pers <- freq_table(GL2_k_pers_11_00)
freq_GL2_12_52_pers <- freq_table(GL2_k_pers_12_52)
freq_GL2_16_00_pers <- freq_table(GL2_k_pers_16_00)
freq_GL2_19_00_pers <- freq_table(GL2_k_pers_19_00)
freq_GL2_22_00_pers <- freq_table(GL2_k_pers_22_00)
freq_GL2_25_00_pers <- freq_table(GL2_k_pers_25_00)
freq_GL2_28_00_pers <- freq_table(GL2_k_pers_28_00)
freq_GL2_max_31_53_pers <- freq_table(GL2_k_pers_31_53)

# L2 -----------------------------------------------------------
freq_L2_base_2_40 <- freq_table(L2_k_base_2_40)
freq_L2_3_90 <- freq_table(L2_k_3_90)
freq_L2_7_00 <- freq_table(L2_k_7_00)
freq_L2_peak_9_24 <- freq_table(L2_k_peak_9_24)
freq_L2_9_54_ezg <- freq_table(L2_k_9_54_ezg)
freq_L2_13_30 <- freq_table(L2_k_13_30)
freq_L2_16_50 <- freq_table(L2_k_16_50)
freq_L2_18_90 <- freq_table(L2_k_18_90)

freq_L2_base_2_40_pers <- freq_table(L2_k_pers_2_40)
freq_L2_3_90_pers <- freq_table(L2_k_pers_3_90)
freq_L2_7_00_pers <- freq_table(L2_k_pers_7_00)
freq_L2_peak_9_24_pers <- freq_table(L2_k_pers_9_24)
freq_L2_9_54_ezg_pers <- freq_table(L2_k_pers_9_54_ezg)
freq_L2_13_30_pers <- freq_table(L2_k_pers_13_30)
freq_L2_16_50_pers <- freq_table(L2_k_pers_16_50)
freq_L2_18_90_pers <- freq_table(L2_k_pers_18_90)

# M1 -----------------------------------------------------------
freq_M1_base_0_47 <- freq_table(M1_k_base_0_47)
freq_M1_0_60 <- freq_table(M1_k_0_60)
freq_M1_1_50_ezg <- freq_table(M1_k_1_50_ezg)
freq_M1_4_00 <- freq_table(M1_k_4_00)
freq_M1_6_00 <- freq_table(M1_k_6_00)
freq_M1_8_00 <- freq_table(M1_k_8_00)
freq_M1_10_00 <- freq_table(M1_k_10_00)
freq_M1_12_00 <- freq_table(M1_k_12_00)
freq_M1_14_00 <- freq_table(M1_k_14_00)
freq_M1_16_00 <- freq_table(M1_k_16_00)
freq_M1_peak_18_84 <- freq_table(M1_k_peak_18_84)
freq_M1_22_84 <- freq_table(M1_k_22_84)

freq_M1_base_0_47_pers <- freq_table(M1_k_pers_0_47)
freq_M1_0_60_pers <- freq_table(M1_k_pers_0_60)
freq_M1_1_50_ezg_pers <- freq_table(M1_k_pers_1_50_ezg)
freq_M1_4_00_pers <- freq_table(M1_k_pers_4_00)
freq_M1_6_00_pers <- freq_table(M1_k_pers_6_00)
freq_M1_8_00_pers <- freq_table(M1_k_pers_8_00)
freq_M1_10_00_pers <- freq_table(M1_k_pers_10_00)
freq_M1_12_00_pers <- freq_table(M1_k_pers_12_00)
freq_M1_14_00_pers <- freq_table(M1_k_pers_14_00)
freq_M1_16_00_pers <- freq_table(M1_k_pers_16_00)
freq_M1_peak_18_84_pers <- freq_table(M1_k_pers_18_84)
freq_M1_22_84_pers <- freq_table(M1_k_pers_22_84)

# S1 -----------------------------------------------------------
freq_S1_1_94_ezg <- freq_table(S1_k_1_94_ezg)
freq_S1_base_2_00 <- freq_table(S1_k_base_2_00)
freq_S1_3_70 <- freq_table(S1_k_3_70)
freq_S1_6_50 <- freq_table(S1_k_6_50)
freq_S1_8_50 <- freq_table(S1_k_8_50)
freq_S1_10_68 <- freq_table(S1_k_10_68)
freq_S1_13_00 <- freq_table(S1_k_13_00)
freq_S1_15_00 <- freq_table(S1_k_15_00)
freq_S1_peak_18_00 <- freq_table(S1_k_peak_18_00)
freq_S1_20_00 <- freq_table(S1_k_20_00)

freq_S1_1_94_ezg_pers <- freq_table(S1_k_pers_1_94_ezg)
freq_S1_base_2_00_pers <- freq_table(S1_k_pers_2_00)
freq_S1_3_70_pers <- freq_table(S1_k_pers_3_70)
freq_S1_6_50_pers <- freq_table(S1_k_pers_6_50)
freq_S1_8_50_pers <- freq_table(S1_k_pers_8_50)
freq_S1_10_68_pers <- freq_table(S1_k_pers_10_68)
freq_S1_13_00_pers <- freq_table(S1_k_pers_13_00)
freq_S1_15_00_pers <- freq_table(S1_k_pers_15_00)
freq_S1_peak_18_00_pers <- freq_table(S1_k_pers_18_00)
freq_S1_20_00_pers <- freq_table(S1_k_pers_20_00)

# S2 -----------------------------------------------------------
freq_S2_1_93_ezg <- freq_table(S2_k_1_93_ezg)
freq_S2_base_2_00 <- freq_table(S2_k_base_2_00)
freq_S2_3_20 <- freq_table(S2_k_3_20)
freq_S2_6_50 <- freq_table(S2_k_6_50)
freq_S2_8_50 <- freq_table(S2_k_8_50)
freq_S2_10_93 <- freq_table(S2_k_10_93)
freq_S2_13_00 <- freq_table(S2_k_13_00)
freq_S2_15_00 <- freq_table(S2_k_15_00)
freq_S2_peak_18_00 <- freq_table(S2_k_peak_18_00)
freq_S2_20_00 <- freq_table(S2_k_20_00)

freq_S2_1_93_ezg_pers <- freq_table(S2_k_pers_1_93_ezg)
freq_S2_base_2_00_pers <- freq_table(S2_k_pers_2_00)
freq_S2_3_20_pers <- freq_table(S2_k_pers_3_20)
freq_S2_6_50_pers <- freq_table(S2_k_pers_6_50)
freq_S2_8_50_pers <- freq_table(S2_k_pers_8_50)
freq_S2_10_93_pers <- freq_table(S2_k_pers_10_93)
freq_S2_13_00_pers <- freq_table(S2_k_pers_13_00)
freq_S2_15_00_pers <- freq_table(S2_k_pers_15_00)
freq_S2_peak_18_00_pers <- freq_table(S2_k_pers_18_00)
freq_S2_20_00_pers <- freq_table(S2_k_pers_20_00)

# TH4 ----------------------------------------------------------
freq_TH4_min_11_45 <- freq_table(TH4_k_min_11_45)
freq_TH4_15_00 <- freq_table(TH4_k_15_00)
freq_TH4_18_00 <- freq_table(TH4_k_18_00)
freq_TH4_19_96 <- freq_table(TH4_k_19_96)
freq_TH4_22_50 <- freq_table(TH4_k_22_50)
freq_TH4_25_00 <- freq_table(TH4_k_25_00)
freq_TH4_27_00 <- freq_table(TH4_k_27_00)
freq_TH4_30_00 <- freq_table(TH4_k_30_00)
freq_TH4_max_32_93 <- freq_table(TH4_k_max_32_93)
freq_TH4_35_12_ezg <- freq_table(TH4_k_35_12_ezg)

freq_TH4_min_11_45_pers <- freq_table(TH4_k_pers_11_45)
freq_TH4_15_00_pers <- freq_table(TH4_k_pers_15_00)
freq_TH4_18_00_pers <- freq_table(TH4_k_pers_18_00)
freq_TH4_19_96_pers <- freq_table(TH4_k_pers_19_96)
freq_TH4_22_50_pers <- freq_table(TH4_k_pers_22_50)
freq_TH4_25_00_pers <- freq_table(TH4_k_pers_25_00)
freq_TH4_27_00_pers <- freq_table(TH4_k_pers_27_00)
freq_TH4_30_00_pers <- freq_table(TH4_k_pers_30_00)
freq_TH4_max_32_93_pers <- freq_table(TH4_k_pers_32_93)
freq_TH4_35_12_ezg_pers <- freq_table(TH4_k_pers_35_12_ezg)

# VR3 ----------------------------------------------------------
freq_VR3_base_2_90 <- freq_table(VR3_k_base_2_90)
freq_VR3_6_00 <- freq_table(VR3_k_6_00)
freq_VR3_9_00 <- freq_table(VR3_k_9_00)
freq_VR3_12_00 <- freq_table(VR3_k_12_00)
freq_VR3_15_00 <- freq_table(VR3_k_15_00)
freq_VR3_18_80 <- freq_table(VR3_k_18_80)
freq_VR3_21_51_ezg <- freq_table(VR3_k_21_51_ezg)
freq_VR3_22_00 <- freq_table(VR3_k_22_00)
freq_VR3_25_00 <- freq_table(VR3_k_25_00)
freq_VR3_28_00 <- freq_table(VR3_k_28_00)
freq_VR3_31_00 <- freq_table(VR3_k_31_00)
freq_VR3_34_00 <- freq_table(VR3_k_34_00)
freq_VR3_37_00 <- freq_table(VR3_k_37_00)
freq_VR3_peak_40_10 <- freq_table(VR3_k_peak_40_10)
freq_VR3_43_00 <- freq_table(VR3_k_43_00)
freq_VR3_46_00 <- freq_table(VR3_k_46_00)
freq_VR3_48_00 <- freq_table(VR3_k_48_00)
freq_VR3_50_00 <- freq_table(VR3_k_50_00)
freq_VR3_52_90 <- freq_table(VR3_k_52_90)

freq_VR3_base_2_90_pers <- freq_table(VR3_k_pers_2_90)
freq_VR3_6_00_pers <- freq_table(VR3_k_pers_6_00)
freq_VR3_9_00_pers <- freq_table(VR3_k_pers_9_00)
freq_VR3_12_00_pers <- freq_table(VR3_k_pers_12_00)
freq_VR3_15_00_pers <- freq_table(VR3_k_pers_15_00)
freq_VR3_18_80_pers <- freq_table(VR3_k_pers_18_80)
freq_VR3_21_51_ezg_pers <- freq_table(VR3_k_pers_21_51_ezg)
freq_VR3_22_00_pers <- freq_table(VR3_k_pers_22_00)
freq_VR3_25_00_pers <- freq_table(VR3_k_pers_25_00)
freq_VR3_28_00_pers <- freq_table(VR3_k_pers_28_00)
freq_VR3_31_00_pers <- freq_table(VR3_k_pers_31_00)
freq_VR3_34_00_pers <- freq_table(VR3_k_pers_34_00)
freq_VR3_37_00_pers <- freq_table(VR3_k_pers_37_00)
freq_VR3_peak_40_10_pers <- freq_table(VR3_k_pers_40_10)
freq_VR3_43_00_pers <- freq_table(VR3_k_pers_43_00)
freq_VR3_46_00_pers <- freq_table(VR3_k_pers_46_00)
freq_VR3_48_00_pers <- freq_table(VR3_k_pers_48_00)
freq_VR3_50_00_pers <- freq_table(VR3_k_pers_50_00)
freq_VR3_52_90_pers <- freq_table(VR3_k_pers_52_90)

# 2. calculate wetted area -----------------------------------------------
# GL1 -----------------------------------------------------------
wa_GL1_2_56_ezg <- wa_tot(freq_GL1_2_56_ezg, column_name = "count")
wa_GL1_min_3_28 <- wa_tot(freq_GL1_min_3_28, column_name = "count")
wa_GL1_6_00 <- wa_tot(freq_GL1_6_00, column_name = "count")
wa_GL1_9_00 <- wa_tot(freq_GL1_9_00, column_name = "count")
wa_GL1_12_68 <- wa_tot(freq_GL1_12_68, column_name = "count")
wa_GL1_16_00 <- wa_tot(freq_GL1_16_00, column_name = "count")
wa_GL1_19_00 <- wa_tot(freq_GL1_19_00, column_name = "count")
wa_GL1_22_00 <- wa_tot(freq_GL1_22_00, column_name = "count")
wa_GL1_25_00 <- wa_tot(freq_GL1_25_00, column_name = "count")
wa_GL1_28_00 <- wa_tot(freq_GL1_28_00, column_name = "count")
wa_GL1_max_31_76 <- wa_tot(freq_GL1_max_31_76, column_name = "count")

wa_GL1_2_56_ezg_pers <- wa_tot(freq_GL1_2_56_ezg_pers, column_name = "count")
wa_GL1_min_3_28_pers <- wa_tot(freq_GL1_min_3_28_pers, column_name = "count")
wa_GL1_6_00_pers <- wa_tot(freq_GL1_6_00_pers, column_name = "count")
wa_GL1_9_00_pers <- wa_tot(freq_GL1_9_00_pers, column_name = "count")
wa_GL1_12_68_pers <- wa_tot(freq_GL1_12_68_pers, column_name = "count")
wa_GL1_16_00_pers <- wa_tot(freq_GL1_16_00_pers, column_name = "count")
wa_GL1_19_00_pers <- wa_tot(freq_GL1_19_00_pers, column_name = "count")
wa_GL1_22_00_pers <- wa_tot(freq_GL1_22_00_pers, column_name = "count")
wa_GL1_25_00_pers <- wa_tot(freq_GL1_25_00_pers, column_name = "count")
wa_GL1_28_00_pers <- wa_tot(freq_GL1_28_00_pers, column_name = "count")
wa_GL1_max_31_76_pers <- wa_tot(freq_GL1_max_31_76_pers, column_name = "count")

# GL2 -----------------------------------------------------------
wa_GL2_2_37_ezg <- wa_tot(freq_GL2_2_37_ezg, column_name = "count")
wa_GL2_min_3_21 <- wa_tot(freq_GL2_min_3_21, column_name = "count")
wa_GL2_6_00 <- wa_tot(freq_GL2_6_00, column_name = "count")
wa_GL2_9_00 <- wa_tot(freq_GL2_9_00, column_name = "count")
wa_GL2_11_00 <- wa_tot(freq_GL2_11_00, column_name = "count")
wa_GL2_12_52 <- wa_tot(freq_GL2_12_52, column_name = "count")
wa_GL2_16_00 <- wa_tot(freq_GL2_16_00, column_name = "count")
wa_GL2_19_00 <- wa_tot(freq_GL2_19_00, column_name = "count")
wa_GL2_22_00 <- wa_tot(freq_GL2_22_00, column_name = "count")
wa_GL2_25_00 <- wa_tot(freq_GL2_25_00, column_name = "count")
wa_GL2_28_00 <- wa_tot(freq_GL2_28_00, column_name = "count")
wa_GL2_max_31_53 <- wa_tot(freq_GL2_max_31_53, column_name = "count")

wa_GL2_2_37_ezg_pers <- wa_tot(freq_GL2_2_37_ezg_pers, column_name = "count")
wa_GL2_min_3_21_pers <- wa_tot(freq_GL2_min_3_21_pers, column_name = "count")
wa_GL2_6_00_pers <- wa_tot(freq_GL2_6_00_pers, column_name = "count")
wa_GL2_9_00_pers <- wa_tot(freq_GL2_9_00_pers, column_name = "count")
wa_GL2_11_00_pers <- wa_tot(freq_GL2_11_00_pers, column_name = "count")
wa_GL2_12_52_pers <- wa_tot(freq_GL2_12_52_pers, column_name = "count")
wa_GL2_16_00_pers <- wa_tot(freq_GL2_16_00_pers, column_name = "count")
wa_GL2_19_00_pers <- wa_tot(freq_GL2_19_00_pers, column_name = "count")
wa_GL2_22_00_pers <- wa_tot(freq_GL2_22_00_pers, column_name = "count")
wa_GL2_25_00_pers <- wa_tot(freq_GL2_25_00_pers, column_name = "count")
wa_GL2_28_00_pers <- wa_tot(freq_GL2_28_00_pers, column_name = "count")
wa_GL2_max_31_53_pers <- wa_tot(freq_GL2_max_31_53_pers, column_name = "count")

# L2 -----------------------------------------------------------
wa_L2_base_2_40 <- wa_tot(freq_L2_base_2_40, column_name = "count")
wa_L2_3_90 <- wa_tot(freq_L2_3_90, column_name = "count")
wa_L2_7_00 <- wa_tot(freq_L2_7_00, column_name = "count")
wa_L2_peak_9_24 <- wa_tot(freq_L2_peak_9_24, column_name = "count")
wa_L2_9_54_ezg <- wa_tot(freq_L2_9_54_ezg, column_name = "count")
wa_L2_13_30 <- wa_tot(freq_L2_13_30, column_name = "count")
wa_L2_16_50 <- wa_tot(freq_L2_16_50, column_name = "count")
wa_L2_18_90 <- wa_tot(freq_L2_18_90, column_name = "count")

wa_L2_base_2_40_pers <- wa_tot(freq_L2_base_2_40_pers, column_name = "count")
wa_L2_3_90_pers <- wa_tot(freq_L2_3_90_pers, column_name = "count")
wa_L2_7_00_pers <- wa_tot(freq_L2_7_00_pers, column_name = "count")
wa_L2_peak_9_24_pers <- wa_tot(freq_L2_peak_9_24_pers, column_name = "count")
wa_L2_9_54_ezg_pers <- wa_tot(freq_L2_9_54_ezg_pers, column_name = "count")
wa_L2_13_30_pers <- wa_tot(freq_L2_13_30_pers, column_name = "count")
wa_L2_16_50_pers <- wa_tot(freq_L2_16_50_pers, column_name = "count")
wa_L2_18_90_pers <- wa_tot(freq_L2_18_90_pers, column_name = "count")

# M1 -----------------------------------------------------------
wa_M1_base_0_47 <- wa_tot(freq_M1_base_0_47, column_name = "count")
wa_M1_0_60 <- wa_tot(freq_M1_0_60, column_name = "count")
wa_M1_1_50_ezg <- wa_tot(freq_M1_1_50_ezg, column_name = "count")
wa_M1_4_00 <- wa_tot(freq_M1_4_00, column_name = "count")
wa_M1_6_00 <- wa_tot(freq_M1_6_00, column_name = "count")
wa_M1_8_00 <- wa_tot(freq_M1_8_00, column_name = "count")
wa_M1_10_00 <- wa_tot(freq_M1_10_00, column_name = "count")
wa_M1_12_00 <- wa_tot(freq_M1_12_00, column_name = "count")
wa_M1_14_00 <- wa_tot(freq_M1_14_00, column_name = "count")
wa_M1_16_00 <- wa_tot(freq_M1_16_00, column_name = "count")
wa_M1_peak_18_84 <- wa_tot(freq_M1_peak_18_84, column_name = "count")
wa_M1_22_84 <- wa_tot(freq_M1_22_84, column_name = "count")

wa_M1_base_0_47_pers <- wa_tot(freq_M1_base_0_47_pers, column_name = "count")
wa_M1_0_60_pers <- wa_tot(freq_M1_0_60_pers, column_name = "count")
wa_M1_1_50_ezg_pers <- wa_tot(freq_M1_1_50_ezg_pers, column_name = "count")
wa_M1_4_00_pers <- wa_tot(freq_M1_4_00_pers, column_name = "count")
wa_M1_6_00_pers <- wa_tot(freq_M1_6_00_pers, column_name = "count")
wa_M1_8_00_pers <- wa_tot(freq_M1_8_00_pers, column_name = "count")
wa_M1_10_00_pers <- wa_tot(freq_M1_10_00_pers, column_name = "count")
wa_M1_12_00_pers <- wa_tot(freq_M1_12_00_pers, column_name = "count")
wa_M1_14_00_pers <- wa_tot(freq_M1_14_00_pers, column_name = "count")
wa_M1_16_00_pers <- wa_tot(freq_M1_16_00_pers, column_name = "count")
wa_M1_peak_18_84_pers <- wa_tot(freq_M1_peak_18_84_pers, column_name = "count")
wa_M1_22_84_pers <- wa_tot(freq_M1_22_84_pers, column_name = "count")

# S1 -----------------------------------------------------------
wa_S1_1_94_ezg <- wa_tot(freq_S1_1_94_ezg, column_name = "count")
wa_S1_base_2_00 <- wa_tot(freq_S1_base_2_00, column_name = "count")
wa_S1_3_70 <- wa_tot(freq_S1_3_70, column_name = "count")
wa_S1_6_50 <- wa_tot(freq_S1_6_50, column_name = "count")
wa_S1_8_50 <- wa_tot(freq_S1_8_50, column_name = "count")
wa_S1_10_68 <- wa_tot(freq_S1_10_68, column_name = "count")
wa_S1_13_00 <- wa_tot(freq_S1_13_00, column_name = "count")
wa_S1_15_00 <- wa_tot(freq_S1_15_00, column_name = "count")
wa_S1_peak_18_00 <- wa_tot(freq_S1_peak_18_00, column_name = "count")
wa_S1_20_00 <- wa_tot(freq_S1_20_00, column_name = "count")

wa_S1_1_94_ezg_pers <- wa_tot(freq_S1_1_94_ezg_pers, column_name = "count")
wa_S1_base_2_00_pers <- wa_tot(freq_S1_base_2_00_pers, column_name = "count")
wa_S1_3_70_pers <- wa_tot(freq_S1_3_70_pers, column_name = "count")
wa_S1_6_50_pers <- wa_tot(freq_S1_6_50_pers, column_name = "count")
wa_S1_8_50_pers <- wa_tot(freq_S1_8_50_pers, column_name = "count")
wa_S1_10_68_pers <- wa_tot(freq_S1_10_68_pers, column_name = "count")
wa_S1_13_00_pers <- wa_tot(freq_S1_13_00_pers, column_name = "count")
wa_S1_15_00_pers <- wa_tot(freq_S1_15_00_pers, column_name = "count")
wa_S1_peak_18_00_pers <- wa_tot(freq_S1_peak_18_00_pers, column_name = "count")
wa_S1_20_00_pers <- wa_tot(freq_S1_20_00_pers, column_name = "count")

# S2 -----------------------------------------------------------
wa_S2_1_93_ezg <- wa_tot(freq_S2_1_93_ezg, column_name = "count")
wa_S2_base_2_00 <- wa_tot(freq_S2_base_2_00, column_name = "count")
wa_S2_3_20 <- wa_tot(freq_S2_3_20, column_name = "count")
wa_S2_6_50 <- wa_tot(freq_S2_6_50, column_name = "count")
wa_S2_8_50 <- wa_tot(freq_S2_8_50, column_name = "count")
wa_S2_10_93 <- wa_tot(freq_S2_10_93, column_name = "count")
wa_S2_13_00 <- wa_tot(freq_S2_13_00, column_name = "count")
wa_S2_15_00 <- wa_tot(freq_S2_15_00, column_name = "count")
wa_S2_peak_18_00 <- wa_tot(freq_S2_peak_18_00, column_name = "count")
wa_S2_20_00 <- wa_tot(freq_S2_20_00, column_name = "count")

wa_S2_1_93_ezg_pers <- wa_tot(freq_S2_1_93_ezg_pers, column_name = "count")
wa_S2_base_2_00_pers <- wa_tot(freq_S2_base_2_00_pers, column_name = "count")
wa_S2_3_20_pers <- wa_tot(freq_S2_3_20_pers, column_name = "count")
wa_S2_6_50_pers <- wa_tot(freq_S2_6_50_pers, column_name = "count")
wa_S2_8_50_pers <- wa_tot(freq_S2_8_50_pers, column_name = "count")
wa_S2_10_93_pers <- wa_tot(freq_S2_10_93_pers, column_name = "count")
wa_S2_13_00_pers <- wa_tot(freq_S2_13_00_pers, column_name = "count")
wa_S2_15_00_pers <- wa_tot(freq_S2_15_00_pers, column_name = "count")
wa_S2_peak_18_00_pers <- wa_tot(freq_S2_peak_18_00_pers, column_name = "count")
wa_S2_20_00_pers <- wa_tot(freq_S2_20_00_pers, column_name = "count")

# TH4 ----------------------------------------------------------
wa_TH4_min_11_45 <- wa_tot(freq_TH4_min_11_45, column_name = "count")
wa_TH4_15_00 <- wa_tot(freq_TH4_15_00, column_name = "count")
wa_TH4_18_00 <- wa_tot(freq_TH4_18_00, column_name = "count")
wa_TH4_19_96 <- wa_tot(freq_TH4_19_96, column_name = "count")
wa_TH4_22_50 <- wa_tot(freq_TH4_22_50, column_name = "count")
wa_TH4_25_00 <- wa_tot(freq_TH4_25_00, column_name = "count")
wa_TH4_27_00 <- wa_tot(freq_TH4_27_00, column_name = "count")
wa_TH4_30_00 <- wa_tot(freq_TH4_30_00, column_name = "count")
wa_TH4_max_32_93 <- wa_tot(freq_TH4_max_32_93, column_name = "count")
wa_TH4_35_12_ezg <- wa_tot(freq_TH4_35_12_ezg, column_name = "count")

wa_TH4_min_11_45_pers <- wa_tot(freq_TH4_min_11_45_pers, column_name = "count")
wa_TH4_15_00_pers <- wa_tot(freq_TH4_15_00_pers, column_name = "count")
wa_TH4_18_00_pers <- wa_tot(freq_TH4_18_00_pers, column_name = "count")
wa_TH4_19_96_pers <- wa_tot(freq_TH4_19_96_pers, column_name = "count")
wa_TH4_22_50_pers <- wa_tot(freq_TH4_22_50_pers, column_name = "count")
wa_TH4_25_00_pers <- wa_tot(freq_TH4_25_00_pers, column_name = "count")
wa_TH4_27_00_pers <- wa_tot(freq_TH4_27_00_pers, column_name = "count")
wa_TH4_30_00_pers <- wa_tot(freq_TH4_30_00_pers, column_name = "count")
wa_TH4_max_32_93_pers <- wa_tot(freq_TH4_max_32_93_pers, column_name = "count")
wa_TH4_35_12_ezg_pers <- wa_tot(freq_TH4_35_12_ezg_pers, column_name = "count")

# VR3 -----------------------------------------------------------
wa_VR3_base_2_90 <- wa_tot(freq_VR3_base_2_90, column_name = "count")
wa_VR3_6_00 <- wa_tot(freq_VR3_6_00, column_name = "count")
wa_VR3_9_00 <- wa_tot(freq_VR3_9_00, column_name = "count")
wa_VR3_12_00 <- wa_tot(freq_VR3_12_00, column_name = "count")
wa_VR3_15_00 <- wa_tot(freq_VR3_15_00, column_name = "count")
wa_VR3_18_80 <- wa_tot(freq_VR3_18_80, column_name = "count")
wa_VR3_21_51_ezg <- wa_tot(freq_VR3_21_51_ezg, column_name = "count")
wa_VR3_22_00 <- wa_tot(freq_VR3_22_00, column_name = "count")
wa_VR3_25_00 <- wa_tot(freq_VR3_25_00, column_name = "count")
wa_VR3_28_00 <- wa_tot(freq_VR3_28_00, column_name = "count")
wa_VR3_31_00 <- wa_tot(freq_VR3_31_00, column_name = "count")
wa_VR3_34_00 <- wa_tot(freq_VR3_34_00, column_name = "count")
wa_VR3_37_00 <- wa_tot(freq_VR3_37_00, column_name = "count")
wa_VR3_peak_40_10 <- wa_tot(freq_VR3_peak_40_10, column_name = "count")
wa_VR3_43_00 <- wa_tot(freq_VR3_43_00, column_name = "count")
wa_VR3_46_00 <- wa_tot(freq_VR3_46_00, column_name = "count")
wa_VR3_48_00 <- wa_tot(freq_VR3_48_00, column_name = "count")
wa_VR3_50_00 <- wa_tot(freq_VR3_50_00, column_name = "count")
wa_VR3_52_90 <- wa_tot(freq_VR3_52_90, column_name = "count")

wa_VR3_base_2_90_pers <- wa_tot(freq_VR3_base_2_90_pers, column_name = "count")
wa_VR3_6_00_pers <- wa_tot(freq_VR3_6_00_pers, column_name = "count")
wa_VR3_9_00_pers <- wa_tot(freq_VR3_9_00_pers, column_name = "count")
wa_VR3_12_00_pers <- wa_tot(freq_VR3_12_00_pers, column_name = "count")
wa_VR3_15_00_pers <- wa_tot(freq_VR3_15_00_pers, column_name = "count")
wa_VR3_18_80_pers <- wa_tot(freq_VR3_18_80_pers, column_name = "count")
wa_VR3_21_51_ezg_pers <- wa_tot(freq_VR3_21_51_ezg_pers, column_name = "count")
wa_VR3_22_00_pers <- wa_tot(freq_VR3_22_00_pers, column_name = "count")
wa_VR3_25_00_pers <- wa_tot(freq_VR3_25_00_pers, column_name = "count")
wa_VR3_28_00_pers <- wa_tot(freq_VR3_28_00_pers, column_name = "count")
wa_VR3_31_00_pers <- wa_tot(freq_VR3_31_00_pers, column_name = "count")
wa_VR3_34_00_pers <- wa_tot(freq_VR3_34_00_pers, column_name = "count")
wa_VR3_37_00_pers <- wa_tot(freq_VR3_37_00_pers, column_name = "count")
wa_VR3_peak_40_10_pers <- wa_tot(freq_VR3_peak_40_10_pers, column_name = "count")
wa_VR3_43_00_pers <- wa_tot(freq_VR3_43_00_pers, column_name = "count")
wa_VR3_46_00_pers <- wa_tot(freq_VR3_46_00_pers, column_name = "count")
wa_VR3_48_00_pers <- wa_tot(freq_VR3_48_00_pers, column_name = "count")
wa_VR3_50_00_pers <- wa_tot(freq_VR3_50_00_pers, column_name = "count")
wa_VR3_52_90_pers <- wa_tot(freq_VR3_52_90_pers, column_name = "count")

# 3. calculate HHS ------------------------------------------------------
# GL1 -----------------------------------------------------------
hhs_GL1_2_56_ezg <- wua_GL1_2_56_ezg/wa_GL1_2_56_ezg
hhs_GL1_min_3_28 <- wua_GL1_min_3_28/wa_GL1_min_3_28
hhs_GL1_6_00 <- wua_GL1_6_00/wa_GL1_6_00
hhs_GL1_9_00 <- wua_GL1_9_00/wa_GL1_9_00
hhs_GL1_12_68 <- wua_GL1_12_68/wa_GL1_12_68
hhs_GL1_16_00 <- wua_GL1_16_00/wa_GL1_16_00
hhs_GL1_19_00 <- wua_GL1_19_00/wa_GL1_19_00
hhs_GL1_22_00 <- wua_GL1_22_00/wa_GL1_22_00
hhs_GL1_25_00 <- wua_GL1_25_00/wa_GL1_25_00
hhs_GL1_28_00 <- wua_GL1_28_00/wa_GL1_28_00
hhs_GL1_max_31_76 <- wua_GL1_max_31_76/wa_GL1_max_31_76

hhs_GL1_2_56_ezg_pers <- wua_GL1_2_56_ezg_pers/wa_GL1_2_56_ezg
hhs_GL1_min_3_28_pers <- wua_GL1_min_3_28_pers/wa_GL1_min_3_28
hhs_GL1_6_00_pers <- wua_GL1_6_00_pers/wa_GL1_6_00
hhs_GL1_9_00_pers <- wua_GL1_9_00_pers/wa_GL1_9_00
hhs_GL1_12_68_pers <- wua_GL1_12_68_pers/wa_GL1_12_68
hhs_GL1_16_00_pers <- wua_GL1_16_00_pers/wa_GL1_16_00
hhs_GL1_19_00_pers <- wua_GL1_19_00_pers/wa_GL1_19_00
hhs_GL1_22_00_pers <- wua_GL1_22_00_pers/wa_GL1_22_00
hhs_GL1_25_00_pers <- wua_GL1_25_00_pers/wa_GL1_25_00
hhs_GL1_28_00_pers <- wua_GL1_28_00_pers/wa_GL1_28_00
hhs_GL1_max_31_76_pers <- wua_GL1_max_31_76_pers/wa_GL1_max_31_76

# GL2 -----------------------------------------------------------
hhs_GL2_2_37_ezg <- wua_GL2_2_37_ezg/wa_GL2_2_37_ezg
hhs_GL2_min_3_21 <- wua_GL2_min_3_21/wa_GL2_min_3_21
hhs_GL2_6_00 <- wua_GL2_6_00/wa_GL2_6_00
hhs_GL2_9_00 <- wua_GL2_9_00/wa_GL2_9_00
hhs_GL2_11_00 <- wua_GL2_11_00/wa_GL2_11_00
hhs_GL2_12_52 <- wua_GL2_12_52/wa_GL2_12_52
hhs_GL2_16_00 <- wua_GL2_16_00/wa_GL2_16_00
hhs_GL2_19_00 <- wua_GL2_19_00/wa_GL2_19_00
hhs_GL2_22_00 <- wua_GL2_22_00/wa_GL2_22_00
hhs_GL2_25_00 <- wua_GL2_25_00/wa_GL2_25_00
hhs_GL2_28_00 <- wua_GL2_28_00/wa_GL2_28_00
hhs_GL2_max_31_53 <- wua_GL2_max_31_53/wa_GL2_max_31_53

hhs_GL2_2_37_ezg_pers <- wua_GL2_2_37_ezg_pers/wa_GL2_2_37_ezg
hhs_GL2_min_3_21_pers <- wua_GL2_min_3_21_pers/wa_GL2_min_3_21
hhs_GL2_6_00_pers <- wua_GL2_6_00_pers/wa_GL2_6_00
hhs_GL2_9_00_pers <- wua_GL2_9_00_pers/wa_GL2_9_00
hhs_GL2_11_00_pers <- wua_GL2_11_00_pers/wa_GL2_11_00
hhs_GL2_12_52_pers <- wua_GL2_12_52_pers/wa_GL2_12_52
hhs_GL2_16_00_pers <- wua_GL2_16_00_pers/wa_GL2_16_00
hhs_GL2_19_00_pers <- wua_GL2_19_00_pers/wa_GL2_19_00
hhs_GL2_22_00_pers <- wua_GL2_22_00_pers/wa_GL2_22_00
hhs_GL2_25_00_pers <- wua_GL2_25_00_pers/wa_GL2_25_00
hhs_GL2_28_00_pers <- wua_GL2_28_00_pers/wa_GL2_28_00
hhs_GL2_max_31_53_pers <- wua_GL2_max_31_53_pers/wa_GL2_max_31_53

# L2 -----------------------------------------------------------
hhs_L2_base_2_40 <- wua_L2_base_2_40/wa_L2_base_2_40
hhs_L2_3_90 <- wua_L2_3_90/wa_L2_3_90
hhs_L2_7_00 <- wua_L2_7_00/wa_L2_7_00
hhs_L2_peak_9_24 <- wua_L2_peak_9_24/wa_L2_peak_9_24
hhs_L2_9_54_ezg <- wua_L2_9_54_ezg/wa_L2_9_54_ezg
hhs_L2_13_30 <- wua_L2_13_30/wa_L2_13_30
hhs_L2_16_50 <- wua_L2_16_50/wa_L2_16_50
hhs_L2_18_90 <- wua_L2_18_90/wa_L2_18_90

hhs_L2_base_2_40_pers <- wua_L2_base_2_40_pers/wa_L2_base_2_40
hhs_L2_3_90_pers <- wua_L2_3_90_pers/wa_L2_3_90
hhs_L2_7_00_pers <- wua_L2_7_00_pers/wa_L2_7_00
hhs_L2_peak_9_24_pers <- wua_L2_peak_9_24_pers/wa_L2_peak_9_24
hhs_L2_9_54_ezg_pers <- wua_L2_9_54_ezg_pers/wa_L2_9_54_ezg
hhs_L2_13_30_pers <- wua_L2_13_30_pers/wa_L2_13_30
hhs_L2_16_50_pers <- wua_L2_16_50_pers/wa_L2_16_50
hhs_L2_18_90_pers <- wua_L2_18_90_pers/wa_L2_18_90

# M1 -----------------------------------------------------------
hhs_M1_base_0_47 <- wua_M1_base_0_47/wa_M1_base_0_47
hhs_M1_0_60 <- wua_M1_0_60/wa_M1_0_60
hhs_M1_1_50_ezg <- wua_M1_1_50_ezg/wa_M1_1_50_ezg
hhs_M1_4_00 <- wua_M1_4_00/wa_M1_4_00
hhs_M1_6_00 <- wua_M1_6_00/wa_M1_6_00
hhs_M1_8_00 <- wua_M1_8_00/wa_M1_8_00
hhs_M1_10_00 <- wua_M1_10_00/wa_M1_10_00
hhs_M1_12_00 <- wua_M1_12_00/wa_M1_12_00
hhs_M1_14_00 <- wua_M1_14_00/wa_M1_14_00
hhs_M1_16_00 <- wua_M1_16_00/wa_M1_16_00
hhs_M1_peak_18_84 <- wua_M1_peak_18_84/wa_M1_peak_18_84
hhs_M1_22_84 <- wua_M1_22_84/wa_M1_22_84

hhs_M1_base_0_47_pers <- wua_M1_base_0_47_pers/wa_M1_base_0_47
hhs_M1_0_60_pers <- wua_M1_0_60_pers/wa_M1_0_60
hhs_M1_1_50_ezg_pers <- wua_M1_1_50_ezg_pers/wa_M1_1_50_ezg
hhs_M1_4_00_pers <- wua_M1_4_00_pers/wa_M1_4_00
hhs_M1_6_00_pers <- wua_M1_6_00_pers/wa_M1_6_00
hhs_M1_8_00_pers <- wua_M1_8_00_pers/wa_M1_8_00
hhs_M1_10_00_pers <- wua_M1_10_00_pers/wa_M1_10_00
hhs_M1_12_00_pers <- wua_M1_12_00_pers/wa_M1_12_00
hhs_M1_14_00_pers <- wua_M1_14_00_pers/wa_M1_14_00
hhs_M1_16_00_pers <- wua_M1_16_00_pers/wa_M1_16_00
hhs_M1_peak_18_84_pers <- wua_M1_peak_18_84_pers/wa_M1_peak_18_84
hhs_M1_22_84_pers <- wua_M1_22_84_pers/wa_M1_22_84

# S1 -----------------------------------------------------------
hhs_S1_1_94_ezg <- wua_S1_1_94_ezg/wa_S1_1_94_ezg
hhs_S1_base_2_00 <- wua_S1_base_2_00/wa_S1_base_2_00
hhs_S1_3_70 <- wua_S1_3_70/wa_S1_3_70
hhs_S1_6_50 <- wua_S1_6_50/wa_S1_6_50
hhs_S1_8_50 <- wua_S1_8_50/wa_S1_8_50
hhs_S1_10_68 <- wua_S1_10_68/wa_S1_10_68
hhs_S1_13_00 <- wua_S1_13_00/wa_S1_13_00
hhs_S1_15_00 <- wua_S1_15_00/wa_S1_15_00
hhs_S1_peak_18_00 <- wua_S1_peak_18_00/wa_S1_peak_18_00
hhs_S1_20_00 <- wua_S1_20_00/wa_S1_20_00

hhs_S1_1_94_ezg_pers <- wua_S1_1_94_ezg_pers/wa_S1_1_94_ezg
hhs_S1_base_2_00_pers <- wua_S1_base_2_00_pers/wa_S1_base_2_00
hhs_S1_3_70_pers <- wua_S1_3_70_pers/wa_S1_3_70
hhs_S1_6_50_pers <- wua_S1_6_50_pers/wa_S1_6_50
hhs_S1_8_50_pers <- wua_S1_8_50_pers/wa_S1_8_50
hhs_S1_10_68_pers <- wua_S1_10_68_pers/wa_S1_10_68
hhs_S1_13_00_pers <- wua_S1_13_00_pers/wa_S1_13_00
hhs_S1_15_00_pers <- wua_S1_15_00_pers/wa_S1_15_00
hhs_S1_peak_18_00_pers <- wua_S1_peak_18_00_pers/wa_S1_peak_18_00
hhs_S1_20_00_pers <- wua_S1_20_00_pers/wa_S1_20_00

# S2 -----------------------------------------------------------
hhs_S2_1_93_ezg <- wua_S2_1_93_ezg/wa_S2_1_93_ezg
hhs_S2_base_2_00 <- wua_S2_base_2_00/wa_S2_base_2_00
hhs_S2_3_20 <- wua_S2_3_20/wa_S2_3_20
hhs_S2_6_50 <- wua_S2_6_50/wa_S2_6_50
hhs_S2_8_50 <- wua_S2_8_50/wa_S2_8_50
hhs_S2_10_93 <- wua_S2_10_93/wa_S2_10_93
hhs_S2_13_00 <- wua_S2_13_00/wa_S2_13_00
hhs_S2_15_00 <- wua_S2_15_00/wa_S2_15_00
hhs_S2_peak_18_00 <- wua_S2_peak_18_00/wa_S2_peak_18_00
hhs_S2_20_00 <- wua_S2_20_00/wa_S2_20_00

hhs_S2_1_93_ezg_pers <- wua_S2_1_93_ezg_pers/wa_S2_1_93_ezg
hhs_S2_base_2_00_pers <- wua_S2_base_2_00_pers/wa_S2_base_2_00
hhs_S2_3_20_pers <- wua_S2_3_20_pers/wa_S2_3_20
hhs_S2_6_50_pers <- wua_S2_6_50_pers/wa_S2_6_50
hhs_S2_8_50_pers <- wua_S2_8_50_pers/wa_S2_8_50
hhs_S2_10_93_pers <- wua_S2_10_93_pers/wa_S2_10_93
hhs_S2_13_00_pers <- wua_S2_13_00_pers/wa_S2_13_00
hhs_S2_15_00_pers <- wua_S2_15_00_pers/wa_S2_15_00
hhs_S2_peak_18_00_pers <- wua_S2_peak_18_00_pers/wa_S2_peak_18_00
hhs_S2_20_00_pers <- wua_S2_20_00_pers/wa_S2_20_00

# TH4 -----------------------------------------------------------
hhs_TH4_min_11_45 <- wua_TH4_min_11_45/wa_TH4_min_11_45
hhs_TH4_15_00 <- wua_TH4_15_00/wa_TH4_15_00
hhs_TH4_18_00 <- wua_TH4_18_00/wa_TH4_18_00
hhs_TH4_19_96 <- wua_TH4_19_96/wa_TH4_19_96
hhs_TH4_22_50 <- wua_TH4_22_50/wa_TH4_22_50
hhs_TH4_25_00 <- wua_TH4_25_00/wa_TH4_25_00
hhs_TH4_27_00 <- wua_TH4_27_00/wa_TH4_27_00
hhs_TH4_30_00 <- wua_TH4_30_00/wa_TH4_30_00
hhs_TH4_max_32_93 <- wua_TH4_max_32_93/wa_TH4_max_32_93
hhs_TH4_35_12_ezg <- wua_TH4_35_12_ezg/wa_TH4_35_12_ezg

hhs_TH4_min_11_45_pers <- wua_TH4_min_11_45_pers/wa_TH4_min_11_45
hhs_TH4_15_00_pers <- wua_TH4_15_00_pers/wa_TH4_15_00
hhs_TH4_18_00_pers <- wua_TH4_18_00_pers/wa_TH4_18_00
hhs_TH4_19_96_pers <- wua_TH4_19_96_pers/wa_TH4_19_96
hhs_TH4_22_50_pers <- wua_TH4_22_50_pers/wa_TH4_22_50
hhs_TH4_25_00_pers <- wua_TH4_25_00_pers/wa_TH4_25_00
hhs_TH4_27_00_pers <- wua_TH4_27_00_pers/wa_TH4_27_00
hhs_TH4_30_00_pers <- wua_TH4_30_00_pers/wa_TH4_30_00
hhs_TH4_max_32_93_pers <- wua_TH4_max_32_93_pers/wa_TH4_max_32_93
hhs_TH4_35_12_ezg_pers <- wua_TH4_35_12_ezg_pers/wa_TH4_35_12_ezg

# VR3 -----------------------------------------------------------
hhs_VR3_base_2_90 <- wua_VR3_base_2_90/wa_VR3_base_2_90
hhs_VR3_6_00 <- wua_VR3_6_00/wa_VR3_6_00
hhs_VR3_9_00 <- wua_VR3_9_00/wa_VR3_9_00
hhs_VR3_12_00 <- wua_VR3_12_00/wa_VR3_12_00
hhs_VR3_15_00 <- wua_VR3_15_00/wa_VR3_15_00
hhs_VR3_18_80 <- wua_VR3_18_80/wa_VR3_18_80
hhs_VR3_21_51_ezg <- wua_VR3_21_51_ezg/wa_VR3_21_51_ezg
hhs_VR3_22_00 <- wua_VR3_22_00/wa_VR3_22_00
hhs_VR3_25_00 <- wua_VR3_25_00/wa_VR3_25_00
hhs_VR3_28_00 <- wua_VR3_28_00/wa_VR3_28_00
hhs_VR3_31_00 <- wua_VR3_31_00/wa_VR3_31_00
hhs_VR3_34_00 <- wua_VR3_34_00/wa_VR3_34_00
hhs_VR3_37_00 <- wua_VR3_37_00/wa_VR3_37_00
hhs_VR3_peak_40_10 <- wua_VR3_peak_40_10/wa_VR3_peak_40_10
hhs_VR3_43_00 <- wua_VR3_43_00/wa_VR3_43_00
hhs_VR3_46_00 <- wua_VR3_46_00/wa_VR3_46_00
hhs_VR3_48_00 <- wua_VR3_48_00/wa_VR3_48_00
hhs_VR3_50_00 <- wua_VR3_50_00/wa_VR3_50_00
hhs_VR3_52_90 <- wua_VR3_52_90/wa_VR3_52_90

hhs_VR3_base_2_90_pers <- wua_VR3_base_2_90_pers/wa_VR3_base_2_90
hhs_VR3_6_00_pers <- wua_VR3_6_00_pers/wa_VR3_6_00
hhs_VR3_9_00_pers <- wua_VR3_9_00_pers/wa_VR3_9_00
hhs_VR3_12_00_pers <- wua_VR3_12_00_pers/wa_VR3_12_00
hhs_VR3_15_00_pers <- wua_VR3_15_00_pers/wa_VR3_15_00
hhs_VR3_18_80_pers <- wua_VR3_18_80_pers/wa_VR3_18_80
hhs_VR3_21_51_ezg_pers <- wua_VR3_21_51_ezg_pers/wa_VR3_21_51_ezg
hhs_VR3_22_00_pers <- wua_VR3_22_00_pers/wa_VR3_22_00
hhs_VR3_25_00_pers <- wua_VR3_25_00_pers/wa_VR3_25_00
hhs_VR3_28_00_pers <- wua_VR3_28_00_pers/wa_VR3_28_00
hhs_VR3_31_00_pers <- wua_VR3_31_00_pers/wa_VR3_31_00
hhs_VR3_34_00_pers <- wua_VR3_34_00_pers/wa_VR3_34_00
hhs_VR3_37_00_pers <- wua_VR3_37_00_pers/wa_VR3_37_00
hhs_VR3_peak_40_10_pers <- wua_VR3_peak_40_10_pers/wa_VR3_peak_40_10
hhs_VR3_43_00_pers <- wua_VR3_43_00_pers/wa_VR3_43_00
hhs_VR3_46_00_pers <- wua_VR3_46_00_pers/wa_VR3_46_00
hhs_VR3_48_00_pers <- wua_VR3_48_00_pers/wa_VR3_48_00
hhs_VR3_50_00_pers <- wua_VR3_50_00_pers/wa_VR3_50_00
hhs_VR3_52_90_pers <- wua_VR3_52_90_pers/wa_VR3_52_90
```

## Results 
```{r}
results <- data.frame(
  wua = c(
# GL1 --------------------------------------------  
wua_GL1_2_56_ezg, wua_GL1_min_3_28, wua_GL1_6_00, wua_GL1_9_00, wua_GL1_12_68, wua_GL1_16_00, wua_GL1_19_00, wua_GL1_22_00, wua_GL1_25_00, wua_GL1_28_00, wua_GL1_max_31_76,
 
# GL2 -------------------------------------------       
        wua_GL2_2_37_ezg, wua_GL2_min_3_21, wua_GL2_6_00, wua_GL2_9_00, wua_GL2_11_00, wua_GL2_12_52, wua_GL2_16_00, wua_GL2_19_00, wua_GL2_22_00, wua_GL2_25_00, wua_GL2_28_00, wua_GL2_max_31_53,
        
# L2 -----------------------------------------------
wua_L2_base_2_40, wua_L2_3_90, wua_L2_7_00, wua_L2_peak_9_24, wua_L2_9_54_ezg, wua_L2_13_30, wua_L2_16_50, wua_L2_18_90,

# M1 ---------------------------------------------------
wua_M1_base_0_47, wua_M1_0_60, wua_M1_1_50_ezg, wua_M1_4_00, wua_M1_6_00, wua_M1_8_00, wua_M1_10_00, wua_M1_12_00, wua_M1_14_00, wua_M1_16_00, wua_M1_peak_18_84, wua_M1_22_84,

# S1 --------------------------------------------------
wua_S1_1_94_ezg, wua_S1_base_2_00, wua_S1_3_70, wua_S1_6_50, wua_S1_8_50, wua_S1_10_68, wua_S1_13_00, wua_S1_15_00, wua_S1_peak_18_00, wua_S1_20_00,

 # S2 -------------------------------------------------
wua_S2_1_93_ezg, wua_S2_base_2_00, wua_S2_3_20, wua_S2_6_50, wua_S2_8_50, wua_S2_10_93, wua_S2_13_00, wua_S2_15_00, wua_S2_peak_18_00, wua_S2_20_00,

# TH4 -----------------------------------------------------
wua_TH4_min_11_45, wua_TH4_15_00, wua_TH4_18_00, wua_TH4_19_96, wua_TH4_22_50, wua_TH4_25_00, wua_TH4_27_00, wua_TH4_30_00, wua_TH4_max_32_93, wua_TH4_35_12_ezg,

# VR3 ---------------------------------------------------
wua_VR3_base_2_90, wua_VR3_6_00, wua_VR3_9_00, wua_VR3_12_00, wua_VR3_15_00, wua_VR3_18_80, wua_VR3_21_51_ezg, wua_VR3_22_00, wua_VR3_25_00, wua_VR3_28_00, wua_VR3_31_00, wua_VR3_34_00, wua_VR3_37_00, wua_VR3_peak_40_10, wua_VR3_43_00, wua_VR3_46_00, wua_VR3_48_00, wua_VR3_50_00, wua_VR3_52_90),

wua_pers = c(
# GL1 --------------------------------------------  
wua_GL1_2_56_ezg_pers, wua_GL1_min_3_28_pers, wua_GL1_6_00_pers, wua_GL1_9_00_pers, wua_GL1_12_68_pers, wua_GL1_16_00_pers, wua_GL1_19_00_pers, wua_GL1_22_00_pers, wua_GL1_25_00_pers, wua_GL1_28_00_pers, wua_GL1_max_31_76_pers,
 
# GL2 -------------------------------------------       
        wua_GL2_2_37_ezg_pers, wua_GL2_min_3_21_pers, wua_GL2_6_00_pers, wua_GL2_9_00_pers, wua_GL2_11_00_pers, wua_GL2_12_52_pers, wua_GL2_16_00_pers, wua_GL2_19_00_pers, wua_GL2_22_00_pers, wua_GL2_25_00_pers, wua_GL2_28_00_pers, wua_GL2_max_31_53_pers,
        
# L2 -----------------------------------------------
wua_L2_base_2_40_pers, wua_L2_3_90_pers, wua_L2_7_00_pers, wua_L2_peak_9_24_pers, wua_L2_9_54_ezg_pers, wua_L2_13_30_pers, wua_L2_16_50_pers, wua_L2_18_90_pers,

# M1 ---------------------------------------------------
wua_M1_base_0_47_pers, wua_M1_0_60_pers, wua_M1_1_50_ezg_pers, wua_M1_4_00_pers, wua_M1_6_00_pers, wua_M1_8_00_pers, wua_M1_10_00_pers, wua_M1_12_00_pers, wua_M1_14_00_pers, wua_M1_16_00_pers, wua_M1_peak_18_84_pers, wua_M1_22_84_pers,

# S1 --------------------------------------------------
wua_S1_1_94_ezg_pers, wua_S1_base_2_00_pers, wua_S1_3_70_pers, wua_S1_6_50_pers, wua_S1_8_50_pers, wua_S1_10_68_pers, wua_S1_13_00_pers, wua_S1_15_00_pers, wua_S1_peak_18_00_pers, wua_S1_20_00_pers,

 # S2 -------------------------------------------------
wua_S2_1_93_ezg_pers, wua_S2_base_2_00_pers, wua_S2_3_20_pers, wua_S2_6_50_pers, wua_S2_8_50_pers, wua_S2_10_93_pers, wua_S2_13_00_pers, wua_S2_15_00_pers, wua_S2_peak_18_00_pers, wua_S2_20_00_pers,

# TH4 -----------------------------------------------------
wua_TH4_min_11_45_pers, wua_TH4_15_00_pers, wua_TH4_18_00_pers, wua_TH4_19_96_pers, wua_TH4_22_50_pers, wua_TH4_25_00_pers, wua_TH4_27_00_pers, wua_TH4_30_00_pers, wua_TH4_max_32_93_pers, wua_TH4_35_12_ezg_pers,

# VR3 ---------------------------------------------------
wua_VR3_base_2_90_pers, wua_VR3_6_00_pers, wua_VR3_9_00_pers, wua_VR3_12_00_pers, wua_VR3_15_00_pers, wua_VR3_18_80_pers, wua_VR3_21_51_ezg_pers, wua_VR3_22_00_pers, wua_VR3_25_00_pers, wua_VR3_28_00_pers, wua_VR3_31_00_pers, wua_VR3_34_00_pers, wua_VR3_37_00_pers, wua_VR3_peak_40_10_pers, wua_VR3_43_00_pers, wua_VR3_46_00_pers, wua_VR3_48_00_pers, wua_VR3_50_00_pers, wua_VR3_52_90_pers),

hhs = c(
# GL1 -------------------------------------
  hhs_GL1_2_56_ezg, hhs_GL1_min_3_28, hhs_GL1_6_00, hhs_GL1_9_00, hhs_GL1_12_68, hhs_GL1_16_00, hhs_GL1_19_00, hhs_GL1_22_00, hhs_GL1_25_00, hhs_GL1_28_00, hhs_GL1_max_31_76,

# GL2 -------------------------------------
hhs_GL2_2_37_ezg, hhs_GL2_min_3_21, hhs_GL2_6_00, hhs_GL2_9_00, hhs_GL2_11_00, hhs_GL2_12_52, hhs_GL2_16_00, hhs_GL2_19_00, hhs_GL2_22_00, hhs_GL2_25_00, hhs_GL2_28_00, hhs_GL2_max_31_53,

# L2 ---------------------------------------
hhs_L2_base_2_40, hhs_L2_3_90, hhs_L2_7_00, hhs_L2_peak_9_24, hhs_L2_9_54_ezg, hhs_L2_13_30, hhs_L2_16_50, hhs_L2_18_90, 

# M1 -----------------------------------------
hhs_M1_base_0_47, hhs_M1_0_60, hhs_M1_1_50_ezg, hhs_M1_4_00, hhs_M1_6_00, hhs_M1_8_00, hhs_M1_10_00, hhs_M1_12_00, hhs_M1_14_00, hhs_M1_16_00, hhs_M1_peak_18_84, hhs_M1_22_84,

# S1 --------------------------------------------
hhs_S1_1_94_ezg, hhs_S1_base_2_00, hhs_S1_3_70, hhs_S1_6_50, hhs_S1_8_50, hhs_S1_10_68, hhs_S1_13_00, hhs_S1_15_00, hhs_S1_peak_18_00, hhs_S1_20_00,

# S2 -----------------------------------
hhs_S2_1_93_ezg, hhs_S2_base_2_00, hhs_S2_3_20, hhs_S2_6_50, hhs_S2_8_50, hhs_S2_10_93, hhs_S2_13_00, hhs_S2_15_00, hhs_S2_peak_18_00, hhs_S2_20_00, 

# TH4 ----------------------------------------
hhs_TH4_min_11_45, hhs_TH4_15_00, hhs_TH4_18_00, hhs_TH4_19_96, hhs_TH4_22_50, hhs_TH4_25_00, hhs_TH4_27_00, hhs_TH4_30_00, hhs_TH4_max_32_93, hhs_TH4_35_12_ezg,

# VR3 --------------------------------------------
hhs_VR3_base_2_90, hhs_VR3_6_00, hhs_VR3_9_00, hhs_VR3_12_00, hhs_VR3_15_00, hhs_VR3_18_80, hhs_VR3_21_51_ezg, hhs_VR3_22_00, hhs_VR3_25_00, hhs_VR3_28_00, hhs_VR3_31_00, hhs_VR3_34_00, hhs_VR3_37_00, hhs_VR3_peak_40_10, hhs_VR3_43_00, hhs_VR3_46_00, hhs_VR3_48_00, hhs_VR3_50_00, hhs_VR3_52_90),

hhs_pers = c(
# GL1 -------------------------------------
  hhs_GL1_2_56_ezg_pers, hhs_GL1_min_3_28_pers, hhs_GL1_6_00_pers, hhs_GL1_9_00_pers, hhs_GL1_12_68_pers, hhs_GL1_16_00_pers, hhs_GL1_19_00_pers, hhs_GL1_22_00_pers, hhs_GL1_25_00_pers, hhs_GL1_28_00_pers, hhs_GL1_max_31_76_pers,

# GL2 -------------------------------------
hhs_GL2_2_37_ezg_pers, hhs_GL2_min_3_21_pers, hhs_GL2_6_00_pers, hhs_GL2_9_00_pers, hhs_GL2_11_00_pers, hhs_GL2_12_52_pers, hhs_GL2_16_00_pers, hhs_GL2_19_00_pers, hhs_GL2_22_00_pers, hhs_GL2_25_00_pers, hhs_GL2_28_00_pers, hhs_GL2_max_31_53_pers,

# L2 ---------------------------------------
hhs_L2_base_2_40_pers, hhs_L2_3_90_pers, hhs_L2_7_00_pers, hhs_L2_peak_9_24_pers, hhs_L2_9_54_ezg_pers, hhs_L2_13_30_pers, hhs_L2_16_50_pers, hhs_L2_18_90_pers, 

# M1 -----------------------------------------
hhs_M1_base_0_47_pers, hhs_M1_0_60_pers, hhs_M1_1_50_ezg_pers, hhs_M1_4_00_pers, hhs_M1_6_00_pers, hhs_M1_8_00_pers, hhs_M1_10_00_pers, hhs_M1_12_00_pers, hhs_M1_14_00_pers, hhs_M1_16_00_pers, hhs_M1_peak_18_84_pers, hhs_M1_22_84_pers,

# S1 --------------------------------------------
hhs_S1_1_94_ezg_pers, hhs_S1_base_2_00_pers, hhs_S1_3_70_pers, hhs_S1_6_50_pers, hhs_S1_8_50_pers, hhs_S1_10_68_pers, hhs_S1_13_00_pers, hhs_S1_15_00_pers, hhs_S1_peak_18_00_pers, hhs_S1_20_00_pers,

# S2 -----------------------------------
hhs_S2_1_93_ezg_pers, hhs_S2_base_2_00_pers, hhs_S2_3_20_pers, hhs_S2_6_50_pers, hhs_S2_8_50_pers, hhs_S2_10_93_pers, hhs_S2_13_00_pers, hhs_S2_15_00_pers, hhs_S2_peak_18_00_pers, hhs_S2_20_00_pers, 

# TH4 ----------------------------------------
hhs_TH4_min_11_45_pers, hhs_TH4_15_00_pers, hhs_TH4_18_00_pers, hhs_TH4_19_96_pers, hhs_TH4_22_50_pers, hhs_TH4_25_00_pers, hhs_TH4_27_00_pers, hhs_TH4_30_00_pers, hhs_TH4_max_32_93_pers, hhs_TH4_35_12_ezg_pers,

# VR3 --------------------------------------------
hhs_VR3_base_2_90_pers, hhs_VR3_6_00_pers, hhs_VR3_9_00_pers, hhs_VR3_12_00_pers, hhs_VR3_15_00_pers, hhs_VR3_18_80_pers, hhs_VR3_21_51_ezg_pers, hhs_VR3_22_00_pers, hhs_VR3_25_00_pers, hhs_VR3_28_00_pers, hhs_VR3_31_00_pers, hhs_VR3_34_00_pers, hhs_VR3_37_00_pers, hhs_VR3_peak_40_10_pers, hhs_VR3_43_00_pers, hhs_VR3_46_00_pers, hhs_VR3_48_00_pers, hhs_VR3_50_00_pers, hhs_VR3_52_90_pers),

Q = c(
# GL1 ---------------------------------------
  2.56, 3.28, 6.00, 9.00, 12.68, 16.00, 19.00, 22.00, 25.00, 28.00, 31.76,
      
# GL1 ----------------------------------------
      2.37, 3.21, 6.00, 9.00, 11.00, 12.52, 16.00, 19.00, 22.00, 25.00, 28.00, 31.53,
  
# L2 -----------------------------------------    
      2.40, 3.90, 7.00, 9.24, 9.54, 13.30, 16.50, 18.90,
      
# M1 -----------------------------------------
      0.47, 0.60, 1.50, 4.00, 6.00, 8.00, 10.00, 12.00, 14.00, 16.00, 18.84, 22.84,
      
# S1 --------------------------------------------
      1.94, 2.00, 3.70, 6.50, 8.50, 10.68, 13.00, 15.00, 18.00, 20.00,
      
# S2 ----------------------------------------------
      1.93, 2.00, 3.20, 6.50, 8.50, 10.93, 13.00, 15.00, 18.00, 20.00,
      
# TH4 ----------------------------------------------
      11.45, 15.00, 18.00, 19.96, 22.50, 25.00, 27.00, 30.00, 32.93, 35.12,

# VR3 ------------------------------------------------      
      2.90, 6.00, 9.00, 12.00, 15.00, 18.80, 21.51, 22.00, 25.00, 28.00, 31.00, 34.00, 37.00, 40.10, 43.00, 46.00, 48.00, 50.00, 52.90),

hydr_cond = c(
  # GL1 ------------------------------------------
  NA, "min", NA, NA, NA, NA, NA, NA, NA, NA, "max",
  
  # GL2 ------------------------------------------    
      NA, "min", NA, NA, NA, NA, NA, NA, NA, NA, NA, "max",
   
  # L2 -------------------------------------------   
      "base", NA, NA, "peak", NA, NA, NA, NA, 
     
  # M1 -------------------------------------------- 
      "base", NA, NA, NA, NA, NA, NA, NA, NA, NA, "peak", NA,
   
  # S1 -----------------------------------------------   
      NA, "base", NA, NA, NA, NA, NA, NA, "peak", NA, 
   
  # S2 --------------------------------------------------   
      NA, "base", NA, NA, NA, NA, NA, NA, "peak", NA, 
    
  # TH4 -------------------------------------------------  
      "min", NA, NA, NA, NA, NA, NA, NA, "max", NA, 
      
  # VR3 --------------------------------------
      "base", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, "peak", NA, NA, NA, NA, NA), 
 
section = c("GL1", "GL1", "GL1", "GL1", "GL1", "GL1", 
            "GL1", "GL1", "GL1", "GL1", "GL1",
            
            "GL2", "GL2", "GL2", "GL2", "GL2", "GL2",
            "GL2", "GL2", "GL2", "GL2", "GL2", "GL2", 
            
            "L2", "L2", "L2", "L2", "L2",  
            "L2", "L2", "L2",
            
            "M1", "M1", "M1", "M1", "M1", "M1", 
            "M1", "M1", "M1", "M1", "M1", "M1", 
            
            "S1", "S1", "S1", "S1", "S1", "S1", 
            "S1", "S1", "S1", "S1", 
            
            "S2", "S2", "S2", "S2", "S2", "S2",
             "S2", "S2", "S2", "S2", 
            
            "TH4", "TH4", "TH4", "TH4", "TH4", "TH4",
            "TH4", "TH4", "TH4", "TH4", 
            
            "VR3", "VR3", "VR3", "VR3", "VR3", "VR3", "VR3", "VR3", "VR3", "VR3",
            "VR3", "VR3", "VR3", "VR3", "VR3", "VR3", "VR3", "VR3", "VR3"))



# write .csv file of results 
write.csv(results, "ML_model/scenarios/wua_hhs_k_var_rf.csv", row.names = FALSE)
```


