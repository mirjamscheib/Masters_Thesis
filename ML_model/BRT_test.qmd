---
title: "BRT_test"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
pkgCheck("Fgmutils") # for bias calculation (bias() function)
pkgCheck("hydroGOF") # for NSE calculation with NSE() function 
```

# Load & prepare data 
```{r}
# Load data containing all variables measured at each river section and remove all other "chr" variables
# Additionally, remove ox_sat columns, as they contain NA values
data_section <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_section.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type, -Hydropeaking_river_type, -Hydrokeaking_residual_flow_natural_near_natural, -date, -time, -time_before, -time_during, -time_after, -Category_Water_depth, -Number_Taxa, -EPT_Taxa, -ox_sat_after, -ox_sat_before, -ox_sat_during, -hydr_type_int, -hydr_int)
```
    
```{r}
### TRAINING SETS ###
# training set containing all env. variables measured at each sampling location and overall river section 
training_section <- data_section |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", # noch nicht im lab datensatz, darum wirds noch nicht eingerechnet
         Reach_Untersuchungsstelle != "VR3")

### TEST SETS ###
# test set containing all env. variables measured at each sampling location and overall river section 
test_section <- data_section |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | # fehlt noch im lab datensatz 
         Reach_Untersuchungsstelle == "VR3")
```

## Training Sets w/ coordinates
```{r}
### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With shannon index as response 
training_sec_s <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_sec_ra <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Training Sets w/o coordinates
```{r}
### PREDICTOR: ALL POSSIBLE PREDICTORS ### ----------------------------------
# With shannon index as response 
training_sec_s_c <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_sec_ra_c <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)
```

## Test Sets w/ coordinates
```{r}
### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With shannon index as response 
test_sec_s <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_sec_ra <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Test Sets w/o coordinates
```{r}
### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With shannon index as response
test_sec_s_c <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response
test_sec_ra_c <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)
```

# Boosted Regression Tree
## Hyperparameter tuning 
```{r}
# convert dataframes into spatial objects for mlr3 spatial hyperparameter tuning
### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With shannon index as response
data_sec_s_sp <-  st_as_sf(training_sec_s, coords =  c("x", "y"))
st_crs(data_sec_s_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_sec_ra_sp <-  st_as_sf(training_sec_ra, coords =  c("x", "y"))
st_crs(data_sec_ra_sp) <- "EPSG: 2056"
```

### Create Task & Learner
```{r}
### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# With shannon index as response
task_xbrt_sec_s <- mlr3spatiotempcv::as_task_regr_st(data_sec_s_sp,
  id = "section_shannon", target = "shannon")

# With rel_abundance as response
task_xbrt_sec_ra <- mlr3spatiotempcv::as_task_regr_st(data_sec_ra_sp,
  id = "section_rel_abundance", target = "rel_abundance")

### LEARNER ### ----------------------------------------------------------------
# learner for random forest valid for all models
lrn_xbrt <- lrn("regr.xgboost", predict_type = "response")
```

### Specify Search Space
```{r}
# specifying the search space for all response variables and predictors 
search_space_xbrt <- paradox::ps(
  eta = p_dbl(lower = 0.01, upper = 1.0), # learning rate
  nrounds = p_int(lower = 100, upper = 1000),
  max_depth = p_int(lower = 3, upper = 10), # tree complexity
  subsample = p_dbl(lower = 0.5, upper = 0.75) # bag fraction 
)
```

### Specify Autotuner  
```{r}
### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With shannon index as response
autotuner_xbrt_sec_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_sec_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning 
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)
```

### Train Autotuner
```{r}
# set seed to obtain the same results with each run
set.seed(0412022)

### PREDICTORS: ALL PREDICTORS ### -------------------------------------------
# With shannon index as response
autotuner_xbrt_sec_s$train(task_xbrt_sec_s)

# With rel_abundance as response
autotuner_xbrt_sec_ra$train(task_xbrt_sec_ra)
```

### Tuned Hyperparameters
```{r}
### PREDICTORS: ALL PREDICTORS ### -------------------------------------------
# With shannon index as response
autotuner_xbrt_sec_s$tuning_result

# With rel_abundance as response
autotuner_xbrt_sec_ra$tuning_result
```

# XGBOOST models 
## Specify Matrix
### Training Sets
```{r}
### PREDICTORS: ALL PREDICTORS ### ----------------------------------------
# With shannon index as response
trainx_sec_s <- model.matrix(shannon ~ ., data = training_sec_s)
trainx_sec_s_c <- model.matrix(shannon ~ ., data = training_sec_s_c)

# With rel_abundance as response
trainx_sec_ra <- model.matrix(rel_abundance ~ ., data = training_sec_ra)
trainx_sec_ra_c <- model.matrix(rel_abundance ~ ., data = training_sec_ra_c)
```

### Test Sets
```{r}
### PREDICTORS: ALL PREDICTORS ###
# With shannon index as response
testx_sec_s <- model.matrix(shannon ~ ., data = test_sec_s)
testx_sec_s_c <- model.matrix(shannon ~ ., data = test_sec_s_c)

# With rel_abundance as response
testx_sec_ra <- model.matrix(rel_abundance ~ ., data = test_sec_ra)
testx_sec_ra_c <- model.matrix(rel_abundance ~ ., data = test_sec_ra_c)
```

## XGBOOST w/ coordinates
```{r}
### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With shannon index as response 
#        eta nrounds max_depth subsample 
#1: 0.4971499     170        10 0.7408772                       
xgb_sec_s <- xgboost(data = data.matrix(trainx_sec_s[ ,-1]),
                     label = as.numeric(as.character(training_sec_s$shannon)),
                     eta = 0.4971499,
                     max_depth = 10,
                     nrounds = 170,
                     subsample = 0.7408772,
                     objective = "reg:linear")

# With rel_abundance as response 
#         eta nrounds max_depth subsample 
#1: 0.4186722     348         7 0.5187091                      
xgb_sec_ra <- xgboost(data = data.matrix(trainx_sec_ra),
                      label = as.numeric(as.character(training_sec_ra$rel_abundance)),
                     eta = 0.4186722,
                     max_depth = 7,
                     nrounds = 348,
                     subsample = 0.5187091,
                     objective = "reg:linear")
```

## XGBOOST w/o coordinates
```{r}
### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With shannon index as response 
#        eta nrounds max_depth subsample 
#1: 0.4971499     170        10 0.7408772                       
xgb_sec_s_c <- xgboost(data = data.matrix(trainx_sec_s_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_s_c$shannon)),
                     eta = 0.4971499,
                     max_depth = 10,
                     nrounds = 170,
                     subsample = 0.7408772,
                     objective = "reg:linear")

# With rel_abundance as response 
#         eta nrounds max_depth subsample 
#1: 0.4186722     348         7 0.5187091                      
xgb_sec_ra_c <- xgboost(data = data.matrix(trainx_sec_ra_c),
                      label = as.numeric(as.character(training_sec_ra_c$rel_abundance)),
                     eta = 0.4186722,
                     max_depth = 7,
                     nrounds = 348,
                     subsample = 0.5187091,
                     objective = "reg:linear")
```

# Model Evaluation 
## Variable Importance
```{r}
### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# w/ coordinates
vi_sec_s <- xgb.importance(model = xgb_sec_s) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/ coordinates")

vi_sec_ra <- xgb.importance(model = xgb_sec_ra) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/ coordinates")

# w/o coordinates
vi_sec_s_c <- xgb.importance(model = xgb_sec_s_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/o coordinates")

vi_sec_ra_c <- xgb.importance(model = xgb_sec_ra_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/o coordinates")
```

## Partial dependence plots
### Data extraction & export
```{r}
### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With shannon index as response ----------------------------------------------
### velocity 
pdp_model_v_sec_s <- pdp::partial(xgb_sec_s, pred.var = "velocity", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "velocity",
         model = "all predictors w/ coordinates",
         index = "shannon_index")
pdp_model_v_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "velocity", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_v_sec_s, "ML_Model/pdp_data/pdp_v_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_v_sec_s_c, "ML_Model/pdp_data/pdp_v_sec_s_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_s <- pdp::partial(xgb_sec_s, pred.var = "wd_m", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "wd_m",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_wd_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "wd_m", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_wd_sec_s, "ML_Model/pdp_data/pdp_wd_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_wd_sec_s_c, "ML_Model/pdp_data/pdp_wd_sec_s_c_brt.csv", row.names = FALSE)

### x / y 
pdp_model_x_sec_s <- pdp::partial(xgb_sec_s, pred.var = "x", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "x",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_y_sec_s <- pdp::partial(xgb_sec_s, pred.var = "y", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "y",
         model = "sampling w/ coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_x_sec_s, "ML_Model/pdp_data/pdp_x_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_y_sec_s, "ML_Model/pdp_data/pdp_y_sec_s_brt.csv", row.names = FALSE)

### z 
pdp_model_z_sec_s <- pdp::partial(xgb_sec_s, pred.var = "z", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "z",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_z_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "z", train = trainx_sec_s_c[,-1]) |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_z_sec_s, "ML_Model/pdp_data/pdp_z_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_z_sec_s_c, "ML_Model/pdp_data/pdp_z_sec_s_c_brt.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_s <- pdp::partial(xgb_sec_s, pred.var = "dist_w", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "dist_w",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_dist_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "dist_w", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_dist_sec_s, "ML_Model/pdp_data/pdp_dist_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_dist_sec_s_c, "ML_Model/pdp_data/pdp_dist_sec_s_c_brt.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_s <- pdp::partial(xgb_sec_s, pred.var = "cat_velocity", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_cv_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "cat_velocity", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cv_sec_s, "ML_Model/pdp_data/pdp_cv_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_cv_sec_s_c, "ML_Model/pdp_data/pdp_cv_sec_s_c_brt.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_sec_s <- pdp::partial(xgb_sec_s, pred.var = "alg_cover", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "alg_cover",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_ac_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "alg_cover", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ac_sec_s, "ML_Model/pdp_data/pdp_ac_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_ac_sec_s_c, "ML_Model/pdp_data/pdp_ac_sec_s_c_brt.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_s <- pdp::partial(xgb_sec_s, pred.var = "moos_cover", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "moos_cover",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_mc_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "moos_cover", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_mc_sec_s, "ML_Model/pdp_data/pdp_mc_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_mc_sec_s_c, "ML_Model/pdp_data/pdp_mc_sec_s_c_brt.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_s <- pdp::partial(xgb_sec_s, pred.var = "cpom_cover", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_cc_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "cpom_cover", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cc_sec_s, "ML_Model/pdp_data/pdp_cc_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_cc_sec_s_c, "ML_Model/pdp_data/pdp_cc_sec_s_c_brt.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_s <- pdp::partial(xgb_sec_s, pred.var = "clog_3_class_int", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_clog_3_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "clog_3_class_int", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_3_sec_s, "ML_Model/pdp_data/pdp_clog_3_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_clog_3_sec_s_c, "ML_Model/pdp_data/pdp_clog_3_sec_s_c_brt.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_s <- pdp::partial(xgb_sec_s, pred.var = "clog_6_class_int", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_clog_6_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "clog_6_class_int", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_6_sec_s, "ML_Model/pdp_data/pdp_clog_6_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_clog_6_sec_s_c, "ML_Model/pdp_data/pdp_clog_6_sec_s_c_brt.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_s <- pdp::partial(xgb_sec_s, pred.var = "sub_type_int", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "sub_type",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_sub_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "sub_type_int", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_sub_sec_s, "ML_Model/pdp_data/pdp_sub_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_sub_sec_s_c, "ML_Model/pdp_data/pdp_sub_sec_s_c_brt.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_s <- pdp::partial(xgb_sec_s, pred.var = "pH_before", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "pH_before",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_phb_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "pH_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "pH_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_phb_sec_s, "ML_Model/pdp_data/pdp_phb_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_phb_sec_s_c, "ML_Model/pdp_data/pdp_phb_sec_s_c_brt.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_s <- pdp::partial(xgb_sec_s, pred.var = "pH_during", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "pH_during",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_phd_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "pH_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "pH_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_phd_sec_s, "ML_Model/pdp_data/pdp_phd_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_phd_sec_s_c, "ML_Model/pdp_data/pdp_phd_sec_s_c_brt.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_s <- pdp::partial(xgb_sec_s, pred.var = "pH_after", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "pH_after",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_pha_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "pH_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "pH_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_pha_sec_s, "ML_Model/pdp_data/pdp_pha_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_pha_sec_s_c, "ML_Model/pdp_data/pdp_pha_sec_s_c_brt.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_s <- pdp::partial(xgb_sec_s, pred.var = "conduct_before", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "conduct_before",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_cb_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "conduct_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "conduct_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cb_sec_s, "ML_Model/pdp_data/pdp_cb_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_cb_sec_s_c, "ML_Model/pdp_data/pdp_cb_sec_s_c_brt.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_s <- pdp::partial(xgb_sec_s, pred.var = "conduct_during", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "conduct_during",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_cd_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "conduct_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "conduct_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cd_sec_s, "ML_Model/pdp_data/pdp_cd_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_cd_sec_s_c, "ML_Model/pdp_data/pdp_cd_sec_s_c_brt.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_s <- pdp::partial(xgb_sec_s, pred.var = "conduct_after", train = trainx_sec_s[,-1]) |>
  mutate(predictors = "conduct_after",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_ca_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "conduct_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "conduct_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ca_sec_s, "ML_Model/pdp_data/pdp_ca_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_ca_sec_s_c, "ML_Model/pdp_data/pdp_ca_sec_s_c_brt.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_s <- pdp::partial(xgb_sec_s, pred.var = "ox_before", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "ox_before",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_ob_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "ox_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "ox_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ob_sec_s, "ML_Model/pdp_data/pdp_ob_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_ob_sec_s_c, "ML_Model/pdp_data/pdp_ob_sec_s_c_brt.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_s <- pdp::partial(xgb_sec_s, pred.var = "ox_during", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "ox_during",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_od_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "ox_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "ox_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_od_sec_s, "ML_Model/pdp_data/pdp_od_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_od_sec_s_c, "ML_Model/pdp_data/pdp_od_sec_s_c_brt.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_s <- pdp::partial(xgb_sec_s, pred.var = "ox_after", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "ox_after",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_oa_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "ox_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "ox_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_oa_sec_s, "ML_Model/pdp_data/pdp_oa_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_oa_sec_s_c, "ML_Model/pdp_data/pdp_oa_sec_s_c_brt.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_s <- pdp::partial(xgb_sec_s, pred.var = "turb_before", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "turb_before",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_tb_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "turb_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "turb_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_tb_sec_s, "ML_Model/pdp_data/pdp_tb_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_tb_sec_s_c, "ML_Model/pdp_data/pdp_tb_sec_s_c_brt.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_s <- pdp::partial(xgb_sec_s, pred.var = "turb_during", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "turb_during",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_td_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "turb_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "turb_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_td_sec_s, "ML_Model/pdp_data/pdp_td_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_td_sec_s_c, "ML_Model/pdp_data/pdp_td_sec_s_c_brt.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_s <- pdp::partial(xgb_sec_s, pred.var = "turb_after", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "turb_after",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_ta_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "turb_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "turb_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ta_sec_s, "ML_Model/pdp_data/pdp_ta_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_ta_sec_s_c, "ML_Model/pdp_data/pdp_ta_sec_s_c_brt.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_s <- pdp::partial(xgb_sec_s, pred.var = "temp_before", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "temp_before",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_teb_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "temp_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "temp_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_teb_sec_s, "ML_Model/pdp_data/pdp_teb_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_teb_sec_s_c, "ML_Model/pdp_data/pdp_teb_sec_s_c_brt.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_s <- pdp::partial(xgb_sec_s, pred.var = "temp_during", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "temp_during",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_ted_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "temp_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "temp_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ted_sec_s, "ML_Model/pdp_data/pdp_ted_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_ted_sec_s_c, "ML_Model/pdp_data/pdp_ted_sec_s_c_brt.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_s <- pdp::partial(xgb_sec_s, pred.var = "temp_after", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "temp_after",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_tea_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "temp_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "temp_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_tea_sec_s, "ML_Model/pdp_data/pdp_tea_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_tea_sec_s_c, "ML_Model/pdp_data/pdp_tea_sec_s_c_brt.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_s <- pdp::partial(xgb_sec_s, pred.var = "q_before", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "q_before",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_qb_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "q_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "q_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_qb_sec_s, "ML_Model/pdp_data/pdp_qb_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_qb_sec_s_c, "ML_Model/pdp_data/pdp_qb_sec_s_c_brt.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_s <- pdp::partial(xgb_sec_s, pred.var = "q_during", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "q_during",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_qd_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "q_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "q_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_qd_sec_s, "ML_Model/pdp_data/pdp_qd_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_qd_sec_s_c, "ML_Model/pdp_data/pdp_qd_sec_s_c_brt.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_s <- pdp::partial(xgb_sec_s, pred.var = "q_after", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "q_after",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_qa_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "q_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "q_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_qa_sec_s, "ML_Model/pdp_data/pdp_qa_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_qa_sec_s_c, "ML_Model/pdp_data/pdp_qa_sec_s_c_brt.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_s <- pdp::partial(xgb_sec_s, pred.var = "gaug_before", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "gaug_before",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_gb_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "gaug_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "gaug_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_gb_sec_s, "ML_Model/pdp_data/pdp_gb_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_gb_sec_s_c, "ML_Model/pdp_data/pdp_gb_sec_s_c_brt.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_s <- pdp::partial(xgb_sec_s, pred.var = "gaug_during", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "gaug_during",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_gd_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "gaug_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "gaug_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_gd_sec_s, "ML_Model/pdp_data/pdp_gd_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_gd_sec_s_c, "ML_Model/pdp_data/pdp_gd_sec_s_c_brt.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_s <- pdp::partial(xgb_sec_s, pred.var = "gaug_after", train = trainx_sec_s[ ,-1]) |>
  mutate(predictors = "gaug_after",
         model = "sampling w/ coordinates",
         index = "shannon_index")
pdp_model_ga_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "gaug_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "gaug_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ga_sec_s, "ML_Model/pdp_data/pdp_ga_sec_s_brt.csv", row.names = FALSE)
write.csv(pdp_model_ga_sec_s_c, "ML_Model/pdp_data/pdp_ga_sec_s_c_brt.csv", row.names = FALSE)

# With rel_abundance as response ----------------------------------------------
### velocity 
pdp_model_v_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "velocity", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "velocity",
         model = "all predictors w/ coordinates",
         index = "rel_abundance")
pdp_model_v_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "velocity", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_sec_ra, "ML_Model/pdp_data/pdp_v_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_v_sec_ra_c, "ML_Model/pdp_data/pdp_v_sec_ra_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "wd_m", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "wd_m",
         model = "all predictors w/ coordinates",
         index = "rel_abundance")
pdp_model_wd_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "wd_m", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "wd_m",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_wd_sec_ra, "ML_Model/pdp_data/pdp_wd_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_wd_sec_ra_c, "ML_Model/pdp_data/pdp_wd_sec_ra_c_brt.csv", row.names = FALSE)

### x / y 
pdp_model_x_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "x", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "x",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_y_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "y", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "y",
         model = "sampling w/ coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_x_sec_ra, "ML_Model/pdp_data/pdp_x_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_y_sec_ra, "ML_Model/pdp_data/pdp_y_sec_ra_brt.csv", row.names = FALSE)

### z 
pdp_model_z_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "z", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "z",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_z_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "z", train = trainx_sec_ra_c[,-1]) |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_z_sec_ra, "ML_Model/pdp_data/pdp_z_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_z_sec_ra_c, "ML_Model/pdp_data/pdp_z_sec_ra_c_brt.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "dist_w", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "dist_w",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_dist_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "dist_w", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_dist_sec_ra, "ML_Model/pdp_data/pdp_dist_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_dist_sec_ra_c, "ML_Model/pdp_data/pdp_dist_sec_ra_c_brt.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "cat_velocity", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_cv_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "cat_velocity", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cv_sec_ra, "ML_Model/pdp_data/pdp_cv_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_cv_sec_ra_c, "ML_Model/pdp_data/pdp_cv_sec_ra_c_brt.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "alg_cover", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "alg_cover",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_ac_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "alg_cover", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ac_sec_ra, "ML_Model/pdp_data/pdp_ac_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_ac_sec_ra_c, "ML_Model/pdp_data/pdp_ac_sec_ra_c_brt.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "moos_cover", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "moos_cover",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_mc_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "moos_cover", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_mc_sec_ra, "ML_Model/pdp_data/pdp_mc_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_mc_sec_ra_c, "ML_Model/pdp_data/pdp_mc_sec_ra_c_brt.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "cpom_cover", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_cc_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "cpom_cover", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cc_sec_ra, "ML_Model/pdp_data/pdp_cc_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_cc_sec_ra_c, "ML_Model/pdp_data/pdp_cc_sec_ra_c_brt.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "clog_3_class_int", train = trainx_sec_ra[,-1]) |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_clog_3_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "clog_3_class_int", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_3_sec_ra, "ML_Model/pdp_data/pdp_clog_3_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_clog_3_sec_ra_c, "ML_Model/pdp_data/pdp_clog_3_sec_ra_c_brt.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "clog_6_class_int", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_clog_6_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "clog_6_class_int", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_6_sec_ra, "ML_Model/pdp_data/pdp_clog_6_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_clog_6_sec_ra_c, "ML_Model/pdp_data/pdp_clog_6_sec_ra_c_brt.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "sub_type_int", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "sub_type",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_sub_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "sub_type_int", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_sub_sec_ra, "ML_Model/pdp_data/pdp_sub_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_sub_sec_ra_c, "ML_Model/pdp_data/pdp_sub_sec_ra_c_brt.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "pH_before", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "pH_before",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_phb_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "pH_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "pH_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_phb_sec_ra, "ML_Model/pdp_data/pdp_phb_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_phb_sec_ra_c, "ML_Model/pdp_data/pdp_phb_sec_ra_c_brt.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "pH_during", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "pH_during",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_phd_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "pH_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "pH_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_phd_sec_ra, "ML_Model/pdp_data/pdp_phd_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_phd_sec_ra_c, "ML_Model/pdp_data/pdp_phd_sec_ra_c_brt.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "pH_after", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "pH_after",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_pha_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "pH_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "pH_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_pha_sec_ra, "ML_Model/pdp_data/pdp_pha_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_pha_sec_ra_c, "ML_Model/pdp_data/pdp_pha_sec_ra_c_brt.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "conduct_before", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "conduct_before",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_cb_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "conduct_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "conduct_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cb_sec_ra, "ML_Model/pdp_data/pdp_cb_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_cb_sec_ra_c, "ML_Model/pdp_data/pdp_cb_sec_ra_c_brt.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "conduct_during", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "conduct_during",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_cd_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "conduct_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "conduct_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cd_sec_ra, "ML_Model/pdp_data/pdp_cd_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_cd_sec_ra_c, "ML_Model/pdp_data/pdp_cd_sec_ra_c_brt.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "conduct_after", train = trainx_sec_ra[,-1]) |>
  mutate(predictors = "conduct_after",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_ca_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "conduct_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "conduct_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ca_sec_ra, "ML_Model/pdp_data/pdp_ca_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_ca_sec_ra_c, "ML_Model/pdp_data/pdp_ca_sec_ra_c_brt.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "ox_before", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "ox_before",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_ob_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "ox_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "ox_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ob_sec_ra, "ML_Model/pdp_data/pdp_ob_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_ob_sec_ra_c, "ML_Model/pdp_data/pdp_ob_sec_ra_c_brt.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "ox_during", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "ox_during",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_od_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "ox_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "ox_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_od_sec_ra, "ML_Model/pdp_data/pdp_od_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_od_sec_ra_c, "ML_Model/pdp_data/pdp_od_sec_ra_c_brt.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "ox_after", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "ox_after",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_oa_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "ox_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "ox_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_oa_sec_ra, "ML_Model/pdp_data/pdp_oa_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_oa_sec_ra_c, "ML_Model/pdp_data/pdp_oa_sec_ra_c_brt.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "turb_before", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "turb_before",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_tb_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "turb_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "turb_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_tb_sec_ra, "ML_Model/pdp_data/pdp_tb_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_tb_sec_ra_c, "ML_Model/pdp_data/pdp_tb_sec_ra_c_brt.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "turb_during", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "turb_during",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_td_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "turb_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "turb_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_td_sec_ra, "ML_Model/pdp_data/pdp_td_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_td_sec_ra_c, "ML_Model/pdp_data/pdp_td_sec_ra_c_brt.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "turb_after", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "turb_after",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_ta_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "turb_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "turb_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ta_sec_ra, "ML_Model/pdp_data/pdp_ta_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_ta_sec_ra_c, "ML_Model/pdp_data/pdp_ta_sec_ra_c_brt.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "temp_before", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "temp_before",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_teb_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "temp_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "temp_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_teb_sec_ra, "ML_Model/pdp_data/pdp_teb_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_teb_sec_ra_c, "ML_Model/pdp_data/pdp_teb_sec_ra_c_brt.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "temp_during", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "temp_during",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_ted_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "temp_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "temp_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ted_sec_ra, "ML_Model/pdp_data/pdp_ted_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_ted_sec_ra_c, "ML_Model/pdp_data/pdp_ted_sec_ra_c_brt.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "temp_after", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "temp_after",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_tea_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "temp_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "temp_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_tea_sec_ra, "ML_Model/pdp_data/pdp_tea_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_tea_sec_ra_c, "ML_Model/pdp_data/pdp_tea_sec_ra_c_brt.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "q_before", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "q_before",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_qb_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "q_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "q_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_qb_sec_ra, "ML_Model/pdp_data/pdp_qb_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_qb_sec_ra_c, "ML_Model/pdp_data/pdp_qb_sec_ra_c_brt.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "q_during", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "q_during",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_qd_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "q_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "q_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_qd_sec_ra, "ML_Model/pdp_data/pdp_qd_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_qd_sec_ra_c, "ML_Model/pdp_data/pdp_qd_sec_ra_c_brt.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "q_after", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "q_after",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_qa_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "q_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "q_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_qa_sec_ra, "ML_Model/pdp_data/pdp_qa_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_qa_sec_ra_c, "ML_Model/pdp_data/pdp_qa_sec_ra_c_brt.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "gaug_before", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "gaug_before",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_gb_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "gaug_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "gaug_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_gb_sec_ra, "ML_Model/pdp_data/pdp_gb_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_gb_sec_ra_c, "ML_Model/pdp_data/pdp_gb_sec_ra_c_brt.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "gaug_during", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "gaug_during",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_gd_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "gaug_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "gaug_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_gd_sec_ra, "ML_Model/pdp_data/pdp_gd_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_gd_sec_ra_c, "ML_Model/pdp_data/pdp_gd_sec_ra_c_brt.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_ra <- pdp::partial(xgb_sec_ra, pred.var = "gaug_after", train = trainx_sec_ra[ ,-1]) |>
  mutate(predictors = "gaug_after",
         model = "sampling w/ coordinates",
         index = "rel_abundance")
pdp_model_ga_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "gaug_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "gaug_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ga_sec_ra, "ML_Model/pdp_data/pdp_ga_sec_ra_brt.csv", row.names = FALSE)
write.csv(pdp_model_ga_sec_ra_c, "ML_Model/pdp_data/pdp_ga_sec_ra_c_brt.csv", row.names = FALSE)
```