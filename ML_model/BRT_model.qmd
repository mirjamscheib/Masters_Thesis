---
title: "BRT_model"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
pkgCheck("Fgmutils") # for bias calculation (bias() function)
pkgCheck("hydroGOF") # for NSE calculation with NSE() function 
```

# Load & prepare data 
```{r}
# Load data containing velocity as predictor variable 
data_v <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_v.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing velocity and wd as predictors 
data_wd <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_wd_v.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing all variables measured at each sampling locations and remove all other "chr" variables
data_sampling <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_sampling.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type) |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing all variables measured at each river section and remove all other "chr" variables
# Additionally, remove ox_sat columns, as they contain NA values
data_section <- read_delim("Pre_Processing/abiotic_mi_sampling/ml_sel_var_2.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)|>
  na.omit()

# load data containing selected variables 
data_var <- read_delim("Pre_Processing/abiotic_mi_sampling/ml_sel_var_2.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)|>
  na.omit() |>
  dplyr::select(Reach_Untersuchungsstelle, z, x, y, velocity, wd_m, k_index, shannon, abundance, rel_abundance, ecomorph_class, biogeo_int, mean_diff_nitrogen, mean_diff_phosphor) 
```
    
```{r}
### TRAINING SETS ###
# w/o hydr. models "GL1", "GL2", "L2", "M1", "S1", "S2", "TH4", "VR3"
# training set containing velocity 
training_v <- data_v |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing velocity + wd
training_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location 
training_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location and overall river section 
training_section <- data_section |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all variables selected 
training_var <- data_var |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4",
         Reach_Untersuchungsstelle != "VR3")

### TEST SETS ###
# test set containing velocity 
test_v <- data_v |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing velocity + wd
test_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location 
test_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location and overall river section 
test_section <- data_section |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# training set containing all variables selected 
test_var <- data_var |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")
```

## Training Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response 
training_v_k <- training_v |>
  dplyr::select(k_index, velocity, x, y)

# With shannon index as response 
training_v_s <- training_v |>
  dplyr::select(shannon, velocity, x, y)

# With abundance as response 
training_v_a <- training_v |>
  dplyr::select(abundance, velocity, x, y)

# With relative abundance as response  
training_v_ra <- training_v |>
  dplyr::select(rel_abundance, velocity, x, y)

### PREDICTOR: VELOCITY AND WD ### ---------------------------------------------
# With k_index as response 
training_wd_k <- training_wd |>
  dplyr::select(k_index, velocity, wd_m, x, y)

# With shannon index as response 
training_wd_s <- training_wd |>
  dplyr::select(shannon, velocity, wd_m, x, y)

# With abundance index as response 
training_wd_a <- training_wd |>
  dplyr::select(abundance, velocity, wd_m, x, y)

# With relative abundance index as response 
training_wd_ra <- training_wd |>
  dplyr::select(rel_abundance, velocity, wd_m, x, y)

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response 
training_samp_k <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_samp_a <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_samp_ra <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response 
training_sec_k <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_sec_a <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_sec_ra <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------------
# With k_index as response 
training_var_k <- training_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_var_s <- training_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_var_a <- training_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_var_ra <- training_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Training Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response 
training_v_k_c <- training_v |>
  dplyr::select(k_index, velocity)

# With shannon index as response
training_v_s_c <- training_v |>
  dplyr::select(shannon, velocity)

# With abundance as response
training_v_a_c <- training_v |>
  dplyr::select(abundance, velocity)

# With rel_abundance as response
training_v_ra_c <- training_v |>
  dplyr::select(rel_abundance, velocity)

### PREDICTOR: VELOCITY AND WD ### ----------------------------------
# With k_index as response 
training_wd_k_c <- training_wd |>
  dplyr::select(k_index, velocity, wd_m)

# With shannon index as response 
training_wd_s_c <- training_wd |>
  dplyr::select(shannon, velocity, wd_m)

# With abundance as response 
training_wd_a_c <- training_wd |>
  dplyr::select(abundance, velocity, wd_m)

# With rel_abundance as response 
training_wd_ra_c <- training_wd |>
  dplyr::select(rel_abundance, velocity, wd_m)

### PREDICTOR: SAMPLING LOCATIONS ### --------------------------------
# With k_index as response 
training_samp_k_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s_c <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_samp_a_c <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_samp_ra_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### ----------------------------------
# With k_index as response 
training_sec_k_c <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s_c <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_sec_a_c <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_sec_ra_c <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------------
# With k_index as response 
training_var_k_c <- training_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With shannon index as response 
training_var_s_c <- training_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With abundance index as response 
training_var_a_c <- training_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With relative abundance index as response 
training_var_ra_c <- training_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle, -x, -y)
```

## Test Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ------------------------------------------
# With k_index as response
test_v_k <- test_v |>
  dplyr::select(k_index, velocity, x, y) 

# With shannon index as response
test_v_s <- test_v |>
  dplyr::select(shannon, velocity, x, y) 

# With abundance as response 
test_v_a <- test_v |>
  dplyr::select(abundance, velocity, x, y) 

# With relative abundance as response 
test_v_ra <- test_v |>
  dplyr::select(rel_abundance, velocity, x, y)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k <- test_wd |>
  dplyr::select(k_index, velocity, wd_m, x, y) 

# With shannon index as response 
test_wd_s <- test_wd |>
  dplyr::select(shannon, velocity, wd_m, x, y) 

# With abundance as response 
test_wd_a <- test_wd |>
  dplyr::select(abundance, velocity, wd_m, x, y)

# With relative abundance as response 
test_wd_ra <- test_wd |>
  dplyr::select(rel_abundance, velocity, wd_m, x, y)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response
test_samp_a <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_samp_ra <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
test_sec_s <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
test_sec_a <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_sec_ra <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------
# With k_index as response 
test_var_k <- test_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
test_var_s <- test_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
test_var_a <- test_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_var_ra <- test_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Test Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response
test_v_k_c <- test_v |>
  dplyr::select(k_index, velocity)

# With shannon index as response
test_v_s_c <- test_v |>
  dplyr::select(shannon, velocity) 

# With abundance as response
test_v_a_c <- test_v |>
  dplyr::select(abundance, velocity) 

# With rel_abundance as response
test_v_ra_c <- test_v |>
  dplyr::select(rel_abundance, velocity)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k_c <- test_wd |>
  dplyr::select(k_index, velocity, wd_m) 

# With shannon index as response 
test_wd_s_c <- test_wd |>
  dplyr::select(shannon, velocity, wd_m)

# With abundance as response 
test_wd_a_c <- test_wd |>
  dplyr::select(abundance, velocity, wd_m)

# With rel_abundance as response 
test_wd_ra_c <- test_wd |>
  dplyr::select(rel_abundance, velocity, wd_m)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s_c <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
test_samp_a_c <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
test_samp_ra_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k_c <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response
test_sec_s_c <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response
test_sec_a_c <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response
test_sec_ra_c <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------
# With k_index as response 
test_var_k_c <- test_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With shannon index as response 
test_var_s_c <- test_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With abundance index as response 
test_var_a_c <- test_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With relative abundance index as response 
test_var_ra_c <- test_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle, -x, -y)
```

# Boosted Regression Tree
## Hyperparameter tuning 
```{r}
# convert dataframes into spatial objects for mlr3 spatial hyperparameter tuning
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
data_v_k_sp <-  st_as_sf(training_v_k, coords =  c("x", "y"))
st_crs(data_v_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_v_s_sp <-  st_as_sf(training_v_s, coords =  c("x", "y"))
st_crs(data_v_s_sp) <- "EPSG: 2056"

# With abundance as response
data_v_a_sp <-  st_as_sf(training_v_a, coords =  c("x", "y"))
st_crs(data_v_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_v_ra_sp <-  st_as_sf(training_v_ra, coords =  c("x", "y"))
st_crs(data_v_ra_sp) <- "EPSG: 2056"

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# With k_index as response
data_wd_k_sp <-  st_as_sf(training_wd_k, coords =  c("x", "y"))
st_crs(data_wd_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_wd_s_sp <-  st_as_sf(training_wd_s, coords =  c("x", "y"))
st_crs(data_wd_s_sp) <- "EPSG: 2056"

# With abundance as response
data_wd_a_sp <-  st_as_sf(training_wd_a, coords =  c("x", "y"))
st_crs(data_wd_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_wd_ra_sp <-  st_as_sf(training_wd_ra, coords =  c("x", "y"))
st_crs(data_wd_ra_sp) <- "EPSG: 2056"

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response
data_samp_k_sp <-  st_as_sf(training_samp_k, coords =  c("x", "y"))
st_crs(data_samp_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_samp_s_sp <-  st_as_sf(training_samp_s, coords =  c("x", "y"))
st_crs(data_samp_s_sp) <- "EPSG: 2056"

# With abundance as response
data_samp_a_sp <-  st_as_sf(training_samp_a, coords =  c("x", "y"))
st_crs(data_samp_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_samp_ra_sp <-  st_as_sf(training_samp_ra, coords =  c("x", "y"))
st_crs(data_samp_ra_sp) <- "EPSG: 2056"

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response
data_sec_k_sp <-  st_as_sf(training_sec_k, coords =  c("x", "y"))
st_crs(data_sec_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_sec_s_sp <-  st_as_sf(training_sec_s, coords =  c("x", "y"))
st_crs(data_sec_s_sp) <- "EPSG: 2056"

# With abundance as response
data_sec_a_sp <-  st_as_sf(training_sec_a, coords =  c("x", "y"))
st_crs(data_sec_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_sec_ra_sp <-  st_as_sf(training_sec_ra, coords =  c("x", "y"))
st_crs(data_sec_ra_sp) <- "EPSG: 2056"

### PREDICTOR: SELECTED VARIABLES ### -------------------------------------
# With k_index as response
data_var_k_sp <-  st_as_sf(training_var_k, coords =  c("x", "y"))
st_crs(data_var_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_var_s_sp <-  st_as_sf(training_var_s, coords =  c("x", "y"))
st_crs(data_var_s_sp) <- "EPSG: 2056"

# With abundance as response
data_var_a_sp <-  st_as_sf(training_var_a, coords =  c("x", "y"))
st_crs(data_var_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_var_ra_sp <-  st_as_sf(training_var_ra, coords =  c("x", "y"))
st_crs(data_var_ra_sp) <- "EPSG: 2056"
```

### Create Task & Learner
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
task_xbrt_v_k <- mlr3spatiotempcv::as_task_regr_st(data_v_k_sp,
  id = "velocity_k_index", target = "k_index")

# With shannon index as response
task_xbrt_v_s <- mlr3spatiotempcv::as_task_regr_st(data_v_s_sp,
  id = "velocity_shannon", target = "shannon")

# With abundance as response 
task_xbrt_v_a <- mlr3spatiotempcv::as_task_regr_st(data_v_a_sp,
  id = "velocity_abundance", target = "abundance")

# With rel_abundance as response 
task_xbrt_v_ra <- mlr3spatiotempcv::as_task_regr_st(data_v_ra_sp,
  id = "velocity_rel_abundance", target = "rel_abundance")

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# With k_index as response
task_xbrt_wd_k <- mlr3spatiotempcv::as_task_regr_st(data_wd_k_sp,
  id = "water_depth_k_index", target = "k_index")

# With shannon index as response
task_xbrt_wd_s <- mlr3spatiotempcv::as_task_regr_st(data_wd_s_sp,
  id = "water_depth_shannon", target = "shannon")

# With abundance as response
task_xbrt_wd_a <- mlr3spatiotempcv::as_task_regr_st(data_wd_a_sp,
  id = "water_depth_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_wd_ra <- mlr3spatiotempcv::as_task_regr_st(data_wd_ra_sp,
  id = "water_depth_rel_abundance", target = "rel_abundance")

### PREDICTORS: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response
task_xbrt_samp_k <- mlr3spatiotempcv::as_task_regr_st(data_samp_k_sp,
  id = "sampling_k_index", target = "k_index")

# With shannon index as response
task_xbrt_samp_s <- mlr3spatiotempcv::as_task_regr_st(data_samp_s_sp,
  id = "sampling_shannon", target = "shannon")

# With abundance as response
task_xbrt_samp_a <- mlr3spatiotempcv::as_task_regr_st(data_samp_a_sp,
  id = "sampling_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_samp_ra <- mlr3spatiotempcv::as_task_regr_st(data_samp_ra_sp,
  id = "sampling_rel_abundance", target = "rel_abundance")

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# With k_index as response
task_xbrt_sec_k <- mlr3spatiotempcv::as_task_regr_st(data_sec_k_sp,
  id = "section_k_index", target = "k_index")

# With shannon index as response
task_xbrt_sec_s <- mlr3spatiotempcv::as_task_regr_st(data_sec_s_sp,
  id = "section_shannon", target = "shannon")

# With abundance as response
task_xbrt_sec_a <- mlr3spatiotempcv::as_task_regr_st(data_sec_a_sp,
  id = "section_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_sec_ra <- mlr3spatiotempcv::as_task_regr_st(data_sec_ra_sp,
  id = "section_rel_abundance", target = "rel_abundance")

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
task_xbrt_var_k <- mlr3spatiotempcv::as_task_regr_st(data_var_k_sp,
  id = "var_k_index", target = "k_index")

# With shannon index as response
task_xbrt_var_s <- mlr3spatiotempcv::as_task_regr_st(data_var_s_sp,
  id = "var_shannon", target = "shannon")

# With abundance as response
task_xbrt_var_a <- mlr3spatiotempcv::as_task_regr_st(data_var_a_sp,
  id = "var_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_var_ra <- mlr3spatiotempcv::as_task_regr_st(data_var_ra_sp,
  id = "var_rel_abundance", target = "rel_abundance")

### LEARNER ### ----------------------------------------------------------------
# learner for random forest valid for all models
lrn_xbrt <- lrn("regr.xgboost", predict_type = "response")
```

### Specify Search Space
```{r}
# specifying the search space for all response variables and predictors 
search_space_xbrt <- paradox::ps(
  eta = p_dbl(lower = 0.0001, upper = 1.0), # learning rate
  nrounds = p_int(lower = 0, upper = 1000), # max. number of iterations
  max_depth = p_int(lower = 0, upper = 10000), # tree complexity
  subsample = p_dbl(lower = 0.5, upper = 0.75) # bag fraction 
)
```

### Specify Autotuner  
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
autotuner_xbrt_v_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_v_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_v_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_v_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
autotuner_xbrt_wd_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_wd_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_wd_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_wd_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
autotuner_xbrt_samp_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_samp_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_samp_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_samp_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
autotuner_xbrt_sec_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_sec_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_sec_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_sec_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning 
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
autotuner_xbrt_var_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_var_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_var_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_var_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning 
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)
```

### Train Autotuner
```{r}
# set seed to obtain the same results with each run
set.seed(0412022)

### PREDICTOR: VELOCITY ### --------------------------------------------------
# With k_index as response
autotuner_xbrt_v_k$train(task_xbrt_v_k)

# With shannon index as response
autotuner_xbrt_v_s$train(task_xbrt_v_s)

# With abundance as response
autotuner_xbrt_v_a$train(task_xbrt_v_a)

# With rel_abundance as response
autotuner_xbrt_v_ra$train(task_xbrt_v_ra)

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response
autotuner_xbrt_wd_k$train(task_xbrt_wd_k)

# With shannon index as response
autotuner_xbrt_wd_s$train(task_xbrt_wd_s)

# With abundance as response
autotuner_xbrt_wd_a$train(task_xbrt_wd_a)

# With rel_abundance as response
autotuner_xbrt_wd_ra$train(task_xbrt_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response
autotuner_xbrt_samp_k$train(task_xbrt_samp_k)

# With shannon index as response
autotuner_xbrt_samp_s$train(task_xbrt_samp_s)

# With abundance as response
autotuner_xbrt_samp_a$train(task_xbrt_samp_a)

# With rel_abundance as response
autotuner_xbrt_samp_ra$train(task_xbrt_samp_ra)

### PREDICTORS: ALL PREDICTORS ### -------------------------------------------
# With k_index as response
autotuner_xbrt_sec_k$train(task_xbrt_sec_k)

# With shannon index as response
autotuner_xbrt_sec_s$train(task_xbrt_sec_s)

# With abundance as response
autotuner_xbrt_sec_a$train(task_xbrt_sec_a)

# With rel_abundance as response
autotuner_xbrt_sec_ra$train(task_xbrt_sec_ra)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
autotuner_xbrt_var_k$train(task_xbrt_var_k)

# With shannon index as response
autotuner_xbrt_var_s$train(task_xbrt_var_s)

# With abundance as response
autotuner_xbrt_var_a$train(task_xbrt_var_a)

# With rel_abundance as response
autotuner_xbrt_var_ra$train(task_xbrt_var_ra)
```

### Tuned Hyperparameters
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
autotuner_xbrt_v_k$tuning_result

# With shannon index as response
autotuner_xbrt_v_s$tuning_result

# With abundance as response
autotuner_xbrt_v_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_v_ra$tuning_result

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
autotuner_xbrt_wd_k$tuning_result

# With shannon index as response
autotuner_xbrt_wd_s$tuning_result

# With abundance as response
autotuner_xbrt_wd_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_wd_ra$tuning_result

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
autotuner_xbrt_samp_k$tuning_result

# With shannon index as response
autotuner_xbrt_samp_s$tuning_result

# With abundance as response 
autotuner_xbrt_samp_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_samp_ra$tuning_result

### PREDICTORS: ALL PREDICTORS ### -------------------------------------------
# With k_index as response
autotuner_xbrt_sec_k$tuning_result

# With shannon index as response
autotuner_xbrt_sec_s$tuning_result

# With abundance as response
autotuner_xbrt_sec_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_sec_ra$tuning_result

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
autotuner_xbrt_var_k$tuning_result

# With shannon index as response
autotuner_xbrt_var_s$tuning_result

# With abundance as response
autotuner_xbrt_var_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_var_ra$tuning_result
```

# XGBOOST models 
## Specify Matrix
### Training Sets
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
trainx_v_k_c <- model.matrix(k_index ~ ., data = training_v_k_c)
trainx_v_k_c <- as.matrix(trainx_v_k_c[ ,-1])

# With shannon index as response
trainx_v_s_c <- model.matrix(shannon ~ ., data = training_v_s_c)
trainx_v_s_c <- as.matrix(trainx_v_s_c[ ,-1])

# With abundance as response 
trainx_v_a_c <- model.matrix(abundance ~ ., data = training_v_a_c)
trainx_v_a_c <- as.matrix(trainx_v_a_c[ ,-1])

# With rel_abundance as response 
trainx_v_ra_c <- model.matrix(rel_abundance ~ ., data = training_v_ra_c)
trainx_v_ra_c <- as.matrix(trainx_v_ra_c[ ,-1])

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response
trainx_wd_k_c <- model.matrix(k_index ~ ., data = training_wd_k_c)

# With shannon index as response
trainx_wd_s_c <- model.matrix(shannon ~ ., data = training_wd_s_c)

# With abundance as response
trainx_wd_a_c <- model.matrix(abundance ~ ., data = training_wd_a_c)

# With rel_abundance as response
trainx_wd_ra_c <- model.matrix(rel_abundance ~ ., data = training_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
trainx_samp_k_c <- model.matrix(k_index ~ ., data = training_samp_k_c)

# With shannon index as response
trainx_samp_s_c <- model.matrix(shannon ~ ., data = training_samp_s_c)

# With abundance as response
trainx_samp_a_c <- model.matrix(abundance ~ ., data = training_samp_a_c)

# With rel_abundance as response
trainx_samp_ra_c <- model.matrix(rel_abundance ~ ., data = training_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### ----------------------------------------
# With k_index as response
trainx_sec_k_c <- model.matrix(k_index ~ ., data = training_sec_k_c)

# With shannon index as response
trainx_sec_s_c <- model.matrix(shannon ~ ., data = training_sec_s_c)

# With abundance as response
trainx_sec_a_c <- model.matrix(abundance ~ ., data = training_sec_a_c)

# With rel_abundance as response
trainx_sec_ra_c <- model.matrix(rel_abundance ~ ., data = training_sec_ra_c)

### PREDICTORS: SELECTED VARIABLES ### ---------------------------------------
# With k_index as response
trainx_var_k_c <- model.matrix(k_index ~ ., data = training_var_k_c)

# With shannon index as response
trainx_var_s_c <- model.matrix(shannon ~ ., data = training_var_s_c)

# With abundance as response
trainx_var_a_c <- model.matrix(abundance ~ ., data = training_var_a_c)

# With rel_abundance as response
trainx_var_ra_c <- model.matrix(rel_abundance ~ ., data = training_var_ra_c)
```

### Test Sets
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
testx_v_k_c <- model.matrix(k_index ~ ., data = test_v_k_c)
testx_v_k_c <- as.matrix(testx_v_k_c[ ,-1])

# With shannon index as response
testx_v_s_c <- model.matrix(shannon ~ ., data = test_v_s_c)
testx_v_s_c <- as.matrix(testx_v_s_c[ ,-1])

# With abundance as response
testx_v_a_c <- model.matrix(abundance ~ ., data = test_v_a_c)
testx_v_a_c <- as.matrix(testx_v_a_c[ ,-1])

# With rel_abundance as response
testx_v_ra_c <- model.matrix(rel_abundance ~ ., data = test_v_ra_c)
testx_v_ra_c <- as.matrix(testx_v_ra_c[ ,-1])

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
testx_wd_k_c <- model.matrix(k_index ~ ., data = test_wd_k_c)

# With shannon index as response
testx_wd_s_c <- model.matrix(shannon ~ ., data = test_wd_s_c)

# With abundance as response
testx_wd_a_c <- model.matrix(abundance ~ ., data = test_wd_a_c)

# With rel_abundance as response
testx_wd_ra_c <- model.matrix(rel_abundance ~ ., data = test_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
testx_samp_k_c <- model.matrix(k_index ~ ., data = test_samp_k_c)

# With shannon index as response
testx_samp_s_c <- model.matrix(shannon ~ ., data = test_samp_s_c)

# With abundance as response
testx_samp_a_c <- model.matrix(abundance ~ ., data = test_samp_a_c)

# With rel_abundance as response
testx_samp_ra_c <- model.matrix(rel_abundance ~ ., data = test_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### ------------------------------------------
# With k_index as response
testx_sec_k_c <- model.matrix(k_index ~ ., data = test_sec_k_c)

# With shannon index as response
testx_sec_s_c <- model.matrix(shannon ~ ., data = test_sec_s_c)

# With abundance as response
testx_sec_a_c <- model.matrix(abundance ~ ., data = test_sec_a_c)

# With rel_abundance as response
testx_sec_ra_c <- model.matrix(rel_abundance ~ ., data = test_sec_ra_c)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
testx_var_k_c <- model.matrix(k_index ~ ., data = test_var_k_c)

# With shannon index as response
testx_var_s_c <- model.matrix(shannon ~ ., data = test_var_s_c)

# With abundance as response
testx_var_a_c <- model.matrix(abundance ~ ., data = test_var_a_c)

# With rel_abundance as response
testx_var_ra_c <- model.matrix(rel_abundance ~ ., data = test_var_ra_c)
```

## XGBOOST w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
#          eta nrounds max_depth subsample 
#1: 0.008569621     914       687 0.6312782
xgb_v_k_c <- xgboost(data = data.matrix(trainx_v_k_c),
                     label = as.numeric(as.character(training_v_k_c$k_index)),
                     eta = 0.008569621,
                     nrounds = 914,
                     max_depth = 687,
                     subsample = 0.6312782,
                     objective = "reg:linear")

# With shannon index as response
#         eta nrounds max_depth subsample
#1: 0.2352155      23      6284 0.6589628
xgb_v_s_c <- xgboost(data = data.matrix(trainx_v_s_c),
                     label = as.numeric(as.character(training_v_s_c$shannon)),
                     eta = 0.2352155,
                     nrounds = 23,
                     max_depth = 6284,
                     subsample = 0.6589628,
                     objective = "reg:linear")

# With abundance as response
#         eta nrounds max_depth subsample
#1: 0.2734048    1000      1587 0.5312874
xgb_v_a_c <- xgboost(data = data.matrix(trainx_v_a_c),
                     label = as.numeric(as.character(training_v_a_c$abundance)),
                     eta = 0.2734048,
                     nrounds = 1000,
                     max_depth = 1587,
                     subsample = 0.5312874,
                     objective = "reg:linear")

# With rel_abundance as response
#          eta nrounds max_depth subsample 
#1: 0.04511723      41      1208 0.5374118 
xgb_v_ra_c <- xgboost(data = data.matrix(trainx_v_ra_c),
                     label = as.numeric(as.character(training_v_ra_c$rel_abundance)),
                     eta = 0.04511723,
                     nrounds = 41,
                     max_depth = 1208,
                     subsample = 0.5374118,
                     objective = "reg:linear")

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
#         eta nrounds max_depth subsample
#1: 0.1256372      10      6604 0.7334653 
xgb_wd_k_c <- xgboost(data = data.matrix(trainx_wd_k_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_k_c$k_index)),
                     eta = 0.1256372,
                     nrounds = 10,
                     max_depth = 6604,
                     subsample = 0.7334653,
                     objective = "reg:linear")

# With shannon index as response
#         eta nrounds max_depth subsample 
#1: 0.1048352      63       701  0.610751
xgb_wd_s_c <- xgboost(data = data.matrix(trainx_wd_s_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_s_c$shannon)),
                     eta = 0.1048352,
                     nrounds = 63,
                     max_depth = 701,
                     subsample = 0.610751,
                     objective = "reg:linear")

# With abundance as response
#          eta nrounds max_depth subsample
#1: 0.05856516      33      8685 0.5665955
xgb_wd_a_c <- xgboost(data = data.matrix(trainx_wd_a_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_a_c$abundance)),
                     eta = 0.05856516,
                     nrounds = 33,
                     max_depth = 8685,
                     subsample = 0.5665955,
                     objective = "reg:linear")

# With rel_abundance as response
#          eta nrounds max_depth subsample 
#1: 0.05327741      45      6892 0.5123451
xgb_wd_ra_c <- xgboost(data = data.matrix(trainx_wd_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_ra_c$rel_abundance)),
                     eta = 0.05327741,
                     nrounds = 45,
                     max_depth = 6892,
                     subsample = 0.5123451,
                     objective = "reg:linear")


### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response 
#         eta nrounds max_depth subsample
#1: 0.04461215      19      2111  0.649418
xgb_samp_k_c <- xgboost(data = data.matrix(trainx_samp_k_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_k_c$k_index)),
                     eta = 0.04461215,
                     nrounds = 19,
                     max_depth = 2111,
                     subsample = 0.649418,
                     objective = "reg:linear")

# With shannon index as response
#         eta nrounds max_depth subsample
#1: 0.1739483     116      3664 0.5660478 
xgb_samp_s_c <- xgboost(data = data.matrix(trainx_samp_s_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_s_c$shannon)),
                     eta = 0.1739483,
                     nrounds = 116,
                     max_depth = 3664,
                     subsample = 0.5660478,
                     objective = "reg:linear")

# With abundance as response
#           eta nrounds max_depth subsample
#1: 0.006622144     154      3917 0.6283266    
xgb_samp_a_c <- xgboost(data = data.matrix(trainx_samp_a_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_a_c$abundance)),
                     eta = 0.006622144,
                     nrounds = 154,
                     max_depth = 3917,
                     subsample = 0.6283266,
                     objective = "reg:linear")

# With rel_abundance as response 
#         eta nrounds max_depth subsample 
#1: 0.3057943     751      6014 0.5325193 
xgb_samp_ra_c <- xgboost(data = data.matrix(trainx_samp_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_ra_c$rel_abundance)),
                     eta = 0.3057943,
                     nrounds = 751,
                     max_depth = 6014,
                     subsample = 0.5325193,
                     objective = "reg:linear")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
#          eta nrounds max_depth subsample 
#1: 0.1821001     447      7633 0.7072811                       
xgb_sec_k_c <- xgboost(data = data.matrix(trainx_sec_k_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_k_c$k_index)),
                     eta = 0.1821001,
                     max_depth = 7633,
                     nrounds = 447,
                     subsample = 0.7072811,
                     objective = "reg:linear")

# With shannon index as response 
#        eta nrounds max_depth subsample 
#1: 0.0485844      99      2247 0.6672564                        
xgb_sec_s_c <- xgboost(data = data.matrix(trainx_sec_s_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_s_c$shannon)),
                     eta = 0.0485844,
                     max_depth = 2247,
                     nrounds = 99,
                     subsample = 0.6672564,
                     objective = "reg:linear")

# With abundance as response
#        eta nrounds max_depth subsample 
#1: 0.525436     338      3258 0.6462293                        
xgb_sec_a_c <- xgboost(data = data.matrix(trainx_sec_a_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_a_c$abundance)),
                     eta = 0.525436,
                     max_depth = 3258,
                     nrounds = 338,
                     subsample = 0.6462293,
                     objective = "reg:linear")

# With rel_abundance as response 
#         eta nrounds max_depth subsample 
#1: 0.02247901     349      2454 0.6849103                        
xgb_sec_ra_c <- xgboost(data = data.matrix(trainx_sec_ra_c[ ,-1]),
                      label = as.numeric(as.character(training_sec_ra_c$rel_abundance)),
                     eta = 0.02247901,
                     max_depth = 2454,
                     nrounds = 349,
                     subsample = 0.6849103,
                     objective = "reg:linear")

### PREDICTORS: SELECTED VARIABLES ### --------------------------------------------
# With k_index as response
#           eta nrounds max_depth subsample 
#1: 0.1112948      30      6901 0.7087239                      
xgb_var_k_c <- xgboost(data = data.matrix(trainx_var_k_c[ ,-1]),
                     label = as.numeric(as.character(training_var_k_c$k_index)),
                     eta = 0.1112948,
                     nrounds = 30,
                     max_depth = 6901,
                     subsample = 0.7087239,
                     objective = "reg:linear")

# With shannon index as response 
#        eta nrounds max_depth subsample
#1: 0.8210816     713      9262 0.7102672                  
xgb_var_s_c <- xgboost(data = data.matrix(trainx_var_s_c[ ,-1]),
                     label = as.numeric(as.character(training_var_s_c$shannon)),
                     eta = 0.8210816,
                     nrounds = 713,
                     max_depth = 9262,
                     subsample = 0.7102672,
                     objective = "reg:linear")

# With abundance as response
#         eta nrounds max_depth subsample
#1: 0.1160077      20      9539 0.6116902                      
xgb_var_a_c <- xgboost(data = data.matrix(trainx_var_a_c[ ,-1]),
                     label = as.numeric(as.character(training_var_a_c$abundance)),
                     eta = 0.1160077,
                     nrounds = 20,
                     max_depth = 9539,
                     subsample = 0.6116902,
                     objective = "reg:linear")

# With rel_abundance as response 
#         eta nrounds max_depth subsample
#1: 0.3263685     272      8817 0.6879644                     
xgb_var_ra_c <- xgboost(data = data.matrix(trainx_var_ra_c[ ,-1]),
                      label = as.numeric(as.character(training_var_ra_c$rel_abundance)),
                     eta = 0.3263685,
                     nrounds = 272,
                     max_depth = 8817,
                     subsample = 0.6879644,
                     objective = "reg:linear")
```

# Model Evaluation 
## Obs and Pred 
```{r}
# read in predicted values from rasters extracted
pred_rast <- read_delim("Stat_Analysis/stat_analysis_data/regr_analysis_brt.csv")

### OBSERVED VALUES ### -------------------------------------------
### PREDICTOR: VELOCITY ### ---------------------------------------
# With k_index as response --------------
responses_v_k <- test_v_k$k_index

# With shannon index as response -------------------
responses_v_s <- test_v_s$shannon

# With abundance as response --------------------
responses_v_a <- test_v_a$abundance

# With rel_abundance as response ----------------------
responses_v_ra <- test_v_ra$rel_abundance

### PREDICTORS: VELOCITY + WD ### ------------------------------
# With k_index as response ------------------------
responses_wd_k <- test_wd_k$k_index

# With shannon index as response ----------------------
responses_wd_s <- test_wd_s$shannon

# With abundance as response ---------------------
responses_wd_a <- test_wd_a$abundance

# With rel_abundance as response ----------------------
responses_wd_ra <- test_wd_ra$rel_abundance

### PREDICTORS: SAMPLING LOCATIONS ### -----------------------
# With k_index as response ----------------------
responses_samp_k <- test_samp_k$k_index

# With shannon index as response -------------------------
responses_samp_s <- test_samp_s$shannon

# With abundance as response -------------------------
responses_samp_a <- test_samp_a$abundance

# With rel_abundance as response ----------------------
responses_samp_ra <- test_samp_ra$rel_abundance

### PREDICTORS: ALL PREDICTORS ### ------------------------------
# With k_index as response ------------------------
responses_sec_k <- test_sec_k$k_index

# With shannon index as response --------------------
responses_sec_s <- test_sec_s$shannon
 
# With abundance as response ------------------------
responses_sec_a <- test_sec_a$abundance

# With rel_abundance as response ----------------------
responses_sec_ra <- test_sec_ra$rel_abundance

### PREDICTORS: SELECTED VARIABLES ### ----------------------------
# With k_index as response -----------------------
responses_var_k <- test_var_k$k_index

# With shannon index as response ---------------------
responses_var_s <- test_var_s$shannon

# With abundance as response --------------------
responses_var_a <- test_var_a$abundance

# With rel_abundance as response ------------------
responses_var_ra <- test_var_ra$rel_abundance

### PREDICTED VALUES ### ----------------------------------------
### PREDICTOR: VELOCITY ### -----------------------------------
# With k_index as response -----------------------------
# with model using measured values - test set
brt_pred_model_v_k_c <- predict(xgb_v_k_c, newdata = testx_v_k_c)

# with model using raster extracted values - test set
p_rast_v_k <- pred_rast$k_index_v

# with training data 
pred_train_v_k <- predict(xgb_v_k_c, newdata = trainx_v_k_c)

# With shannon index as response --------------------
# with model using measured values - test set
brt_pred_model_v_s_c <- predict(xgb_v_s_c, newdata = testx_v_s_c[ ,-1])

# with model using raster extracted values - test set
p_rast_v_s <- pred_rast$shannon_v

# with training data 
pred_train_v_s <- predict(xgb_v_s_c, newdata = trainx_v_s_c[ ,-1])

# With abundance as response -----------------------
# with model using measured values - test set
brt_pred_model_v_a_c <- predict(xgb_v_a_c, newdata = testx_v_a_c[ ,-1])

# with model using raster extracted values - test set
p_rast_v_a <- pred_rast$abundance_v

# with training data 
pred_train_v_a <- predict(xgb_v_a_c, newdata = trainx_v_a_c[ ,-1])

# With rel_abundance as response ---------------------
# with model using measured values - test set
brt_pred_model_v_ra_c <- predict(xgb_v_ra_c, newdata = testx_v_ra_c[ ,-1])

# with model using raster extracted values - test set
p_rast_v_ra <- pred_rast$rel_abundance_v

# with training data 
pred_train_v_ra <- predict(xgb_v_ra_c, newdata = trainx_v_ra_c[ ,-1])

### PREDICTORS: VELOCITY + WD ### ------------------------------
# With k_index as response -------------------
# with model using measured values - test set
brt_pred_model_wd_k_c <- predict(xgb_wd_k_c, newdata = testx_wd_k_c[ ,-1])

# with model using raster extracted values - test set
p_rast_wd_k <- pred_rast$k_index_wd

# with training data 
pred_train_wd_k <- predict(xgb_wd_k_c, newdata = trainx_wd_k_c[ ,-1])

# With shannon index as response -------------
# with model using measured values - test set
brt_pred_model_wd_s_c <- predict(xgb_wd_s_c, newdata = testx_wd_s_c[ ,-1])

# with model using raster extracted values - test set
p_rast_wd_s <- pred_rast$shannon_wd

# with training data 
pred_train_wd_s <- predict(xgb_wd_s_c, newdata = trainx_wd_s_c[ ,-1])

# With abundance as response -----------------
# with model using measured values - test set
brt_pred_model_wd_a_c <- predict(xgb_wd_a_c, newdata = testx_wd_a_c[ ,-1])

# with model using raster extracted values - test set
p_rast_wd_a <- pred_rast$abundance_wd

# with training data 
pred_train_wd_a <- predict(xgb_wd_a_c, newdata = trainx_wd_a_c[ ,-1])

# With rel_abundance as response ------------
# with model using measured values - test set
brt_pred_model_wd_ra_c <- predict(xgb_wd_ra_c, newdata = testx_wd_ra_c[ ,-1])

# with model using raster extracted values - test set
p_rast_wd_ra <- pred_rast$rel_abundance_wd

# with training data 
pred_train_wd_ra <- predict(xgb_wd_ra_c, newdata = trainx_wd_ra_c[ ,-1])

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------
# With k_index as response ---------------------
# with model using measured values - test set
brt_pred_model_samp_k_c <- predict(xgb_samp_k_c, newdata = testx_samp_k_c[ ,-1])

# with training data 
pred_train_samp_k <- predict(xgb_samp_k_c, newdata = trainx_samp_k_c[ ,-1])

# With shannon index as response ------------------------
# with model using measured values - test set
brt_pred_model_samp_s_c <- predict(xgb_samp_s_c, newdata = testx_samp_s_c[ ,-1])

# with training data 
pred_train_samp_s <- predict(xgb_samp_s_c, newdata = trainx_samp_s_c[ ,-1])

# With abundance as response ----------------
# with model using measured values - test set
brt_pred_model_samp_a_c <- predict(xgb_samp_a_c, newdata = testx_samp_a_c[ ,-1])

# with training data 
pred_train_samp_a <- predict(xgb_samp_a_c, newdata = trainx_samp_a_c[ ,-1])

# With rel_abundance as response ------------------------
# with model using measured values - test set
brt_pred_model_samp_ra_c <- predict(xgb_samp_ra_c, newdata = testx_samp_ra_c[ ,-1])

# with training data 
pred_train_samp_ra <- predict(xgb_samp_ra_c, newdata = trainx_samp_ra_c[ ,-1])

### PREDICTORS: ALL PREDICTORS ### ---------------------------------
# With k_index as response ---------------------
# with model using measured values - test set
brt_pred_model_sec_k_c <- predict(xgb_sec_k_c, newdata = testx_sec_k_c[ ,-1])

# with training data 
pred_train_sec_k <- predict(xgb_sec_k_c, newdata = trainx_sec_k_c[ ,-1])

# With shannon index as response ----------------
# with model using measured values - test set
brt_pred_model_sec_s_c <- predict(xgb_sec_s_c, newdata = testx_sec_s_c[ ,-1])

# with training data 
pred_train_sec_s <- predict(xgb_sec_s_c, newdata = trainx_sec_s_c[ ,-1])

# With abundance as response -----------------------
# with model using measured values - test set
brt_pred_model_sec_a_c <- predict(xgb_sec_a_c, newdata = testx_sec_a_c[ ,-1])

# with training data 
pred_train_sec_a <- predict(xgb_sec_a_c, newdata = trainx_sec_a_c[ ,-1])

# With rel_abundance as response ------------------
# with model using measured values - test set
brt_pred_model_sec_ra_c <- predict(xgb_sec_ra_c, newdata = testx_sec_ra_c[ ,-1])

# with training data 
pred_train_sec_ra <- predict(xgb_sec_ra_c, newdata = trainx_sec_ra_c[ ,-1])

### PREDICTORS: SELECTED VARIABLES ### -----------------------------
# With k_index as response ------------------
# with model using measured values - test set
brt_pred_model_var_k_c <- predict(xgb_var_k_c, newdata = testx_var_k_c[ ,-1])

# with model using raster extracted values - test set
p_rast_var_k <- pred_rast$k_index_var

# with training data 
pred_train_var_k <- predict(xgb_var_k_c, newdata = trainx_var_k_c[ ,-1])

# With shannon index as response ------------------
# with model using measured values - test set
brt_pred_model_var_s_c <- predict(xgb_var_s_c, newdata = testx_var_s_c[ ,-1])

# with model using raster extracted values - test set
p_rast_var_s <- pred_rast$shannon_var

# with training data 
pred_train_var_s <- predict(xgb_var_s_c, newdata = trainx_var_s_c[ ,-1])

# With abundance as response -------------------
# with model using measured values - test set
brt_pred_model_var_a_c <- predict(xgb_var_a_c, newdata = testx_var_a_c[ ,-1])

# with model using raster extracted values - test set
p_rast_var_a <- pred_rast$abundance_var

# with training data 
pred_train_var_a <- predict(xgb_var_a_c, newdata = trainx_var_a_c[ ,-1])

# With rel_abundance as response -----------------
# with model using measured values - test set
brt_pred_model_var_ra_c <- predict(xgb_var_ra_c, newdata = testx_var_ra_c[ ,-1])

# with model using raster extracted values - test set
p_rast_var_ra <- pred_rast$rel_abundance_var

# with training data 
pred_train_var_ra <- predict(xgb_var_ra_c, newdata = trainx_var_ra_c[ ,-1])

### bind resulting predicted indices into dataframes and save them ### --------
pred_test <- cbind(pred_rast, brt_pred_model_v_k_c, brt_pred_model_v_s_c, brt_pred_model_v_a_c, brt_pred_model_v_ra_c, brt_pred_model_wd_k_c, brt_pred_model_wd_s_c, brt_pred_model_wd_a_c, brt_pred_model_wd_ra_c, brt_pred_model_samp_k_c, brt_pred_model_samp_s_c, brt_pred_model_samp_a_c, brt_pred_model_samp_ra_c) |>
  na.omit()

pred_test_2 <- cbind(brt_pred_model_sec_k_c, brt_pred_model_sec_s_c, brt_pred_model_sec_a_c, brt_pred_model_sec_ra_c, brt_pred_model_var_k_c, brt_pred_model_var_s_c, brt_pred_model_var_a_c, brt_pred_model_var_ra_c, test_var) |>
  na.omit()

pred_train <- cbind(pred_train_v_k, pred_train_v_s, pred_train_v_a, pred_train_v_ra, pred_train_wd_k, pred_train_wd_s, pred_train_wd_a, pred_train_wd_ra, pred_train_samp_k, pred_train_samp_s, pred_train_samp_a, pred_train_samp_ra, pred_train_sec_k, pred_train_sec_s, pred_train_sec_a, pred_train_sec_ra, pred_train_var_k, pred_train_var_s, pred_train_var_a, pred_train_var_ra, training_var)

# write .csv files 
write.csv(pred_test, "Stat_Analysis/stat_analysis_data/regr_pred_test_brt.csv", row.names = FALSE)
write.csv(pred_test_2, "Stat_Analysis/stat_analysis_data/regr_pred_test_2_brt.csv", row.names = FALSE)
write.csv(pred_train, "Stat_Analysis/stat_analysis_data/regr_pred_train_brt.csv", row.names = FALSE)
```

## R2
```{r}
### PREDICTOR: VELOCITY ### ------------------------------------
# With k_index as response ------------------------
# with model using measured values - test set
r2_v_k <- R2(pred = brt_pred_model_v_k_c, obs = responses_v_k)

# with model using raster extracted values - test set
r2_rast_v_k <- R2(pred = p_rast_v_k, obs = responses_v_k, na.rm = TRUE)

# with training data 
r2_train_v_k <- R2(pred = pred_train_v_k, obs = training_v_k_c$k_index)

# With shannon index as response ------------------------
# with model using measured values - test set
r2_v_s <- R2(pred = brt_pred_model_v_s_c, obs = responses_v_s)

# with model using raster extracted values - test set
r2_rast_v_s <- R2(pred = p_rast_v_s, obs = responses_v_s, na.rm = TRUE)

# with training data 
r2_train_v_s <- R2(pred = pred_train_v_s, obs = training_v_s_c$shannon)

# With abundance as response --------------------------------
# with model using measured values - test set
r2_v_a <- R2(pred = brt_pred_model_v_a_c, obs = responses_v_a)

# with model using raster extracted values - test set
r2_rast_v_a <- R2(pred = p_rast_v_a, obs = responses_v_a, na.rm = TRUE)

# with training data 
r2_train_v_a <- R2(pred = pred_train_v_a, obs = training_v_a_c$abundance)

# With rel_abundance as response  --------------------------
# with model using measured values - test set
r2_v_ra <- R2(pred = brt_pred_model_v_ra_c, obs = responses_v_ra)

# with model using raster extracted values - test set
r2_rast_v_ra <- R2(pred = p_rast_v_ra, obs = responses_v_ra, na.rm = TRUE)

# with training data 
r2_train_v_ra <- R2(pred = pred_train_v_ra, obs = training_v_ra_c$rel_abundance)

### PREDICTORS: VELOCITY + WD ### -------------------------------------
# With k_index as response ----------------------
# with model using measured values - test set
r2_wd_k <- R2(pred = brt_pred_model_wd_k_c, obs = responses_wd_k)

# with model using raster extracted values - test set
r2_rast_wd_k <- R2(pred = p_rast_wd_k, obs = responses_wd_k, na.rm = TRUE)

# with training data 
r2_train_wd_k <- R2(pred = pred_train_wd_k, obs = training_wd_k_c$k_index)

# With shannon index as response -------------------
# with model using measured values - test set
r2_wd_s <- R2(pred = brt_pred_model_wd_s_c, obs = responses_wd_s)

# with model using raster extracted values - test set
r2_rast_wd_s <- R2(pred = p_rast_wd_s, obs = responses_wd_s, na.rm = TRUE)

# with training data 
r2_train_wd_s <- R2(pred = pred_train_wd_s, obs = training_wd_s_c$shannon)

# With abundance as response ----------------------------
# with model using measured values - test set
r2_wd_a <- R2(pred = brt_pred_model_wd_a_c, obs = responses_wd_a)

# with model using raster extracted values - test set
r2_rast_wd_a <- R2(pred = p_rast_wd_a, obs = responses_wd_a, na.rm = TRUE)

# with training data 
r2_train_wd_a <- R2(pred = pred_train_wd_a, obs = training_wd_a_c$abundance)

# With rel_abundance as response --------------------------
# with model using measured values - test set
r2_wd_ra <- R2(pred = brt_pred_model_wd_ra_c, obs = responses_wd_ra)

# with model using raster extracted values - test set
r2_rast_wd_ra <- R2(pred = p_rast_wd_ra, obs = responses_wd_ra, na.rm = TRUE)

# with training data 
r2_train_wd_ra <- R2(pred = pred_train_wd_ra, obs = training_wd_ra_c$rel_abundance)

### PREDICTORS: SAMPLING LOCATIONS ### --------------------------------
# With k_index as response ------------------------------
# with model using measured values - test set
r2_samp_k <- R2(pred = brt_pred_model_samp_k_c, obs = responses_samp_k)

# with training data 
r2_train_samp_k <- R2(pred = pred_train_samp_k, obs = training_v_k_c$k_index)

# With shannon index as response ----------------------------
# with model using measured values - test set
r2_samp_s <- R2(pred = brt_pred_model_samp_s_c, obs = responses_samp_s)

# with training data 
r2_train_samp_s <- R2(pred = pred_train_samp_s, obs = training_v_s_c$shannon)

# With abundance as response -----------------------------
# with model using measured values - test set
r2_samp_a <- R2(pred = brt_pred_model_samp_a_c, obs = responses_samp_a)

# with training data 
r2_train_samp_a <- R2(pred = pred_train_samp_a, obs = training_v_a_c$abundance)

# With rel_abundance as response -----------------------------
# with model using measured values - test set
r2_samp_ra <- R2(pred = brt_pred_model_samp_ra_c, obs = responses_samp_ra)

# with training data 
r2_train_samp_ra <- R2(pred = pred_train_samp_ra, obs = training_v_ra_c$rel_abundance)

### PREDICTORS: ALL PREDICTORS ### ----------------------------------
# With k_index as response --------------------
# with model using measured values - test set
r2_sec_k <- R2(pred = brt_pred_model_sec_k_c, obs = responses_sec_k)

# with training data 
r2_train_sec_k <- R2(pred = pred_train_sec_k, obs = training_sec_k_c$k_index)

# With shannon index as response ----------------
# with model using measured values - test set
r2_sec_s <- R2(pred = brt_pred_model_sec_s_c, obs = responses_sec_s)

# with training data 
r2_train_sec_s <- R2(pred = pred_train_sec_s, obs = training_sec_s_c$shannon)

# With abundance as response --------------------------
# with model using measured values - test set
r2_sec_a <- R2(pred = brt_pred_model_sec_a_c, obs = responses_sec_a)

# with training data 
r2_train_sec_a <- R2(pred = pred_train_sec_a, obs = training_sec_a_c$abundance)

# With rel_abundance as response ------------------------
# with model using measured values - test set
r2_sec_ra <- R2(pred = brt_pred_model_sec_ra_c, obs = responses_sec_ra)

# with training data 
r2_train_sec_ra <- R2(pred = pred_train_sec_ra, obs = training_sec_ra_c$rel_abundance)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------
# With k_index as response --------------------------
# with model using measured values - test set
r2_var_k <- R2(pred = brt_pred_model_var_k_c, obs = responses_var_k)

# with model using raster extracted values - test set
r2_rast_var_k <- R2(pred = pred_test$k_index_var, obs = pred_test$obs_k_index, na.rm = TRUE)

# with training data 
r2_train_var_k <- R2(pred = pred_train_var_k, obs = training_var_k_c$k_index)

# With shannon index as response -------------------
# with model using measured values - test set
r2_var_s <- R2(pred = brt_pred_model_var_s_c, obs = responses_var_s)

# with model using raster extracted values - test set
r2_rast_var_s <- R2(pred = pred_test$shannon_var, obs = pred_test$obs_shannon, na.rm = TRUE)

# with training data 
r2_train_var_s <- R2(pred = pred_train_var_s, obs = training_var_s_c$shannon)

# With abundance as response -----------------------
# with model using measured values - test set
r2_var_a <- R2(pred = brt_pred_model_var_a_c, obs = responses_var_a)

# with model using raster extracted values - test set
r2_rast_var_a <- R2(pred = pred_test$abundance_var, obs = pred_test$obs_abundance, na.rm = TRUE)

# with training data 
r2_train_var_a <- R2(pred = pred_train_var_a, obs = training_var_a_c$abundance)

# With rel_abundance as response ------------------------
# with model using measured values - test set
r2_var_ra <- R2(pred = brt_pred_model_var_ra_c, obs = responses_var_ra)

# with model using raster extracted values - test set
r2_rast_var_ra <- R2(pred = pred_test$rel_abundance_var, obs = pred_test$obs_rel_abundance, na.rm = TRUE)

# with training data 
r2_train_var_ra <- R2(pred = pred_train_var_ra, obs = training_var_ra_c$rel_abundance)
```

## RMSE & MAE
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------
# With k_index as response ----------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_v_k_c <- Metrics::rmse(actual = responses_v_k, predicted = brt_pred_model_v_k_c)

# with model using raster extracted values - test set
rmse_rast_v_k <- Metrics::rmse(actual = pred_test$k_index_v, predicted = pred_test$obs_k_index)

# with training data 
rmse_train_v_k <- Metrics::rmse(actual = training_v_k_c$k_index, predicted = pred_train_v_k)

#### MAE ####
# with model using measured values - test set
mae_model_v_k_c <- Metrics::mae(actual = responses_v_k, predicted = brt_pred_model_v_k_c)

# with model using raster extracted values - test set
mae_rast_v_k <- Metrics::mae(actual = pred_test$k_index_v, predicted = pred_test$obs_k_index)

# with training data 
mae_train_v_k <- Metrics::mae(actual = training_v_k_c$k_index, predicted = pred_train_v_k)

# With shannon index as response ------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_v_s_c <- Metrics::rmse(actual = responses_v_s, predicted = brt_pred_model_v_s_c)

# with model using raster extracted values - test set
rmse_rast_v_s <- Metrics::rmse(actual = pred_test$shannon_v, predicted = pred_test$obs_shannon)

# with training data 
rmse_train_v_s <- Metrics::rmse(actual = training_v_s_c$shannon, predicted = pred_train_v_s)

#### MAE ####
# with model using measured values - test set
mae_model_v_s_c <- Metrics::mae(actual = responses_v_s, predicted = brt_pred_model_v_s_c)

# with model using raster extracted values - test set
mae_rast_v_s <- Metrics::mae(actual = pred_test$shannon_v, predicted = pred_test$obs_shannon)

# with training data 
mae_train_v_s <- Metrics::mae(actual = training_v_s_c$shannon, predicted = pred_train_v_s)

# With abundance as response -------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_v_a_c <- Metrics::rmse(actual = responses_v_a, predicted = brt_pred_model_v_a_c)

# with model using raster extracted values - test set
rmse_rast_v_a <- Metrics::rmse(actual = pred_test$abundance_v, predicted = pred_test$obs_abundance)

# with training data 
rmse_train_v_a <- Metrics::rmse(actual = training_v_a_c$abundance, predicted = pred_train_v_a)

#### MAE ####
# with model using measured values - test set
mae_model_v_a_c <- Metrics::mae(actual = responses_v_a, predicted = brt_pred_model_v_a_c)

# with model using raster extracted values - test set
mae_rast_v_a <- Metrics::mae(actual = pred_test$abundance_v, predicted = pred_test$obs_abundance)

# with training data 
mae_train_v_a <- Metrics::mae(actual = training_v_a_c$abundance, predicted = pred_train_v_a)

# With rel_abundance as response --------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_v_ra_c <- Metrics::rmse(actual = responses_v_ra, predicted = brt_pred_model_v_ra_c)

# with model using raster extracted values - test set
rmse_rast_v_ra <- Metrics::rmse(actual = pred_test$rel_abundance_v, predicted = pred_test$obs_rel_abundance)

# with training data 
rmse_train_v_ra <- Metrics::rmse(actual = training_v_ra_c$rel_abundance, predicted = pred_train_v_ra)

#### MAE ####
# with model using measured values - test set
mae_model_v_ra_c <- Metrics::mae(actual = responses_v_ra, predicted = brt_pred_model_v_ra_c)

# with model using raster extracted values - test set
mae_rast_v_ra <- Metrics::mae(actual = pred_test$rel_abundance_v, predicted = pred_test$obs_rel_abundance)

# with training data 
mae_train_v_ra <- Metrics::mae(actual = training_v_ra_c$rel_abundance, predicted = pred_train_v_ra)

### PREDICTORS: VELOCITY + WD ### -----------------------------------
# With k_index as response ---------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_wd_k_c <- Metrics::rmse(actual = responses_wd_k, predicted = brt_pred_model_wd_k_c)

# with model using raster extracted values - test set
rmse_rast_wd_k <- Metrics::rmse(actual = pred_test$k_index_wd, predicted = pred_test$obs_k_index)

# with training data 
rmse_train_wd_k <- Metrics::rmse(actual = training_v_k_c$k_index, predicted = pred_train_wd_k)

#### MAE ####
# with model using measured values - test set
mae_model_wd_k_c <- Metrics::mae(actual = responses_wd_k, predicted = brt_pred_model_wd_k_c)

# with model using raster extracted values - test set
mae_rast_wd_k <- Metrics::mae(actual = pred_test$k_index_wd, predicted = pred_test$obs_k_index)

# with training data 
mae_train_wd_k <- Metrics::mae(actual = training_v_k_c$k_index, predicted = pred_train_wd_k)

# With shannon index as response -----------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_wd_s_c <- Metrics::rmse(actual = responses_wd_s, predicted = brt_pred_model_wd_s_c)

# with model using raster extracted values - test set
rmse_rast_wd_s <- Metrics::rmse(actual = pred_test$shannon_wd, predicted = pred_test$obs_shannon)

# with training data 
rmse_train_wd_s <- Metrics::rmse(actual = training_wd_s_c$shannon, predicted = pred_train_wd_s)

#### MAE ####
# with model using measured values - test set
mae_model_wd_s_c <- Metrics::mae(actual = responses_wd_s, predicted = brt_pred_model_wd_s_c)

# with model using raster extracted values - test set
mae_rast_wd_s <- Metrics::mae(actual = pred_test$shannon_wd, predicted = pred_test$obs_shannon)

# with training data 
mae_train_wd_s <- Metrics::mae(actual = training_v_s_c$shannon, predicted = pred_train_wd_s)

# With abundance as response -----------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_wd_a_c <- Metrics::rmse(actual = responses_wd_a, predicted = brt_pred_model_wd_a_c)

# with model using raster extracted values - test set
rmse_rast_wd_a <- Metrics::rmse(actual = pred_test$abundance_wd, predicted = pred_test$obs_abundance)

# with training data 
rmse_train_wd_a <- Metrics::rmse(actual = training_wd_a_c$abundance, predicted = pred_train_wd_a)

#### MAE ####
# with model using measured values - test set
mae_model_wd_a_c <- Metrics::mae(actual = responses_wd_a, predicted = brt_pred_model_wd_a_c)

# with model using raster extracted values - test set
mae_rast_wd_a <- Metrics::mae(actual = pred_test$abundance_wd, predicted = pred_test$obs_abundance)

# with training data 
mae_train_wd_a <- Metrics::mae(actual = training_wd_a_c$abundance, predicted = pred_train_wd_a)

# With rel_abundance as response --------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_wd_ra_c <- Metrics::rmse(actual = responses_wd_ra, predicted = brt_pred_model_wd_ra_c)

# with model using raster extracted values - test set
rmse_rast_wd_ra <- Metrics::rmse(actual = pred_test$rel_abundance_wd, predicted = pred_test$obs_rel_abundance)

# with training data 
rmse_train_wd_ra <- Metrics::rmse(actual = training_wd_ra_c$rel_abundance, predicted = pred_train_wd_ra)

#### MAE ####
# with model using measured values - test set
mae_model_wd_ra_c <- Metrics::mae(actual = responses_wd_ra, predicted = brt_pred_model_wd_ra_c)

# with model using raster extracted values - test set
mae_rast_wd_ra <- Metrics::mae(actual = pred_test$rel_abundance_wd, predicted = pred_test$obs_rel_abundance)

# with training data 
mae_train_wd_ra <- Metrics::mae(actual = training_wd_ra_c$rel_abundance, predicted = pred_train_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------
# With k_index as response ------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_samp_k_c <- Metrics::rmse(actual = responses_samp_k, predicted = brt_pred_model_samp_k_c)

# with training data 
rmse_train_samp_k <- Metrics::rmse(actual = training_v_k_c$k_index, predicted = pred_train_samp_k)

#### MAE ####
# with model using measured values - test set
mae_model_samp_k_c <- Metrics::mae(actual = responses_samp_k, predicted = brt_pred_model_samp_k_c)

# with training data 
mae_train_samp_k <- Metrics::mae(actual = training_v_k_c$k_index, predicted = pred_train_samp_k)

# With shannon index as response ----------------
#### RMSE ####
# with model using measured values - test set
rmse_model_samp_s_c <- Metrics::rmse(actual = responses_samp_s, predicted = brt_pred_model_samp_s_c)

# with training data 
rmse_train_samp_s <- Metrics::rmse(actual = training_v_s_c$shannon, predicted = pred_train_samp_s)

#### MAE ####
# with model using measured values - test set
mae_model_samp_s_c <- Metrics::mae(actual = responses_samp_s, predicted = brt_pred_model_samp_s_c)

# with training data 
mae_train_samp_s <- Metrics::mae(actual = training_v_s_c$shannon, predicted = pred_train_samp_s)

# With abundance as response ---------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_samp_a_c <- Metrics::rmse(actual = responses_samp_a, predicted = brt_pred_model_samp_a_c)

# with training data 
rmse_train_samp_a <- Metrics::rmse(actual = training_v_a_c$abundance, predicted = pred_train_samp_a)

#### MAE ####
# with model using measured values - test set
mae_model_samp_a_c <- Metrics::mae(actual = responses_samp_a, predicted = brt_pred_model_samp_a_c)

# with training data 
mae_train_samp_a <- Metrics::mae(actual = training_v_a_c$abundance, predicted = pred_train_samp_a)

# With rel_abundance as response -----------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_samp_ra_c <- Metrics::rmse(actual = responses_samp_ra, predicted = brt_pred_model_samp_ra_c)

# with training data 
rmse_train_samp_ra <- Metrics::rmse(actual = training_v_ra_c$rel_abundance, predicted = pred_train_samp_ra)

#### MAE ####
# with model using measured values - test set
mae_model_samp_ra_c <- Metrics::mae(actual = responses_samp_ra, predicted = brt_pred_model_samp_ra_c)

# with training data 
mae_train_samp_ra <- Metrics::mae(actual = training_v_ra_c$rel_abundance, predicted = pred_train_samp_ra)

### PREDICTORS: ALL PREDICTORS ### -------------------------------------
# With k_index as response ------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_sec_k_c <- Metrics::rmse(actual = responses_sec_k, predicted = brt_pred_model_sec_k_c)

# with training data 
rmse_train_sec_k <- Metrics::rmse(actual = training_sec_k_c$k_index, predicted = pred_train_sec_k)

#### MAE ####
# with model using measured values - test set
mae_model_sec_k_c <- Metrics::mae(actual = responses_sec_k, predicted = brt_pred_model_sec_k_c)

# with training data 
mae_train_sec_k <- Metrics::mae(actual = training_sec_k_c$k_index, predicted = pred_train_sec_k)

# With shannon index as response --------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_sec_s_c <- Metrics::rmse(actual = responses_sec_s, predicted = brt_pred_model_sec_s_c)

# with training data 
rmse_train_sec_s <- Metrics::rmse(actual = training_sec_s_c$shannon, predicted = pred_train_sec_s)

#### MAE ####
# with model using measured values - test set
mae_model_sec_s_c <- Metrics::mae(actual = responses_sec_s, predicted = brt_pred_model_sec_s_c)

# with training data 
mae_train_sec_s <- Metrics::mae(actual = training_sec_s_c$shannon, predicted = pred_train_sec_s)

# With abundance as response ------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_sec_a_c <- Metrics::rmse(actual = responses_sec_a, predicted = brt_pred_model_sec_a_c)

# with training data 
rmse_train_sec_a <- Metrics::rmse(actual = training_sec_a_c$abundance, predicted = pred_train_sec_a)

#### MAE ####
# with model using measured values - test set
mae_model_sec_a_c <- Metrics::mae(actual = responses_sec_a, predicted = brt_pred_model_sec_a_c)

# with training data 
mae_train_sec_a <- Metrics::mae(actual = training_sec_a_c$abundance, predicted = pred_train_sec_a)

# With rel_abundance as response ---------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_sec_ra_c <- Metrics::rmse(actual = responses_sec_ra, predicted = brt_pred_model_sec_ra_c)

# with training data 
rmse_train_sec_ra <- Metrics::rmse(actual = training_sec_ra_c$rel_abundance, predicted = pred_train_sec_ra)

#### MAE ####
# with model using measured values - test set
mae_model_sec_ra_c <- Metrics::mae(actual = responses_sec_ra, predicted = brt_pred_model_sec_ra_c)

# with training data 
mae_train_sec_ra <- Metrics::mae(actual = training_sec_ra_c$rel_abundance, predicted = pred_train_sec_ra)

### PREDICTORS: SELECTED VARIABLES ### -------------------------------
# With k_index as response ----------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_var_k_c <- Metrics::rmse(actual = responses_var_k, predicted = brt_pred_model_var_k_c)

# with model using raster extracted values - test set
rmse_rast_var_k <- Metrics::rmse(actual = pred_test$k_index_var, predicted = pred_test$obs_k_index)

# with training data 
rmse_train_var_k <- Metrics::rmse(actual = training_var_k_c$k_index, predicted = pred_train_var_k)

#### MAE ####
# with model using measured values - test set
mae_model_var_k_c <- Metrics::mae(actual = responses_var_k, predicted = brt_pred_model_var_k_c)

# with model using raster extracted values - test set
mae_rast_var_k <- Metrics::mae(actual = pred_test$k_index_var, predicted = pred_test$obs_k_index)

# with training data 
mae_train_var_k <- Metrics::mae(actual = training_var_k_c$k_index, predicted = pred_train_var_k)

# With shannon index as response -------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_var_s_c <- Metrics::rmse(actual = responses_var_s, predicted = brt_pred_model_var_s_c)

# with model using raster extracted values - test set
rmse_rast_var_s <- Metrics::rmse(actual = pred_test$shannon_var, predicted = pred_test$obs_shannon)

# with training data 
rmse_train_var_s <- Metrics::rmse(actual = training_var_s_c$shannon, predicted = pred_train_var_s)

#### MAE ####
# with model using measured values - test set
mae_model_var_s_c <- Metrics::mae(actual = responses_var_s, predicted = brt_pred_model_var_s_c)

# with model using raster extracted values - test set
mae_rast_var_s <- Metrics::mae(actual = pred_test$shannon_var, predicted = pred_test$obs_shannon)

# with training data 
mae_train_var_s <- Metrics::mae(actual = training_var_s_c$shannon, predicted = pred_train_var_s)

# With abundance as response -----------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_var_a_c <- Metrics::rmse(actual = responses_var_a, predicted = brt_pred_model_var_a_c)

# with model using raster extracted values - test set
rmse_rast_var_a <- Metrics::rmse(actual = pred_test$abundance_var, predicted = pred_test$obs_abundance)

# with training data 
rmse_train_var_a <- Metrics::rmse(actual = training_var_a_c$abundance, predicted = pred_train_var_a)

#### MAE ####
# with model using measured values - test set
mae_model_var_a_c <- Metrics::mae(actual = responses_var_a, predicted = brt_pred_model_var_a_c)

# with model using raster extracted values - test set
mae_rast_var_a <- Metrics::mae(actual = pred_test$abundance_var, predicted = pred_test$obs_abundance)

# with training data 
mae_train_var_a <- Metrics::mae(actual = training_var_a_c$abundance, predicted = pred_train_var_a)

# With rel_abundance as response ----------------------------
#### RMSE ####
# with model using measured values - test set
rmse_model_var_ra_c <- Metrics::rmse(actual = responses_var_ra, predicted = brt_pred_model_var_ra_c)

# with model using raster extracted values - test set
rmse_rast_var_ra <- Metrics::rmse(actual = pred_test$rel_abundance_var, predicted = pred_test$obs_rel_abundance)

# with training data 
rmse_train_var_ra <- Metrics::rmse(actual = training_var_ra_c$rel_abundance, predicted = pred_train_var_ra)

#### MAE ####
# with model using measured values - test set
mae_model_var_ra_c <- Metrics::mae(actual = responses_var_ra, predicted = brt_pred_model_var_ra_c)

# with model using raster extracted values - test set
mae_rast_var_ra <- Metrics::mae(actual = pred_test$rel_abundance_var, predicted = pred_test$obs_rel_abundance)

# with training data 
mae_train_var_ra <- Metrics::mae(actual = training_var_ra_c$rel_abundance, predicted = pred_train_var_ra)
```

## Bias 
```{r}
### ONLY VELOCITY AS PREDICTOR ### ---------------------------------
# With k_index as response --------------------
# with model using measured values - test set
bias_model_v_k_c <- bias(observados = responses_v_k, estimados = brt_pred_model_v_k_c)

# with model using raster extracted values - test set
bias_rast_v_k <- bias(observados = pred_test$k_index_v, estimados = pred_test$obs_k_index)

# with training data 
bias_train_v_k <- bias(observados = training_v_k_c$k_index, estimados = pred_train_v_k)

# With shannon index as response ---------------------
# with model using measured values - test set
bias_model_v_s_c <- bias(observados = responses_v_s, estimados = brt_pred_model_v_s_c)

# with model using raster extracted values - test set
bias_rast_v_s <- bias(observados = pred_test$shannon_v, estimados = pred_test$obs_shannon)

# with training data 
bias_train_v_s <- bias(observados = training_v_s_c$shannon, estimados = pred_train_v_s)

# With abundance as response --------------------
# with model using measured values - test set
bias_model_v_a_c <- bias(observados = responses_v_a, estimados = brt_pred_model_v_a_c)

# with model using raster extracted values - test set
bias_rast_v_a <- bias(observados = pred_test$abundance_v, estimados = pred_test$obs_abundance)

# with training data 
bias_train_v_a <- bias(observados = training_v_a_c$abundance, estimados = pred_train_v_a)

# With rel_abundance as response ---------------------
# with model using measured values - test set
bias_model_v_ra_c <- bias(observados = responses_v_ra, estimados = brt_pred_model_v_ra_c)

# with model using raster extracted values - test set
bias_rast_v_ra <- bias(observados = pred_test$rel_abundance_v, estimados = pred_test$obs_rel_abundance)

# with training data 
bias_train_v_ra <- bias(observados = training_v_ra_c$rel_abundance, estimados = pred_train_v_ra)

### PREDICTORS: VELOCITY + WD ### -----------------------------------
# With k_index as response ------------------------
# with model using measured values - test set
bias_model_wd_k_c <- bias(observados = responses_wd_k, estimados = brt_pred_model_wd_k_c)

# with model using raster extracted values - test set
bias_rast_wd_k <- bias(observados = pred_test$k_index_wd, estimados = pred_test$obs_k_index)

# with training data 
bias_train_wd_k <- bias(observados = training_v_k_c$k_index, estimados = pred_train_wd_k)

# With shannon index as response --------------------
# with model using measured values - test set
bias_model_wd_s_c <- bias(observados = responses_wd_s, estimados = brt_pred_model_wd_s_c)

# with model using raster extracted values - test set
bias_rast_wd_s <- bias(observados = pred_test$shannon_wd, estimados = pred_test$obs_shannon)

# with training data 
bias_train_wd_s <- bias(observados = training_v_s_c$shannon, estimados = pred_train_wd_s)

# With abundance as response ---------------------
# with model using measured values - test set
bias_model_wd_a_c <- bias(observados = responses_wd_a, estimados = brt_pred_model_wd_a_c)

# with model using raster extracted values - test set
bias_rast_wd_a <- bias(observados = pred_test$abundance_wd, estimados = pred_test$obs_abundance)

# with training data 
bias_train_wd_a <- bias(observados = training_v_a_c$abundance, estimados = pred_train_wd_a)

# With rel_abundance as response ---------------------
# with model using measured values - test set
bias_model_wd_ra_c <- bias(observados = responses_wd_ra, estimados = brt_pred_model_wd_ra_c)

# with model using raster extracted values - test set
bias_rast_wd_ra <- bias(observados = pred_test$rel_abundance_wd, estimados = pred_test$obs_rel_abundance)

# with training data 
bias_train_wd_ra <- bias(observados = training_v_ra_c$rel_abundance, estimados = pred_train_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------
# With k_index as response --------------------------
# with model using measured values - test set
bias_model_samp_k_c <- bias(observados = responses_samp_k, estimados = brt_pred_model_samp_k_c)

# with training data 
bias_train_samp_k <- bias(observados = training_v_k_c$k_index, estimados = pred_train_samp_k)

# With shannon index as response ---------------------
# with model using measured values - test set
bias_model_samp_s_c <- bias(observados = responses_samp_s, estimados = brt_pred_model_samp_s_c)

# with training data 
bias_train_samp_s <- bias(observados = training_v_s_c$shannon, estimados = pred_train_samp_s)

# With abundance as response -----------------------
# with model using measured values - test set
bias_model_samp_a_c <- bias(observados = responses_samp_a, estimados = brt_pred_model_samp_a_c)

# with training data 
bias_train_samp_a <- bias(observados = training_v_a_c$abundance, estimados = pred_train_samp_a)

# With rel_abundance as response -------------------------
# with model using measured values - test set
bias_model_samp_ra_c <- bias(observados = responses_samp_ra, estimados = brt_pred_model_samp_ra_c)

# with training data 
bias_train_samp_ra <- bias(observados = training_v_ra_c$rel_abundance, estimados = pred_train_samp_ra)

### PREDICTORS: ALL PREDICTORS ### ---------------------------------
# With k_index as response --------------------------
# with model using measured values - test set
bias_model_sec_k_c <- bias(observados = responses_sec_k, estimados = brt_pred_model_sec_k_c)

# with training data 
bias_train_sec_k <- bias(observados = training_v_k_c$k_index, estimados = pred_train_sec_k)

# With shannon index as response -------------------
# with model using measured values - test set
bias_model_sec_s_c <- bias(observados = responses_sec_s, estimados = brt_pred_model_sec_s_c)

# with training data 
bias_train_sec_s <- bias(observados = training_v_s_c$shannon, estimados = pred_train_sec_s)

# With abundance as response ----------------------
# with model using measured values - test set
bias_model_sec_a_c <- bias(observados = responses_sec_a, estimados = brt_pred_model_sec_a_c)

# with training data 
bias_train_sec_a <- bias(observados = training_v_a_c$abundance, estimados = pred_train_sec_a)

# With rel_abundance as response -------------------
# with model using measured values - test set
bias_model_sec_ra_c <- bias(observados = responses_sec_ra, estimados = brt_pred_model_sec_ra_c)

# with training data 
bias_train_sec_ra <- bias(observados = training_v_ra_c$rel_abundance, estimados = pred_train_sec_ra)

### PREDICTORS: SELECTED VARIABLES ### -----------------------------
# With k_index as response ------------------------
# with model using measured values - test set
bias_model_var_k_c <- bias(observados = responses_var_k, estimados = brt_pred_model_var_k_c)

# with model using raster extracted values - test set
bias_rast_var_k <- bias(observados = pred_test$k_index_var, estimados = pred_test$obs_k_index)

# with training data 
bias_train_var_k <- bias(observados = training_v_k_c$k_index, estimados = pred_train_var_k)

# With shannon index as response ---------------------
# with model using measured values - test set
bias_model_var_s_c <- bias(observados = responses_var_s, estimados = brt_pred_model_var_s_c)

# with model using raster extracted values - test set
bias_rast_var_s <- bias(observados = pred_test$shannon_var, estimados = pred_test$obs_shannon)

# with training data 
bias_train_var_s <- bias(observados = training_v_s_c$shannon, estimados = pred_train_var_s)

# With abundance as response ------------------------
# with model using measured values - test set
bias_model_var_a_c <- bias(observados = responses_var_a, estimados = brt_pred_model_var_a_c)

# with model using raster extracted values - test set
bias_rast_var_a <- bias(observados = pred_test$abundance_var, estimados = pred_test$obs_abundance)

# with training data 
bias_train_var_a <- bias(observados = training_v_a_c$abundance, estimados = pred_train_var_a)

# With rel_abundance as response ---------------------
# with model using measured values - test set
bias_model_var_ra_c <- bias(observados = responses_var_ra, estimados = brt_pred_model_var_ra_c)

# with model using raster extracted values - test set
bias_rast_var_ra <- bias(observados = pred_test$rel_abundance_var, estimados = pred_test$obs_rel_abundance)

# with training data 
bias_train_var_ra <- bias(observados = training_v_ra_c$rel_abundance, estimados = pred_train_var_ra)
```

## Nash-Sutcliffe efficiency (NSE) 
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------
# With k_index as response --------------------
# with model using measured values - test set
nse_model_v_k_c <- NSE(sim = brt_pred_model_v_k_c, obs = responses_v_k)

# with model using raster extracted values - test set
nse_rast_v_k <- NSE(sim = p_rast_v_k, obs = responses_v_k)

# with training data 
nse_train_v_k <- NSE(sim = pred_train_v_k, obs = training_v_k_c$k_index)

# With shannon index as response --------------------
# with model using measured values - test set
nse_model_v_s_c <- NSE(sim = brt_pred_model_v_s_c, obs = responses_v_s)

# with model using raster extracted values - test set
nse_rast_v_s <- NSE(sim = p_rast_v_s, obs = responses_v_s)

# with training data 
nse_train_v_s <- NSE(sim = pred_train_v_s, obs = training_v_s_c$shannon)

# With abundance as response --------------------
# with model using measured values - test set
nse_model_v_a_c <- NSE(sim = brt_pred_model_v_a_c, obs = responses_v_a)

# with model using raster extracted values - test set
nse_rast_v_a <- NSE(sim = p_rast_v_a, obs = responses_v_a)

# with training data 
nse_train_v_a <- NSE(sim = pred_train_v_a, obs = training_v_a_c$abundance)

# With rel_abundance as response ---------------------
# with model using measured values - test set
nse_model_v_ra_c <- NSE(sim = brt_pred_model_v_ra_c, obs = responses_v_ra)

# with model using raster extracted values - test set
nse_rast_v_ra <- NSE(sim = p_rast_v_ra, obs = responses_v_ra)

# with training data 
nse_train_v_ra <- NSE(sim = pred_train_v_ra, obs = training_v_ra_c$rel_abundance)

### PREDICTORS: VELOCITY + WD ### -------------------------------------
# With k_index as response -------------------------
# with model using measured values - test set
nse_model_wd_k_c <- NSE(sim = brt_pred_model_wd_k_c, obs = responses_wd_k)

# with model using raster extracted values - test set
nse_rast_wd_k <- NSE(sim = p_rast_wd_k, obs = responses_wd_k)

# with training data 
nse_train_wd_k <- NSE(sim = pred_train_wd_k, obs = training_v_k_c$k_index)

# With shannon index as response ------------------------
# with model using measured values - test set
nse_model_wd_s_c <- NSE(sim = brt_pred_model_wd_s_c, obs = responses_wd_s)

# with model using raster extracted values - test set
nse_rast_wd_s <- NSE(sim = p_rast_wd_s, obs = responses_wd_s)

# with training data 
nse_train_wd_s <- NSE(sim = pred_train_wd_s, obs = training_v_s_c$shannon)

# With abundance as response ---------------------
# with model using measured values - test set
nse_model_wd_a_c <- NSE(sim = brt_pred_model_wd_a_c, obs = responses_wd_a)

# with model using raster extracted values - test set
nse_rast_wd_a <- NSE(sim = p_rast_wd_a, obs = responses_wd_a)

# with training data 
nse_train_wd_a <- NSE(sim = pred_train_wd_a, obs = training_v_a_c$abundance)

# With rel_abundance as response -----------------------
# with model using measured values - test set
nse_model_wd_ra_c <- NSE(sim = brt_pred_model_wd_ra_c, obs = responses_wd_ra)

# with model using raster extracted values - test set
nse_rast_wd_ra <- NSE(sim = p_rast_wd_ra, obs = responses_wd_ra)

# with training data 
nse_train_wd_ra <- NSE(sim = pred_train_wd_ra, obs = training_v_ra_c$rel_abundance)

### PREDICTORS: SAMPLING LOCATIONS ### -------------------------------
# With k_index as response --------------------------
# with model using measured values - test set
nse_model_samp_k_c <- NSE(sim = brt_pred_model_samp_k_c, obs = responses_samp_k)

# with training data 
nse_train_samp_k <- NSE(sim = pred_train_samp_k, obs = training_v_k_c$k_index)

# With shannon index as response ---------------------------
# with model using measured values - test set
nse_model_samp_s_c <- NSE(sim = brt_pred_model_samp_s_c, obs = responses_samp_s)

# with training data 
nse_train_samp_s <- NSE(sim = pred_train_samp_s, obs = training_v_s_c$shannon)

# With abundance as response ----------------------
# with model using measured values - test set
nse_model_samp_a_c <- NSE(sim = brt_pred_model_samp_a_c, obs = responses_samp_a)

# with training data 
nse_train_samp_a <- NSE(sim = pred_train_samp_a, obs = training_v_a_c$abundance)

# With rel_abundance as response -------------------
# with model using measured values - test set
nse_model_samp_ra_c <- NSE(sim = brt_pred_model_samp_ra_c, obs = responses_samp_ra)

# with training data 
nse_train_samp_ra <- NSE(sim = pred_train_samp_ra, obs = training_v_ra_c$rel_abundance)

### PREDICTORS: ALL PREDICTORS ### ------------------------------------
# With k_index as response -------------------------
# with model using measured values - test set
nse_model_sec_k_c <- NSE(sim = brt_pred_model_sec_k_c, obs = responses_sec_k)

# with training data 
nse_train_sec_k <- NSE(sim = pred_train_sec_k, obs = training_sec_k_c$k_index)

# With shannon index as response -------------------------
# with model using measured values - test set
nse_model_sec_s_c <- NSE(sim = brt_pred_model_sec_s_c, obs = responses_sec_s)

# with training data 
nse_train_sec_s <- NSE(sim = pred_train_sec_s, obs = training_sec_s_c$shannon)

# With abundance as response ----------------------------
# with model using measured values - test set
nse_model_sec_a_c <- NSE(sim = brt_pred_model_sec_a_c, obs = responses_sec_a)

# with training data 
nse_train_sec_a <- NSE(sim = pred_train_sec_a, obs = training_sec_a_c$abundance)

# With rel_abundance as response ----------------------------
# with model using measured values - test set
nse_model_sec_ra_c <- NSE(sim = brt_pred_model_sec_ra_c, obs = responses_sec_ra)

# with training data 
nse_train_sec_ra <- NSE(sim = pred_train_sec_ra, obs = training_sec_ra_c$rel_abundance)

### PREDICTORS: SELECTED VARIABLES ### ---------------------------------
# With k_index as response --------------------------
# with model using measured values - test set
nse_model_var_k_c <- NSE(sim = brt_pred_model_var_k_c, obs = responses_var_k)

# with model using raster extracted values - test set
nse_rast_var_k <- NSE(sim = pred_test$k_index_var, obs = pred_test$obs_k_index)

# with training data 
nse_train_var_k <- NSE(sim = pred_train_var_k, obs = training_var_k_c$k_index)

# With shannon index as response ---------------------
# with model using measured values - test set
nse_model_var_s_c <- NSE(sim = brt_pred_model_var_s_c, obs = responses_var_s)

# with model using raster extracted values - test set
nse_rast_var_s <- NSE(sim = pred_test$shannon_var, obs = pred_test$obs_shannon)

# with training data 
nse_train_var_s <- NSE(sim = pred_train_var_s, obs = training_var_s_c$shannon)

# With abundance as response -----------------------------
# with model using measured values - test set
nse_model_var_a_c <- NSE(sim = brt_pred_model_var_a_c, obs = responses_var_a)

# with model using raster extracted values - test set
nse_rast_var_a <- NSE(sim = pred_test$abundance_var, obs = pred_test$obs_abundance)

# with training data 
nse_train_var_a <- NSE(sim = pred_train_var_a, obs = training_var_a_c$abundance)

# With rel_abundance as response
# with model using measured values - test set
nse_model_var_ra_c <- NSE(sim = brt_pred_model_var_ra_c, obs = responses_var_ra)

# with model using raster extracted values - test set
nse_rast_var_ra <- NSE(sim = pred_test$rel_abundance_var, obs = pred_test$obs_rel_abundance)

# with training data 
nse_train_var_ra <- NSE(sim = pred_train_var_ra, obs = training_var_ra_c$rel_abundance)
```

## Write Evaluation Results 
```{r}
# write evaluation metrics into df
# metric results calculated from simulated values extracted from rasters
metric_results_raster <- data.frame(nse = c(nse_rast_v_k, nse_rast_v_s, nse_rast_v_a, nse_rast_v_ra,
nse_rast_wd_k, nse_rast_wd_s, nse_rast_wd_a, nse_rast_wd_ra,
nse_rast_var_k, nse_rast_var_s, nse_rast_var_a, nse_rast_var_ra),

r2 = c(r2_rast_v_k, r2_rast_v_s, r2_rast_v_a, r2_rast_v_ra,
r2_rast_wd_k, r2_rast_wd_s, r2_rast_wd_a, r2_rast_wd_ra,
r2_rast_var_k, r2_rast_var_s, r2_rast_var_a, r2_rast_var_ra),

bias = c(bias_rast_v_k, bias_rast_v_s, bias_rast_v_a, bias_rast_v_ra,
bias_rast_wd_k, bias_rast_wd_s, bias_rast_wd_a, bias_rast_wd_ra,
bias_rast_var_k, bias_rast_var_s, bias_rast_var_a, bias_rast_var_ra),

rmse = c(rmse_rast_v_k, rmse_rast_v_s, rmse_rast_v_a, rmse_rast_v_ra,
rmse_rast_wd_k, rmse_rast_wd_s, rmse_rast_wd_a, rmse_rast_wd_ra,
rmse_rast_var_k, rmse_rast_var_s, rmse_rast_var_a, rmse_rast_var_ra),

mae = c(mae_rast_v_k, mae_rast_v_s, mae_rast_v_a, mae_rast_v_ra,
mae_rast_wd_k, mae_rast_wd_s, mae_rast_wd_a, mae_rast_wd_ra,
mae_rast_var_k, mae_rast_var_s, mae_rast_var_a, mae_rast_var_ra),

index = c("k_index", "shannon", "abundance", "rel_abundance",
"k_index", "shannon", "abundance", "rel_abundance",
"k_index", "shannon", "abundance", "rel_abundance"),

model = c("brt", "brt", "brt", "brt",
"brt", "brt", "brt", "brt",
"brt", "brt", "brt", "brt"),

predictor = c("v", "v", "v", "v", 
              "v + wd", "v + wd", "v + wd", "v + wd",  
              "var", "var", "var", "var"),

origin = c("raster_extract", "raster_extract", "raster_extract","raster_extract",
"raster_extract", "raster_extract", "raster_extract","raster_extract", 
"raster_extract", "raster_extract", "raster_extract","raster_extract"))

# metric results calculated from simulated values using measured v and wd
metric_results_measured <- data.frame(nse = c(nse_model_v_k_c, nse_model_v_s_c, nse_model_v_a_c, nse_model_v_ra_c, nse_model_wd_k_c, nse_model_wd_s_c, nse_model_wd_a_c, nse_model_wd_ra_c, nse_model_samp_k_c, nse_model_samp_s_c, nse_model_samp_a_c, nse_model_samp_ra_c, nse_model_sec_k_c, nse_model_sec_s_c, nse_model_sec_a_c, nse_model_sec_ra_c, nse_model_var_k_c, nse_model_var_s_c, nse_model_var_a_c, nse_model_var_ra_c),

                                      r2 = c(r2_v_k, r2_v_s, r2_v_a, r2_v_ra, r2_wd_k, r2_wd_s, r2_wd_a, r2_wd_ra, r2_samp_k, r2_samp_s, r2_samp_a, r2_samp_ra, r2_sec_k, r2_sec_s, r2_sec_a, r2_sec_ra, r2_var_k, r2_var_s, r2_var_a, r2_var_ra),
                                      
bias = c(bias_model_v_k_c, bias_model_v_s_c, bias_model_v_a_c, bias_model_v_ra_c, bias_model_wd_k_c,bias_model_wd_s_c, bias_model_wd_a_c, bias_model_wd_ra_c, bias_model_samp_k_c, bias_model_samp_s_c, bias_model_samp_a_c, bias_model_samp_ra_c, bias_model_sec_k_c, bias_model_sec_s_c, bias_model_sec_a_c, bias_model_sec_ra_c, bias_model_var_k_c, bias_model_var_s_c, bias_model_var_a_c, bias_model_var_ra_c),

rmse = c(rmse_model_v_k_c, rmse_model_v_s_c, rmse_model_v_a_c, rmse_model_v_ra_c, rmse_model_wd_k_c, rmse_model_wd_s_c, rmse_model_wd_a_c, rmse_model_wd_ra_c, rmse_model_samp_k_c, rmse_model_samp_s_c, rmse_model_samp_a_c, rmse_model_samp_ra_c, rmse_model_sec_k_c, rmse_model_sec_s_c, rmse_model_sec_a_c, rmse_model_sec_ra_c, rmse_model_var_k_c, rmse_model_var_s_c, rmse_model_var_a_c, rmse_model_var_ra_c),

mae = c(mae_model_v_k_c, mae_model_v_s_c, mae_model_v_a_c, mae_model_v_ra_c, mae_model_wd_k_c, mae_model_wd_s_c, mae_model_wd_a_c, mae_model_wd_ra_c, mae_model_samp_k_c, mae_model_samp_s_c, mae_model_samp_a_c, mae_model_samp_ra_c, mae_model_sec_k_c, mae_model_sec_s_c, mae_model_sec_a_c, mae_model_sec_ra_c, mae_model_var_k_c, mae_model_var_s_c, mae_model_var_a_c, mae_model_var_ra_c), 

index = c("k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance",
          "k_index", "shannon", "abundance", "rel_abundance"),

model = c("brt", "brt", "brt", "brt", 
          "brt", "brt", "brt", "brt", 
          "brt", "brt", "brt", "brt",
          "brt", "brt", "brt", "brt",
          "brt", "brt", "brt", "brt"),

predictor = c("v", "v", "v", "v", 
              "v + wd", "v + wd", "v + wd", "v + wd",  
              "samp", "samp", "samp", "samp", 
              "all", "all", "all", "all",
              "var", "var", "var", "var"),

origin = c("measured", "measured", "measured","measured",
"measured", "measured", "measured","measured", 
"measured", "measured", "measured","measured",
"measured", "measured", "measured","measured",
"measured", "measured", "measured","measured"))

# metric results calculated for training data
metrics_training <- data.frame(nse = c(nse_train_v_k, nse_train_v_s, nse_train_v_a, nse_train_v_ra,
nse_train_wd_k, nse_train_wd_s, nse_train_wd_a, nse_train_wd_ra,
nse_train_samp_k, nse_train_samp_s, nse_train_samp_a, nse_train_samp_ra,
nse_train_sec_k, nse_train_sec_s, nse_train_sec_a, nse_train_sec_ra,
nse_train_var_k, nse_train_var_s, nse_train_var_a, nse_train_var_ra),

r2 = c(r2_train_v_k, r2_train_v_s, r2_train_v_a, r2_train_v_ra,
r2_train_wd_k, r2_train_wd_s, r2_train_wd_a, r2_train_wd_ra,
r2_train_samp_k, r2_train_samp_s, r2_train_samp_a, r2_train_samp_ra,
r2_train_sec_k, r2_train_sec_s, r2_train_sec_a, r2_train_sec_ra,
r2_train_var_k, r2_train_var_s, r2_train_var_a, r2_train_var_ra),

bias = c(bias_train_v_k, bias_train_v_s, bias_train_v_a, bias_train_v_ra,
bias_train_wd_k, bias_train_wd_s, bias_train_wd_a, bias_train_wd_ra,
bias_train_samp_k, bias_train_samp_s, bias_train_samp_a, bias_train_samp_ra,
bias_train_sec_k, bias_train_sec_s, bias_train_sec_a, bias_train_sec_ra,
bias_train_var_k, bias_train_var_s, bias_train_var_a, bias_train_var_ra),

rmse = c(rmse_train_v_k, rmse_train_v_s, rmse_train_v_a, rmse_train_v_ra,
rmse_train_wd_k, rmse_train_wd_s, rmse_train_wd_a, rmse_train_wd_ra,
rmse_train_samp_k, rmse_train_samp_s, rmse_train_samp_a, rmse_train_samp_ra,
rmse_train_sec_k, rmse_train_sec_s, rmse_train_sec_a, rmse_train_sec_ra,
rmse_train_var_k, rmse_train_var_s, rmse_train_var_a, rmse_train_var_ra),

mae = c(mae_train_v_k, mae_train_v_s, mae_train_v_a, mae_train_v_ra,
mae_train_wd_k, mae_train_wd_s, mae_train_wd_a, mae_train_wd_ra,
mae_train_samp_k, mae_train_samp_s, mae_train_samp_a, mae_train_samp_ra,
mae_train_sec_k, mae_train_sec_s, mae_train_sec_a, mae_train_sec_ra,
mae_train_var_k, mae_train_var_s, mae_train_var_a, mae_train_var_ra),

index = c("k_index", "shannon", "abundance", "rel_abundance",
"k_index", "shannon", "abundance", "rel_abundance",
"k_index", "shannon", "abundance", "rel_abundance",
"k_index", "shannon", "abundance", "rel_abundance",
"k_index", "shannon", "abundance", "rel_abundance"),

model = c("brt", "brt", "brt", "brt", 
          "brt", "brt", "brt", "brt", 
          "brt", "brt", "brt", "brt",
          "brt", "brt", "brt", "brt",
          "brt", "brt", "brt", "brt"),

predictor = c("velocity", "velocity", "velocity", "velocity",
"wd", "wd", "wd", "wd",
"samp", "samp", "samp", "samp",
"all", "all", "all", "all", 
"var", "var", "var", "var"),

origin = c("training", "training", "training","training",
"training", "training", "training","training", 
"training", "training", "training","training",
"training", "training", "training","training",
"training", "training", "training","training"))

# bind all dataframes together into one cohesive dataframe 
all_metrics <- rbind(metric_results_measured, metric_results_raster, metrics_training)

# write results into a .csv 
write.csv(metric_results_measured, "Stat_Analysis/ml_evaluation_metrics_measured_brt.csv", row.names = FALSE)

write.csv(metric_results_raster, "Stat_Analysis/ml_evaluation_metrics_raster_brt.csv", row.names = FALSE)

write.csv(metrics_training, "Stat_Analysis/ml_evaluation_metrics_training_brt.csv", row.names = FALSE)

write.csv(all_metrics, "Stat_Analysis/ml_evaluation_metrics_all_brt.csv", row.names = FALSE)
```
 
## - PDP - *sec*
 
# Extract 
## Read rasters
```{r}
# read rasters containing wd and velocity 
GL1_ezg <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg.grd")
GL1_v_ezg <- stack("Pre_Processing/raster_files/GL1_v_2_56_ezg.tif")
GL1_ezg_var <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg_var.grd")

# Reorder the layers
new_order <- c(3, 1, 2, 4, 5, 6, 7)  # Specify the new order of layers
GL1_ezg_var <- GL1_ezg_var[[new_order]]

GL2_ezg <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg.grd")
GL2_v_ezg <- stack("Pre_Processing/raster_files/GL2_v_2_37_ezg.tif")
GL2_ezg_var <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg_var.grd")

# Reorder the layers
GL2_ezg_var <- GL2_ezg_var[[new_order]]

L2_ezg <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg.grd")
L2_v_ezg <- stack("Pre_Processing/raster_files/L2_v_9_54_ezg.tif")
L2_ezg_var <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg_var.grd")

# Reorder the layers
L2_ezg_var <- L2_ezg_var[[new_order]]

M1_ezg <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg.grd")
M1_v_ezg <- stack("Pre_Processing/raster_files/M1_v_1_50_ezg.tif")
M1_ezg_var <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg_var.grd")

# Reorder the layers
M1_ezg_var <- M1_ezg_var[[new_order]]

S1_ezg <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg.grd")
S1_v_ezg <- stack("Pre_Processing/raster_files/S1_v_1_94_ezg.tif")
S1_ezg_var <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg_var.grd")

# Reorder the layers
S1_ezg_var <- S1_ezg_var[[new_order]]

S2_ezg <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg.grd")
S2_v_ezg <- stack("Pre_Processing/raster_files/S2_v_1_93_ezg.tif")
S2_ezg_var <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg_var.grd")

# Reorder the layers
S2_ezg_var <- S2_ezg_var[[new_order]]

TH4_ezg <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg.grd")
TH4_v_ezg <- stack("Pre_Processing/raster_files/TH4_v_35_12_ezg.tif")
TH4_ezg_var <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg_var.grd")

# Reorder the layers
TH4_ezg_var <- TH4_ezg_var[[new_order]]

VR3_ezg <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg.grd")
VR3_v_ezg <- stack("Pre_Processing/raster_files/VR3_v_21_51_ezg.tif")
VR3_ezg_var <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg_var.grd")

# Reorder the layers
VR3_ezg_var <- VR3_ezg_var[[new_order]]

# rename rasters in stacks for extraction 
names(GL1_ezg) <- c("velocity", "wd_m")  
names(GL1_v_ezg) <- c("velocity")

names(GL2_ezg) <- c("velocity", "wd_m") 
names(GL2_v_ezg) <- c("velocity")
#names(GL2_q) <- c("velocity", "wd_m")

names(L2_ezg) <- c("velocity", "wd_m")
names(L2_v_ezg) <- c("velocity")
#names(L2_q) <- c("velocity", "wd_m")

names(M1_ezg) <- c("velocity", "wd_m") 
names(M1_v_ezg) <- c("velocity")
#names(M1_q) <- c("velocity", "wd_m") 

names(S1_ezg) <- c("velocity", "wd_m") 
names(S1_v_ezg) <- c("velocity")
#names(S1_q) <- c("velocity", "wd_m")  

names(S2_ezg) <- c("velocity", "wd_m")
names(S2_v_ezg) <- c("velocity")
#names(S2_q) <- c("velocity", "wd_m") 

names(TH4_ezg) <- c("velocity", "wd_m") 
names(TH4_v_ezg) <- c("velocity")
#names(TH4_q) <- c("velocity", "wd_m") 

names(VR3_ezg) <- c("velocity", "wd_m")
names(VR3_v_ezg) <- c("velocity")
#names(VR3_q) <- c("velocity", "wd_m") 

# assign coordinate system 
crs(GL1_ezg) <- "EPSG: 2056"
#crs(GL1_q) <- "EPSG: 2056"

crs(GL2_ezg) <- "EPSG: 2056"
#crs(GL2_q) <- "EPSG: 2056"

crs(L2_ezg) <- "EPSG: 2056"
#crs(L2_q) <- "EPSG: 2056"

crs(M1_ezg) <- "EPSG: 2056"
#crs(M1_q) <- "EPSG: 2056"

crs(S1_ezg) <- "EPSG: 2056"
#crs(S1_q) <- "EPSG: 2056"

crs(S2_ezg) <- "EPSG: 2056"
#crs(S2_q) <- "EPSG: 2056"

crs(TH4_ezg) <- "EPSG: 2056"
#crs(TH4_q) <- "EPSG: 2056"

crs(VR3_ezg) <- "EPSG: 2056"
#crs(VR3_q) <- "EPSG: 2056"
```

## Predict Models to Maps 
```{r}
# predict ML model to rasters with velocity and wd 
# The work-around is to write a prediction function that first coerces the data.frame with "new data" to a matrix. We can use that function with predict<SpatRaster>
xgbpred <- function(model, data, ...) {
    predict(model, newdata=as.matrix(data), ...)
}
```

### GL1
```{r}
# GL1 - predictors: v + wd ----------------------------------------------------
GL1_ezg_wd_k <- terra::predict(GL1_ezg, model = xgb_wd_k_c, fun = xgbpred)
GL1_ezg_wd_s <- terra::predict(GL1_ezg, model = xgb_wd_s_c, fun = xgbpred)
GL1_ezg_wd_a <- terra::predict(GL1_ezg, model = xgb_wd_a_c, fun = xgbpred)
GL1_ezg_wd_ra <- terra::predict(GL1_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# GL1 - predictor: velocity ---------------------------------------------------
GL1_ezg_v_k <- terra::predict(GL1_v_ezg, model = xgb_v_k_c, fun = xgbpred)
GL1_ezg_v_s <- terra::predict(GL1_v_ezg, model = xgb_v_s_c, fun = xgbpred)
GL1_ezg_v_a <- terra::predict(GL1_v_ezg, model = xgb_v_a_c, fun = xgbpred)
GL1_ezg_v_ra <- terra::predict(GL1_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# GL1 - predictors: selected variables ----------------------------------------
GL1_ezg_var_k <- terra::predict(GL1_ezg_var, model = xgb_var_k_c, fun = xgbpred)
GL1_ezg_var_s <- terra::predict(GL1_ezg_var, model = xgb_var_s_c, fun = xgbpred)
GL1_ezg_var_a <- terra::predict(GL1_ezg_var, model = xgb_var_a_c, fun = xgbpred)
GL1_ezg_var_ra <- terra::predict(GL1_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### GL2
```{r}
# GL2 - predictors: v + wd ----------------------------------------------------
GL2_ezg_wd_k <- terra::predict(GL2_ezg, model = xgb_wd_k_c, fun = xgbpred)
GL2_ezg_wd_s <- terra::predict(GL2_ezg, model = xgb_wd_s_c, fun = xgbpred)
GL2_ezg_wd_a <- terra::predict(GL2_ezg, model = xgb_wd_a_c, fun = xgbpred)
GL2_ezg_wd_ra <- terra::predict(GL2_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# GL2 - predictor: velocity ---------------------------------------------------
GL2_ezg_v_k <- terra::predict(GL2_v_ezg, model = xgb_v_k_c, fun = xgbpred)
GL2_ezg_v_s <- terra::predict(GL2_v_ezg, model = xgb_v_s_c, fun = xgbpred)
GL2_ezg_v_a <- terra::predict(GL2_v_ezg, model = xgb_v_a_c, fun = xgbpred)
GL2_ezg_v_ra <- terra::predict(GL2_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# GL2 - predictors: selected variables ----------------------------------------
GL2_ezg_var_k <- terra::predict(GL2_ezg_var, model = xgb_var_k_c, fun = xgbpred)
GL2_ezg_var_s <- terra::predict(GL2_ezg_var, model = xgb_var_s_c, fun = xgbpred)
GL2_ezg_var_a <- terra::predict(GL2_ezg_var, model = xgb_var_a_c, fun = xgbpred)
GL2_ezg_var_ra <- terra::predict(GL2_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### L2
```{r}
# L2 - predictors: v + wd -----------------------------------------------------
L2_ezg_wd_k <- terra::predict(L2_ezg, model = xgb_wd_k_c, fun = xgbpred)
L2_ezg_wd_s <- terra::predict(L2_ezg, model = xgb_wd_s_c, fun = xgbpred)
L2_ezg_wd_a <- terra::predict(L2_ezg, model = xgb_wd_a_c, fun = xgbpred)
L2_ezg_wd_ra <- terra::predict(L2_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# L2 - predictor: velocity ----------------------------------------------------
L2_ezg_v_k <- terra::predict(L2_v_ezg, model = xgb_v_k_c, fun = xgbpred)
L2_ezg_v_s <- terra::predict(L2_v_ezg, model = xgb_v_s_c, fun = xgbpred)
L2_ezg_v_a <- terra::predict(L2_v_ezg, model = xgb_v_a_c, fun = xgbpred)
L2_ezg_v_ra <- terra::predict(L2_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# L2 - predictors: selected variables -----------------------------------------
L2_ezg_var_k <- terra::predict(L2_ezg_var, model = xgb_var_k_c, fun = xgbpred)
L2_ezg_var_s <- terra::predict(L2_ezg_var, model = xgb_var_s_c, fun = xgbpred)
L2_ezg_var_a <- terra::predict(L2_ezg_var, model = xgb_var_a_c, fun = xgbpred)
L2_ezg_var_ra <- terra::predict(L2_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### M1
```{r}
# M1  - predictors: v + wd -----------------------------------------------------
M1_ezg_wd_k <- terra::predict(M1_ezg, model = xgb_wd_k_c, fun = xgbpred)
M1_ezg_wd_s <- terra::predict(M1_ezg, model = xgb_wd_s_c, fun = xgbpred)
M1_ezg_wd_a <- terra::predict(M1_ezg, model = xgb_wd_a_c, fun = xgbpred)
M1_ezg_wd_ra <- terra::predict(M1_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# M1  - predictor: velocity ---------------------------------------------------
M1_ezg_v_k <- terra::predict(M1_v_ezg, model = xgb_v_k_c, fun = xgbpred)
M1_ezg_v_s <- terra::predict(M1_v_ezg, model = xgb_v_s_c, fun = xgbpred)
M1_ezg_v_a <- terra::predict(M1_v_ezg, model = xgb_v_a_c, fun = xgbpred)
M1_ezg_v_ra <- terra::predict(M1_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# M1  - predictors: selected variables ----------------------------------------
M1_ezg_var_k <- terra::predict(M1_ezg_var, model = xgb_var_k_c, fun = xgbpred)
M1_ezg_var_s <- terra::predict(M1_ezg_var, model = xgb_var_s_c, fun = xgbpred)
M1_ezg_var_a <- terra::predict(M1_ezg_var, model = xgb_var_a_c, fun = xgbpred)
M1_ezg_var_ra <- terra::predict(M1_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### S1
```{r}
# S1  - predictors: v + wd ----------------------------------------------------
S1_ezg_wd_k <- terra::predict(S1_ezg, model = xgb_wd_k_c, fun = xgbpred)
S1_ezg_wd_s <- terra::predict(S1_ezg, model = xgb_wd_s_c, fun = xgbpred)
S1_ezg_wd_a <- terra::predict(S1_ezg, model = xgb_wd_a_c, fun = xgbpred)
S1_ezg_wd_ra <- terra::predict(S1_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# S1  - predictor: velocity ---------------------------------------------------
S1_ezg_v_k <- terra::predict(S1_v_ezg, model = xgb_v_k_c, fun = xgbpred)
S1_ezg_v_s <- terra::predict(S1_v_ezg, model = xgb_v_s_c, fun = xgbpred)
S1_ezg_v_a <- terra::predict(S1_v_ezg, model = xgb_v_a_c, fun = xgbpred)
S1_ezg_v_ra <- terra::predict(S1_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# S1  - predictors: selected variables ---------------------------------------
S1_ezg_var_k <- terra::predict(S1_ezg_var, model = xgb_var_k_c, fun = xgbpred)
S1_ezg_var_s <- terra::predict(S1_ezg_var, model = xgb_var_s_c, fun = xgbpred)
S1_ezg_var_a <- terra::predict(S1_ezg_var, model = xgb_var_a_c, fun = xgbpred)
S1_ezg_var_ra <- terra::predict(S1_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### S2
```{r}
# S2  - predictors: v + wd ----------------------------------------------------
S2_ezg_wd_k <- terra::predict(S2_ezg, model = xgb_wd_k_c, fun = xgbpred)
S2_ezg_wd_s <- terra::predict(S2_ezg, model = xgb_wd_s_c, fun = xgbpred)
S2_ezg_wd_a <- terra::predict(S2_ezg, model = xgb_wd_a_c, fun = xgbpred)
S2_ezg_wd_ra <- terra::predict(S2_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# S2  - predictor: velocity ---------------------------------------------------
S2_ezg_v_k <- terra::predict(S2_v_ezg, model = xgb_v_k_c, fun = xgbpred)
S2_ezg_v_s <- terra::predict(S2_v_ezg, model = xgb_v_s_c, fun = xgbpred)
S2_ezg_v_a <- terra::predict(S2_v_ezg, model = xgb_v_a_c, fun = xgbpred)
S2_ezg_v_ra <- terra::predict(S2_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# S2  - predictors: selected variables ---------------------------------------
S2_ezg_var_k <- terra::predict(S2_ezg_var, model = xgb_var_k_c, fun = xgbpred)
S2_ezg_var_s <- terra::predict(S2_ezg_var, model = xgb_var_s_c, fun = xgbpred)
S2_ezg_var_a <- terra::predict(S2_ezg_var, model = xgb_var_a_c, fun = xgbpred)
S2_ezg_var_ra <- terra::predict(S2_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### TH4
```{r}
# TH4  - predictors: v + wd ---------------------------------------------------
TH4_ezg_wd_k <- terra::predict(TH4_ezg, model = xgb_wd_k_c, fun = xgbpred)
TH4_ezg_wd_s <- terra::predict(TH4_ezg, model = xgb_wd_s_c, fun = xgbpred)
TH4_ezg_wd_a <- terra::predict(TH4_ezg, model = xgb_wd_a_c, fun = xgbpred)
TH4_ezg_wd_ra <- terra::predict(TH4_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# TH4  - predictor: velocity --------------------------------------------------
TH4_ezg_v_k <- terra::predict(TH4_v_ezg, model =  xgb_v_k_c, fun = xgbpred)
TH4_ezg_v_s <- terra::predict(TH4_v_ezg, model = xgb_v_s_c, fun = xgbpred)
TH4_ezg_v_a <- terra::predict(TH4_v_ezg, model = xgb_v_a_c, fun = xgbpred)
TH4_ezg_v_ra <- terra::predict(TH4_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# TH4  - predictors: selected variables --------------------------------------
TH4_ezg_var_k <- terra::predict(TH4_ezg_var, model = xgb_var_k_c, fun = xgbpred)
TH4_ezg_var_s <- terra::predict(TH4_ezg_var, model = xgb_var_s_c, fun = xgbpred)
TH4_ezg_var_a <- terra::predict(TH4_ezg_var, model = xgb_var_a_c, fun = xgbpred)
TH4_ezg_var_ra <- terra::predict(TH4_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### VR3
```{r}
# VR3  - predictors: v + wd ---------------------------------------------------
VR3_ezg_wd_k <- terra::predict(VR3_ezg, model = xgb_wd_k_c, fun = xgbpred)
VR3_ezg_wd_s <- terra::predict(VR3_ezg, model = xgb_wd_s_c, fun = xgbpred)
VR3_ezg_wd_a <- terra::predict(VR3_ezg, model = xgb_wd_a_c, fun = xgbpred)
VR3_ezg_wd_ra <- terra::predict(VR3_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# VR3  - predictor: velocity --------------------------------------------------
VR3_ezg_v_k <- terra::predict(VR3_v_ezg, model = xgb_v_k_c, fun = xgbpred)
VR3_ezg_v_s <- terra::predict(VR3_v_ezg, model = xgb_v_s_c, fun = xgbpred)
VR3_ezg_v_a <- terra::predict(VR3_v_ezg, model = xgb_v_a_c, fun = xgbpred)
VR3_ezg_v_ra <- terra::predict(VR3_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# VR3  - predictors: selected variables ---------------------------------------
VR3_ezg_var_k <- terra::predict(VR3_ezg_var, model = xgb_var_k_c, fun = xgbpred)
VR3_ezg_var_s <- terra::predict(VR3_ezg_var, model = xgb_var_s_c, fun = xgbpred)
VR3_ezg_var_a <- terra::predict(VR3_ezg_var, model = xgb_var_a_c, fun = xgbpred)
VR3_ezg_var_ra <- terra::predict(VR3_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### Read data
```{r}
# read all raster results (one time flow velocity classes and one time for habitat suitability)
# prep extraction data 
## GL1
coord_GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1") |>
  dplyr::select(x, y) 

GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1")

## GL2
coord_GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2") |>
  dplyr::select(x, y) 

GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2")

## L2
coord_L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2") |>
  dplyr::select(x, y) 

L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2")

## M1
coord_M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1") |>
  dplyr::select(x, y) 

M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1")

## S1
coord_S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1") |>
  dplyr::select(x, y) 

S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1")

## S2
coord_S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2") |>
  dplyr::select(x, y) 

S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2")

## TH4
coord_TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4") |>
  dplyr::select(x, y) 

TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4")

## VR3
coord_VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3") |>
  dplyr::select(x, y) 

VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3")
```

## Extract Results
```{r}
# extract raster information for regression analysis later
# GL1 -------------------------------------------------------------------------
regr_GL1_wd_k <- raster::extract(GL1_ezg_wd_k, coord_GL1) 
regr_GL1_wd_s <- raster::extract(GL1_ezg_wd_s, coord_GL1) 
regr_GL1_wd_a <- raster::extract(GL1_ezg_wd_a, coord_GL1) 
regr_GL1_wd_ra <- raster::extract(GL1_ezg_wd_ra, coord_GL1) 

regr_GL1_v_k <- raster::extract(GL1_ezg_v_k, coord_GL1) 
regr_GL1_v_s <- raster::extract(GL1_ezg_v_s, coord_GL1) 
regr_GL1_v_a <- raster::extract(GL1_ezg_v_a, coord_GL1) 
regr_GL1_v_ra <- raster::extract(GL1_ezg_v_ra, coord_GL1)

regr_GL1_var_k <- raster::extract(GL1_ezg_var_k, coord_GL1) 
regr_GL1_var_s <- raster::extract(GL1_ezg_var_s, coord_GL1) 
regr_GL1_var_a <- raster::extract(GL1_ezg_var_a, coord_GL1) 
regr_GL1_var_ra <- raster::extract(GL1_ezg_var_ra, coord_GL1)

# GL2 -------------------------------------------------------------------------
regr_GL2_wd_k <- raster::extract(GL2_ezg_wd_k, coord_GL2) 
regr_GL2_wd_s <- raster::extract(GL2_ezg_wd_s, coord_GL2) 
regr_GL2_wd_a <- raster::extract(GL2_ezg_wd_a, coord_GL2) 
regr_GL2_wd_ra <- raster::extract(GL2_ezg_wd_ra, coord_GL2)

regr_GL2_v_k <- raster::extract(GL2_ezg_v_k, coord_GL2) 
regr_GL2_v_s <- raster::extract(GL2_ezg_v_s, coord_GL2) 
regr_GL2_v_a <- raster::extract(GL2_ezg_v_a, coord_GL2)
regr_GL2_v_ra <- raster::extract(GL2_ezg_v_ra, coord_GL2)

regr_GL2_var_k <- raster::extract(GL2_ezg_var_k, coord_GL2) 
regr_GL2_var_s <- raster::extract(GL2_ezg_var_s, coord_GL2) 
regr_GL2_var_a <- raster::extract(GL2_ezg_var_a, coord_GL2)
regr_GL2_var_ra <- raster::extract(GL2_ezg_var_ra, coord_GL2)

# L2 --------------------------------------------------------------------------
regr_L2_wd_k <- raster::extract(L2_ezg_wd_k, coord_L2) 
regr_L2_wd_s <- raster::extract(L2_ezg_wd_s, coord_L2) 
regr_L2_wd_a <- raster::extract(L2_ezg_wd_a, coord_L2) 
regr_L2_wd_ra <- raster::extract(L2_ezg_wd_ra, coord_L2) 

regr_L2_v_k <- raster::extract(L2_ezg_v_k, coord_L2) 
regr_L2_v_s <- raster::extract(L2_ezg_v_s, coord_L2) 
regr_L2_v_a <- raster::extract(L2_ezg_v_a, coord_L2)
regr_L2_v_ra <- raster::extract(L2_ezg_v_ra, coord_L2)

regr_L2_var_k <- raster::extract(L2_ezg_var_k, coord_L2) 
regr_L2_var_s <- raster::extract(L2_ezg_var_s, coord_L2) 
regr_L2_var_a <- raster::extract(L2_ezg_var_a, coord_L2)
regr_L2_var_ra <- raster::extract(L2_ezg_var_ra, coord_L2)

# M1 --------------------------------------------------------------------------
regr_M1_wd_k <- raster::extract(M1_ezg_wd_k, coord_M1) 
regr_M1_wd_s <- raster::extract(M1_ezg_wd_s, coord_M1) 
regr_M1_wd_a <- raster::extract(M1_ezg_wd_a, coord_M1) 
regr_M1_wd_ra <- raster::extract(M1_ezg_wd_ra, coord_M1) 

regr_M1_v_k <- raster::extract(M1_ezg_v_k, coord_M1) 
regr_M1_v_s <- raster::extract(M1_ezg_v_s, coord_M1) 
regr_M1_v_a <- raster::extract(M1_ezg_v_a, coord_M1)
regr_M1_v_ra <- raster::extract(M1_ezg_v_ra, coord_M1)

regr_M1_var_k <- raster::extract(M1_ezg_var_k, coord_M1) 
regr_M1_var_s <- raster::extract(M1_ezg_var_s, coord_M1) 
regr_M1_var_a <- raster::extract(M1_ezg_var_a, coord_M1)
regr_M1_var_ra <- raster::extract(M1_ezg_var_ra, coord_M1)

# S1 --------------------------------------------------------------------------
regr_S1_wd_k <- raster::extract(S1_ezg_wd_k, coord_S1) 
regr_S1_wd_s <- raster::extract(S1_ezg_wd_s, coord_S1) 
regr_S1_wd_a <- raster::extract(S1_ezg_wd_a, coord_S1) 
regr_S1_wd_ra <- raster::extract(S1_ezg_wd_ra, coord_S1) 

regr_S1_v_k <- raster::extract(S1_ezg_v_k, coord_S1) 
regr_S1_v_s <- raster::extract(S1_ezg_v_s, coord_S1) 
regr_S1_v_a <- raster::extract(S1_ezg_v_a, coord_S1)
regr_S1_v_ra <- raster::extract(S1_ezg_v_ra, coord_S1)

regr_S1_var_k <- raster::extract(S1_ezg_var_k, coord_S1) 
regr_S1_var_s <- raster::extract(S1_ezg_var_s, coord_S1) 
regr_S1_var_a <- raster::extract(S1_ezg_var_a, coord_S1)
regr_S1_var_ra <- raster::extract(S1_ezg_var_ra, coord_S1)

# S2 --------------------------------------------------------------------------
regr_S2_wd_k <- raster::extract(S2_ezg_wd_k, coord_S2) 
regr_S2_wd_s <- raster::extract(S2_ezg_wd_s, coord_S2) 
regr_S2_wd_a <- raster::extract(S2_ezg_wd_a, coord_S2) 
regr_S2_wd_ra <- raster::extract(S2_ezg_wd_ra, coord_S2)

regr_S2_v_k <- raster::extract(S2_ezg_v_k, coord_S2) 
regr_S2_v_s <- raster::extract(S2_ezg_v_s, coord_S2) 
regr_S2_v_a <- raster::extract(S2_ezg_v_a, coord_S2)
regr_S2_v_ra <- raster::extract(S2_ezg_v_ra, coord_S2)

regr_S2_var_k <- raster::extract(S2_ezg_var_k, coord_S2) 
regr_S2_var_s <- raster::extract(S2_ezg_var_s, coord_S2) 
regr_S2_var_a <- raster::extract(S2_ezg_var_a, coord_S2)
regr_S2_var_ra <- raster::extract(S2_ezg_var_ra, coord_S2)

# TH4 -------------------------------------------------------------------------
regr_TH4_wd_k <- raster::extract(TH4_ezg_wd_k, coord_TH4) 
regr_TH4_wd_s <- raster::extract(TH4_ezg_wd_s, coord_TH4) 
regr_TH4_wd_a <- raster::extract(TH4_ezg_wd_a, coord_TH4) 
regr_TH4_wd_ra <- raster::extract(TH4_ezg_wd_ra, coord_TH4) 

regr_TH4_v_k <- raster::extract(TH4_ezg_v_k, coord_TH4) 
regr_TH4_v_s <- raster::extract(TH4_ezg_v_s, coord_TH4) 
regr_TH4_v_a <- raster::extract(TH4_ezg_v_a, coord_TH4)
regr_TH4_v_ra <- raster::extract(TH4_ezg_v_ra, coord_TH4)

regr_TH4_var_k <- raster::extract(TH4_ezg_var_k, coord_TH4) 
regr_TH4_var_s <- raster::extract(TH4_ezg_var_s, coord_TH4) 
regr_TH4_var_a <- raster::extract(TH4_ezg_var_a, coord_TH4)
regr_TH4_var_ra <- raster::extract(TH4_ezg_var_ra, coord_TH4)

# VR3 -------------------------------------------------------------------------
regr_VR3_wd_k <- raster::extract(VR3_ezg_wd_k, coord_VR3) 
regr_VR3_wd_s <- raster::extract(VR3_ezg_wd_s, coord_VR3) 
regr_VR3_wd_a <- raster::extract(VR3_ezg_wd_a, coord_VR3) 
regr_VR3_wd_ra <- raster::extract(VR3_ezg_wd_ra, coord_VR3)

regr_VR3_v_k <- raster::extract(VR3_ezg_v_k, coord_VR3) 
regr_VR3_v_s <- raster::extract(VR3_ezg_v_s, coord_VR3) 
regr_VR3_v_a <- raster::extract(VR3_ezg_v_a, coord_VR3)
regr_VR3_v_ra <- raster::extract(VR3_ezg_v_ra, coord_VR3)

regr_VR3_var_k <- raster::extract(VR3_ezg_var_k, coord_VR3) 
regr_VR3_var_s <- raster::extract(VR3_ezg_var_s, coord_VR3) 
regr_VR3_var_a <- raster::extract(VR3_ezg_var_a, coord_VR3)
regr_VR3_var_ra <- raster::extract(VR3_ezg_var_ra, coord_VR3)
```

## Combine into DF
```{r}
# combine all results into dataframe
# GL1 -------------------------------------------------------------------------
data_GL1 <- cbind(regr_GL1_wd_k, regr_GL1_wd_s, regr_GL1_wd_a, regr_GL1_wd_ra, regr_GL1_v_k, regr_GL1_v_s, regr_GL1_v_a, regr_GL1_v_ra, regr_GL1_var_k, regr_GL1_var_s, regr_GL1_var_a, regr_GL1_var_ra, GL1) |>
  dplyr::rename(
         k_index_wd = regr_GL1_wd_k,
         shannon_wd = regr_GL1_wd_s,
         abundance_wd = regr_GL1_wd_a,
         rel_abundance_wd = regr_GL1_wd_ra,
         k_index_v = regr_GL1_v_k,
         shannon_v = regr_GL1_v_s,
         abundance_v = regr_GL1_v_a,
         rel_abundance_v = regr_GL1_v_ra,
         k_index_var = regr_GL1_var_k,
         shannon_var = regr_GL1_var_s,
         abundance_var = regr_GL1_var_a,
         rel_abundance_var = regr_GL1_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# GL2 -------------------------------------------------------------------------
data_GL2 <- cbind(regr_GL2_wd_k, regr_GL2_wd_s, regr_GL2_wd_a, regr_GL2_wd_ra, regr_GL2_v_k, regr_GL2_v_s, regr_GL2_v_a, regr_GL2_v_ra, regr_GL2_var_k, regr_GL2_var_s, regr_GL2_var_a, regr_GL2_var_ra, GL2) |>
  dplyr::rename(
         k_index_wd = regr_GL2_wd_k,
         shannon_wd = regr_GL2_wd_s,
         abundance_wd = regr_GL2_wd_a,
         rel_abundance_wd = regr_GL2_wd_ra,
         k_index_v = regr_GL2_v_k,
         shannon_v = regr_GL2_v_s,
         abundance_v = regr_GL2_v_a,
         rel_abundance_v = regr_GL2_v_ra,
         k_index_var = regr_GL2_var_k,
         shannon_var = regr_GL2_var_s,
         abundance_var = regr_GL2_var_a,
         rel_abundance_var = regr_GL2_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# L2 --------------------------------------------------------------------------
data_L2 <- cbind(regr_L2_wd_k, regr_L2_wd_s, regr_L2_wd_a, regr_L2_wd_ra, regr_L2_v_k, regr_L2_v_s, regr_L2_v_a, regr_L2_v_ra, regr_L2_var_k, regr_L2_var_s, regr_L2_var_a, regr_L2_var_ra, L2) |>
  dplyr::rename(
         k_index_wd = regr_L2_wd_k,
         shannon_wd = regr_L2_wd_s,
         abundance_wd = regr_L2_wd_a,
         rel_abundance_wd = regr_L2_wd_ra,
         k_index_v = regr_L2_v_k,
         shannon_v = regr_L2_v_s,
         abundance_v = regr_L2_v_a,
         rel_abundance_v = regr_L2_v_ra,
         k_index_var = regr_L2_var_k,
         shannon_var = regr_L2_var_s,
         abundance_var = regr_L2_var_a,
         rel_abundance_var = regr_L2_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# M1 --------------------------------------------------------------------------
data_M1 <- cbind(regr_M1_wd_k, regr_M1_wd_s, regr_M1_wd_a, regr_M1_wd_ra, regr_M1_v_k, regr_M1_v_s, regr_M1_v_a, regr_M1_v_ra, regr_M1_var_k, regr_M1_var_s, regr_M1_var_a, regr_M1_var_ra, M1) |>
  dplyr::rename(
         k_index_wd = regr_M1_wd_k,
         shannon_wd = regr_M1_wd_s,
         abundance_wd = regr_M1_wd_a,
         rel_abundance_wd = regr_M1_wd_ra,
         k_index_v = regr_M1_v_k,
         shannon_v = regr_M1_v_s,
         abundance_v = regr_M1_v_a,
         rel_abundance_v = regr_M1_v_ra,
         k_index_var = regr_M1_var_k,
         shannon_var = regr_M1_var_s,
         abundance_var = regr_M1_var_a,
         rel_abundance_var = regr_M1_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# S1 --------------------------------------------------------------------------
data_S1 <- cbind(regr_S1_wd_k, regr_S1_wd_s, regr_S1_wd_a, regr_S1_wd_ra, regr_S1_v_k, regr_S1_v_s, regr_S1_v_a, regr_S1_v_ra, regr_S1_var_k, regr_S1_var_s, regr_S1_var_a, regr_S1_var_ra, S1) |>
  dplyr::rename(
         k_index_wd = regr_S1_wd_k,
         shannon_wd = regr_S1_wd_s,
         abundance_wd = regr_S1_wd_a,
         rel_abundance_wd = regr_S1_wd_ra,
         k_index_v = regr_S1_v_k,
         shannon_v = regr_S1_v_s,
         abundance_v = regr_S1_v_a,
         rel_abundance_v = regr_S1_v_ra,
         k_index_var = regr_S1_var_k,
         shannon_var = regr_S1_var_s,
         abundance_var = regr_S1_var_a,
         rel_abundance_var = regr_S1_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# S2 --------------------------------------------------------------------------
data_S2 <- cbind(regr_S2_wd_k, regr_S2_wd_s, regr_S2_wd_a, regr_S2_wd_ra, regr_S2_v_k, regr_S2_v_s, regr_S2_v_a, regr_S2_v_ra, regr_S2_var_k, regr_S2_var_s, regr_S2_var_a, regr_S2_var_ra, S2) |>
  dplyr::rename(
         k_index_wd = regr_S2_wd_k,
         shannon_wd = regr_S2_wd_s,
         abundance_wd = regr_S2_wd_a,
         rel_abundance_wd = regr_S2_wd_ra,
         k_index_v = regr_S2_v_k,
         shannon_v = regr_S2_v_s,
         abundance_v = regr_S2_v_a,
         rel_abundance_v = regr_S2_v_ra,
         k_index_var = regr_S2_var_k,
         shannon_var = regr_S2_var_s,
         abundance_var = regr_S2_var_a,
         rel_abundance_var = regr_S2_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)


# TH4 -------------------------------------------------------------------------
data_TH4 <- cbind(regr_TH4_wd_k, regr_TH4_wd_s, regr_TH4_wd_a, regr_TH4_wd_ra, regr_TH4_v_k, regr_TH4_v_s, regr_TH4_v_a, regr_TH4_v_ra, regr_TH4_var_k, regr_TH4_var_s, regr_TH4_var_a, regr_TH4_var_ra, TH4) |>
  dplyr::rename(
         k_index_wd = regr_TH4_wd_k,
         shannon_wd = regr_TH4_wd_s,
         abundance_wd = regr_TH4_wd_a,
         rel_abundance_wd = regr_TH4_wd_ra,
         k_index_v = regr_TH4_v_k,
         shannon_v = regr_TH4_v_s,
         abundance_v = regr_TH4_v_a,
         rel_abundance_v = regr_TH4_v_ra,
         k_index_var = regr_TH4_var_k,
         shannon_var = regr_TH4_var_s,
         abundance_var = regr_TH4_var_a,
         rel_abundance_var = regr_TH4_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)


# VR3 -------------------------------------------------------------------------
data_VR3 <- cbind(regr_VR3_wd_k, regr_VR3_wd_s, regr_VR3_wd_a, regr_VR3_wd_ra, regr_VR3_v_k, regr_VR3_v_s, regr_VR3_v_a, regr_VR3_v_ra, regr_VR3_var_k, regr_VR3_var_s, regr_VR3_var_a, regr_VR3_var_ra, VR3) |>
  dplyr::rename(
         k_index_wd = regr_VR3_wd_k,
         shannon_wd = regr_VR3_wd_s,
         abundance_wd = regr_VR3_wd_a,
         rel_abundance_wd = regr_VR3_wd_ra,
         k_index_v = regr_VR3_v_k,
         shannon_v = regr_VR3_v_s,
         abundance_v = regr_VR3_v_a,
         rel_abundance_v = regr_VR3_v_ra,
         k_index_var = regr_VR3_var_k,
         shannon_var = regr_VR3_var_s,
         abundance_var = regr_VR3_var_a,
         rel_abundance_var = regr_VR3_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)
```

## Results from Extraction 
```{r}
# bind results together 
regr_analysis <- rbind(data_GL1, data_GL2, data_L2, data_M1, data_S1, data_S2, data_TH4, data_VR3)

# export to .csv file
write.csv(regr_analysis, "Stat_Analysis/stat_analysis_data/regr_analysis_brt.csv", row.names = FALSE)
```


