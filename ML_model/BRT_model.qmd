---
title: "BRT_model"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
pkgCheck("Fgmutils") # for bias calculation (bias() function)
pkgCheck("hydroGOF") # for NSE calculation with NSE() function 
```

# Load & prepare data 
```{r}
# Load data containing velocity as predictor variable 
data_v <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_v.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing velocity and wd as predictors 
data_wd <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_wd_v.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing all variables measured at each sampling locations and remove all other "chr" variables
data_sampling <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_sampling.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type) |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# Load data containing all variables measured at each river section and remove all other "chr" variables
# Additionally, remove ox_sat columns, as they contain NA values
data_section <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_section.csv") |>
  dplyr::select(-clog_3_class, -clog_6_class, -sub_type, -Hydropeaking_river_type, -Hydrokeaking_residual_flow_natural_near_natural, -date, -time, -time_before, -time_during, -time_after, -Category_Water_depth, -Number_Taxa, -EPT_Taxa, -ox_sat_after, -ox_sat_before, -ox_sat_during, -hydr_type_int, -hydr_int) |>
  dplyr::rename(Reach_Untersuchungsstelle = reach)

# load data containing selected variables 
data_var <- read_delim("Pre_Processing/abiotic_mi_sampling/ml_selected_var.csv") |>
  dplyr::rename(Reach_Untersuchungsstelle = reach) |>
  mutate(ecomorph_class = if_else(ecomorph_class == "-", 0, as.numeric(ecomorph_class)))
```
    
```{r}
### TRAINING SETS ###
# w/o hydr. models "GL1", "GL2", "L2", "M1", "S1", "S2", "TH4", "VR3"
# training set containing velocity 
training_v <- data_v |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing velocity + wd
training_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location 
training_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all env. variables measured at each sampling location and overall river section 
training_section <- data_section |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4", 
         Reach_Untersuchungsstelle != "VR3")

# training set containing all variables selected 
training_var <- data_var |>
  filter(Reach_Untersuchungsstelle != "GL1",
         Reach_Untersuchungsstelle != "GL2",         
         Reach_Untersuchungsstelle != "L2",
         Reach_Untersuchungsstelle != "M1",
         Reach_Untersuchungsstelle != "S1",
         Reach_Untersuchungsstelle != "S2",
         Reach_Untersuchungsstelle != "TH4",
         Reach_Untersuchungsstelle != "VR3")

### TEST SETS ###
# test set containing velocity 
test_v <- data_v |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing velocity + wd
test_wd <- data_wd |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location 
test_sampling <- data_sampling |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# test set containing all env. variables measured at each sampling location and overall river section 
test_section <- data_section |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")

# training set containing all variables selected 
test_var <- data_var |>
  filter(Reach_Untersuchungsstelle == "GL1" |
         Reach_Untersuchungsstelle == "GL2" |       
         Reach_Untersuchungsstelle == "L2" |
         Reach_Untersuchungsstelle == "M1" |
         Reach_Untersuchungsstelle == "S1" |
         Reach_Untersuchungsstelle == "S2" |
         Reach_Untersuchungsstelle == "TH4" | 
         Reach_Untersuchungsstelle == "VR3")
```

## Training Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response 
training_v_k <- training_v |>
  dplyr::select(k_index, velocity, x, y)

# With shannon index as response 
training_v_s <- training_v |>
  dplyr::select(shannon, velocity, x, y)

# With abundance as response 
training_v_a <- training_v |>
  dplyr::select(abundance, velocity, x, y)

# With relative abundance as response  
training_v_ra <- training_v |>
  dplyr::select(rel_abundance, velocity, x, y)

### PREDICTOR: VELOCITY AND WD ### ---------------------------------------------
# With k_index as response 
training_wd_k <- training_wd |>
  dplyr::select(k_index, velocity, wd_m, x, y)

# With shannon index as response 
training_wd_s <- training_wd |>
  dplyr::select(shannon, velocity, wd_m, x, y)

# With abundance index as response 
training_wd_a <- training_wd |>
  dplyr::select(abundance, velocity, wd_m, x, y)

# With relative abundance index as response 
training_wd_ra <- training_wd |>
  dplyr::select(rel_abundance, velocity, wd_m, x, y)

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response 
training_samp_k <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_samp_a <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_samp_ra <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response 
training_sec_k <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_sec_a <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_sec_ra <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------------
# With k_index as response 
training_var_k <- training_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_var_s <- training_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
training_var_a <- training_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
training_var_ra <- training_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Training Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response 
training_v_k_c <- training_v |>
  dplyr::select(k_index, velocity)

# With shannon index as response
training_v_s_c <- training_v |>
  dplyr::select(shannon, velocity)

# With abundance as response
training_v_a_c <- training_v |>
  dplyr::select(abundance, velocity)

# With rel_abundance as response
training_v_ra_c <- training_v |>
  dplyr::select(rel_abundance, velocity)

### PREDICTOR: VELOCITY AND WD ### ----------------------------------
# With k_index as response 
training_wd_k_c <- training_wd |>
  dplyr::select(k_index, velocity, wd_m)

# With shannon index as response 
training_wd_s_c <- training_wd |>
  dplyr::select(shannon, velocity, wd_m)

# With abundance as response 
training_wd_a_c <- training_wd |>
  dplyr::select(abundance, velocity, wd_m)

# With rel_abundance as response 
training_wd_ra_c <- training_wd |>
  dplyr::select(rel_abundance, velocity, wd_m)

### PREDICTOR: SAMPLING LOCATIONS ### --------------------------------
# With k_index as response 
training_samp_k_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_samp_s_c <- training_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_samp_a_c <- training_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_samp_ra_c <- training_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### ----------------------------------
# With k_index as response 
training_sec_k_c <- training_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response 
training_sec_s_c <- training_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
training_sec_a_c <- training_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
training_sec_ra_c <- training_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------------
# With k_index as response 
training_var_k_c <- training_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With shannon index as response 
training_var_s_c <- training_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With abundance index as response 
training_var_a_c <- training_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With relative abundance index as response 
training_var_ra_c <- training_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle, -x, -y)
```

## Test Sets w/ coordinates
```{r}
### PREDICTOR: VELOCITY ### ------------------------------------------
# With k_index as response
test_v_k <- test_v |>
  dplyr::select(k_index, velocity, x, y) 

# With shannon index as response
test_v_s <- test_v |>
  dplyr::select(shannon, velocity, x, y) 

# With abundance as response 
test_v_a <- test_v |>
  dplyr::select(abundance, velocity, x, y) 

# With relative abundance as response 
test_v_ra <- test_v |>
  dplyr::select(rel_abundance, velocity, x, y)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k <- test_wd |>
  dplyr::select(k_index, velocity, wd_m, x, y) 

# With shannon index as response 
test_wd_s <- test_wd |>
  dplyr::select(shannon, velocity, wd_m, x, y) 

# With abundance as response 
test_wd_a <- test_wd |>
  dplyr::select(abundance, velocity, wd_m, x, y)

# With relative abundance as response 
test_wd_ra <- test_wd |>
  dplyr::select(rel_abundance, velocity, wd_m, x, y)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response
test_samp_a <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_samp_ra <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
test_sec_s <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
test_sec_a <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_sec_ra <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------
# With k_index as response 
test_var_k <- test_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With shannon index as response 
test_var_s <- test_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle)

# With abundance index as response 
test_var_a <- test_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle)

# With relative abundance index as response 
test_var_ra <- test_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle)
```

## Test Sets w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------
# With k_index as response
test_v_k_c <- test_v |>
  dplyr::select(k_index, velocity)

# With shannon index as response
test_v_s_c <- test_v |>
  dplyr::select(shannon, velocity) 

# With abundance as response
test_v_a_c <- test_v |>
  dplyr::select(abundance, velocity) 

# With rel_abundance as response
test_v_ra_c <- test_v |>
  dplyr::select(rel_abundance, velocity)

### PREDICTOR: VELOCITY + WD ### -----------------------------------
# With k_index as response 
test_wd_k_c <- test_wd |>
  dplyr::select(k_index, velocity, wd_m) 

# With shannon index as response 
test_wd_s_c <- test_wd |>
  dplyr::select(shannon, velocity, wd_m)

# With abundance as response 
test_wd_a_c <- test_wd |>
  dplyr::select(abundance, velocity, wd_m)

# With rel_abundance as response 
test_wd_ra_c <- test_wd |>
  dplyr::select(rel_abundance, velocity, wd_m)

### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------
# With k_index as response 
test_samp_k_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle) 

# With shannon index as response 
test_samp_s_c <- test_sampling |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response 
test_samp_a_c <- test_sampling |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response 
test_samp_ra_c <- test_sampling |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -----------------------------------
# With k_index as response 
test_sec_k_c <- test_section |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With shannon index as response
test_sec_s_c <- test_section |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With abundance as response
test_sec_a_c <- test_section |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -x, -y, -Reach_Untersuchungsstelle)

# With rel_abundance as response
test_sec_ra_c <- test_section |>
  dplyr::select(-shannon, -abundance, -k_index, -x, -y, -Reach_Untersuchungsstelle)

### PREDICTOR: SELECTED VARIABLES ### -----------------------------------
# With k_index as response 
test_var_k_c <- test_var |>
  dplyr::select(-shannon, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With shannon index as response 
test_var_s_c <- test_var |>
  dplyr::select(-k_index, -abundance, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With abundance index as response 
test_var_a_c <- test_var |>
  dplyr::select(-shannon, -k_index, -rel_abundance, -Reach_Untersuchungsstelle, -x, -y)

# With relative abundance index as response 
test_var_ra_c <- test_var |>
  dplyr::select(-shannon, -abundance, -k_index, -Reach_Untersuchungsstelle, -x, -y)
```

# Boosted Regression Tree
## Hyperparameter tuning 
```{r}
# convert dataframes into spatial objects for mlr3 spatial hyperparameter tuning
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
data_v_k_sp <-  st_as_sf(training_v_k, coords =  c("x", "y"))
st_crs(data_v_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_v_s_sp <-  st_as_sf(training_v_s, coords =  c("x", "y"))
st_crs(data_v_s_sp) <- "EPSG: 2056"

# With abundance as response
data_v_a_sp <-  st_as_sf(training_v_a, coords =  c("x", "y"))
st_crs(data_v_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_v_ra_sp <-  st_as_sf(training_v_ra, coords =  c("x", "y"))
st_crs(data_v_ra_sp) <- "EPSG: 2056"

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# With k_index as response
data_wd_k_sp <-  st_as_sf(training_wd_k, coords =  c("x", "y"))
st_crs(data_wd_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_wd_s_sp <-  st_as_sf(training_wd_s, coords =  c("x", "y"))
st_crs(data_wd_s_sp) <- "EPSG: 2056"

# With abundance as response
data_wd_a_sp <-  st_as_sf(training_wd_a, coords =  c("x", "y"))
st_crs(data_wd_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_wd_ra_sp <-  st_as_sf(training_wd_ra, coords =  c("x", "y"))
st_crs(data_wd_ra_sp) <- "EPSG: 2056"

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# With k_index as response
data_samp_k_sp <-  st_as_sf(training_samp_k, coords =  c("x", "y"))
st_crs(data_samp_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_samp_s_sp <-  st_as_sf(training_samp_s, coords =  c("x", "y"))
st_crs(data_samp_s_sp) <- "EPSG: 2056"

# With abundance as response
data_samp_a_sp <-  st_as_sf(training_samp_a, coords =  c("x", "y"))
st_crs(data_samp_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_samp_ra_sp <-  st_as_sf(training_samp_ra, coords =  c("x", "y"))
st_crs(data_samp_ra_sp) <- "EPSG: 2056"

### PREDICTOR: ALL POSSIBLE PREDICTORS ### -------------------------------------
# With k_index as response
data_sec_k_sp <-  st_as_sf(training_sec_k, coords =  c("x", "y"))
st_crs(data_sec_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_sec_s_sp <-  st_as_sf(training_sec_s, coords =  c("x", "y"))
st_crs(data_sec_s_sp) <- "EPSG: 2056"

# With abundance as response
data_sec_a_sp <-  st_as_sf(training_sec_a, coords =  c("x", "y"))
st_crs(data_sec_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_sec_ra_sp <-  st_as_sf(training_sec_ra, coords =  c("x", "y"))
st_crs(data_sec_ra_sp) <- "EPSG: 2056"

### PREDICTOR: SELECTED VARIABLES ### -------------------------------------
# With k_index as response
data_var_k_sp <-  st_as_sf(training_var_k, coords =  c("x", "y"))
st_crs(data_var_k_sp) <- "EPSG: 2056"

# With shannon index as response
data_var_s_sp <-  st_as_sf(training_var_s, coords =  c("x", "y"))
st_crs(data_var_s_sp) <- "EPSG: 2056"

# With abundance as response
data_var_a_sp <-  st_as_sf(training_var_a, coords =  c("x", "y"))
st_crs(data_var_a_sp) <- "EPSG: 2056"

# With rel_abundance as response
data_var_ra_sp <-  st_as_sf(training_var_ra, coords =  c("x", "y"))
st_crs(data_var_ra_sp) <- "EPSG: 2056"
```

### Create Task & Learner
```{r}
### PREDICTOR: VELOCITY ### ----------------------------------------------------
# With k_index as response
task_xbrt_v_k <- mlr3spatiotempcv::as_task_regr_st(data_v_k_sp,
  id = "velocity_k_index", target = "k_index")

# With shannon index as response
task_xbrt_v_s <- mlr3spatiotempcv::as_task_regr_st(data_v_s_sp,
  id = "velocity_shannon", target = "shannon")

# With abundance as response 
task_xbrt_v_a <- mlr3spatiotempcv::as_task_regr_st(data_v_a_sp,
  id = "velocity_abundance", target = "abundance")

# With rel_abundance as response 
task_xbrt_v_ra <- mlr3spatiotempcv::as_task_regr_st(data_v_ra_sp,
  id = "velocity_rel_abundance", target = "rel_abundance")

### PREDICTOR: VELOCITY + WD ### -----------------------------------------------
# With k_index as response
task_xbrt_wd_k <- mlr3spatiotempcv::as_task_regr_st(data_wd_k_sp,
  id = "water_depth_k_index", target = "k_index")

# With shannon index as response
task_xbrt_wd_s <- mlr3spatiotempcv::as_task_regr_st(data_wd_s_sp,
  id = "water_depth_shannon", target = "shannon")

# With abundance as response
task_xbrt_wd_a <- mlr3spatiotempcv::as_task_regr_st(data_wd_a_sp,
  id = "water_depth_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_wd_ra <- mlr3spatiotempcv::as_task_regr_st(data_wd_ra_sp,
  id = "water_depth_rel_abundance", target = "rel_abundance")

### PREDICTORS: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response
task_xbrt_samp_k <- mlr3spatiotempcv::as_task_regr_st(data_samp_k_sp,
  id = "sampling_k_index", target = "k_index")

# With shannon index as response
task_xbrt_samp_s <- mlr3spatiotempcv::as_task_regr_st(data_samp_s_sp,
  id = "sampling_shannon", target = "shannon")

# With abundance as response
task_xbrt_samp_a <- mlr3spatiotempcv::as_task_regr_st(data_samp_a_sp,
  id = "sampling_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_samp_ra <- mlr3spatiotempcv::as_task_regr_st(data_samp_ra_sp,
  id = "sampling_rel_abundance", target = "rel_abundance")

### PREDICTORS: ALL PREDICTORS ### ---------------------------------------------
# With k_index as response
task_xbrt_sec_k <- mlr3spatiotempcv::as_task_regr_st(data_sec_k_sp,
  id = "section_k_index", target = "k_index")

# With shannon index as response
task_xbrt_sec_s <- mlr3spatiotempcv::as_task_regr_st(data_sec_s_sp,
  id = "section_shannon", target = "shannon")

# With abundance as response
task_xbrt_sec_a <- mlr3spatiotempcv::as_task_regr_st(data_sec_a_sp,
  id = "section_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_sec_ra <- mlr3spatiotempcv::as_task_regr_st(data_sec_ra_sp,
  id = "section_rel_abundance", target = "rel_abundance")

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
task_xbrt_var_k <- mlr3spatiotempcv::as_task_regr_st(data_var_k_sp,
  id = "var_k_index", target = "k_index")

# With shannon index as response
task_xbrt_var_s <- mlr3spatiotempcv::as_task_regr_st(data_var_s_sp,
  id = "var_shannon", target = "shannon")

# With abundance as response
task_xbrt_var_a <- mlr3spatiotempcv::as_task_regr_st(data_var_a_sp,
  id = "var_abundance", target = "abundance")

# With rel_abundance as response
task_xbrt_var_ra <- mlr3spatiotempcv::as_task_regr_st(data_var_ra_sp,
  id = "var_rel_abundance", target = "rel_abundance")

### LEARNER ### ----------------------------------------------------------------
# learner for random forest valid for all models
lrn_xbrt <- lrn("regr.xgboost", predict_type = "response")
```

### Specify Search Space
```{r}
# specifying the search space for all response variables and predictors 
search_space_xbrt <- paradox::ps(
  eta = p_dbl(lower = 0.0001, upper = 1.0), # learning rate
  nrounds = p_int(lower = 0, upper = 1000), # max. number of iterations
  max_depth = p_int(lower = 0, upper = 10000), # tree complexity
  subsample = p_dbl(lower = 0.5, upper = 0.75) # bag fraction 
)
```

### Specify Autotuner  
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
autotuner_xbrt_v_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_v_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_v_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_v_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
autotuner_xbrt_wd_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_wd_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_wd_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_wd_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
autotuner_xbrt_samp_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_samp_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_samp_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_samp_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
autotuner_xbrt_sec_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_sec_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_sec_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_sec_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning 
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
autotuner_xbrt_var_k <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With shannon index as response
autotuner_xbrt_var_s <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With abundance as response
autotuner_xbrt_var_a <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)

# With rel_abundance as response
autotuner_xbrt_var_ra <- mlr3tuning::AutoTuner$new(
  learner = lrn_xbrt, # predefined learner
  resampling = mlr3::rsmp("spcv_coords", folds = 5), # spatial partitioning 
  measure = mlr3::msr("regr.rmse"), # performance measure
  terminator = mlr3tuning::trm("evals", n_evals = 50), # specify 50 iterations 
  search_space = search_space_xbrt, # predefined hyperparameter search space
  tuner = mlr3tuning::tnr("random_search") # specify random search
)
```

### Train Autotuner
```{r}
# set seed to obtain the same results with each run
set.seed(0412022)

### PREDICTOR: VELOCITY ### --------------------------------------------------
# With k_index as response
autotuner_xbrt_v_k$train(task_xbrt_v_k)

# With shannon index as response
autotuner_xbrt_v_s$train(task_xbrt_v_s)

# With abundance as response
autotuner_xbrt_v_a$train(task_xbrt_v_a)

# With rel_abundance as response
autotuner_xbrt_v_ra$train(task_xbrt_v_ra)

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response
autotuner_xbrt_wd_k$train(task_xbrt_wd_k)

# With shannon index as response
autotuner_xbrt_wd_s$train(task_xbrt_wd_s)

# With abundance as response
autotuner_xbrt_wd_a$train(task_xbrt_wd_a)

# With rel_abundance as response
autotuner_xbrt_wd_ra$train(task_xbrt_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response
autotuner_xbrt_samp_k$train(task_xbrt_samp_k)

# With shannon index as response
autotuner_xbrt_samp_s$train(task_xbrt_samp_s)

# With abundance as response
autotuner_xbrt_samp_a$train(task_xbrt_samp_a)

# With rel_abundance as response
autotuner_xbrt_samp_ra$train(task_xbrt_samp_ra)

### PREDICTORS: ALL PREDICTORS ### -------------------------------------------
# With k_index as response
autotuner_xbrt_sec_k$train(task_xbrt_sec_k)

# With shannon index as response
autotuner_xbrt_sec_s$train(task_xbrt_sec_s)

# With abundance as response
autotuner_xbrt_sec_a$train(task_xbrt_sec_a)

# With rel_abundance as response
autotuner_xbrt_sec_ra$train(task_xbrt_sec_ra)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
autotuner_xbrt_var_k$train(task_xbrt_var_k)

# With shannon index as response
autotuner_xbrt_var_s$train(task_xbrt_var_s)

# With abundance as response
autotuner_xbrt_var_a$train(task_xbrt_var_a)

# With rel_abundance as response
autotuner_xbrt_var_ra$train(task_xbrt_var_ra)
```

### Tuned Hyperparameters
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
autotuner_xbrt_v_k$tuning_result

# With shannon index as response
autotuner_xbrt_v_s$tuning_result

# With abundance as response
autotuner_xbrt_v_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_v_ra$tuning_result

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
autotuner_xbrt_wd_k$tuning_result

# With shannon index as response
autotuner_xbrt_wd_s$tuning_result

# With abundance as response
autotuner_xbrt_wd_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_wd_ra$tuning_result

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
autotuner_xbrt_samp_k$tuning_result

# With shannon index as response
autotuner_xbrt_samp_s$tuning_result

# With abundance as response 
autotuner_xbrt_samp_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_samp_ra$tuning_result

### PREDICTORS: ALL PREDICTORS ### -------------------------------------------
# With k_index as response
autotuner_xbrt_sec_k$tuning_result

# With shannon index as response
autotuner_xbrt_sec_s$tuning_result

# With abundance as response
autotuner_xbrt_sec_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_sec_ra$tuning_result

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
autotuner_xbrt_var_k$tuning_result

# With shannon index as response
autotuner_xbrt_var_s$tuning_result

# With abundance as response
autotuner_xbrt_var_a$tuning_result

# With rel_abundance as response
autotuner_xbrt_var_ra$tuning_result
```

# XGBOOST models 
## Specify Matrix
### Training Sets
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
trainx_v_k_c <- model.matrix(k_index ~ ., data = training_v_k_c)

# With shannon index as response
trainx_v_s_c <- model.matrix(shannon ~ ., data = training_v_s_c)

# With abundance as response 
trainx_v_a_c <- model.matrix(abundance ~ ., data = training_v_a_c)

# With rel_abundance as response 
trainx_v_ra_c <- model.matrix(rel_abundance ~ ., data = training_v_ra_c)

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response
trainx_wd_k_c <- model.matrix(k_index ~ ., data = training_wd_k_c)

# With shannon index as response
trainx_wd_s_c <- model.matrix(shannon ~ ., data = training_wd_s_c)

# With abundance as response
trainx_wd_a_c <- model.matrix(abundance ~ ., data = training_wd_a_c)

# With rel_abundance as response
trainx_wd_ra_c <- model.matrix(rel_abundance ~ ., data = training_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
trainx_samp_k_c <- model.matrix(k_index ~ ., data = training_samp_k_c)

# With shannon index as response
trainx_samp_s_c <- model.matrix(shannon ~ ., data = training_samp_s_c)

# With abundance as response
trainx_samp_a_c <- model.matrix(abundance ~ ., data = training_samp_a_c)

# With rel_abundance as response
trainx_samp_ra_c <- model.matrix(rel_abundance ~ ., data = training_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### ----------------------------------------
# With k_index as response
trainx_sec_k_c <- model.matrix(k_index ~ ., data = training_sec_k_c)

# With shannon index as response
trainx_sec_s_c <- model.matrix(shannon ~ ., data = training_sec_s_c)

# With abundance as response
trainx_sec_a_c <- model.matrix(abundance ~ ., data = training_sec_a_c)

# With rel_abundance as response
trainx_sec_ra_c <- model.matrix(rel_abundance ~ ., data = training_sec_ra_c)

### PREDICTORS: SELECTED VARIABLES ### ---------------------------------------
# With k_index as response
trainx_var_k_c <- model.matrix(k_index ~ ., data = training_var_k_c)

# With shannon index as response
trainx_var_s_c <- model.matrix(shannon ~ ., data = training_var_s_c)

# With abundance as response
trainx_var_a_c <- model.matrix(abundance ~ ., data = training_var_a_c)

# With rel_abundance as response
trainx_var_ra_c <- model.matrix(rel_abundance ~ ., data = training_var_ra_c)
```

### Test Sets
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
testx_v_k_c <- model.matrix(k_index ~ ., data = test_v_k_c)
testx_v_k_c <- as.matrix(testx_v_k_c[ ,-1])

# With shannon index as response
testx_v_s_c <- model.matrix(shannon ~ ., data = test_v_s_c)
testx_v_s_c <- as.matrix(testx_v_s_c[ ,-1])

# With abundance as response
testx_v_a_c <- model.matrix(abundance ~ ., data = test_v_a_c)
testx_v_a_c <- as.matrix(testx_v_a_c[ ,-1])

# With rel_abundance as response
testx_v_ra_c <- model.matrix(rel_abundance ~ ., data = test_v_ra_c)
testx_v_ra_c <- as.matrix(testx_v_ra_c[ ,-1])

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
testx_wd_k_c <- model.matrix(k_index ~ ., data = test_wd_k_c)

# With shannon index as response
testx_wd_s_c <- model.matrix(shannon ~ ., data = test_wd_s_c)

# With abundance as response
testx_wd_a_c <- model.matrix(abundance ~ ., data = test_wd_a_c)

# With rel_abundance as response
testx_wd_ra_c <- model.matrix(rel_abundance ~ ., data = test_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
testx_samp_k_c <- model.matrix(k_index ~ ., data = test_samp_k_c)

# With shannon index as response
testx_samp_s_c <- model.matrix(shannon ~ ., data = test_samp_s_c)

# With abundance as response
testx_samp_a_c <- model.matrix(abundance ~ ., data = test_samp_a_c)

# With rel_abundance as response
testx_samp_ra_c <- model.matrix(rel_abundance ~ ., data = test_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### ------------------------------------------
# With k_index as response
testx_sec_k_c <- model.matrix(k_index ~ ., data = test_sec_k_c)

# With shannon index as response
testx_sec_s_c <- model.matrix(shannon ~ ., data = test_sec_s_c)

# With abundance as response
testx_sec_a_c <- model.matrix(abundance ~ ., data = test_sec_a_c)

# With rel_abundance as response
testx_sec_ra_c <- model.matrix(rel_abundance ~ ., data = test_sec_ra_c)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
testx_var_k_c <- model.matrix(k_index ~ ., data = test_var_k_c)

# With shannon index as response
testx_var_s_c <- model.matrix(shannon ~ ., data = test_var_s_c)

# With abundance as response
testx_var_a_c <- model.matrix(abundance ~ ., data = test_var_a_c)

# With rel_abundance as response
testx_var_ra_c <- model.matrix(rel_abundance ~ ., data = test_var_ra_c)
```

## XGBOOST w/o coordinates
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
#          eta nrounds max_depth subsample 
#1: 0.008569621     914       687 0.6312782
xgb_v_k_c <- xgboost(data = data.matrix(trainx_v_k_c[ ,-1]),
                     label = as.numeric(as.character(training_v_k_c$k_index)),
                     eta = 0.008569621,
                     nrounds = 914,
                     max_depth = 687,
                     subsample = 0.6312782,
                     objective = "reg:linear")

# With shannon index as response
#         eta nrounds max_depth subsample
#1: 0.2352155      23      6284 0.6589628
xgb_v_s_c <- xgboost(data = data.matrix(trainx_v_s_c[ ,-1]),
                     label = as.numeric(as.character(training_v_s_c$shannon)),
                     eta = 0.2352155,
                     nrounds = 23,
                     max_depth = 6284,
                     subsample = 0.6589628,
                     objective = "reg:linear")

# With abundance as response
#         eta nrounds max_depth subsample
#1: 0.2734048    1000      1587 0.5312874
xgb_v_a_c <- xgboost(data = data.matrix(trainx_v_a_c[ ,-1]),
                     label = as.numeric(as.character(training_v_a_c$abundance)),
                     eta = 0.2734048,
                     nrounds = 1000,
                     max_depth = 1587,
                     subsample = 0.5312874,
                     objective = "reg:linear")

# With rel_abundance as response
#          eta nrounds max_depth subsample 
#1: 0.04511723      41      1208 0.5374118 
xgb_v_ra_c <- xgboost(data = data.matrix(trainx_v_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_v_ra_c$rel_abundance)),
                     eta = 0.04511723,
                     nrounds = 41,
                     max_depth = 1208,
                     subsample = 0.5374118,
                     objective = "reg:linear")

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
#         eta nrounds max_depth subsample
#1: 0.1256372      10      6604 0.7334653 
xgb_wd_k_c <- xgboost(data = data.matrix(trainx_wd_k_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_k_c$k_index)),
                     eta = 0.1256372,
                     nrounds = 10,
                     max_depth = 6604,
                     subsample = 0.7334653,
                     objective = "reg:linear")

# With shannon index as response
#         eta nrounds max_depth subsample 
#1: 0.1048352      63       701  0.610751
xgb_wd_s_c <- xgboost(data = data.matrix(trainx_wd_s_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_s_c$shannon)),
                     eta = 0.1048352,
                     nrounds = 63,
                     max_depth = 701,
                     subsample = 0.610751,
                     objective = "reg:linear")

# With abundance as response
#          eta nrounds max_depth subsample
#1: 0.05856516      33      8685 0.5665955
xgb_wd_a_c <- xgboost(data = data.matrix(trainx_wd_a_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_a_c$abundance)),
                     eta = 0.05856516,
                     nrounds = 33,
                     max_depth = 8685,
                     subsample = 0.5665955,
                     objective = "reg:linear")

# With rel_abundance as response
#          eta nrounds max_depth subsample 
#1: 0.05327741      45      6892 0.5123451
xgb_wd_ra_c <- xgboost(data = data.matrix(trainx_wd_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_wd_ra_c$rel_abundance)),
                     eta = 0.05327741,
                     nrounds = 45,
                     max_depth = 6892,
                     subsample = 0.5123451,
                     objective = "reg:linear")


### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response 
#         eta nrounds max_depth subsample
#1: 0.04461215      19      2111  0.649418
xgb_samp_k_c <- xgboost(data = data.matrix(trainx_samp_k_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_k_c$k_index)),
                     eta = 0.04461215,
                     nrounds = 19,
                     max_depth = 2111,
                     subsample = 0.649418,
                     objective = "reg:linear")

# With shannon index as response
#         eta nrounds max_depth subsample
#1: 0.1739483     116      3664 0.5660478 
xgb_samp_s_c <- xgboost(data = data.matrix(trainx_samp_s_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_s_c$shannon)),
                     eta = 0.1739483,
                     nrounds = 116,
                     max_depth = 3664,
                     subsample = 0.5660478,
                     objective = "reg:linear")

# With abundance as response
#           eta nrounds max_depth subsample
#1: 0.006622144     154      3917 0.6283266    
xgb_samp_a_c <- xgboost(data = data.matrix(trainx_samp_a_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_a_c$abundance)),
                     eta = 0.006622144,
                     nrounds = 154,
                     max_depth = 3917,
                     subsample = 0.6283266,
                     objective = "reg:linear")

# With rel_abundance as response 
#         eta nrounds max_depth subsample 
#1: 0.3057943     751      6014 0.5325193 
xgb_samp_ra_c <- xgboost(data = data.matrix(trainx_samp_ra_c[ ,-1]),
                     label = as.numeric(as.character(training_samp_ra_c$rel_abundance)),
                     eta = 0.3057943,
                     nrounds = 751,
                     max_depth = 6014,
                     subsample = 0.5325193,
                     objective = "reg:linear")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
#          eta nrounds max_depth subsample 
#1: 0.1685379     324         4 0.6693844                       
xgb_sec_k_c <- xgboost(data = data.matrix(trainx_sec_k_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_k_c$k_index)),
                     eta = 0.1685379,
                     max_depth = 4,
                     nrounds = 324,
                     subsample = 0.6693844,
                     objective = "reg:linear")

# With shannon index as response 
#        eta nrounds max_depth subsample 
#1: 0.09633102     680       8 0.6800524                       
xgb_sec_s_c <- xgboost(data = data.matrix(trainx_sec_s_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_s_c$shannon)),
                     eta = 0.09633102,
                     max_depth = 8,
                     nrounds = 680,
                     subsample = 0.6800524,
                     objective = "reg:linear")

# With abundance as response
#        eta nrounds max_depth subsample 
#1: 0.2229642     532         9 0.7099357                        
xgb_sec_a_c <- xgboost(data = data.matrix(trainx_sec_a_c[ ,-1]),
                     label = as.numeric(as.character(training_sec_a_c$abundance)),
                     eta = 0.2229642,
                     max_depth = 9,
                     nrounds = 532,
                     subsample = 0.7099357,
                     objective = "reg:linear")

# With rel_abundance as response 
#         eta nrounds max_depth subsample 
#1: 0.03772061     377         6 0.6407695                       
xgb_sec_ra_c <- xgboost(data = data.matrix(trainx_sec_ra_c[ ,-1]),
                      label = as.numeric(as.character(training_sec_ra_c$rel_abundance)),
                     eta = 0.03772061,
                     max_depth = 6,
                     nrounds = 377,
                     subsample = 0.6407695,
                     objective = "reg:linear")

### PREDICTORS: SELECTED VARIABLES ### --------------------------------------------
# With k_index as response
#           eta nrounds max_depth subsample 
#1: 0.002163145     783      5972 0.5024628                     
xgb_var_k_c <- xgboost(data = data.matrix(trainx_var_k_c[ ,-1]),
                     label = as.numeric(as.character(training_var_k_c$k_index)),
                     eta = 0.002163145,
                     nrounds = 783,
                     max_depth = 5972,
                     subsample = 0.5024628,
                     objective = "reg:linear")

# With shannon index as response 
#        eta nrounds max_depth subsample
#1: 0.0855199      30      1179  0.586375                   
xgb_var_s_c <- xgboost(data = data.matrix(trainx_var_s_c[ ,-1]),
                     label = as.numeric(as.character(training_var_s_c$shannon)),
                     eta = 0.0855199,
                     nrounds = 30,
                     max_depth = 1179,
                     subsample = 0.586375,
                     objective = "reg:linear")

# With abundance as response
#         eta nrounds max_depth subsample
#1: 0.3378068     406      3694 0.5145095                      
xgb_var_a_c <- xgboost(data = data.matrix(trainx_var_a_c[ ,-1]),
                     label = as.numeric(as.character(training_var_a_c$abundance)),
                     eta = 0.3378068,
                     nrounds = 406,
                     max_depth = 3694,
                     subsample = 0.5145095,
                     objective = "reg:linear")

# With rel_abundance as response 
#         eta nrounds max_depth subsample
#1: 0.4977537     180      7284 0.6304385                       
xgb_var_ra_c <- xgboost(data = data.matrix(trainx_var_ra_c[ ,-1]),
                      label = as.numeric(as.character(training_var_ra_c$rel_abundance)),
                     eta = 0.4977537,
                     nrounds = 180,
                     max_depth = 7284,
                     subsample = 0.6304385,
                     objective = "reg:linear")
```

# Model Evaluation 
## Variable Importance
```{r}
### PREDICTORS: VELOCITY ### -------------------------------------------------
# w/o coordinates
vi_v_k_c <- xgb.importance(model = xgb_v_k_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/o coordinates")

vi_v_s_c <- xgb.importance(model = xgb_v_s_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/o coordinates")

vi_v_a_c <- xgb.importance(model = xgb_v_a_c)|>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/o coordinates")

vi_v_ra_c <- xgb.importance(model = xgb_v_ra_c)|>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/o coordinates")


### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# w/o coordinates
vi_wd_k_c <- xgb.importance(model = xgb_wd_k_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/o coordinates")

vi_wd_s_c <- xgb.importance(model = xgb_wd_s_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/o coordinates")

vi_wd_a_c <- xgb.importance(model = xgb_wd_a_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/o coordinates")

vi_wd_ra_c <- xgb.importance(model = xgb_wd_ra_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/o coordinates")

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# w/o coordinates
vi_samp_k_c <- xgb.importance(model = xgb_samp_k_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/o coordinates")

vi_samp_s_c <- xgb.importance(model = xgb_samp_s_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/o coordinates")

vi_samp_a_c <- xgb.importance(model = xgb_samp_a_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/o coordinates")

vi_samp_ra_c <- xgb.importance(model = xgb_samp_ra_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/o coordinates")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# w/o coordinates
vi_sec_k_c <- xgb.importance(model = xgb_sec_k_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/o coordinates")

vi_sec_s_c <- xgb.importance(model = xgb_sec_s_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/o coordinates")

vi_sec_a_c <- xgb.importance(model = xgb_sec_a_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/o coordinates")

vi_sec_ra_c <- xgb.importance(model = xgb_sec_ra_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/o coordinates")

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# w/o coordinates
vi_var_k_c <- xgb.importance(model = xgb_var_k_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "k_index",
         model = "xgboost w/o coordinates")

vi_var_s_c <- xgb.importance(model = xgb_var_s_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "shannon_index",
         model = "xgboost w/o coordinates")

vi_var_a_c <- xgb.importance(model = xgb_var_a_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "abundance",
         model = "xgboost w/o coordinates")

vi_var_ra_c <- xgb.importance(model = xgb_var_ra_c) |>
  dplyr::select(-Cover, -Frequency)  |>
  mutate(index = "rel_abundance",
         model = "xgboost w/o coordinates")

# bind results together -------------------------------------------------------
vi_brt_model_v_c <- rbind(vi_v_k_c, vi_v_s_c, vi_v_a_c, vi_v_ra_c)
vi_brt_model_wd_c <- rbind(vi_wd_k_c, vi_wd_s_c, vi_wd_a_c, vi_wd_ra_c) 
vi_brt_model_samp_c <- rbind(vi_samp_k_c, vi_samp_s_c, vi_samp_a_c, vi_samp_ra_c) 
vi_brt_model_sec_c <- rbind(vi_sec_k_c, vi_sec_s_c, vi_sec_a_c, vi_sec_ra_c) 
vi_brt_model_var_c <- rbind(vi_var_k_c, vi_var_s_c, vi_var_a_c, vi_var_ra_c)

# write results into .csv ----------------------------------------------------
write.csv(vi_brt_model_v_c, "ML_model/var_imp/vi_brt_model_v_c.csv", row.names = FALSE)
write.csv(vi_brt_model_wd_c, "ML_model/var_imp/vi_brt_model_wd_c.csv", row.names = FALSE)
write.csv(vi_brt_model_samp_c, "ML_model/var_imp/vi_brt_model_samp_c.csv", row.names = FALSE)
write.csv(vi_brt_model_sec_c, "ML_model/var_imp/vi_brt_model_sec_c.csv", row.names = FALSE)
write.csv(vi_brt_model_var_c, "ML_model/var_imp/vi_brt_model_var_c.csv", row.names = FALSE)
```

## Partial dependence plots
### Data extraction & export
```{r}
### PREDICTOR: VELOCITY ### -------------------------------------------------
# With k_index as response --------------------------------------------------
### velocity
train_v_k_c <- as.matrix(trainx_v_k_c[ ,-1])
colnames(train_v_k_c) <- "velocity"
pdp_model_v_k_c <- pdp::partial(xgb_v_k_c, pred.var = "velocity", train = train_v_k_c)|>
  mutate(predictors = "velocity_c",
         model = "velocity w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_k_c, "ML_Model/pdp_data/pdp_v_k_c_brt.csv", row.names = FALSE)

# With shannon index as response ----------------------------------------------
### velocity 
train_v_s_c <- as.matrix(trainx_v_s_c[ ,-1])
colnames(train_v_s_c) <- "velocity"
pdp_model_v_s_c <- pdp::partial(xgb_v_s_c, pred.var = "velocity", train = train_v_s_c)|>
  mutate(predictors = "velocity_c",
         model = "velocity w/o coordinates",
         index = "shannon index")

# export data 
write.csv(pdp_model_v_s_c, "ML_Model/pdp_data/pdp_v_s_c_brt.csv", row.names = FALSE)

# With abundance as response --------------------------------------------------
### velocity 
train_v_a_c <- as.matrix(trainx_v_a_c[ ,-1])
colnames(train_v_a_c) <- "velocity"
pdp_model_v_a_c <- pdp::partial(xgb_v_a_c, pred.var = "velocity", train = train_v_a_c)|>
  mutate(predictors = "velocity_c",
         model = "velocity w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_v_a_c, "ML_Model/pdp_data/pdp_v_a_c_brt.csv", row.names = FALSE)

# With rel_abundance as response ----------------------------------------------
### velocity 
train_v_ra_c <- as.matrix(trainx_v_ra_c[ ,-1])
colnames(train_v_ra_c) <- "velocity"
pdp_model_v_ra_c <- pdp::partial(xgb_v_ra_c, pred.var = "velocity", train = train_v_ra_c)|>
  mutate(predictors = "velocity_c",
         model = "velocity w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_ra_c, "ML_Model/pdp_data/pdp_v_ra_c_brt.csv", row.names = FALSE)

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
pdp_model_v_wd_k_c <- pdp::partial(xgb_wd_k_c, pred.var = "velocity", train = trainx_wd_k_c[ ,-1])|>
  mutate(predictors = "velocity_c",
         model = "v + wd w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_wd_k_c, "ML_Model/pdp_data/pdp_v_wd_k_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_k_c <- pdp::partial(xgb_wd_k_c, pred.var = "wd_m", train = trainx_wd_k_c[ ,-1])|>
  mutate(predictors = "wd_m_c",
         model = "v + wd w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_wd_k_c, "ML_Model/pdp_data/pdp_wd_k_c_brt.csv", row.names = FALSE)

# With shannon index as response ----------------------------------------------
### velocity 
pdp_model_v_wd_s_c <- pdp::partial(xgb_wd_s_c, pred.var = "velocity", train = trainx_wd_s_c[ ,-1])|>
  mutate(predictors = "velocity_c",
         model = "v + wd w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_v_wd_s_c, "ML_Model/pdp_data/pdp_v_wd_s_c_brt.csv", row.names = FALSE)

### wd_m
pdp_model_wd_s_c <- pdp::partial(xgb_wd_s_c, pred.var = "wd_m", train = trainx_wd_s_c[ ,-1])|>
  mutate(predictors = "wd_m_c",
         model = "v + wd w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_wd_s_c, "ML_Model/pdp_data/pdp_wd_s_c_brt.csv", row.names = FALSE)

# With abundance as response --------------------------------------------------
### velocity 
pdp_model_v_wd_a_c <- pdp::partial(xgb_wd_a_c, pred.var = "velocity", train = trainx_wd_a_c[ ,-1])|>
  mutate(predictors = "velocity",
         model = "v + wd w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_v_wd_a_c, "ML_Model/pdp_data/pdp_v_wd_a_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_a_c <- pdp::partial(xgb_wd_a_c, pred.var = "wd_m", train = trainx_wd_a_c[ ,-1])|>
  mutate(predictors = "wd_m_c",
         model = "v + wd w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_wd_a_c, "ML_Model/pdp_data/pdp_wd_a_c_brt.csv", row.names = FALSE)

# With rel_abundance as response ---------------------------------------------
### velocity
pdp_model_v_wd_ra_c <- pdp::partial(xgb_wd_ra_c, pred.var = "velocity", train = trainx_wd_ra_c[ ,-1])|>
  mutate(predictors = "velocity_c",
         model = "v + wd w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_wd_ra_c, "ML_Model/pdp_data/pdp_v_wd_ra_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_ra_c <- pdp::partial(xgb_wd_ra_c, pred.var = "wd_m", train = trainx_wd_ra_c[ ,-1]) |>
  mutate(predictors = "wd_m_c",
         model = "v + wd w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_wd_ra_c, "ML_Model/pdp_data/pdp_wd_ra_c_brt.csv", row.names = FALSE)

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
pdp_model_v_samp_k_c <- pdp::partial(xgb_samp_k_c, pred.var = "velocity", train = trainx_samp_k_c[ ,-1]) |>
  mutate(predictors = "velocity",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_samp_k_c, "ML_Model/pdp_data/pdp_v_samp_k_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_samp_k_c <- pdp::partial(xgb_samp_k_c, pred.var = "wd_m", train = trainx_samp_k_c[ ,-1]) |>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_wd_samp_k_c, "ML_Model/pdp_data/pdp_wd_samp_k_c_brt.csv", row.names = FALSE)

### z 
pdp_model_z_samp_k_c <- pdp::partial(xgb_samp_k_c, pred.var = "z", train = trainx_samp_k_c[ ,-1]) |>
  mutate(predictors = "z_c",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_z_samp_k_c, "ML_Model/pdp_data/pdp_z_samp_k_c_brt.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_samp_k_c <- pdp::partial(xgb_samp_k_c, pred.var = "dist_w", train = trainx_samp_k_c[ ,-1]) |>
  mutate(predictors = "dist_w_c",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_dist_samp_k_c, "ML_Model/pdp_data/pdp_dist_samp_k_c_brt.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_samp_k_c <- pdp::partial(xgb_samp_k_c, pred.var = "cat_velocity", train = trainx_samp_k_c[ ,-1]) |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cv_samp_k_c, "ML_Model/pdp_data/pdp_cv_samp_k_c_brt.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_samp_k_c <- pdp::partial(xgb_samp_k_c, pred.var = "alg_cover", train = trainx_samp_k_c[ ,-1]) |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ac_samp_k_c, "ML_Model/pdp_data/pdp_ac_samp_k_c_brt.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_samp_k_c <- pdp::partial(xgb_samp_k_c, pred.var = "moos_cover", train = trainx_samp_k_c[ ,-1]) |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_mc_samp_k_c, "ML_Model/pdp_data/pdp_mc_samp_k_c_brt.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_samp_k_c <- pdp::partial(xgb_samp_k_c, pred.var = "cpom_cover", train = trainx_samp_k_c[ ,-1]) |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cc_samp_k_c, "ML_Model/pdp_data/pdp_cc_samp_k_c_brt.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_samp_k_c <- pdp::partial(xgb_samp_k_c, pred.var = "clog_3_class_int", train = trainx_samp_k_c[ ,-1]) |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_clog_3_samp_k_c, "ML_Model/pdp_data/pdp_clog_3_samp_k_c_brt.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_samp_k_c <- pdp::partial(xgb_samp_k_c, pred.var = "clog_6_class_int", train = trainx_samp_k_c[ ,-1]) |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_clog_6_samp_k_c, "ML_Model/pdp_data/pdp_clog_6_samp_k_c_brt.csv", row.names = FALSE)

### sub_type
pdp_model_sub_samp_k_c <- pdp::partial(xgb_samp_k_c, pred.var = "sub_type_int", train = trainx_samp_k_c[ ,-1]) |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_sub_samp_k_c, "ML_Model/pdp_data/pdp_sub_samp_k_c_brt.csv", row.names = FALSE)

# With shannon index as response ----------------------------------------------
### velocity 
pdp_model_v_samp_s_c <- pdp::partial(xgb_samp_s_c, pred.var = "velocity", train = trainx_samp_s_c[ ,-1]) |>
  mutate(predictors = "velocity",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_v_samp_s_c, "ML_Model/pdp_data/pdp_v_samp_s_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_samp_s_c <- pdp::partial(xgb_samp_s_c, pred.var = "wd_m", train = trainx_samp_s_c[ ,-1]) |>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_wd_samp_s_c, "ML_Model/pdp_data/pdp_wd_samp_s_c_brt.csv", row.names = FALSE)

### z 
pdp_model_z_samp_s_c <- pdp::partial(xgb_samp_s_c, pred.var = "z", train = trainx_samp_s_c[ ,-1]) |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_z_samp_s_c, "ML_Model/pdp_data/pdp_z_samp_s_c_brt.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_samp_s_c <- pdp::partial(xgb_samp_s_c, pred.var = "dist_w", train = trainx_samp_s_c[ ,-1]) |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_dist_samp_s_c, "ML_Model/pdp_data/pdp_dist_samp_s_c_brt.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_samp_s_c <- pdp::partial(xgb_samp_s_c, pred.var = "cat_velocity", train = trainx_samp_s_c[ ,-1]) |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cv_samp_s_c, "ML_Model/pdp_data/pdp_cv_samp_s_c_brt.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_samp_s_c <- pdp::partial(xgb_samp_s_c, pred.var = "alg_cover", train = trainx_samp_s_c[ ,-1]) |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ac_samp_s_c, "ML_Model/pdp_data/pdp_ac_samp_s_c_brt.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_samp_s_c <- pdp::partial(xgb_samp_s_c, pred.var = "moos_cover", train = trainx_samp_s_c[ ,-1]) |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_mc_samp_s_c, "ML_Model/pdp_data/pdp_mc_samp_s_c_brt.csv", row.names = FALSE)

### cpom_cover
pdp_model_cc_samp_s_c <- pdp::partial(xgb_samp_s_c, pred.var = "cpom_cover", train = trainx_samp_s_c[ ,-1]) |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cc_samp_s_c, "ML_Model/pdp_data/pdp_cc_samp_s_c_brt.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_samp_s_c <- pdp::partial(xgb_samp_s_c, pred.var = "clog_3_class_int", train = trainx_samp_s_c[ ,-1]) |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_3_samp_s_c, "ML_Model/pdp_data/pdp_clog_3_samp_s_c_brt.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_samp_s_c <- pdp::partial(xgb_samp_s_c, pred.var = "clog_6_class_int", train = trainx_samp_s_c[ ,-1]) |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_6_samp_s_c, "ML_Model/pdp_data/pdp_clog_6_samp_s_c_brt.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_samp_s_c <- pdp::partial(xgb_samp_s_c, pred.var = "sub_type_int", train = trainx_samp_s_c[ ,-1]) |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_sub_samp_s_c, "ML_Model/pdp_data/pdp_sub_samp_s_c_brt.csv", row.names = FALSE)

# With abundance as response --------------------------------------------------
### velocity 
pdp_model_v_samp_a_c <- pdp::partial(xgb_samp_a_c, pred.var = "velocity", train = trainx_samp_a_c[ ,-1]) |>
  mutate(predictors = "velocity",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_v_samp_a_c, "ML_Model/pdp_data/pdp_v_samp_a_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_samp_a_c <- pdp::partial(xgb_samp_a_c, pred.var = "wd_m", train = trainx_samp_a_c[ ,-1]) |>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_wd_samp_a_c, "ML_Model/pdp_data/pdp_wd_samp_a_c_brt.csv", row.names = FALSE)

### z 
pdp_model_z_samp_a_c <- pdp::partial(xgb_samp_a_c, pred.var = "z", train = trainx_samp_a_c[,-1]) |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_z_samp_a_c, "ML_Model/pdp_data/pdp_z_samp_a_c_brt.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_samp_a_c <- pdp::partial(xgb_samp_a_c, pred.var = "dist_w", train = trainx_samp_a_c[ ,-1]) |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_dist_samp_a_c, "ML_Model/pdp_data/pdp_dist_samp_a_c_brt.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_samp_a_c <- pdp::partial(xgb_samp_a_c, pred.var = "cat_velocity", train = trainx_samp_a_c[ ,-1]) |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cv_samp_a_c, "ML_Model/pdp_data/pdp_cv_samp_a_c_brt.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_samp_a_c <- pdp::partial(xgb_samp_a_c, pred.var = "alg_cover", train = trainx_samp_a_c[ ,-1]) |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ac_samp_a_c, "ML_Model/pdp_data/pdp_ac_samp_a_c_brt.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_samp_a_c <- pdp::partial(xgb_samp_a_c, pred.var = "moos_cover", train = trainx_samp_a_c[ ,-1]) |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_mc_samp_a_c, "ML_Model/pdp_data/pdp_mc_samp_a_c_brt.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_samp_a_c <- pdp::partial(xgb_samp_a_c, pred.var = "cpom_cover", train = trainx_samp_a_c[ ,-1]) |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cc_samp_a_c, "ML_Model/pdp_data/pdp_cc_samp_a_c_brt.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_samp_a_c <- pdp::partial(xgb_samp_a_c, pred.var = "clog_3_class_int", train = trainx_samp_a_c[ ,-1]) |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_clog_3_samp_a_c, "ML_Model/pdp_data/pdp_clog_3_samp_a_c_brt.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_samp_a_c <- pdp::partial(xgb_samp_a_c, pred.var = "clog_6_class_int", train = trainx_samp_a_c[ ,-1]) |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_clog_6_samp_a_c, "ML_Model/pdp_data/pdp_clog_6_samp_a_c_brt.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_samp_a_c <- pdp::partial(xgb_samp_a_c, pred.var = "sub_type_int", train = trainx_samp_a_c[ ,-1]) |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_sub_samp_a_c, "ML_Model/pdp_data/pdp_sub_samp_a_c_brt.csv", row.names = FALSE)

# With rel_abundance as response ----------------------------------------------
### velocity 
pdp_model_v_samp_ra_c <- pdp::partial(xgb_samp_ra_c, pred.var = "velocity", train = trainx_samp_ra_c[ ,-1]) |>
  mutate(predictors = "velocity",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_samp_ra_c, "ML_Model/pdp_data/pdp_v_samp_ra_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_samp_ra_c <- pdp::partial(xgb_samp_ra_c, pred.var = "wd_m", train = trainx_samp_ra_c[ ,-1]) |>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_wd_samp_ra_c, "ML_Model/pdp_data/pdp_wd_samp_ra_c_brt.csv", row.names = FALSE)

### z 
pdp_model_z_samp_ra_c <- pdp::partial(xgb_samp_ra_c, pred.var = "z", train = trainx_samp_ra_c[,-1]) |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_z_samp_ra_c, "ML_Model/pdp_data/pdp_z_samp_ra_c_brt.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_samp_ra_c <- pdp::partial(xgb_samp_ra_c, pred.var = "dist_w", train = trainx_samp_ra_c[ ,-1]) |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_dist_samp_ra_c, "ML_Model/pdp_data/pdp_dist_samp_ra_c_brt.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_samp_ra_c <- pdp::partial(xgb_samp_ra_c, pred.var = "cat_velocity", train = trainx_samp_ra_c[ ,-1]) |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cv_samp_ra_c, "ML_Model/pdp_data/pdp_cv_samp_ra_c_brt.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_samp_ra_c <- pdp::partial(xgb_samp_ra_c, pred.var = "alg_cover", train = trainx_samp_ra_c[ ,-1]) |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ac_samp_ra_c, "ML_Model/pdp_data/pdp_ac_samp_ra_c_brt.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_samp_ra_c <- pdp::partial(xgb_samp_ra_c, pred.var = "moos_cover", train = trainx_samp_ra_c[ ,-1]) |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_mc_samp_ra_c, "ML_Model/pdp_data/pdp_mc_samp_ra_c_brt.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_samp_ra_c <- pdp::partial(xgb_samp_ra_c, pred.var = "cpom_cover", train = trainx_samp_ra_c[ ,-1]) |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cc_samp_ra_c, "ML_Model/pdp_data/pdp_cc_samp_ra_c_brt.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_samp_ra_c <- pdp::partial(xgb_samp_ra_c, pred.var = "clog_3_class_int", train = trainx_samp_ra_c[ ,-1]) |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_3_samp_ra_c, "ML_Model/pdp_data/pdp_clog_3_samp_ra_c_brt.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_samp_ra_c <- pdp::partial(xgb_samp_ra_c, pred.var = "clog_6_class_int", train = trainx_samp_ra_c[ ,-1]) |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_6_samp_ra_c, "ML_Model/pdp_data/pdp_clog_6_samp_ra_c_brt.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_samp_ra_c <- pdp::partial(xgb_samp_ra_c, pred.var = "sub_type_int", train = trainx_samp_ra_c[ ,-1]) |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_sub_samp_ra_c, "ML_Model/pdp_data/pdp_sub_samp_ra_c_brt.csv", row.names = FALSE)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
pdp_model_v_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "velocity", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_v_sec_k_c, "ML_Model/pdp_data/pdp_v_sec_k_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "wd_m", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_wd_sec_k_c, "ML_Model/pdp_data/pdp_wd_sec_k_c_brt.csv", row.names = FALSE)

### z 
pdp_model_z_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "z", train = trainx_sec_k_c[,-1]) |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_z_sec_k_c, "ML_Model/pdp_data/pdp_z_sec_k_c_brt.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "dist_w", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_dist_sec_k_c, "ML_Model/pdp_data/pdp_dist_sec_k_c_brt.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "cat_velocity", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cv_sec_k_c, "ML_Model/pdp_data/pdp_cv_sec_k_c_brt.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "alg_cover", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ac_sec_k_c, "ML_Model/pdp_data/pdp_ac_sec_k_c_brt.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "moos_cover", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_mc_sec_k_c, "ML_Model/pdp_data/pdp_mc_sec_k_c_brt.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "cpom_cover", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cc_sec_k_c, "ML_Model/pdp_data/pdp_cc_sec_k_c_brt.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "clog_3_class_int", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_clog_3_sec_k_c, "ML_Model/pdp_data/pdp_clog_3_sec_k_c_brt.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "clog_6_class_int", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_clog_6_sec_k_c, "ML_Model/pdp_data/pdp_clog_6_sec_k_c_brt.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "sub_type_int", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_sub_sec_k_c, "ML_Model/pdp_data/pdp_sub_sec_k_c_brt.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "pH_before", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "pH_before",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_phb_sec_k_c, "ML_Model/pdp_data/pdp_phb_sec_k_c_brt.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "pH_during", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "pH_during",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_phd_sec_k_c, "ML_Model/pdp_data/pdp_phd_sec_k_c_brt.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "pH_after", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "pH_after",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_pha_sec_k_c, "ML_Model/pdp_data/pdp_pha_sec_k_c_brt.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "conduct_before", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "conduct_before",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cb_sec_k_c, "ML_Model/pdp_data/pdp_cb_sec_k_c_brt.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "conduct_during", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "conduct_during",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_cd_sec_k_c, "ML_Model/pdp_data/pdp_cd_sec_k_c_brt.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "conduct_after", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "conduct_after",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ca_sec_k_c, "ML_Model/pdp_data/pdp_ca_sec_k_c_brt.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "ox_before", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "ox_before",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ob_sec_k_c, "ML_Model/pdp_data/pdp_ob_sec_k_c_brt.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "ox_during", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "ox_during",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_od_sec_k_c, "ML_Model/pdp_data/pdp_od_sec_k_c_brt.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "ox_after", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "ox_after",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_oa_sec_k_c, "ML_Model/pdp_data/pdp_oa_sec_k_c_brt.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "turb_before", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "turb_before",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_tb_sec_k_c, "ML_Model/pdp_data/pdp_tb_sec_k_c_brt.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "turb_during", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "turb_during",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_td_sec_k_c, "ML_Model/pdp_data/pdp_td_sec_k_c_brt.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "turb_after", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "turb_after",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ta_sec_k_c, "ML_Model/pdp_data/pdp_ta_sec_k_c_brt.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "temp_before", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "temp_before",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_teb_sec_k_c, "ML_Model/pdp_data/pdp_teb_sec_k_c_brt.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "temp_during", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "temp_during",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ted_sec_k_c, "ML_Model/pdp_data/pdp_ted_sec_k_c_brt.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "temp_after", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "temp_after",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_tea_sec_k_c, "ML_Model/pdp_data/pdp_tea_sec_k_c_brt.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "q_before", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "q_before",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_qb_sec_k_c, "ML_Model/pdp_data/pdp_qb_sec_k_c_brt.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "q_during", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "q_during",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_qd_sec_k_c, "ML_Model/pdp_data/pdp_qd_sec_k_c_brt.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "q_after", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "q_after",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_qa_sec_k_c, "ML_Model/pdp_data/pdp_qa_sec_k_c_brt.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "gaug_before", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "gaug_before",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_gb_sec_k_c, "ML_Model/pdp_data/pdp_gb_sec_k_c_brt.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "gaug_during", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "gaug_during",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_gd_sec_k_c, "ML_Model/pdp_data/pdp_gd_sec_k_c_brt.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_k_c <- pdp::partial(xgb_sec_k_c, pred.var = "gaug_after", train = trainx_sec_k_c[ ,-1]) |>
  mutate(predictors = "gaug_after",
         model = "sampling w/o coordinates",
         index = "k_index")

# export data 
write.csv(pdp_model_ga_sec_k_c, "ML_Model/pdp_data/pdp_ga_sec_k_c_brt.csv", row.names = FALSE)

# With shannon index as response ----------------------------------------------
### velocity 
pdp_model_v_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "velocity", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_v_sec_s_c, "ML_Model/pdp_data/pdp_v_sec_s_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "wd_m", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "wd_m",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_wd_sec_s_c, "ML_Model/pdp_data/pdp_wd_sec_s_c_brt.csv", row.names = FALSE)

### z 
pdp_model_z_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "z", train = trainx_sec_s_c[,-1]) |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_z_sec_s_c, "ML_Model/pdp_data/pdp_z_sec_s_c_brt.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "dist_w", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_dist_sec_s_c, "ML_Model/pdp_data/pdp_dist_sec_s_c_brt.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "cat_velocity", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cv_sec_s_c, "ML_Model/pdp_data/pdp_cv_sec_s_c_brt.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "alg_cover", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ac_sec_s_c, "ML_Model/pdp_data/pdp_ac_sec_s_c_brt.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "moos_cover", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_mc_sec_s_c, "ML_Model/pdp_data/pdp_mc_sec_s_c_brt.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "cpom_cover", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cc_sec_s_c, "ML_Model/pdp_data/pdp_cc_sec_s_c_brt.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "clog_3_class_int", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_3_sec_s_c, "ML_Model/pdp_data/pdp_clog_3_sec_s_c_brt.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "clog_6_class_int", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_clog_6_sec_s_c, "ML_Model/pdp_data/pdp_clog_6_sec_s_c_brt.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "sub_type_int", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_sub_sec_s_c, "ML_Model/pdp_data/pdp_sub_sec_s_c_brt.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "pH_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "pH_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_phb_sec_s_c, "ML_Model/pdp_data/pdp_phb_sec_s_c_brt.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "pH_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "pH_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_phd_sec_s_c, "ML_Model/pdp_data/pdp_phd_sec_s_c_brt.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "pH_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "pH_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_pha_sec_s_c, "ML_Model/pdp_data/pdp_pha_sec_s_c_brt.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "conduct_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "conduct_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cb_sec_s_c, "ML_Model/pdp_data/pdp_cb_sec_s_c_brt.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "conduct_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "conduct_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_cd_sec_s_c, "ML_Model/pdp_data/pdp_cd_sec_s_c_brt.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "conduct_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "conduct_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ca_sec_s_c, "ML_Model/pdp_data/pdp_ca_sec_s_c_brt.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "ox_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "ox_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ob_sec_s_c, "ML_Model/pdp_data/pdp_ob_sec_s_c_brt.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "ox_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "ox_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_od_sec_s_c, "ML_Model/pdp_data/pdp_od_sec_s_c_brt.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "ox_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "ox_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_oa_sec_s_c, "ML_Model/pdp_data/pdp_oa_sec_s_c_brt.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "turb_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "turb_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_tb_sec_s_c, "ML_Model/pdp_data/pdp_tb_sec_s_c_brt.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "turb_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "turb_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_td_sec_s_c, "ML_Model/pdp_data/pdp_td_sec_s_c_brt.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "turb_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "turb_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ta_sec_s_c, "ML_Model/pdp_data/pdp_ta_sec_s_c_brt.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "temp_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "temp_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_teb_sec_s_c, "ML_Model/pdp_data/pdp_teb_sec_s_c_brt.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "temp_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "temp_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ted_sec_s_c, "ML_Model/pdp_data/pdp_ted_sec_s_c_brt.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "temp_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "temp_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_tea_sec_s_c, "ML_Model/pdp_data/pdp_tea_sec_s_c_brt.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "q_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "q_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_qb_sec_s_c, "ML_Model/pdp_data/pdp_qb_sec_s_c_brt.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "q_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "q_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_qd_sec_s_c, "ML_Model/pdp_data/pdp_qd_sec_s_c_brt.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "q_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "q_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_qa_sec_s_c, "ML_Model/pdp_data/pdp_qa_sec_s_c_brt.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "gaug_before", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "gaug_before",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_gb_sec_s_c, "ML_Model/pdp_data/pdp_gb_sec_s_c_brt.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "gaug_during", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "gaug_during",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_gd_sec_s_c, "ML_Model/pdp_data/pdp_gd_sec_s_c_brt.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_s_c <- pdp::partial(xgb_sec_s_c, pred.var = "gaug_after", train = trainx_sec_s_c[ ,-1]) |>
  mutate(predictors = "gaug_after",
         model = "sampling w/o coordinates",
         index = "shannon_index")

# export data 
write.csv(pdp_model_ga_sec_s_c, "ML_Model/pdp_data/pdp_ga_sec_s_c_brt.csv", row.names = FALSE)

# With abundance as response ----------------------------------------------
### velocity 
pdp_model_v_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "velocity", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_v_sec_a_c, "ML_Model/pdp_data/pdp_v_sec_a_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "wd_m", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "wd_m",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_wd_sec_a_c, "ML_Model/pdp_data/pdp_wd_sec_a_c_brt.csv", row.names = FALSE)

### z 
pdp_model_z_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "z", train = trainx_sec_a_c[,-1]) |>
  mutate(predictors = "z",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_z_sec_a_c, "ML_Model/pdp_data/pdp_z_sec_a_c_brt.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "dist_w", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "dist_w",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_dist_sec_a_c, "ML_Model/pdp_data/pdp_dist_sec_a_c_brt.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "cat_velocity", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "cat_velocity",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cv_sec_a_c, "ML_Model/pdp_data/pdp_cv_sec_a_c_brt.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "alg_cover", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "alg_cover",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ac_sec_a_c, "ML_Model/pdp_data/pdp_ac_sec_a_c_brt.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "moos_cover", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "moos_cover",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_mc_sec_a_c, "ML_Model/pdp_data/pdp_mc_sec_a_c_brt.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "cpom_cover", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "cpom_cover",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cc_sec_a_c, "ML_Model/pdp_data/pdp_cc_sec_a_c_brt.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "clog_3_class_int", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "clog_3_class",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_clog_3_sec_a_c, "ML_Model/pdp_data/pdp_clog_3_sec_a_c_brt.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "clog_6_class_int", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "clog_6_class",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_clog_6_sec_a_c, "ML_Model/pdp_data/pdp_clog_6_sec_a_c_brt.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "sub_type_int", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "sub_type",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_sub_sec_a_c, "ML_Model/pdp_data/pdp_sub_sec_a_c_brt.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "pH_before", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "pH_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_phb_sec_a_c, "ML_Model/pdp_data/pdp_phb_sec_a_c_brt.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "pH_during", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "pH_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_phd_sec_a_c, "ML_Model/pdp_data/pdp_phd_sec_a_c_brt.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "pH_after", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "pH_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_pha_sec_a_c, "ML_Model/pdp_data/pdp_pha_sec_a_c_brt.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "conduct_before", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "conduct_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cb_sec_a_c, "ML_Model/pdp_data/pdp_cb_sec_a_c_brt.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "conduct_during", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "conduct_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_cd_sec_a_c, "ML_Model/pdp_data/pdp_cd_sec_a_c_brt.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "conduct_after", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "conduct_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ca_sec_a_c, "ML_Model/pdp_data/pdp_ca_sec_a_c_brt.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "ox_before", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "ox_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ob_sec_a_c, "ML_Model/pdp_data/pdp_ob_sec_a_c_brt.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "ox_during", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "ox_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_od_sec_a_c, "ML_Model/pdp_data/pdp_od_sec_a_c_brt.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "ox_after", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "ox_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_oa_sec_a_c, "ML_Model/pdp_data/pdp_oa_sec_a_c_brt.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "turb_before", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "turb_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_tb_sec_a_c, "ML_Model/pdp_data/pdp_tb_sec_a_c_brt.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "turb_during", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "turb_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_td_sec_a_c, "ML_Model/pdp_data/pdp_td_sec_a_c_brt.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "turb_after", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "turb_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ta_sec_a_c, "ML_Model/pdp_data/pdp_ta_sec_a_c_brt.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "temp_before", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "temp_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_teb_sec_a_c, "ML_Model/pdp_data/pdp_teb_sec_a_c_brt.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "temp_during", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "temp_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ted_sec_a_c, "ML_Model/pdp_data/pdp_ted_sec_a_c_brt.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "temp_after", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "temp_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_tea_sec_a_c, "ML_Model/pdp_data/pdp_tea_sec_a_c_brt.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "q_before", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "q_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_qb_sec_a_c, "ML_Model/pdp_data/pdp_qb_sec_a_c_brt.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "q_during", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "q_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_qd_sec_a_c, "ML_Model/pdp_data/pdp_qd_sec_a_c_brt.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "q_after", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "q_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_qa_sec_a_c, "ML_Model/pdp_data/pdp_qa_sec_a_c_brt.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "gaug_before", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "gaug_before",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_gb_sec_a_c, "ML_Model/pdp_data/pdp_gb_sec_a_c_brt.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "gaug_during", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "gaug_during",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_gd_sec_a_c, "ML_Model/pdp_data/pdp_gd_sec_a_c_brt.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_a_c <- pdp::partial(xgb_sec_a_c, pred.var = "gaug_after", train = trainx_sec_a_c[ ,-1]) |>
  mutate(predictors = "gaug_after",
         model = "all predictors w/o coordinates",
         index = "abundance")

# export data 
write.csv(pdp_model_ga_sec_a_c, "ML_Model/pdp_data/pdp_ga_sec_a_c_brt.csv", row.names = FALSE)

# With rel_abundance as response ----------------------------------------------
### velocity 
pdp_model_v_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "velocity", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "velocity",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_v_sec_ra_c, "ML_Model/pdp_data/pdp_v_sec_ra_c_brt.csv", row.names = FALSE)

### wd_m 
pdp_model_wd_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "wd_m", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "wd_m",
         model = "all predictors w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_wd_sec_ra_c, "ML_Model/pdp_data/pdp_wd_sec_ra_c_brt.csv", row.names = FALSE)

### z 
pdp_model_z_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "z", train = trainx_sec_ra_c[,-1]) |>
  mutate(predictors = "z",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_z_sec_ra_c, "ML_Model/pdp_data/pdp_z_sec_ra_c_brt.csv", row.names = FALSE)

### dist_w 
pdp_model_dist_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "dist_w", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "dist_w",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_dist_sec_ra_c, "ML_Model/pdp_data/pdp_dist_sec_ra_c_brt.csv", row.names = FALSE)

### cat_v 
pdp_model_cv_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "cat_velocity", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "cat_velocity",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cv_sec_ra_c, "ML_Model/pdp_data/pdp_cv_sec_ra_c_brt.csv", row.names = FALSE)

### alg_cover 
pdp_model_ac_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "alg_cover", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "alg_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ac_sec_ra_c, "ML_Model/pdp_data/pdp_ac_sec_ra_c_brt.csv", row.names = FALSE)

### moos_cover 
pdp_model_mc_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "moos_cover", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "moos_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_mc_sec_ra_c, "ML_Model/pdp_data/pdp_mc_sec_ra_c_brt.csv", row.names = FALSE)

### cpom_cover 
pdp_model_cc_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "cpom_cover", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "cpom_cover",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cc_sec_ra_c, "ML_Model/pdp_data/pdp_cc_sec_ra_c_brt.csv", row.names = FALSE)

### clog_3 
pdp_model_clog_3_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "clog_3_class_int", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "clog_3_class",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_3_sec_ra_c, "ML_Model/pdp_data/pdp_clog_3_sec_ra_c_brt.csv", row.names = FALSE)

### clog_6
pdp_model_clog_6_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "clog_6_class_int", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "clog_6_class",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_clog_6_sec_ra_c, "ML_Model/pdp_data/pdp_clog_6_sec_ra_c_brt.csv", row.names = FALSE)

### sub_type 
pdp_model_sub_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "sub_type_int", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "sub_type",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_sub_sec_ra_c, "ML_Model/pdp_data/pdp_sub_sec_ra_c_brt.csv", row.names = FALSE)

### pH_before
pdp_model_phb_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "pH_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "pH_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_phb_sec_ra_c, "ML_Model/pdp_data/pdp_phb_sec_ra_c_brt.csv", row.names = FALSE)

### pH_during
pdp_model_phd_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "pH_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "pH_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_phd_sec_ra_c, "ML_Model/pdp_data/pdp_phd_sec_ra_c_brt.csv", row.names = FALSE)

### pH_after
pdp_model_pha_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "pH_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "pH_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_pha_sec_ra_c, "ML_Model/pdp_data/pdp_pha_sec_ra_c_brt.csv", row.names = FALSE)

### conduct_before
pdp_model_cb_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "conduct_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "conduct_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cb_sec_ra_c, "ML_Model/pdp_data/pdp_cb_sec_ra_c_brt.csv", row.names = FALSE)

### conduct_during
pdp_model_cd_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "conduct_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "conduct_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_cd_sec_ra_c, "ML_Model/pdp_data/pdp_cd_sec_ra_c_brt.csv", row.names = FALSE)

### conduct_after
pdp_model_ca_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "conduct_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "conduct_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ca_sec_ra_c, "ML_Model/pdp_data/pdp_ca_sec_ra_c_brt.csv", row.names = FALSE)

### ox_before
pdp_model_ob_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "ox_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "ox_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ob_sec_ra_c, "ML_Model/pdp_data/pdp_ob_sec_ra_c_brt.csv", row.names = FALSE)

### ox_during
pdp_model_od_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "ox_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "ox_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_od_sec_ra_c, "ML_Model/pdp_data/pdp_od_sec_ra_c_brt.csv", row.names = FALSE)

### ox_after
pdp_model_oa_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "ox_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "ox_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_oa_sec_ra_c, "ML_Model/pdp_data/pdp_oa_sec_ra_c_brt.csv", row.names = FALSE)

### turb_before
pdp_model_tb_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "turb_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "turb_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_tb_sec_ra_c, "ML_Model/pdp_data/pdp_tb_sec_ra_c_brt.csv", row.names = FALSE)

### turb_during
pdp_model_td_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "turb_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "turb_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_td_sec_ra_c, "ML_Model/pdp_data/pdp_td_sec_ra_c_brt.csv", row.names = FALSE)

### turb_after
pdp_model_ta_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "turb_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "turb_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ta_sec_ra_c, "ML_Model/pdp_data/pdp_ta_sec_ra_c_brt.csv", row.names = FALSE)

### temp_before
pdp_model_teb_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "temp_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "temp_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_teb_sec_ra_c, "ML_Model/pdp_data/pdp_teb_sec_ra_c_brt.csv", row.names = FALSE)

### temp_during
pdp_model_ted_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "temp_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "temp_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ted_sec_ra_c, "ML_Model/pdp_data/pdp_ted_sec_ra_c_brt.csv", row.names = FALSE)

### temp_after
pdp_model_tea_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "temp_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "temp_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_tea_sec_ra_c, "ML_Model/pdp_data/pdp_tea_sec_ra_c_brt.csv", row.names = FALSE)

### q_before
pdp_model_qb_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "q_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "q_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_qb_sec_ra_c, "ML_Model/pdp_data/pdp_qb_sec_ra_c_brt.csv", row.names = FALSE)

### q_during
pdp_model_qd_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "q_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "q_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_qd_sec_ra_c, "ML_Model/pdp_data/pdp_qd_sec_ra_c_brt.csv", row.names = FALSE)

### q_after
pdp_model_qa_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "q_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "q_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_qa_sec_ra_c, "ML_Model/pdp_data/pdp_qa_sec_ra_c_brt.csv", row.names = FALSE)

### gaug_before
pdp_model_gb_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "gaug_before", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "gaug_before",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_gb_sec_ra_c, "ML_Model/pdp_data/pdp_gb_sec_ra_c_brt.csv", row.names = FALSE)

### gaug_during
pdp_model_gd_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "gaug_during", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "gaug_during",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_gd_sec_ra_c, "ML_Model/pdp_data/pdp_gd_sec_ra_c_brt.csv", row.names = FALSE)

### gaug_after
pdp_model_ga_sec_ra_c <- pdp::partial(xgb_sec_ra_c, pred.var = "gaug_after", train = trainx_sec_ra_c[ ,-1]) |>
  mutate(predictors = "gaug_after",
         model = "sampling w/o coordinates",
         index = "rel_abundance")

# export data 
write.csv(pdp_model_ga_sec_ra_c, "ML_Model/pdp_data/pdp_ga_sec_ra_c_brt.csv", row.names = FALSE)
```

## Obs and Pred 
```{r}
### OBSERVED VALUES ### ------------------------------------------------------
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
responses_v_k <- test_v_k$k_index

# With shannon index as response
responses_v_s <- test_v_s$shannon

# With abundance as response
responses_v_a <- test_v_a$abundance

# With rel_abundance as response
responses_v_ra <- test_v_ra$rel_abundance

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
responses_wd_k <- test_wd_k$k_index

# With shannon index as response
responses_wd_s <- test_wd_s$shannon

# With abundance as response
responses_wd_a <- test_wd_a$abundance

# With rel_abundance as response
responses_wd_ra <- test_wd_ra$rel_abundance

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response
responses_samp_k <- test_samp_k$k_index

# With shannon index as response
responses_samp_s <- test_samp_s$shannon

# With abundance as response
responses_samp_a <- test_samp_a$abundance

# With rel_abundance as response
responses_samp_ra <- test_samp_ra$rel_abundance

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
responses_sec_k <- test_sec_k$k_index

# With shannon index as response
responses_sec_s <- test_sec_s$shannon

# With abundance as response
responses_sec_a <- test_sec_a$abundance

# With rel_abundance as response
responses_sec_ra <- test_sec_ra$rel_abundance

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
responses_var_k <- test_var_k$k_index

# With shannon index as response
responses_var_s <- test_var_s$shannon

# With abundance as response
responses_var_a <- test_var_a$abundance

# With rel_abundance as response
responses_var_ra <- test_var_ra$rel_abundance

### PREDICTED VALUES ### ------------------------------------------------------
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
brt_pred_model_v_k_c <- predict(xgb_v_k_c, newdata = testx_v_k_c)

# With shannon index as response
brt_pred_model_v_s_c <- predict(xgb_v_s_c, newdata = testx_v_s_c[ ,-1])

# With abundance as response 
brt_pred_model_v_a_c <- predict(xgb_v_a_c, newdata = testx_v_a_c[ ,-1])

# With rel_abundance as response
brt_pred_model_v_ra_c <- predict(xgb_v_ra_c, newdata = testx_v_ra_c[ ,-1])

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
brt_pred_model_wd_k_c <- predict(xgb_wd_k_c, newdata = testx_wd_k_c[ ,-1])

# With shannon index as response
brt_pred_model_wd_s_c <- predict(xgb_wd_s_c, newdata = testx_wd_s_c[ ,-1])

# With abundance as response
brt_pred_model_wd_a_c <- predict(xgb_wd_a_c, newdata = testx_wd_a_c[ ,-1])

# With rel_abundance as response
brt_pred_model_wd_ra_c <- predict(xgb_wd_ra_c, newdata = testx_wd_ra_c[ ,-1])

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
brt_pred_model_samp_k_c <- predict(xgb_samp_k_c, newdata = testx_samp_k_c[ ,-1])

# With shannon index as response
brt_pred_model_samp_s_c <- predict(xgb_samp_s_c, newdata = testx_samp_s_c[ ,-1])

# With abundance as response
brt_pred_model_samp_a_c <- predict(xgb_samp_a_c, newdata = testx_samp_a_c[ ,-1])

# With rel_abundance as response
brt_pred_model_samp_ra_c <- predict(xgb_samp_ra_c, newdata = testx_samp_ra_c[ ,-1])

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
brt_pred_model_sec_k_c <- predict(xgb_sec_k_c, newdata = testx_sec_k_c[ ,-1])

# With shannon index as response
brt_pred_model_sec_s_c <- predict(xgb_sec_s_c, newdata = testx_sec_s_c[ ,-1])

# With abundance as response
brt_pred_model_sec_a_c <- predict(xgb_sec_a_c, newdata = testx_sec_a_c[ ,-1])

# With rel_abundance as response
brt_pred_model_sec_ra_c <- predict(xgb_sec_ra_c, newdata = testx_sec_ra_c[ ,-1])

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
brt_pred_model_var_k_c <- predict(xgb_var_k_c, newdata = testx_var_k_c[ ,-1])

# With shannon index as response
brt_pred_model_var_s_c <- predict(xgb_var_s_c, newdata = testx_var_s_c[ ,-1])

# With abundance as response
brt_pred_model_var_a_c <- predict(xgb_var_a_c, newdata = testx_var_a_c[ ,-1])

# With rel_abundance as response
brt_pred_model_var_ra_c <- predict(xgb_var_ra_c, newdata = testx_var_ra_c[ ,-1])
```

## R2
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response 
r2_model_v_k_c <- R2(pred = brt_pred_model_v_k_c, obs = responses_v_k)

# With shannon index as response 
r2_model_v_s_c <- R2(pred = brt_pred_model_v_s_c, obs = responses_v_s)

# With abundance as response
r2_model_v_a_c <- R2(pred = brt_pred_model_v_a_c, obs = responses_v_a)

# With rel_abundance as response 
r2_model_v_ra_c <- R2(pred = brt_pred_model_v_ra_c, obs = responses_v_ra)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
r2_model_wd_k_c <- R2(pred = brt_pred_model_wd_k_c, obs = responses_wd_k)

# With shannon index as response
r2_model_wd_s_c <- R2(pred = brt_pred_model_wd_s_c, obs = responses_wd_s)

# With abundance as response
r2_model_wd_a_c <- R2(pred = brt_pred_model_wd_a_c, obs = responses_wd_a)

# With rel_abundance as response 
r2_model_wd_ra_c <- R2(pred = brt_pred_model_wd_ra_c, obs = responses_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
r2_model_samp_k_c <- R2(pred = brt_pred_model_samp_k_c, obs = responses_samp_k)

# With shannon index as response
r2_model_samp_s_c <- R2(pred = brt_pred_model_samp_s_c, obs = responses_samp_s)

# With abundance as response 
r2_model_samp_a_c <- R2(pred = brt_pred_model_samp_a_c, obs = responses_samp_a)

# With rel_abundance as response
r2_model_samp_ra_c <- R2(pred = brt_pred_model_samp_ra_c, obs = responses_samp_ra)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
r2_model_sec_k_c <- R2(pred = brt_pred_model_sec_k_c, obs = responses_sec_k)

# With shannon index as response 
r2_model_sec_s_c <- R2(pred = brt_pred_model_sec_s_c, obs = responses_sec_s)

# With abundance as response
r2_model_sec_a_c <- R2(pred = brt_pred_model_sec_a_c, obs = responses_sec_a)

# With rel_abundance as response
r2_model_sec_ra_c <- R2(pred = brt_pred_model_sec_ra_c, obs = responses_sec_ra)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
r2_model_var_k_c <- R2(pred = brt_pred_model_var_k_c, obs = responses_var_k)

# With shannon index as response 
r2_model_var_s_c <- R2(pred = brt_pred_model_var_s_c, obs = responses_var_s)

# With abundance as response
r2_model_var_a_c <- R2(pred = brt_pred_model_var_a_c, obs = responses_var_a)

# With rel_abundance as response
r2_model_var_ra_c <- R2(pred = brt_pred_model_var_ra_c, obs = responses_var_ra)
```

## ! Deviance explained 
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response ---------------------------------------------------
# Step 2: Calculate Total Deviance
ov_v_k <- as.numeric(as.character(training_v_k_c$k_index))
pv_v_k <- predict(xgb_v_k_c, data.matrix(trainx_v_k_c[, -1]))
td_v_k <- sum((ov_v_k - mean(pv_v_k))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_v_k <- xgb.cv(data = data.matrix(trainx_v_k_c[, -1]),
                   label = as.numeric(as.character(training_v_k_c$k_index)),
                   nfold = 5,
                   eta = 0.008569621,
                     nrounds = 914,
                     max_depth = 687,
                     subsample = 0.6312782,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_v_k <- min(cv_v_k$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_v_k <- (td_v_k - cv_rd_v_k) / td_v_k

# With shannon index as response --------------------------------------------
# Step 2: Calculate Total Deviance
ov_v_s <- as.numeric(as.character(training_v_s_c$shannon))
pv_v_s <- predict(xgb_v_s_c, data.matrix(trainx_v_s_c[, -1]))
td_v_s <- sum((ov_v_s - mean(pv_v_s))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_v_s <- xgb.cv(data = data.matrix(trainx_v_s_c[, -1]),
                   label = as.numeric(as.character(training_v_s_c$shannon)),
                   nfold = 5,
                   eta = 0.2352155,
                     nrounds = 23,
                     max_depth = 6284,
                     subsample = 0.6589628,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_v_s <- min(cv_v_s$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_v_s <- (td_v_s - cv_rd_v_s) / td_v_s

# With abundance as response --------------------------------------------------
# Step 2: Calculate Total Deviance
ov_v_a <- as.numeric(as.character(training_v_a_c$abundance))
pv_v_a <- predict(xgb_v_a_c, data.matrix(trainx_v_a_c[, -1]))
td_v_a <- sum((ov_v_a - mean(pv_v_a))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_v_a <- xgb.cv(data = data.matrix(trainx_v_a_c[, -1]),
                   label = as.numeric(as.character(training_v_a_c$abundance)),
                   nfold = 5,
                   eta = 0.2734048,
                     nrounds = 1000,
                     max_depth = 1587,
                     subsample = 0.5312874,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_v_a <- min(cv_v_a$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_v_a <- (td_v_a - cv_rd_v_a) / td_v_a

# With rel_abundance as response ---------------------------------------------
# Step 2: Calculate Total Deviance
ov_v_ra <- as.numeric(as.character(training_v_ra_c$rel_abundance))
pv_v_ra <- predict(xgb_v_ra_c, data.matrix(trainx_v_ra_c[, -1]))
td_v_ra <- sum((ov_v_ra - mean(pv_v_ra))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_v_ra <- xgb.cv(data = data.matrix(trainx_v_ra_c[, -1]),
                   label = as.numeric(as.character(training_v_ra_c$rel_abundance)),
                   nfold = 5,
                   eta = 0.04511723,
                     nrounds = 41,
                     max_depth = 1208,
                     subsample = 0.5374118,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_v_ra <- min(cv_v_ra$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_v_ra <- (td_v_ra - cv_rd_v_ra) / td_v_ra

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response ----------------------------------------------------
# Step 2: Calculate Total Deviance
ov_wd_k <- as.numeric(as.character(training_wd_k_c$k_index))
pv_wd_k <- predict(xgb_wd_k_c, data.matrix(trainx_wd_k_c[, -1]))
td_wd_k <- sum((ov_wd_k - mean(pv_wd_k))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_wd_k <- xgb.cv(data = data.matrix(trainx_wd_k_c[, -1]),
                   label = as.numeric(as.character(training_wd_k_c$k_index)),
                   nfold = 5,
                   eta = 0.1256372,
                     nrounds = 10,
                     max_depth = 6604,
                     subsample = 0.7334653,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_wd_k <- min(cv_wd_k$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_wd_k <- (td_wd_k - cv_rd_wd_k) / td_wd_k

# With shannon index as response --------------------------------------------
# Step 2: Calculate Total Deviance
ov_wd_s <- as.numeric(as.character(training_wd_s_c$shannon))
pv_wd_s <- predict(xgb_wd_s_c, data.matrix(trainx_wd_s_c[, -1]))
td_wd_s <- sum((ov_wd_s - mean(pv_wd_s))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_wd_s <- xgb.cv(data = data.matrix(trainx_wd_s_c[, -1]),
                   label = as.numeric(as.character(training_wd_s_c$shannon)),
                   nfold = 5,
                   eta = 0.1048352,
                     nrounds = 63,
                     max_depth = 701,
                     subsample = 0.610751,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_wd_s <- min(cv_wd_s$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_wd_s <- (td_wd_s - cv_rd_wd_s) / td_wd_s

# With abundance as response --------------------------------------------------
# Step 2: Calculate Total Deviance
ov_wd_a <- as.numeric(as.character(training_wd_a_c$abundance))
pv_wd_a <- predict(xgb_wd_a_c, data.matrix(trainx_wd_a_c[, -1]))
td_wd_a <- sum((ov_wd_a - mean(pv_wd_a))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_wd_a <- xgb.cv(data = data.matrix(trainx_wd_a_c[, -1]),
                   label = as.numeric(as.character(training_wd_a_c$abundance)),
                   nfold = 5,
                   eta = 0.05856516,
                     nrounds = 33,
                     max_depth = 8685,
                     subsample = 0.5665955,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_wd_a <- min(cv_wd_a$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_wd_a <- (td_wd_a - cv_rd_wd_a) / td_wd_a

# With rel_abundance as response ---------------------------------------------
# Step 2: Calculate Total Deviance
ov_wd_ra <- as.numeric(as.character(training_wd_ra_c$rel_abundance))
pv_wd_ra <- predict(xgb_wd_ra_c, data.matrix(trainx_wd_ra_c[, -1]))
td_wd_ra <- sum((ov_wd_ra - mean(pv_wd_ra))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_wd_ra <- xgb.cv(data = data.matrix(trainx_wd_ra_c[, -1]),
                   label = as.numeric(as.character(training_wd_ra_c$rel_abundance)),
                   nfold = 5,
                   eta = 0.05327741,
                     nrounds = 45,
                     max_depth = 6892,
                     subsample = 0.5123451,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_wd_ra <- min(cv_wd_ra$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_wd_ra <- (td_wd_ra - cv_rd_wd_ra) / td_wd_ra

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
# Step 2: Calculate Total Deviance
ov_samp_k <- as.numeric(as.character(training_samp_k_c$k_index))
pv_samp_k <- predict(xgb_samp_k_c, data.matrix(trainx_samp_k_c[, -1]))
td_samp_k <- sum((ov_samp_k - mean(pv_samp_k))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_samp_k <- xgb.cv(data = data.matrix(trainx_samp_k_c[, -1]),
                   label = as.numeric(as.character(training_samp_k_c$k_index)),
                   nfold = 5,
                   eta = 0.04461215,
                     nrounds = 19,
                     max_depth = 2111,
                     subsample = 0.649418,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_samp_k <- min(cv_samp_k$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_samp_k <- (td_samp_k - cv_rd_samp_k) / td_samp_k

# With shannon index as response --------------------------------------------
# Step 2: Calculate Total Deviance
ov_samp_s <- as.numeric(as.character(training_samp_s_c$shannon))
pv_samp_s <- predict(xgb_samp_s_c, data.matrix(trainx_samp_s_c[, -1]))
td_samp_s <- sum((ov_samp_s - mean(pv_samp_s))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_samp_s <- xgb.cv(data = data.matrix(trainx_samp_s_c[, -1]),
                   label = as.numeric(as.character(training_samp_s_c$shannon)),
                   nfold = 5,
                   eta = 0.1739483,
                     nrounds = 116,
                     max_depth = 3664,
                     subsample = 0.5660478,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_samp_s <- min(cv_samp_s$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_samp_s <- (td_samp_s - cv_rd_samp_s) / td_samp_s

# With abundance as response --------------------------------------------------
# Step 2: Calculate Total Deviance
ov_samp_a <- as.numeric(as.character(training_samp_a_c$abundance))
pv_samp_a <- predict(xgb_samp_a_c, data.matrix(trainx_samp_a_c[, -1]))
td_samp_a <- sum((ov_samp_a - mean(pv_samp_a))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_samp_a <- xgb.cv(data = data.matrix(trainx_samp_a_c[, -1]),
                   label = as.numeric(as.character(training_samp_a_c$abundance)),
                   nfold = 5,
                   eta = 0.006622144,
                     nrounds = 154,
                     max_depth = 3917,
                     subsample = 0.6283266,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_samp_a <- min(cv_samp_a$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_samp_a <- (td_samp_a - cv_rd_samp_a) / td_samp_a

# With rel_abundance as response --------------------------------------------------
# Step 2: Calculate Total Deviance
ov_samp_ra <- as.numeric(as.character(training_samp_ra_c$rel_abundance))
pv_samp_ra <- predict(xgb_samp_ra_c, data.matrix(trainx_samp_ra_c[, -1]))
td_samp_ra <- sum((ov_samp_ra - mean(pv_samp_ra))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_samp_ra <- xgb.cv(data = data.matrix(trainx_samp_ra_c[, -1]),
                   label = as.numeric(as.character(training_samp_ra_c$rel_abundance)),
                   nfold = 5,
                   eta = 0.3057943,
                     nrounds = 751,
                     max_depth = 6014,
                     subsample = 0.5325193,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_samp_ra <- min(cv_samp_ra$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_samp_ra <- (td_samp_ra - cv_rd_samp_ra) / td_samp_ra
### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response ---------------------------------------------------
# Step 2: Calculate Total Deviance
ov_sec_k <- as.numeric(as.character(training_sec_k_c$k_index))
pv_sec_k <- predict(xgb_sec_k_c, data.matrix(trainx_sec_k_c[, -1]))
td_sec_k <- sum((ov_sec_k - mean(pv_sec_k))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_sec_k <- xgb.cv(data = data.matrix(trainx_sec_k_c[, -1]),
                   label = as.numeric(as.character(training_sec_k_c$k_index)),
                   nfold = 5,
                   eta = 0.1685379,
                     max_depth = 4,
                     nrounds = 324,
                     subsample = 0.6693844,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_sec_k <- min(cv_sec_k$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_sec_k <- (td_sec_k - cv_rd_sec_k) / td_sec_k

# With shannon index as response --------------------------------------------
# Step 2: Calculate Total Deviance
ov_sec_s <- as.numeric(as.character(training_sec_s_c$shannon))
pv_sec_s <- predict(xgb_sec_s_c, data.matrix(trainx_sec_s_c[, -1]))
td_sec_s <- sum((ov_sec_s - mean(pv_sec_s))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_sec_s <- xgb.cv(data = data.matrix(trainx_sec_s_c[, -1]),
                   label = as.numeric(as.character(training_sec_s_c$shannon)),
                   nfold = 5,
                   eta = 0.09633102,
                     max_depth = 8,
                     nrounds = 680,
                     subsample = 0.6800524,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_sec_s <- min(cv_sec_s$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_sec_s <- (td_sec_s - cv_rd_sec_s) / td_sec_s

# With abundance as response --------------------------------------------------
# Step 2: Calculate Total Deviance
ov_sec_a <- as.numeric(as.character(training_sec_a_c$abundance))
pv_sec_a <- predict(xgb_sec_a_c, data.matrix(trainx_sec_a_c[, -1]))
td_sec_a <- sum((ov_sec_a - mean(pv_sec_a))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_sec_a <- xgb.cv(data = data.matrix(trainx_sec_a_c[, -1]),
                   label = as.numeric(as.character(training_sec_a_c$abundance)),
                   nfold = 5,
                   eta = 0.2229642,
                     max_depth = 9,
                     nrounds = 532,
                     subsample = 0.7099357,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_sec_a <- min(cv_sec_a$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_sec_a <- (td_sec_a - cv_rd_sec_a) / td_sec_a

# With rel_abundance as response ---------------------------------------------
# Step 2: Calculate Total Deviance
ov_sec_ra <- as.numeric(as.character(training_sec_ra_c$rel_abundance))
pv_sec_ra <- predict(xgb_sec_ra_c, data.matrix(trainx_sec_ra_c[, -1]))
td_sec_ra <- sum((ov_sec_ra - mean(pv_sec_ra))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_sec_ra <- xgb.cv(data = data.matrix(trainx_sec_ra_c[, -1]),
                   label = as.numeric(as.character(training_sec_ra_c$rel_abundance)),
                   nfold = 5,
                   eta = 0.03772061,
                     max_depth = 6,
                     nrounds = 377,
                     subsample = 0.6407695,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_sec_ra <- min(cv_sec_ra$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_sec_ra <- (td_sec_ra - cv_rd_sec_ra) / td_sec_ra

### PREDICTORS: SELECTED VARIABLES ### --------------------------------------------
# With k_index as response ---------------------------------------------------
# Step 2: Calculate Total Deviance
ov_var_k <- as.numeric(as.character(training_var_k_c$k_index))
pv_var_k <- predict(xgb_var_k_c, data.matrix(trainx_var_k_c[, -1]))
td_var_k <- sum((ov_var_k - mean(pv_var_k))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_var_k <- xgb.cv(data = data.matrix(trainx_var_k_c[, -1]),
                   label = as.numeric(as.character(training_var_k_c$k_index)),
                   nfold = 5,
                   eta = 0.002163145,
                     nrounds = 783,
                     max_depth = 5972,
                     subsample = 0.5024628,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_var_k <- min(cv_var_k$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_var_k <- (td_var_k - cv_rd_var_k) / td_var_k

# With shannon index as response --------------------------------------------
# Step 2: Calculate Total Deviance
ov_var_s <- as.numeric(as.character(training_var_s_c$shannon))
pv_var_s <- predict(xgb_var_s_c, data.matrix(trainx_var_s_c[, -1]))
td_var_s <- sum((ov_var_s - mean(pv_var_s))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_var_s <- xgb.cv(data = data.matrix(trainx_var_s_c[, -1]),
                   label = as.numeric(as.character(training_var_s_c$shannon)),
                   nfold = 5,
                   eta = 0.0855199,
                     nrounds = 30,
                     max_depth = 1179,
                     subsample = 0.586375,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_var_s <- min(cv_var_s$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_var_s <- (td_var_s - cv_rd_var_s) / td_var_s

# With abundance as response --------------------------------------------------
# Step 2: Calculate Total Deviance
ov_var_a <- as.numeric(as.character(training_var_a_c$abundance))
pv_var_a <- predict(xgb_var_a_c, data.matrix(trainx_var_a_c[, -1]))
td_var_a <- sum((ov_var_a - mean(pv_var_a))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_var_a <- xgb.cv(data = data.matrix(trainx_var_a_c[, -1]),
                   label = as.numeric(as.character(training_var_a_c$abundance)),
                   nfold = 5,
                   eta = 0.3378068,
                     nrounds = 406,
                     max_depth = 3694,
                     subsample = 0.5145095,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_var_a <- min(cv_var_a$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_var_a <- (td_var_a - cv_rd_var_a) / td_var_a

# With rel_abundance as response ---------------------------------------------
# Step 2: Calculate Total Deviance
ov_var_ra <- as.numeric(as.character(training_var_ra_c$rel_abundance))
pv_var_ra <- predict(xgb_var_ra_c, data.matrix(trainx_var_ra_c[, -1]))
td_var_ra <- sum((ov_var_ra - mean(pv_var_ra))^2)

# Step 3: Perform Cross-Validation (example using k-fold cross-validation)
set.seed(123)
cv_var_ra <- xgb.cv(data = data.matrix(trainx_var_ra_c[, -1]),
                   label = as.numeric(as.character(training_var_ra_c$rel_abundance)),
                   nfold = 5,
                   eta = 0.4977537,
                     nrounds = 180,
                     max_depth = 7284,
                     subsample = 0.6304385,
                     objective = "reg:linear",
                   metrics = "rmse",
                   print_every_n = 1)

# Extract cross-validation residual deviance
cv_rd_var_ra <- min(cv_var_ra$evaluation_log$test_rmse_mean)

# Step 4: Calculate Deviance Explained
de_var_ra <- (td_var_ra - cv_rd_var_ra) / td_var_ra

```

## RMSE & MAE
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
rmse_model_v_k_c <- Metrics::rmse(actual = responses_v_k, predicted = brt_pred_model_v_k_c)

mae_model_v_k_c <- Metrics::mae(actual = responses_v_k, predicted = brt_pred_model_v_k_c)

# With shannon index as response
rmse_model_v_s_c <- Metrics::rmse(actual = responses_v_s, predicted = brt_pred_model_v_s_c)

mae_model_v_s_c <- Metrics::mae(actual = responses_v_s, predicted = brt_pred_model_v_s_c)

# With abundance as response
rmse_model_v_a_c <- Metrics::rmse(actual = responses_v_a, predicted = brt_pred_model_v_a_c)

mae_model_v_a_c <- Metrics::mae(actual = responses_v_a, predicted = brt_pred_model_v_a_c)

# With rel_abundance as response
rmse_model_v_ra_c <- Metrics::rmse(actual = responses_v_ra, predicted = brt_pred_model_v_ra_c)

mae_model_v_ra_c <- Metrics::mae(actual = responses_v_ra, predicted = brt_pred_model_v_ra_c)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
rmse_model_wd_k_c <- Metrics::rmse(actual = responses_wd_k, predicted = brt_pred_model_wd_k_c)

mae_model_wd_k_c <- Metrics::mae(actual = responses_wd_k, predicted = brt_pred_model_wd_k_c)

# With shannon index as response
rmse_model_wd_s_c <- Metrics::rmse(actual = responses_wd_s, predicted = brt_pred_model_wd_s_c)

mae_model_wd_s_c <- Metrics::mae(actual = responses_wd_s, predicted = brt_pred_model_wd_s_c)

# With abundance as response
rmse_model_wd_a_c <- Metrics::rmse(actual = responses_wd_a, predicted = brt_pred_model_wd_a_c)

mae_model_wd_a_c <- Metrics::mae(actual = responses_wd_a, predicted = brt_pred_model_wd_a_c)

# With rel_abundance as response
rmse_model_wd_ra_c <- Metrics::rmse(actual = responses_wd_ra, predicted = brt_pred_model_wd_ra_c)

mae_model_wd_ra_c <- Metrics::mae(actual = responses_wd_ra, predicted = brt_pred_model_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
rmse_model_samp_k_c <- Metrics::rmse(actual = responses_samp_k, predicted = brt_pred_model_samp_k_c)

mae_model_samp_k_c <- Metrics::mae(actual = responses_samp_k, predicted = brt_pred_model_samp_k_c)

# With shannon index as response
rmse_model_samp_s_c <- Metrics::rmse(actual = responses_samp_s, predicted = brt_pred_model_samp_s_c)

mae_model_samp_s_c <- Metrics::mae(actual = responses_samp_s, predicted = brt_pred_model_samp_s_c)

# With abundance as response
rmse_model_samp_a_c <- Metrics::rmse(actual = responses_samp_a, predicted = brt_pred_model_samp_a_c)

mae_model_samp_a_c <- Metrics::mae(actual = responses_samp_a, predicted = brt_pred_model_samp_a_c)

# With rel_abundance as response
rmse_model_samp_ra_c <- Metrics::rmse(actual = responses_samp_ra, predicted = brt_pred_model_samp_ra_c)

mae_model_samp_ra_c <- Metrics::mae(actual = responses_samp_ra, predicted = brt_pred_model_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
rmse_model_sec_k_c <- Metrics::rmse(actual = responses_sec_k, predicted = brt_pred_model_sec_k_c)

mae_model_sec_k_c <- Metrics::mae(actual = responses_sec_k, predicted = brt_pred_model_sec_k_c)

# With shannon index as response
rmse_model_sec_s_c <- Metrics::rmse(actual = responses_sec_s, predicted = brt_pred_model_sec_s_c)

mae_model_sec_s_c <- Metrics::mae(actual = responses_sec_s, predicted = brt_pred_model_sec_s_c)

# With abundance as response
rmse_model_sec_a_c <- Metrics::rmse(actual = responses_sec_a, predicted = brt_pred_model_sec_a_c)

mae_model_sec_a_c <- Metrics::mae(actual = responses_sec_a, predicted = brt_pred_model_sec_a_c)

# With rel_abundance as response
rmse_model_sec_ra_c <- Metrics::rmse(actual = responses_sec_ra, predicted = brt_pred_model_sec_ra_c)

mae_model_sec_ra_c <- Metrics::mae(actual = responses_sec_ra, predicted = brt_pred_model_sec_ra_c)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
rmse_model_var_k_c <- Metrics::rmse(actual = responses_var_k, predicted = brt_pred_model_var_k_c)

mae_model_var_k_c <- Metrics::mae(actual = responses_var_k, predicted = brt_pred_model_var_k_c)

# With shannon index as response
rmse_model_var_s_c <- Metrics::rmse(actual = responses_var_s, predicted = brt_pred_model_var_s_c)

mae_model_var_s_c <- Metrics::mae(actual = responses_var_s, predicted = brt_pred_model_var_s_c)

# With abundance as response
rmse_model_var_a_c <- Metrics::rmse(actual = responses_var_a, predicted = brt_pred_model_var_a_c)

mae_model_var_a_c <- Metrics::mae(actual = responses_var_a, predicted = brt_pred_model_var_a_c)

# With rel_abundance as response
rmse_model_var_ra_c <- Metrics::rmse(actual = responses_var_ra, predicted = brt_pred_model_var_ra_c)

mae_model_var_ra_c <- Metrics::mae(actual = responses_var_ra, predicted = brt_pred_model_var_ra_c)
```

## Bias
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
bias_model_v_k_c <- bias(observados = responses_v_k, estimados = brt_pred_model_v_k_c)

# With shannon index as response
bias_model_v_s_c <- bias(observados = responses_v_s, estimados = brt_pred_model_v_s_c)

# With abundance as response
bias_model_v_a_c <- bias(observados = responses_v_a, estimados = brt_pred_model_v_a_c)

# With rel_abundance as response
bias_model_v_ra_c <- bias(observados = responses_v_ra, estimados = brt_pred_model_v_ra_c)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
bias_model_wd_k_c <- bias(observados = responses_wd_k, estimados = brt_pred_model_wd_k_c)

# With shannon index as response
bias_model_wd_s_c <- bias(observados = responses_wd_s, estimados = brt_pred_model_wd_s_c)

# With abundance as response
bias_model_wd_a_c <- bias(observados = responses_wd_a, estimados = brt_pred_model_wd_a_c)

# With rel_abundance as response
bias_model_wd_ra_c <- bias(observados = responses_wd_ra, estimados = brt_pred_model_wd_ra_c)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
bias_model_samp_k_c <- bias(observados = responses_samp_k, estimados = brt_pred_model_samp_k_c)

# With shannon index as response
bias_model_samp_s_c <- bias(observados = responses_samp_s, estimados = brt_pred_model_samp_s_c)

# With abundance as response
bias_model_samp_a_c <- bias(observados = responses_samp_a, estimados = brt_pred_model_samp_a_c)

# With rel_abundance as response
bias_model_samp_ra_c <- bias(observados = responses_samp_ra, estimados = brt_pred_model_samp_ra_c)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
bias_model_sec_k_c <- bias(observados = responses_sec_k, estimados = brt_pred_model_sec_k_c)

# With shannon index as response
bias_model_sec_s_c <- bias(observados = responses_sec_s, estimados = brt_pred_model_sec_s_c)

# With abundance as response
bias_model_sec_a_c <- bias(observados = responses_sec_a, estimados = brt_pred_model_sec_a_c)

# With rel_abundance as response
bias_model_sec_ra_c <- bias(observados = responses_sec_ra, estimados = brt_pred_model_sec_ra_c)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
bias_model_var_k_c <- bias(observados = responses_var_k, estimados = brt_pred_model_var_k_c)

# With shannon index as response
bias_model_var_s_c <- bias(observados = responses_var_s, estimados = brt_pred_model_var_s_c)

# With abundance as response
bias_model_var_a_c <- bias(observados = responses_var_a, estimados = brt_pred_model_var_a_c)

# With rel_abundance as response
bias_model_var_ra_c <- bias(observados = responses_var_ra, estimados = brt_pred_model_var_ra_c)
```

## Nash-Sutcliffe efficiency (NSE) 
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response
nse_model_v_k_c <- NSE(sim = brt_pred_model_v_k_c, obs = responses_v_k)

# With shannon index as response
nse_model_v_s_c <- NSE(sim = brt_pred_model_v_s_c, obs = responses_v_s)

# With abundance as response
nse_model_v_a_c <- NSE(sim = brt_pred_model_v_a_c, obs = responses_v_a)

# With rel_abundance as response
nse_model_v_ra_c <- NSE(sim = brt_pred_model_v_ra_c, obs = responses_v_ra)

### PREDICTORS: VELOCITY + WD ### ---------------------------------------------
# With k_index as response
nse_model_wd_k_c <- NSE(sim = brt_pred_model_wd_k_c, obs = responses_wd_k)

# With shannon index as response
nse_model_wd_s_c <- NSE(sim = brt_pred_model_wd_s_c, obs = responses_wd_s)

# With abundance as response
nse_model_wd_a_c <- NSE(sim = brt_pred_model_wd_a_c, obs = responses_wd_a)

# With rel_abundance as response
nse_model_wd_ra_c <- NSE(sim = brt_pred_model_wd_ra_c, obs = responses_wd_ra)

### PREDICTORS: SAMPLING LOCATIONS ### ----------------------------------------
# With k_index as response
nse_model_samp_k_c <- NSE(sim = brt_pred_model_samp_k_c, obs = responses_samp_k)

# With shannon index as response
nse_model_samp_s_c <- NSE(sim = brt_pred_model_samp_s_c, obs = responses_samp_s)

# With abundance as response
nse_model_samp_a_c <- NSE(sim = brt_pred_model_samp_a_c, obs = responses_samp_a)

# With rel_abundance as response
nse_model_samp_ra_c <- NSE(sim = brt_pred_model_samp_ra_c, obs = responses_samp_ra)

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response
nse_model_sec_k_c <- NSE(sim = brt_pred_model_sec_k_c, obs = responses_sec_k)

# With shannon index as response
nse_model_sec_s_c <- NSE(sim = brt_pred_model_sec_s_c, obs = responses_sec_s)

# With abundance as response
nse_model_sec_a_c <- NSE(sim = brt_pred_model_sec_a_c, obs = responses_sec_a)

# With rel_abundance as response
nse_model_sec_ra_c <- NSE(sim = brt_pred_model_sec_ra_c, obs = responses_sec_ra)

### PREDICTORS: SELECTED VARIABLES ### ----------------------------------------
# With k_index as response
nse_model_var_k_c <- NSE(sim = brt_pred_model_var_k_c, obs = responses_var_k)

# With shannon index as response
nse_model_var_s_c <- NSE(sim = brt_pred_model_var_s_c, obs = responses_var_s)

# With abundance as response
nse_model_var_a_c <- NSE(sim = brt_pred_model_var_a_c, obs = responses_var_a)

# With rel_abundance as response
nse_model_var_ra_c <- NSE(sim = brt_pred_model_var_ra_c, obs = responses_var_ra)
```

## Regression Analysis
### Create DF
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# With k-index as a response 
pred_v_k <- as.data.frame(brt_pred_model_v_k_c)
resp_v_k <- as.data.frame(responses_v_k)
brt_v_k <- cbind(pred_v_k, responses_v_k) |>
  dplyr::rename(observed = responses_v_k,
         predicted = brt_pred_model_v_k_c)

# With shannon index as a response 
pred_v_s <- as.data.frame(brt_pred_model_v_s_c)
resp_v_s <- as.data.frame(responses_v_s)
brt_v_s <- cbind(pred_v_s, responses_v_s) |>
  dplyr::rename(observed = responses_v_s,
         predicted = brt_pred_model_v_s_c)

# With abundance as a response 
pred_v_a <- as.data.frame(brt_pred_model_v_a_c)
resp_v_a <- as.data.frame(responses_v_a)
brt_v_a <- cbind(pred_v_a, responses_v_a) |>
  dplyr::rename(observed = responses_v_a,
         predicted = brt_pred_model_v_a_c)

# With relative abundance as a response 
pred_v_ra <- as.data.frame(brt_pred_model_v_ra_c)
resp_v_ra <- as.data.frame(responses_v_ra)
brt_v_ra <- cbind(pred_v_ra, responses_v_ra) |>
  dplyr::rename(observed = responses_v_ra,
         predicted = brt_pred_model_v_ra_c)

### PREDICTOR: V + WD ### --------------------------------------------------
# With k-index as a response 
pred_wd_k <- as.data.frame(brt_pred_model_wd_k_c)
resp_wd_k <- as.data.frame(responses_wd_k)
brt_wd_k <- cbind(pred_wd_k, responses_wd_k) |>
  dplyr::rename(observed = responses_wd_k,
         predicted = brt_pred_model_wd_k_c)

# With shannon index as a response 
pred_wd_s <- as.data.frame(brt_pred_model_wd_s_c)
resp_wd_s <- as.data.frame(responses_wd_s)
brt_wd_s <- cbind(pred_wd_s, responses_wd_s) |>
  dplyr::rename(observed = responses_wd_s,
         predicted = brt_pred_model_wd_s_c)

# With abundance as a response 
pred_wd_a <- as.data.frame(brt_pred_model_wd_a_c)
resp_wd_a <- as.data.frame(responses_wd_a)
brt_wd_a <- cbind(pred_wd_a, responses_wd_a) |>
  dplyr::rename(observed = responses_wd_a,
         predicted = brt_pred_model_wd_a_c)

# With relative abundance as a response 
pred_wd_ra <- as.data.frame(brt_pred_model_wd_ra_c)
resp_wd_ra <- as.data.frame(responses_wd_ra)
brt_wd_ra <- cbind(pred_wd_ra, responses_wd_ra) |>
  dplyr::rename(observed = responses_wd_ra,
         predicted = brt_pred_model_wd_ra_c)

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# With k-index as a response 
pred_samp_k <- as.data.frame(brt_pred_model_samp_k_c)
resp_samp_k <- as.data.frame(responses_samp_k)
brt_samp_k <- cbind(pred_samp_k, responses_samp_k) |>
  dplyr::rename(observed = responses_samp_k,
         predicted = brt_pred_model_samp_k_c)

# With shannon index as a response 
pred_samp_s <- as.data.frame(brt_pred_model_samp_s_c)
resp_samp_s <- as.data.frame(responses_samp_s)
brt_samp_s <- cbind(pred_samp_s, responses_samp_s) |>
  dplyr::rename(observed = responses_samp_s,
         predicted = brt_pred_model_samp_s_c)

# With abundance as a response 
pred_samp_a <- as.data.frame(brt_pred_model_samp_a_c)
resp_samp_a <- as.data.frame(responses_samp_a)
brt_samp_a <- cbind(pred_samp_a, responses_samp_a) |>
  dplyr::rename(observed = responses_samp_a,
         predicted = brt_pred_model_samp_a_c)

# With relative abundance as a response 
pred_samp_ra <- as.data.frame(brt_pred_model_samp_ra_c)
resp_samp_ra <- as.data.frame(responses_samp_ra)
brt_samp_ra <- cbind(pred_samp_ra, responses_samp_ra) |>
  dplyr::rename(observed = responses_samp_ra,
         predicted = brt_pred_model_samp_ra_c)

### PREDICTOR: ALL PREDICTORS ### -------------------------------------------
# With k-index as a response 
pred_sec_k <- as.data.frame(brt_pred_model_sec_k_c)
resp_sec_k <- as.data.frame(responses_sec_k)
brt_sec_k <- cbind(pred_sec_k, responses_sec_k) |>
  dplyr::rename(observed = responses_sec_k,
         predicted = brt_pred_model_sec_k_c)

# With shannon index as a response 
pred_sec_s <- as.data.frame(brt_pred_model_sec_s_c)
resp_sec_s <- as.data.frame(responses_sec_s)
brt_sec_s <- cbind(pred_sec_s, responses_sec_s) |>
  dplyr::rename(observed = responses_sec_s,
         predicted = brt_pred_model_sec_s_c)

# With abundance as a response 
pred_sec_a <- as.data.frame(brt_pred_model_sec_a_c)
resp_sec_a <- as.data.frame(responses_sec_a)
brt_sec_a <- cbind(pred_sec_a, responses_sec_a) |>
  dplyr::rename(observed = responses_sec_a,
         predicted = brt_pred_model_sec_a_c)

# With relative abundance as a response 
pred_sec_ra <- as.data.frame(brt_pred_model_sec_ra_c)
resp_sec_ra <- as.data.frame(responses_sec_ra)
brt_sec_ra <- cbind(pred_sec_ra, responses_sec_ra) |>
  dplyr::rename(observed = responses_sec_ra,
         predicted = brt_pred_model_sec_ra_c)

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# With k-index as a response 
pred_var_k <- as.data.frame(brt_pred_model_var_k_c)
resp_var_k <- as.data.frame(responses_var_k)
brt_var_k <- cbind(pred_var_k, responses_var_k) |>
  dplyr::rename(observed = responses_var_k,
         predicted = brt_pred_model_var_k_c)

# With shannon index as a response 
pred_var_s <- as.data.frame(brt_pred_model_var_s_c)
resp_var_s <- as.data.frame(responses_var_s)
brt_var_s <- cbind(pred_var_s, responses_var_s) |>
  dplyr::rename(observed = responses_var_s,
         predicted = brt_pred_model_var_s_c)

# With abundance as a response 
pred_var_a <- as.data.frame(brt_pred_model_var_a_c)
resp_var_a <- as.data.frame(responses_var_a)
brt_var_a <- cbind(pred_var_a, responses_var_a) |>
  dplyr::rename(observed = responses_var_a,
         predicted = brt_pred_model_var_a_c)

# With relative abundance as a response 
pred_var_ra <- as.data.frame(brt_pred_model_var_ra_c)
resp_var_ra <- as.data.frame(responses_var_ra)
brt_var_ra <- cbind(pred_var_ra, responses_var_ra) |>
  dplyr::rename(observed = responses_var_ra,
         predicted = brt_pred_model_var_ra_c)
```

### LM Models
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_k <- lm(predicted ~ observed, data = brt_v_k)
sum_v_k <- summary(regr_v_k)
p_v_k <- sum_v_k$coefficients["observed", "Pr(>|t|)"]
s_v_k <- sum_v_k$coefficients["observed", "Estimate"]

# with shannon index as response
regr_v_s <- lm(predicted ~ observed, data = brt_v_s)
sum_v_s <- summary(regr_v_s)
p_v_s <- sum_v_s$coefficients["observed", "Pr(>|t|)"]
s_v_s <- sum_v_s$coefficients["observed", "Estimate"]

# with abundance as response
regr_v_a <- lm(predicted ~ observed, data = brt_v_a)
sum_v_a <- summary(regr_v_a)
p_v_a <- sum_v_a$coefficients["observed", "Pr(>|t|)"]
s_v_a <- sum_v_a$coefficients["observed", "Estimate"]

# with rel_abundance as response
regr_v_ra <- lm(predicted ~ observed, data = brt_v_ra)
sum_v_ra <- summary(regr_v_ra)
p_v_ra <- sum_v_ra$coefficients["observed", "Pr(>|t|)"]
s_v_ra <- sum_v_ra$coefficients["observed", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_k <- lm(predicted ~ observed, data = brt_wd_k)
sum_wd_k <- summary(regr_wd_k)
p_wd_k <- sum_wd_k$coefficients["observed", "Pr(>|t|)"]
s_wd_k <- sum_wd_k$coefficients["observed", "Estimate"]

# with shannon index as response
regr_wd_s <- lm(predicted ~ observed, data = brt_wd_s)
sum_wd_s <- summary(regr_wd_s)
p_wd_s <- sum_wd_s$coefficients["observed", "Pr(>|t|)"]
s_wd_s <- sum_wd_s$coefficients["observed", "Estimate"]

# with abundance as response
regr_wd_a <- lm(predicted ~ observed, data = brt_wd_a)
sum_wd_a <- summary(regr_wd_a)
p_wd_a <- sum_wd_a$coefficients["observed", "Pr(>|t|)"]
s_wd_a <- sum_wd_a$coefficients["observed", "Estimate"]

# with rel_abundance as response
regr_wd_ra <- lm(predicted ~ observed, data = brt_wd_ra)
sum_wd_ra <- summary(regr_wd_ra)
p_wd_ra <- sum_wd_ra$coefficients["observed", "Pr(>|t|)"]
s_wd_ra <- sum_wd_ra$coefficients["observed", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_k <- lm(predicted ~ observed, data = brt_samp_k)
sum_samp_k <- summary(regr_samp_k)
p_samp_k <- sum_samp_k$coefficients["observed", "Pr(>|t|)"]
s_samp_k <- sum_samp_k$coefficients["observed", "Estimate"]

# with shannon index as response
regr_samp_s <- lm(predicted ~ observed, data = brt_samp_s)
sum_samp_s <- summary(regr_samp_s)
p_samp_s <- sum_samp_s$coefficients["observed", "Pr(>|t|)"]
s_samp_s <- sum_samp_s$coefficients["observed", "Estimate"]

# with abundance as response
regr_samp_a <- lm(predicted ~ observed, data = brt_samp_a)
sum_samp_a <- summary(regr_samp_a)
p_samp_a <- sum_samp_a$coefficients["observed", "Pr(>|t|)"]
s_samp_a <- sum_samp_a$coefficients["observed", "Estimate"]

# with rel_abundance as response
regr_samp_ra <- lm(predicted ~ observed, data = brt_samp_ra)
sum_samp_ra <- summary(regr_samp_ra)
p_samp_ra <- sum_samp_ra$coefficients["observed", "Pr(>|t|)"]
s_samp_ra <- sum_samp_ra$coefficients["observed", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_k <- lm(predicted ~ observed, data = brt_sec_k)
sum_sec_k <- summary(regr_sec_k)
p_sec_k <- sum_sec_k$coefficients["observed", "Pr(>|t|)"]
s_sec_k <- sum_sec_k$coefficients["observed", "Estimate"]

# with shannon index as response
regr_sec_s <- lm(predicted ~ observed, data = brt_sec_s)
sum_sec_s <- summary(regr_sec_s)
p_sec_s <- sum_sec_s$coefficients["observed", "Pr(>|t|)"]
s_sec_s <- sum_sec_s$coefficients["observed", "Estimate"]

# with abundance as response
regr_sec_a <- lm(predicted ~ observed, data = brt_sec_a)
sum_sec_a <- summary(regr_sec_a)
p_sec_a <- sum_sec_a$coefficients["observed", "Pr(>|t|)"]
s_sec_a <- sum_sec_a$coefficients["observed", "Estimate"]

# with rel_abundance as response
regr_sec_ra <- lm(predicted ~ observed, data = brt_sec_ra)
sum_sec_ra <- summary(regr_sec_ra)
p_sec_ra <- sum_sec_ra$coefficients["observed", "Pr(>|t|)"]
s_sec_ra <- sum_sec_ra$coefficients["observed", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_k <- lm(predicted ~ observed, data = brt_var_k)
sum_var_k <- summary(regr_var_k)
p_var_k <- sum_var_k$coefficients["observed", "Pr(>|t|)"]
s_var_k <- sum_var_k$coefficients["observed", "Estimate"]

# with shannon index as response
regr_var_s <- lm(predicted ~ observed, data = brt_var_s)
sum_var_s <- summary(regr_var_s)
p_var_s <- sum_var_s$coefficients["observed", "Pr(>|t|)"]
s_var_s <- sum_var_s$coefficients["observed", "Estimate"]

# with abundance as response
regr_var_a <- lm(predicted ~ observed, data = brt_var_a)
sum_var_a <- summary(regr_var_a)
p_var_a <- sum_var_a$coefficients["observed", "Pr(>|t|)"]
s_var_a <- sum_var_a$coefficients["observed", "Estimate"]

# with rel_abundance as response
regr_var_ra <- lm(predicted ~ observed, data = brt_var_ra)
sum_var_ra <- summary(regr_var_ra)
p_var_ra <- sum_var_ra$coefficients["observed", "Pr(>|t|)"]
s_var_ra <- sum_var_ra$coefficients["observed", "Estimate"]
```

## Write Evaluation Results 
```{r}
# write evaluation metrics into df
metric_results <- data.frame(lm_p_value = c(p_v_k, p_v_s, p_v_a, p_v_ra,  
                                           p_wd_k, p_wd_s, p_wd_a,
                                           p_wd_ra, p_samp_k, p_samp_s, p_samp_a,
                                           p_samp_ra, p_sec_k, p_sec_s, p_sec_a,
                                           p_sec_ra, p_var_k, p_var_s, p_var_a,
                                           p_var_ra),
                          
                          lm_slope = c(s_v_k, s_v_s, s_v_a, s_v_ra,  
                                           s_wd_k, s_wd_s, s_wd_a,
                                           s_wd_ra, s_samp_k, s_samp_s, s_samp_a,
                                           s_samp_ra, s_sec_k, s_sec_s, s_sec_a,
                                           s_sec_ra, s_var_k, s_var_s, s_var_a,
                                           s_var_ra),
                          
                          deviance = c(de_v_k, de_v_s, de_v_a, de_v_ra, de_wd_k, de_wd_s, de_wd_a, de_wd_ra, de_samp_k, de_samp_s, de_samp_a, de_samp_ra, de_sec_k, de_sec_s, de_sec_a, de_sec_ra, de_var_k, de_var_s, de_var_a, de_var_ra),
                          
                          nse = c(nse_model_v_k_c, nse_model_v_s_c, nse_model_v_a_c, nse_model_v_ra_c, nse_model_wd_k_c, nse_model_wd_s_c, nse_model_wd_a_c, nse_model_wd_ra_c, nse_model_samp_k_c, nse_model_samp_s_c, nse_model_samp_a_c, nse_model_samp_ra_c, nse_model_sec_k_c, nse_model_sec_s_c, nse_model_sec_a_c, nse_model_sec_ra_c, nse_model_var_k_c, nse_model_var_s_c, nse_model_var_a_c, nse_model_var_ra_c),

bias = c(bias_model_v_k_c, bias_model_v_s_c, bias_model_v_a_c, bias_model_v_ra_c, bias_model_wd_k_c,bias_model_wd_s_c, bias_model_wd_a_c, bias_model_wd_ra_c, bias_model_samp_k_c, bias_model_samp_s_c, bias_model_samp_a_c, bias_model_samp_ra_c, bias_model_sec_k_c, bias_model_sec_s_c, bias_model_sec_a_c, bias_model_sec_ra_c, bias_model_var_k_c, bias_model_var_s_c, bias_model_var_a_c, bias_model_var_ra_c),

mae = c(mae_model_v_k_c, mae_model_v_s_c, mae_model_v_a_c, mae_model_v_ra_c, mae_model_wd_k_c, mae_model_wd_s_c, mae_model_wd_a_c, mae_model_wd_ra_c, mae_model_samp_k_c, mae_model_samp_s_c, mae_model_samp_a_c, mae_model_samp_ra_c, mae_model_sec_k_c, mae_model_sec_s_c, mae_model_sec_a_c, mae_model_sec_ra_c,
        mae_model_var_k_c, mae_model_var_s_c, mae_model_var_a_c, mae_model_var_ra_c), 

rmse = c(rmse_model_v_k_c, rmse_model_v_s_c, rmse_model_v_a_c, rmse_model_v_ra_c, rmse_model_wd_k_c, rmse_model_wd_s_c, rmse_model_wd_a_c, rmse_model_wd_ra_c, rmse_model_samp_k_c, rmse_model_samp_s_c, rmse_model_samp_a_c, rmse_model_samp_ra_c, rmse_model_sec_k_c, rmse_model_sec_s_c, rmse_model_sec_a_c, rmse_model_sec_ra_c, rmse_model_var_k_c, rmse_model_var_s_c, rmse_model_var_a_c, rmse_model_var_ra_c),

r2 = c(r2_model_v_k_c, r2_model_v_s_c, r2_model_v_a_c, r2_model_v_ra_c, r2_model_wd_k_c, r2_model_wd_s_c, r2_model_wd_a_c, r2_model_wd_ra_c, r2_model_samp_k_c, r2_model_samp_s_c, r2_model_samp_a_c, r2_model_samp_ra_c, r2_model_sec_k_c, r2_model_sec_s_c, r2_model_sec_a_c, r2_model_sec_ra_c,
       r2_model_var_k_c, r2_model_var_s_c, r2_model_var_a_c, r2_model_var_ra_c), 

index = c("k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance", 
          "k_index", "shannon", "abundance", "rel_abundance",
          "k_index", "shannon", "abundance", "rel_abundance"),

predictor = c("v", "v", "v", "v", 
              "v + wd", "v + wd", "v + wd", "v + wd",  
              "samp", "samp", "samp", "samp", 
              "all", "all", "all", "all",
              "var", "var", "var", "var"),

model = c("brt", "brt", "brt", "brt", 
          "brt", "brt", "brt", "brt", 
          "brt", "brt", "brt", "brt",
          "brt", "brt", "brt", "brt",
          "brt", "brt", "brt", "brt"))

# write results into a .csv 
write.csv(metric_results, "Stat_Analysis/ml_evaluation_metrics_brt.csv", row.names = FALSE)
```
 
# Extract 
## Read rasters
```{r}
# read rasters containing wd and velocity 
GL1_ezg <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg.grd")
GL1_v_ezg <- stack("Pre_Processing/raster_files/GL1_v_2_56_ezg.tif")
GL1_ezg_var <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg_var.grd")

# Reorder the layers
new_order <- c(3, 1, 2, 4, 5, 6, 7)  # Specify the new order of layers
GL1_ezg_var <- GL1_ezg_var[[new_order]]

GL2_ezg <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg.grd")
GL2_v_ezg <- stack("Pre_Processing/raster_files/GL2_v_2_37_ezg.tif")
GL2_ezg_var <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg_var.grd")

# Reorder the layers
GL2_ezg_var <- GL2_ezg_var[[new_order]]

L2_ezg <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg.grd")
L2_v_ezg <- stack("Pre_Processing/raster_files/L2_v_9_54_ezg.tif")
L2_ezg_var <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg_var.grd")

# Reorder the layers
L2_ezg_var <- L2_ezg_var[[new_order]]

M1_ezg <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg.grd")
M1_v_ezg <- stack("Pre_Processing/raster_files/M1_v_1_50_ezg.tif")
M1_ezg_var <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg_var.grd")

# Reorder the layers
M1_ezg_var <- M1_ezg_var[[new_order]]

S1_ezg <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg.grd")
S1_v_ezg <- stack("Pre_Processing/raster_files/S1_v_1_94_ezg.tif")
S1_ezg_var <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg_var.grd")

# Reorder the layers
S1_ezg_var <- S1_ezg_var[[new_order]]

S2_ezg <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg.grd")
S2_v_ezg <- stack("Pre_Processing/raster_files/S2_v_1_93_ezg.tif")
S2_ezg_var <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg_var.grd")

# Reorder the layers
S2_ezg_var <- S2_ezg_var[[new_order]]

TH4_ezg <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg.grd")
TH4_v_ezg <- stack("Pre_Processing/raster_files/TH4_v_35_12_ezg.tif")
TH4_ezg_var <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg_var.grd")

# Reorder the layers
TH4_ezg_var <- TH4_ezg_var[[new_order]]

VR3_ezg <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg.grd")
VR3_v_ezg <- stack("Pre_Processing/raster_files/VR3_v_21_51_ezg.tif")
VR3_ezg_var <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg_var.grd")

# Reorder the layers
VR3_ezg_var <- VR3_ezg_var[[new_order]]

# rename rasters in stacks for extraction 
names(GL1_ezg) <- c("velocity", "wd_m")  
names(GL1_v_ezg) <- c("velocity")

names(GL2_ezg) <- c("velocity", "wd_m") 
names(GL2_v_ezg) <- c("velocity")
#names(GL2_q) <- c("velocity", "wd_m")

names(L2_ezg) <- c("velocity", "wd_m")
names(L2_v_ezg) <- c("velocity")
#names(L2_q) <- c("velocity", "wd_m")

names(M1_ezg) <- c("velocity", "wd_m") 
names(M1_v_ezg) <- c("velocity")
#names(M1_q) <- c("velocity", "wd_m") 

names(S1_ezg) <- c("velocity", "wd_m") 
names(S1_v_ezg) <- c("velocity")
#names(S1_q) <- c("velocity", "wd_m")  

names(S2_ezg) <- c("velocity", "wd_m")
names(S2_v_ezg) <- c("velocity")
#names(S2_q) <- c("velocity", "wd_m") 

names(TH4_ezg) <- c("velocity", "wd_m") 
names(TH4_v_ezg) <- c("velocity")
#names(TH4_q) <- c("velocity", "wd_m") 

names(VR3_ezg) <- c("velocity", "wd_m")
names(VR3_v_ezg) <- c("velocity")
#names(VR3_q) <- c("velocity", "wd_m") 

# assign coordinate system 
crs(GL1_ezg) <- "EPSG: 2056"
#crs(GL1_q) <- "EPSG: 2056"

crs(GL2_ezg) <- "EPSG: 2056"
#crs(GL2_q) <- "EPSG: 2056"

crs(L2_ezg) <- "EPSG: 2056"
#crs(L2_q) <- "EPSG: 2056"

crs(M1_ezg) <- "EPSG: 2056"
#crs(M1_q) <- "EPSG: 2056"

crs(S1_ezg) <- "EPSG: 2056"
#crs(S1_q) <- "EPSG: 2056"

crs(S2_ezg) <- "EPSG: 2056"
#crs(S2_q) <- "EPSG: 2056"

crs(TH4_ezg) <- "EPSG: 2056"
#crs(TH4_q) <- "EPSG: 2056"

crs(VR3_ezg) <- "EPSG: 2056"
#crs(VR3_q) <- "EPSG: 2056"
```

## Predict Models to Maps 
```{r}
# predict ML model to rasters with velocity and wd 
# The work-around is to write a prediction function that first coerces the data.frame with "new data" to a matrix. We can use that function with predict<SpatRaster>
xgbpred <- function(model, data, ...) {
    predict(model, newdata=as.matrix(data), ...)
}
```

### GL1
```{r}
# GL1 - predictors: v + wd ----------------------------------------------------
GL1_ezg_wd_k <- terra::predict(GL1_ezg, model = xgb_wd_k_c, fun = xgbpred)
GL1_ezg_wd_s <- terra::predict(GL1_ezg, model = xgb_wd_s_c, fun = xgbpred)
GL1_ezg_wd_a <- terra::predict(GL1_ezg, model = xgb_wd_a_c, fun = xgbpred)
GL1_ezg_wd_ra <- terra::predict(GL1_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# GL1 - predictor: velocity ---------------------------------------------------
GL1_ezg_v_k <- terra::predict(GL1_v_ezg, model = xgb_v_k_c, fun = xgbpred)
GL1_ezg_v_s <- terra::predict(GL1_v_ezg, model = xgb_v_s_c, fun = xgbpred)
GL1_ezg_v_a <- terra::predict(GL1_v_ezg, model = xgb_v_a_c, fun = xgbpred)
GL1_ezg_v_ra <- terra::predict(GL1_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# GL1 - predictors: selected variables ----------------------------------------
GL1_ezg_var_k <- terra::predict(GL1_ezg_var, model = xgb_var_k_c, fun = xgbpred)
GL1_ezg_var_s <- terra::predict(GL1_ezg_var, model = xgb_var_s_c, fun = xgbpred)
GL1_ezg_var_a <- terra::predict(GL1_ezg_var, model = xgb_var_a_c, fun = xgbpred)
GL1_ezg_var_ra <- terra::predict(GL1_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### GL2
```{r}
# GL2 - predictors: v + wd ----------------------------------------------------
GL2_ezg_wd_k <- terra::predict(GL2_ezg, model = xgb_wd_k_c, fun = xgbpred)
GL2_ezg_wd_s <- terra::predict(GL2_ezg, model = xgb_wd_s_c, fun = xgbpred)
GL2_ezg_wd_a <- terra::predict(GL2_ezg, model = xgb_wd_a_c, fun = xgbpred)
GL2_ezg_wd_ra <- terra::predict(GL2_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# GL2 - predictor: velocity ---------------------------------------------------
GL2_ezg_v_k <- terra::predict(GL2_v_ezg, model = xgb_v_k_c, fun = xgbpred)
GL2_ezg_v_s <- terra::predict(GL2_v_ezg, model = xgb_v_s_c, fun = xgbpred)
GL2_ezg_v_a <- terra::predict(GL2_v_ezg, model = xgb_v_a_c, fun = xgbpred)
GL2_ezg_v_ra <- terra::predict(GL2_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# GL2 - predictors: selected variables ----------------------------------------
GL2_ezg_var_k <- terra::predict(GL2_ezg_var, model = xgb_var_k_c, fun = xgbpred)
GL2_ezg_var_s <- terra::predict(GL2_ezg_var, model = xgb_var_s_c, fun = xgbpred)
GL2_ezg_var_a <- terra::predict(GL2_ezg_var, model = xgb_var_a_c, fun = xgbpred)
GL2_ezg_var_ra <- terra::predict(GL2_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### L2
```{r}
# L2 - predictors: v + wd -----------------------------------------------------
L2_ezg_wd_k <- terra::predict(L2_ezg, model = xgb_wd_k_c, fun = xgbpred)
L2_ezg_wd_s <- terra::predict(L2_ezg, model = xgb_wd_s_c, fun = xgbpred)
L2_ezg_wd_a <- terra::predict(L2_ezg, model = xgb_wd_a_c, fun = xgbpred)
L2_ezg_wd_ra <- terra::predict(L2_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# L2 - predictor: velocity ----------------------------------------------------
L2_ezg_v_k <- terra::predict(L2_v_ezg, model = xgb_v_k_c, fun = xgbpred)
L2_ezg_v_s <- terra::predict(L2_v_ezg, model = xgb_v_s_c, fun = xgbpred)
L2_ezg_v_a <- terra::predict(L2_v_ezg, model = xgb_v_a_c, fun = xgbpred)
L2_ezg_v_ra <- terra::predict(L2_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# L2 - predictors: selected variables -----------------------------------------
L2_ezg_var_k <- terra::predict(L2_ezg_var, model = xgb_var_k_c, fun = xgbpred)
L2_ezg_var_s <- terra::predict(L2_ezg_var, model = xgb_var_s_c, fun = xgbpred)
L2_ezg_var_a <- terra::predict(L2_ezg_var, model = xgb_var_a_c, fun = xgbpred)
L2_ezg_var_ra <- terra::predict(L2_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### M1
```{r}
# M1  - predictors: v + wd -----------------------------------------------------
M1_ezg_wd_k <- terra::predict(M1_ezg, model = xgb_wd_k_c, fun = xgbpred)
M1_ezg_wd_s <- terra::predict(M1_ezg, model = xgb_wd_s_c, fun = xgbpred)
M1_ezg_wd_a <- terra::predict(M1_ezg, model = xgb_wd_a_c, fun = xgbpred)
M1_ezg_wd_ra <- terra::predict(M1_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# M1  - predictor: velocity ---------------------------------------------------
M1_ezg_v_k <- terra::predict(M1_v_ezg, model = xgb_v_k_c, fun = xgbpred)
M1_ezg_v_s <- terra::predict(M1_v_ezg, model = xgb_v_s_c, fun = xgbpred)
M1_ezg_v_a <- terra::predict(M1_v_ezg, model = xgb_v_a_c, fun = xgbpred)
M1_ezg_v_ra <- terra::predict(M1_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# M1  - predictors: selected variables ----------------------------------------
M1_ezg_var_k <- terra::predict(M1_ezg_var, model = xgb_var_k_c, fun = xgbpred)
M1_ezg_var_s <- terra::predict(M1_ezg_var, model = xgb_var_s_c, fun = xgbpred)
M1_ezg_var_a <- terra::predict(M1_ezg_var, model = xgb_var_a_c, fun = xgbpred)
M1_ezg_var_ra <- terra::predict(M1_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### S1
```{r}
# S1  - predictors: v + wd ----------------------------------------------------
S1_ezg_wd_k <- terra::predict(S1_ezg, model = xgb_wd_k_c, fun = xgbpred)
S1_ezg_wd_s <- terra::predict(S1_ezg, model = xgb_wd_s_c, fun = xgbpred)
S1_ezg_wd_a <- terra::predict(S1_ezg, model = xgb_wd_a_c, fun = xgbpred)
S1_ezg_wd_ra <- terra::predict(S1_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# S1  - predictor: velocity ---------------------------------------------------
S1_ezg_v_k <- terra::predict(S1_v_ezg, model = xgb_v_k_c, fun = xgbpred)
S1_ezg_v_s <- terra::predict(S1_v_ezg, model = xgb_v_s_c, fun = xgbpred)
S1_ezg_v_a <- terra::predict(S1_v_ezg, model = xgb_v_a_c, fun = xgbpred)
S1_ezg_v_ra <- terra::predict(S1_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# S1  - predictors: selected variables ---------------------------------------
S1_ezg_var_k <- terra::predict(S1_ezg_var, model = xgb_var_k_c, fun = xgbpred)
S1_ezg_var_s <- terra::predict(S1_ezg_var, model = xgb_var_s_c, fun = xgbpred)
S1_ezg_var_a <- terra::predict(S1_ezg_var, model = xgb_var_a_c, fun = xgbpred)
S1_ezg_var_ra <- terra::predict(S1_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### S2
```{r}
# S2  - predictors: v + wd ----------------------------------------------------
S2_ezg_wd_k <- terra::predict(S2_ezg, model = xgb_wd_k_c, fun = xgbpred)
S2_ezg_wd_s <- terra::predict(S2_ezg, model = xgb_wd_s_c, fun = xgbpred)
S2_ezg_wd_a <- terra::predict(S2_ezg, model = xgb_wd_a_c, fun = xgbpred)
S2_ezg_wd_ra <- terra::predict(S2_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# S2  - predictor: velocity ---------------------------------------------------
S2_ezg_v_k <- terra::predict(S2_v_ezg, model = xgb_v_k_c, fun = xgbpred)
S2_ezg_v_s <- terra::predict(S2_v_ezg, model = xgb_v_s_c, fun = xgbpred)
S2_ezg_v_a <- terra::predict(S2_v_ezg, model = xgb_v_a_c, fun = xgbpred)
S2_ezg_v_ra <- terra::predict(S2_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# S2  - predictors: selected variables ---------------------------------------
S2_ezg_var_k <- terra::predict(S2_ezg_var, model = xgb_var_k_c, fun = xgbpred)
S2_ezg_var_s <- terra::predict(S2_ezg_var, model = xgb_var_s_c, fun = xgbpred)
S2_ezg_var_a <- terra::predict(S2_ezg_var, model = xgb_var_a_c, fun = xgbpred)
S2_ezg_var_ra <- terra::predict(S2_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### TH4
```{r}
# TH4  - predictors: v + wd ---------------------------------------------------
TH4_ezg_wd_k <- terra::predict(TH4_ezg, model = xgb_wd_k_c, fun = xgbpred)
TH4_ezg_wd_s <- terra::predict(TH4_ezg, model = xgb_wd_s_c, fun = xgbpred)
TH4_ezg_wd_a <- terra::predict(TH4_ezg, model = xgb_wd_a_c, fun = xgbpred)
TH4_ezg_wd_ra <- terra::predict(TH4_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# TH4  - predictor: velocity --------------------------------------------------
TH4_ezg_v_k <- terra::predict(TH4_v_ezg, model =  xgb_v_k_c, fun = xgbpred)
TH4_ezg_v_s <- terra::predict(TH4_v_ezg, model = xgb_v_s_c, fun = xgbpred)
TH4_ezg_v_a <- terra::predict(TH4_v_ezg, model = xgb_v_a_c, fun = xgbpred)
TH4_ezg_v_ra <- terra::predict(TH4_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# TH4  - predictors: selected variables --------------------------------------
TH4_ezg_var_k <- terra::predict(TH4_ezg_var, model = xgb_var_k_c, fun = xgbpred)
TH4_ezg_var_s <- terra::predict(TH4_ezg_var, model = xgb_var_s_c, fun = xgbpred)
TH4_ezg_var_a <- terra::predict(TH4_ezg_var, model = xgb_var_a_c, fun = xgbpred)
TH4_ezg_var_ra <- terra::predict(TH4_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### VR3
```{r}
# VR3  - predictors: v + wd ---------------------------------------------------
VR3_ezg_wd_k <- terra::predict(VR3_ezg, model = xgb_wd_k_c, fun = xgbpred)
VR3_ezg_wd_s <- terra::predict(VR3_ezg, model = xgb_wd_s_c, fun = xgbpred)
VR3_ezg_wd_a <- terra::predict(VR3_ezg, model = xgb_wd_a_c, fun = xgbpred)
VR3_ezg_wd_ra <- terra::predict(VR3_ezg, model = xgb_wd_ra_c, fun = xgbpred)

# VR3  - predictor: velocity --------------------------------------------------
VR3_ezg_v_k <- terra::predict(VR3_v_ezg, model = xgb_v_k_c, fun = xgbpred)
VR3_ezg_v_s <- terra::predict(VR3_v_ezg, model = xgb_v_s_c, fun = xgbpred)
VR3_ezg_v_a <- terra::predict(VR3_v_ezg, model = xgb_v_a_c, fun = xgbpred)
VR3_ezg_v_ra <- terra::predict(VR3_v_ezg, model = xgb_v_ra_c, fun = xgbpred)

# VR3  - predictors: selected variables ---------------------------------------
VR3_ezg_var_k <- terra::predict(VR3_ezg_var, model = xgb_var_k_c, fun = xgbpred)
VR3_ezg_var_s <- terra::predict(VR3_ezg_var, model = xgb_var_s_c, fun = xgbpred)
VR3_ezg_var_a <- terra::predict(VR3_ezg_var, model = xgb_var_a_c, fun = xgbpred)
VR3_ezg_var_ra <- terra::predict(VR3_ezg_var, model = xgb_var_ra_c, fun = xgbpred)
```

### Read data
```{r}
# read all raster results (one time flow velocity classes and one time for habitat suitability)
# prep extraction data 
## GL1
coord_GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1") |>
  dplyr::select(x, y) 

GL1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL1")

## GL2
coord_GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2") |>
  dplyr::select(x, y) 

GL2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "GL2")

## L2
coord_L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2") |>
  dplyr::select(x, y) 

L2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "L2")

## M1
coord_M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1") |>
  dplyr::select(x, y) 

M1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "M1")

## S1
coord_S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1") |>
  dplyr::select(x, y) 

S1 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S1")

## S2
coord_S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2") |>
  dplyr::select(x, y) 

S2 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "S2")

## TH4
coord_TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4") |>
  dplyr::select(x, y) 

TH4 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "TH4")

## VR3
coord_VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3") |>
  dplyr::select(x, y) 

VR3 <- test_wd |>
  subset(Reach_Untersuchungsstelle == "VR3")
```

## Extract Results
```{r}
# extract raster information for regression analysis later
# GL1 -------------------------------------------------------------------------
regr_GL1_wd_k <- raster::extract(GL1_ezg_wd_k, coord_GL1) 
regr_GL1_wd_s <- raster::extract(GL1_ezg_wd_s, coord_GL1) 
regr_GL1_wd_a <- raster::extract(GL1_ezg_wd_a, coord_GL1) 
regr_GL1_wd_ra <- raster::extract(GL1_ezg_wd_ra, coord_GL1) 

regr_GL1_v_k <- raster::extract(GL1_ezg_v_k, coord_GL1) 
regr_GL1_v_s <- raster::extract(GL1_ezg_v_s, coord_GL1) 
regr_GL1_v_a <- raster::extract(GL1_ezg_v_a, coord_GL1) 
regr_GL1_v_ra <- raster::extract(GL1_ezg_v_ra, coord_GL1)

regr_GL1_var_k <- raster::extract(GL1_ezg_var_k, coord_GL1) 
regr_GL1_var_s <- raster::extract(GL1_ezg_var_s, coord_GL1) 
regr_GL1_var_a <- raster::extract(GL1_ezg_var_a, coord_GL1) 
regr_GL1_var_ra <- raster::extract(GL1_ezg_var_ra, coord_GL1)

# GL2 -------------------------------------------------------------------------
regr_GL2_wd_k <- raster::extract(GL2_ezg_wd_k, coord_GL2) 
regr_GL2_wd_s <- raster::extract(GL2_ezg_wd_s, coord_GL2) 
regr_GL2_wd_a <- raster::extract(GL2_ezg_wd_a, coord_GL2) 
regr_GL2_wd_ra <- raster::extract(GL2_ezg_wd_ra, coord_GL2)

regr_GL2_v_k <- raster::extract(GL2_ezg_v_k, coord_GL2) 
regr_GL2_v_s <- raster::extract(GL2_ezg_v_s, coord_GL2) 
regr_GL2_v_a <- raster::extract(GL2_ezg_v_a, coord_GL2)
regr_GL2_v_ra <- raster::extract(GL2_ezg_v_ra, coord_GL2)

regr_GL2_var_k <- raster::extract(GL2_ezg_var_k, coord_GL2) 
regr_GL2_var_s <- raster::extract(GL2_ezg_var_s, coord_GL2) 
regr_GL2_var_a <- raster::extract(GL2_ezg_var_a, coord_GL2)
regr_GL2_var_ra <- raster::extract(GL2_ezg_var_ra, coord_GL2)

# L2 --------------------------------------------------------------------------
regr_L2_wd_k <- raster::extract(L2_ezg_wd_k, coord_L2) 
regr_L2_wd_s <- raster::extract(L2_ezg_wd_s, coord_L2) 
regr_L2_wd_a <- raster::extract(L2_ezg_wd_a, coord_L2) 
regr_L2_wd_ra <- raster::extract(L2_ezg_wd_ra, coord_L2) 

regr_L2_v_k <- raster::extract(L2_ezg_v_k, coord_L2) 
regr_L2_v_s <- raster::extract(L2_ezg_v_s, coord_L2) 
regr_L2_v_a <- raster::extract(L2_ezg_v_a, coord_L2)
regr_L2_v_ra <- raster::extract(L2_ezg_v_ra, coord_L2)

regr_L2_var_k <- raster::extract(L2_ezg_var_k, coord_L2) 
regr_L2_var_s <- raster::extract(L2_ezg_var_s, coord_L2) 
regr_L2_var_a <- raster::extract(L2_ezg_var_a, coord_L2)
regr_L2_var_ra <- raster::extract(L2_ezg_var_ra, coord_L2)

# M1 --------------------------------------------------------------------------
regr_M1_wd_k <- raster::extract(M1_ezg_wd_k, coord_M1) 
regr_M1_wd_s <- raster::extract(M1_ezg_wd_s, coord_M1) 
regr_M1_wd_a <- raster::extract(M1_ezg_wd_a, coord_M1) 
regr_M1_wd_ra <- raster::extract(M1_ezg_wd_ra, coord_M1) 

regr_M1_v_k <- raster::extract(M1_ezg_v_k, coord_M1) 
regr_M1_v_s <- raster::extract(M1_ezg_v_s, coord_M1) 
regr_M1_v_a <- raster::extract(M1_ezg_v_a, coord_M1)
regr_M1_v_ra <- raster::extract(M1_ezg_v_ra, coord_M1)

regr_M1_var_k <- raster::extract(M1_ezg_var_k, coord_M1) 
regr_M1_var_s <- raster::extract(M1_ezg_var_s, coord_M1) 
regr_M1_var_a <- raster::extract(M1_ezg_var_a, coord_M1)
regr_M1_var_ra <- raster::extract(M1_ezg_var_ra, coord_M1)

# S1 --------------------------------------------------------------------------
regr_S1_wd_k <- raster::extract(S1_ezg_wd_k, coord_S1) 
regr_S1_wd_s <- raster::extract(S1_ezg_wd_s, coord_S1) 
regr_S1_wd_a <- raster::extract(S1_ezg_wd_a, coord_S1) 
regr_S1_wd_ra <- raster::extract(S1_ezg_wd_ra, coord_S1) 

regr_S1_v_k <- raster::extract(S1_ezg_v_k, coord_S1) 
regr_S1_v_s <- raster::extract(S1_ezg_v_s, coord_S1) 
regr_S1_v_a <- raster::extract(S1_ezg_v_a, coord_S1)
regr_S1_v_ra <- raster::extract(S1_ezg_v_ra, coord_S1)

regr_S1_var_k <- raster::extract(S1_ezg_var_k, coord_S1) 
regr_S1_var_s <- raster::extract(S1_ezg_var_s, coord_S1) 
regr_S1_var_a <- raster::extract(S1_ezg_var_a, coord_S1)
regr_S1_var_ra <- raster::extract(S1_ezg_var_ra, coord_S1)

# S2 --------------------------------------------------------------------------
regr_S2_wd_k <- raster::extract(S2_ezg_wd_k, coord_S2) 
regr_S2_wd_s <- raster::extract(S2_ezg_wd_s, coord_S2) 
regr_S2_wd_a <- raster::extract(S2_ezg_wd_a, coord_S2) 
regr_S2_wd_ra <- raster::extract(S2_ezg_wd_ra, coord_S2)

regr_S2_v_k <- raster::extract(S2_ezg_v_k, coord_S2) 
regr_S2_v_s <- raster::extract(S2_ezg_v_s, coord_S2) 
regr_S2_v_a <- raster::extract(S2_ezg_v_a, coord_S2)
regr_S2_v_ra <- raster::extract(S2_ezg_v_ra, coord_S2)

regr_S2_var_k <- raster::extract(S2_ezg_var_k, coord_S2) 
regr_S2_var_s <- raster::extract(S2_ezg_var_s, coord_S2) 
regr_S2_var_a <- raster::extract(S2_ezg_var_a, coord_S2)
regr_S2_var_ra <- raster::extract(S2_ezg_var_ra, coord_S2)

# TH4 -------------------------------------------------------------------------
regr_TH4_wd_k <- raster::extract(TH4_ezg_wd_k, coord_TH4) 
regr_TH4_wd_s <- raster::extract(TH4_ezg_wd_s, coord_TH4) 
regr_TH4_wd_a <- raster::extract(TH4_ezg_wd_a, coord_TH4) 
regr_TH4_wd_ra <- raster::extract(TH4_ezg_wd_ra, coord_TH4) 

regr_TH4_v_k <- raster::extract(TH4_ezg_v_k, coord_TH4) 
regr_TH4_v_s <- raster::extract(TH4_ezg_v_s, coord_TH4) 
regr_TH4_v_a <- raster::extract(TH4_ezg_v_a, coord_TH4)
regr_TH4_v_ra <- raster::extract(TH4_ezg_v_ra, coord_TH4)

regr_TH4_var_k <- raster::extract(TH4_ezg_var_k, coord_TH4) 
regr_TH4_var_s <- raster::extract(TH4_ezg_var_s, coord_TH4) 
regr_TH4_var_a <- raster::extract(TH4_ezg_var_a, coord_TH4)
regr_TH4_var_ra <- raster::extract(TH4_ezg_var_ra, coord_TH4)

# VR3 -------------------------------------------------------------------------
regr_VR3_wd_k <- raster::extract(VR3_ezg_wd_k, coord_VR3) 
regr_VR3_wd_s <- raster::extract(VR3_ezg_wd_s, coord_VR3) 
regr_VR3_wd_a <- raster::extract(VR3_ezg_wd_a, coord_VR3) 
regr_VR3_wd_ra <- raster::extract(VR3_ezg_wd_ra, coord_VR3)

regr_VR3_v_k <- raster::extract(VR3_ezg_v_k, coord_VR3) 
regr_VR3_v_s <- raster::extract(VR3_ezg_v_s, coord_VR3) 
regr_VR3_v_a <- raster::extract(VR3_ezg_v_a, coord_VR3)
regr_VR3_v_ra <- raster::extract(VR3_ezg_v_ra, coord_VR3)

regr_VR3_var_k <- raster::extract(VR3_ezg_var_k, coord_VR3) 
regr_VR3_var_s <- raster::extract(VR3_ezg_var_s, coord_VR3) 
regr_VR3_var_a <- raster::extract(VR3_ezg_var_a, coord_VR3)
regr_VR3_var_ra <- raster::extract(VR3_ezg_var_ra, coord_VR3)
```

## Combine into DF
```{r}
# combine all results into dataframe
# GL1 -------------------------------------------------------------------------
data_GL1 <- cbind(regr_GL1_wd_k, regr_GL1_wd_s, regr_GL1_wd_a, regr_GL1_wd_ra, regr_GL1_v_k, regr_GL1_v_s, regr_GL1_v_a, regr_GL1_v_ra, regr_GL1_var_k, regr_GL1_var_s, regr_GL1_var_a, regr_GL1_var_ra, GL1) |>
  dplyr::rename(
         k_index_wd = regr_GL1_wd_k,
         shannon_wd = regr_GL1_wd_s,
         abundance_wd = regr_GL1_wd_a,
         rel_abundance_wd = regr_GL1_wd_ra,
         k_index_v = regr_GL1_v_k,
         shannon_v = regr_GL1_v_s,
         abundance_v = regr_GL1_v_a,
         rel_abundance_v = regr_GL1_v_ra,
         k_index_var = regr_GL1_var_k,
         shannon_var = regr_GL1_var_s,
         abundance_var = regr_GL1_var_a,
         rel_abundance_var = regr_GL1_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# GL2 -------------------------------------------------------------------------
data_GL2 <- cbind(regr_GL2_wd_k, regr_GL2_wd_s, regr_GL2_wd_a, regr_GL2_wd_ra, regr_GL2_v_k, regr_GL2_v_s, regr_GL2_v_a, regr_GL2_v_ra, regr_GL2_var_k, regr_GL2_var_s, regr_GL2_var_a, regr_GL2_var_ra, GL2) |>
  dplyr::rename(
         k_index_wd = regr_GL2_wd_k,
         shannon_wd = regr_GL2_wd_s,
         abundance_wd = regr_GL2_wd_a,
         rel_abundance_wd = regr_GL2_wd_ra,
         k_index_v = regr_GL2_v_k,
         shannon_v = regr_GL2_v_s,
         abundance_v = regr_GL2_v_a,
         rel_abundance_v = regr_GL2_v_ra,
         k_index_var = regr_GL2_var_k,
         shannon_var = regr_GL2_var_s,
         abundance_var = regr_GL2_var_a,
         rel_abundance_var = regr_GL2_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# L2 --------------------------------------------------------------------------
data_L2 <- cbind(regr_L2_wd_k, regr_L2_wd_s, regr_L2_wd_a, regr_L2_wd_ra, regr_L2_v_k, regr_L2_v_s, regr_L2_v_a, regr_L2_v_ra, regr_L2_var_k, regr_L2_var_s, regr_L2_var_a, regr_L2_var_ra, L2) |>
  dplyr::rename(
         k_index_wd = regr_L2_wd_k,
         shannon_wd = regr_L2_wd_s,
         abundance_wd = regr_L2_wd_a,
         rel_abundance_wd = regr_L2_wd_ra,
         k_index_v = regr_L2_v_k,
         shannon_v = regr_L2_v_s,
         abundance_v = regr_L2_v_a,
         rel_abundance_v = regr_L2_v_ra,
         k_index_var = regr_L2_var_k,
         shannon_var = regr_L2_var_s,
         abundance_var = regr_L2_var_a,
         rel_abundance_var = regr_L2_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# M1 --------------------------------------------------------------------------
data_M1 <- cbind(regr_M1_wd_k, regr_M1_wd_s, regr_M1_wd_a, regr_M1_wd_ra, regr_M1_v_k, regr_M1_v_s, regr_M1_v_a, regr_M1_v_ra, regr_M1_var_k, regr_M1_var_s, regr_M1_var_a, regr_M1_var_ra, M1) |>
  dplyr::rename(
         k_index_wd = regr_M1_wd_k,
         shannon_wd = regr_M1_wd_s,
         abundance_wd = regr_M1_wd_a,
         rel_abundance_wd = regr_M1_wd_ra,
         k_index_v = regr_M1_v_k,
         shannon_v = regr_M1_v_s,
         abundance_v = regr_M1_v_a,
         rel_abundance_v = regr_M1_v_ra,
         k_index_var = regr_M1_var_k,
         shannon_var = regr_M1_var_s,
         abundance_var = regr_M1_var_a,
         rel_abundance_var = regr_M1_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# S1 --------------------------------------------------------------------------
data_S1 <- cbind(regr_S1_wd_k, regr_S1_wd_s, regr_S1_wd_a, regr_S1_wd_ra, regr_S1_v_k, regr_S1_v_s, regr_S1_v_a, regr_S1_v_ra, regr_S1_var_k, regr_S1_var_s, regr_S1_var_a, regr_S1_var_ra, S1) |>
  dplyr::rename(
         k_index_wd = regr_S1_wd_k,
         shannon_wd = regr_S1_wd_s,
         abundance_wd = regr_S1_wd_a,
         rel_abundance_wd = regr_S1_wd_ra,
         k_index_v = regr_S1_v_k,
         shannon_v = regr_S1_v_s,
         abundance_v = regr_S1_v_a,
         rel_abundance_v = regr_S1_v_ra,
         k_index_var = regr_S1_var_k,
         shannon_var = regr_S1_var_s,
         abundance_var = regr_S1_var_a,
         rel_abundance_var = regr_S1_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)

# S2 --------------------------------------------------------------------------
data_S2 <- cbind(regr_S2_wd_k, regr_S2_wd_s, regr_S2_wd_a, regr_S2_wd_ra, regr_S2_v_k, regr_S2_v_s, regr_S2_v_a, regr_S2_v_ra, regr_S2_var_k, regr_S2_var_s, regr_S2_var_a, regr_S2_var_ra, S2) |>
  dplyr::rename(
         k_index_wd = regr_S2_wd_k,
         shannon_wd = regr_S2_wd_s,
         abundance_wd = regr_S2_wd_a,
         rel_abundance_wd = regr_S2_wd_ra,
         k_index_v = regr_S2_v_k,
         shannon_v = regr_S2_v_s,
         abundance_v = regr_S2_v_a,
         rel_abundance_v = regr_S2_v_ra,
         k_index_var = regr_S2_var_k,
         shannon_var = regr_S2_var_s,
         abundance_var = regr_S2_var_a,
         rel_abundance_var = regr_S2_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)


# TH4 -------------------------------------------------------------------------
data_TH4 <- cbind(regr_TH4_wd_k, regr_TH4_wd_s, regr_TH4_wd_a, regr_TH4_wd_ra, regr_TH4_v_k, regr_TH4_v_s, regr_TH4_v_a, regr_TH4_v_ra, regr_TH4_var_k, regr_TH4_var_s, regr_TH4_var_a, regr_TH4_var_ra, TH4) |>
  dplyr::rename(
         k_index_wd = regr_TH4_wd_k,
         shannon_wd = regr_TH4_wd_s,
         abundance_wd = regr_TH4_wd_a,
         rel_abundance_wd = regr_TH4_wd_ra,
         k_index_v = regr_TH4_v_k,
         shannon_v = regr_TH4_v_s,
         abundance_v = regr_TH4_v_a,
         rel_abundance_v = regr_TH4_v_ra,
         k_index_var = regr_TH4_var_k,
         shannon_var = regr_TH4_var_s,
         abundance_var = regr_TH4_var_a,
         rel_abundance_var = regr_TH4_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)


# VR3 -------------------------------------------------------------------------
data_VR3 <- cbind(regr_VR3_wd_k, regr_VR3_wd_s, regr_VR3_wd_a, regr_VR3_wd_ra, regr_VR3_v_k, regr_VR3_v_s, regr_VR3_v_a, regr_VR3_v_ra, regr_VR3_var_k, regr_VR3_var_s, regr_VR3_var_a, regr_VR3_var_ra, VR3) |>
  dplyr::rename(
         k_index_wd = regr_VR3_wd_k,
         shannon_wd = regr_VR3_wd_s,
         abundance_wd = regr_VR3_wd_a,
         rel_abundance_wd = regr_VR3_wd_ra,
         k_index_v = regr_VR3_v_k,
         shannon_v = regr_VR3_v_s,
         abundance_v = regr_VR3_v_a,
         rel_abundance_v = regr_VR3_v_ra,
         k_index_var = regr_VR3_var_k,
         shannon_var = regr_VR3_var_s,
         abundance_var = regr_VR3_var_a,
         rel_abundance_var = regr_VR3_var_ra,
         obs_k_index = k_index,
         obs_shannon = shannon,
         obs_abundance = abundance,
         obs_rel_abundance = rel_abundance)
```

## Results from Extraction 
```{r}
# bind results together 
regr_analysis <- rbind(data_GL1, data_GL2, data_L2, data_M1, data_S1, data_S2, data_TH4, data_VR3)

# export to .csv file
write.csv(regr_analysis, "Stat_Analysis/stat_analysis_data/regr_analysis_brt.csv", row.names = FALSE)
```


