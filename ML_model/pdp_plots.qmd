---
title: "pdp_plots"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
pkgCheck("Fgmutils") # for bias calculation (bias() function)
pkgCheck("hydroGOF") # for NSE calculation with NSE() function 
```

# Load Data
## RF normal
```{r}
### PREDICTOR: VELOCITY ### -------------------------------------------------
# With k_index as response --------------------------------------------------
### velocity
v_k_rf <- read_delim("ML_Model/pdp_data/pdp_v_k_rf.csv")
v_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_k_c_rf.csv") 

### x/y
x_v_k_rf <- read_delim("ML_Model/pdp_data/pdp_x_v_k_rf.csv")
y_v_k_rf <- read_delim("ML_Model/pdp_data/pdp_y_v_k_rf.csv") 

# With shannon index as response ----------------------------------------------
### velocity
v_s_rf <- read_delim("ML_Model/pdp_data/pdp_v_s_rf.csv")
v_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_s_c_rf.csv") 

### x/y
x_v_s_rf <- read_delim("ML_Model/pdp_data/pdp_x_v_s_rf.csv")
y_v_s_rf <- read_delim("ML_Model/pdp_data/pdp_y_v_s_rf.csv") 

# With abundance as response --------------------------------------------------
### velocity
v_a_rf <- read_delim("ML_Model/pdp_data/pdp_v_a_rf.csv")
v_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_a_c_rf.csv") 

### x/y
x_v_a_rf <- read_delim("ML_Model/pdp_data/pdp_x_v_a_rf.csv")
y_v_a_rf <- read_delim("ML_Model/pdp_data/pdp_y_v_a_rf.csv") 

# With rel_abundance as response ----------------------------------------------
### velocity
v_ra_rf <- read_delim("ML_Model/pdp_data/pdp_v_ra_rf.csv")
v_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_ra_c_rf.csv") 

### x/y
x_v_ra_rf <- read_delim("ML_Model/pdp_data/pdp_x_v_ra_rf.csv")
y_v_ra_rf <- read_delim("ML_Model/pdp_data/pdp_y_v_ra_rf.csv")

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response ---------------------------------------------------
### velocity
v_wd_k_rf <- read_delim("ML_Model/pdp_data/pdp_v_wd_k_rf.csv")
v_wd_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_wd_k_c_rf.csv") 

### wd_m
wd_k_rf <- read_delim("ML_Model/pdp_data/pdp_wd_k_rf.csv")
wd_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_k_c_rf.csv")

### x/y
x_wd_k_rf <- read_delim("ML_Model/pdp_data/pdp_x_wd_k_rf.csv")
y_wd_k_rf <- read_delim("ML_Model/pdp_data/pdp_y_wd_k_rf.csv")

# With shannon index as response ----------------------------------------------
### velocity
v_wd_s_rf <- read_delim("ML_Model/pdp_data/pdp_v_wd_s_rf.csv")
v_wd_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_wd_s_c_rf.csv") 

### wd_m
wd_s_rf <- read_delim("ML_Model/pdp_data/pdp_wd_s_rf.csv")
wd_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_s_c_rf.csv")

### x/y
x_wd_s_rf <- read_delim("ML_Model/pdp_data/pdp_x_wd_s_rf.csv")
y_wd_s_rf <- read_delim("ML_Model/pdp_data/pdp_y_wd_s_rf.csv")

# With abundance as response --------------------------------------------------
### velocity
v_wd_a_rf <- read_delim("ML_Model/pdp_data/pdp_v_wd_a_rf.csv")
v_wd_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_wd_a_c_rf.csv") 

### wd_m
wd_a_rf <- read_delim("ML_Model/pdp_data/pdp_wd_a_rf.csv")
wd_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_a_c_rf.csv")

### x/y
x_wd_a_rf <- read_delim("ML_Model/pdp_data/pdp_x_wd_a_rf.csv")
y_wd_a_rf <- read_delim("ML_Model/pdp_data/pdp_y_wd_a_rf.csv")

# With rel_abundance as response ---------------------------------------------
### velocity
v_wd_ra_rf <- read_delim("ML_Model/pdp_data/pdp_v_wd_ra_rf.csv")
v_wd_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_wd_ra_c_rf.csv") 

### wd_m
wd_ra_rf <- read_delim("ML_Model/pdp_data/pdp_wd_ra_rf.csv")
wd_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_ra_c_rf.csv")

### x/y
x_wd_ra_rf <- read_delim("ML_Model/pdp_data/pdp_x_wd_ra_rf.csv")
y_wd_ra_rf <- read_delim("ML_Model/pdp_data/pdp_y_wd_ra_rf.csv")

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
### velocity
v_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_k_rf.csv")
v_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_k_c_rf.csv") 

### wd_m
wd_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_k_rf.csv")
wd_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_k_c_rf.csv")

### x/y
x_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_x_samp_k_rf.csv")
y_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_y_samp_k_rf.csv")

### z 
z_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_k_rf.csv")
z_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_k_c_rf.csv")

### dist_w 
dist_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_k_rf.csv")
dist_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_k_c_rf.csv")

### cat_v
cv_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_k_rf.csv")
cv_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_k_c_rf.csv")

### alg_cover 
ac_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_k_rf.csv")
ac_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_k_c_rf.csv")

### moos_cover 
mc_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_k_rf.csv")
mc_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_k_c_rf.csv")

### cpom_cover 
cc_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_k_rf.csv")
cc_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_k_c_rf.csv")

### clog_3 
clog_3_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_k_rf.csv")
clog_3_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_k_c_rf.csv")

### clog_6 
clog_6_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_k_rf.csv")
clog_6_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_k_c_rf.csv")

### sub_type
sub_samp_k_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_k_rf.csv")
sub_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_k_c_rf.csv")

# With shannon index as response ----------------------------------------------
### velocity
v_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_s_rf.csv")
v_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_s_c_rf.csv") 

### wd_m
wd_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_s_rf.csv")
wd_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_s_c_rf.csv")

### x/y
x_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_x_samp_s_rf.csv")
y_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_y_samp_s_rf.csv")

### z 
z_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_s_rf.csv")
z_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_s_c_rf.csv")

### dist_w 
dist_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_s_rf.csv")
dist_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_s_c_rf.csv")

### cat_v
cv_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_s_rf.csv")
cv_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_s_c_rf.csv")

### alg_cover 
ac_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_s_rf.csv")
ac_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_s_c_rf.csv")

### moos_cover 
mc_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_s_rf.csv")
mc_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_s_c_rf.csv")

### cpom_cover 
cc_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_s_rf.csv")
cc_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_s_c_rf.csv")

### clog_3 
clog_3_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_s_rf.csv")
clog_3_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_s_c_rf.csv")

### clog_6 
clog_6_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_s_rf.csv")
clog_6_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_s_c_rf.csv")

### sub_type
sub_samp_s_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_s_rf.csv")
sub_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_s_c_rf.csv")

# With abundance as response --------------------------------------------------
### velocity
v_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_a_rf.csv")
v_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_a_c_rf.csv") 

### wd_m
wd_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_a_rf.csv")
wd_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_a_c_rf.csv")

### x/y
x_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_x_samp_a_rf.csv")
y_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_y_samp_a_rf.csv")

### z 
z_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_a_rf.csv")
z_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_a_c_rf.csv")

### dist_w 
dist_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_a_rf.csv")
dist_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_a_c_rf.csv")

### cat_v
cv_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_a_rf.csv")
cv_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_a_c_rf.csv")

### alg_cover 
ac_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_a_rf.csv")
ac_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_a_c_rf.csv")

### moos_cover 
mc_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_a_rf.csv")
mc_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_a_c_rf.csv")

### cpom_cover 
cc_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_a_rf.csv")
cc_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_a_c_rf.csv")

### clog_3 
clog_3_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_a_rf.csv")
clog_3_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_a_c_rf.csv")

### clog_6 
clog_6_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_a_rf.csv")
clog_6_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_a_c_rf.csv")

### sub_type
sub_samp_a_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_a_rf.csv")
sub_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_a_c_rf.csv")

# With rel_abundance as response ----------------------------------------------
### velocity
v_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_ra_rf.csv")
v_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_ra_c_rf.csv") 

### wd_m
wd_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_ra_rf.csv")
wd_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_ra_c_rf.csv")

### x/y
x_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_x_samp_ra_rf.csv")
y_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_y_samp_ra_rf.csv")

### z 
z_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_ra_rf.csv")
z_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_ra_c_rf.csv")

### dist_w 
dist_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_ra_rf.csv")
dist_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_ra_c_rf.csv")

### cat_v
cv_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_ra_rf.csv")
cv_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_ra_c_rf.csv")

### alg_cover 
ac_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_ra_rf.csv")
ac_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_ra_c_rf.csv")

### moos_cover 
mc_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_ra_rf.csv")
mc_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_ra_c_rf.csv")

### cpom_cover 
cc_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_ra_rf.csv")
cc_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_ra_c_rf.csv")

### clog_3 
clog_3_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_rf.csv")
clog_3_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_c_rf.csv")

### clog_6 
clog_6_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_rf.csv")
clog_6_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_c_rf.csv")

### sub_type
sub_samp_ra_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_ra_rf.csv")
sub_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_ra_c_rf.csv")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity
v_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_v_sec_k_rf.csv")
v_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_sec_k_c_rf.csv") 

### wd_m
wd_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_wd_sec_k_rf.csv")
wd_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_sec_k_c_rf.csv")

### x/y
x_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_x_sec_k_rf.csv")
y_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_y_sec_k_rf.csv")

### z 
z_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_z_sec_k_rf.csv")
z_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_sec_k_c_rf.csv")

### dist_w 
dist_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_dist_sec_k_rf.csv")
dist_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_sec_k_c_rf.csv")

### cat_v
cv_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_cv_sec_k_rf.csv")
cv_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_sec_k_c_rf.csv")

### alg_cover 
ac_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_ac_sec_k_rf.csv")
ac_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_sec_k_c_rf.csv")

### moos_cover 
mc_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_mc_sec_k_rf.csv")
mc_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_sec_k_c_rf.csv")

### cpom_cover 
cc_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_cc_sec_k_rf.csv")
cc_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_sec_k_c_rf.csv")

### clog_3 
clog_3_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_k_rf.csv")
clog_3_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_k_c_rf.csv")

### clog_6 
clog_6_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_k_rf.csv")
clog_6_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_k_c_rf.csv")

### sub_type
sub_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_sub_sec_k_rf.csv")
sub_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_sec_k_c_rf.csv")

### pH_before
phb_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_phb_sec_k_rf.csv")
phb_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_phb_sec_k_c_rf.csv")

### pH_during
phd_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_phd_sec_k_rf.csv")
phd_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_phd_sec_k_c_rf.csv")

### pH_after
pha_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_pha_sec_k_rf.csv")
pha_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_pha_sec_k_c_rf.csv")

### conduct_before
cb_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_cb_sec_k_rf.csv")
cb_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_cb_sec_k_c_rf.csv")

### conduct_during
cd_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_cd_sec_k_rf.csv")
cd_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_cd_sec_k_c_rf.csv")

### conduct_after
ca_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_ca_sec_k_rf.csv")
ca_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_ca_sec_k_c_rf.csv")

### ox_before
ob_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_ob_sec_k_rf.csv")
ob_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_ob_sec_k_c_rf.csv")

### ox_during
od_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_od_sec_k_rf.csv")
od_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_od_sec_k_c_rf.csv")

### ox_after
oa_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_oa_sec_k_rf.csv")
oa_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_oa_sec_k_c_rf.csv")

### turb_before
tb_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_tb_sec_k_rf.csv")
tb_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_tb_sec_k_c_rf.csv")

### turb_during
td_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_td_sec_k_rf.csv")
td_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_td_sec_k_c_rf.csv")

### turb_after
ta_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_ta_sec_k_rf.csv")
ta_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_ta_sec_k_c_rf.csv")

### temp_before
teb_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_teb_sec_k_rf.csv")
teb_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_teb_sec_k_c_rf.csv")

### temp_during
ted_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_ted_sec_k_rf.csv")
ted_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_ted_sec_k_c_rf.csv")

### temp_after
tea_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_tea_sec_k_rf.csv")
tea_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_tea_sec_k_c_rf.csv")

### q_before
qb_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_qb_sec_k_rf.csv")
qb_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_qb_sec_k_c_rf.csv")

### q_during
qd_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_qd_sec_k_rf.csv")
qd_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_qd_sec_k_c_rf.csv")

### q_after
qa_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_qa_sec_k_rf.csv")
qa_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_qa_sec_k_c_rf.csv")

### gaug_before
gb_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_gb_sec_k_rf.csv")
gb_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_gb_sec_k_c_rf.csv")

### gaug_during
gd_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_gd_sec_k_rf.csv")
gd_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_gd_sec_k_c_rf.csv")

### gaug_after
ga_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_ga_sec_k_rf.csv")
ga_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_ga_sec_k_c_rf.csv")

# With shannon index as response ----------------------------------------------
### velocity
v_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_v_sec_s_rf.csv")
v_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_sec_s_c_rf.csv") 

### wd_m
wd_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_wd_sec_s_rf.csv")
wd_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_sec_s_c_rf.csv")

### x/y
x_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_x_sec_s_rf.csv")
y_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_y_sec_s_rf.csv")

### z 
z_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_z_sec_s_rf.csv")
z_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_sec_s_c_rf.csv")

### dist_w 
dist_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_dist_sec_s_rf.csv")
dist_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_sec_s_c_rf.csv")

### cat_v
cv_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_cv_sec_s_rf.csv")
cv_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_sec_s_c_rf.csv")

### alg_cover 
ac_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_ac_sec_s_rf.csv")
ac_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_sec_s_c_rf.csv")

### moos_cover 
mc_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_mc_sec_s_rf.csv")
mc_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_sec_s_c_rf.csv")

### cpom_cover 
cc_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_cc_sec_s_rf.csv")
cc_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_sec_s_c_rf.csv")

### clog_3 
clog_3_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_s_rf.csv")
clog_3_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_s_c_rf.csv")

### clog_6 
clog_6_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_s_rf.csv")
clog_6_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_s_c_rf.csv")

### sub_type
sub_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_sub_sec_s_rf.csv")
sub_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_sec_s_c_rf.csv")

### pH_before
phb_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_phb_sec_s_rf.csv")
phb_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_phb_sec_s_c_rf.csv")

### pH_during
phd_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_phd_sec_s_rf.csv")
phd_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_phd_sec_s_c_rf.csv")

### pH_after
pha_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_pha_sec_s_rf.csv")
pha_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_pha_sec_s_c_rf.csv")

### conduct_before
cb_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_cb_sec_s_rf.csv")
cb_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_cb_sec_s_c_rf.csv")

### conduct_during
cd_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_cd_sec_s_rf.csv")
cd_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_cd_sec_s_c_rf.csv")

### conduct_after
ca_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_ca_sec_s_rf.csv")
ca_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_ca_sec_s_c_rf.csv")

### ox_before
ob_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_ob_sec_s_rf.csv")
ob_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_ob_sec_s_c_rf.csv")

### ox_during
od_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_od_sec_s_rf.csv")
od_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_od_sec_s_c_rf.csv")

### ox_after
oa_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_oa_sec_s_rf.csv")
oa_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_oa_sec_s_c_rf.csv")

### turb_before
tb_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_tb_sec_s_rf.csv")
tb_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_tb_sec_s_c_rf.csv")

### turb_during
td_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_td_sec_s_rf.csv")
td_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_td_sec_s_c_rf.csv")

### turb_after
ta_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_ta_sec_s_rf.csv")
ta_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_ta_sec_s_c_rf.csv")

### temp_before
teb_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_teb_sec_s_rf.csv")
teb_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_teb_sec_s_c_rf.csv")

### temp_during
ted_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_ted_sec_s_rf.csv")
ted_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_ted_sec_s_c_rf.csv")

### temp_after
tea_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_tea_sec_s_rf.csv")
tea_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_tea_sec_s_c_rf.csv")

### q_before
qb_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_qb_sec_s_rf.csv")
qb_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_qb_sec_s_c_rf.csv")

### q_during
qd_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_qd_sec_s_rf.csv")
qd_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_qd_sec_s_c_rf.csv")

### q_after
qa_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_qa_sec_s_rf.csv")
qa_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_qa_sec_s_c_rf.csv")

### gaug_before
gb_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_gb_sec_s_rf.csv")
gb_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_gb_sec_s_c_rf.csv")

### gaug_during
gd_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_gd_sec_s_rf.csv")
gd_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_gd_sec_s_c_rf.csv")

### gaug_after
ga_sec_s_rf <- read_delim("ML_Model/pdp_data/pdp_ga_sec_s_rf.csv")
ga_sec_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_ga_sec_s_c_rf.csv")

# With abundance as response --------------------------------------------------
### velocity
v_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_v_sec_a_rf.csv")
v_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_sec_a_c_rf.csv") 

### wd_m
wd_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_wd_sec_a_rf.csv")
wd_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_sec_a_c_rf.csv")

### x/y
x_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_x_sec_a_rf.csv")
y_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_y_sec_a_rf.csv")

### z 
z_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_z_sec_a_rf.csv")
z_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_sec_a_c_rf.csv")

### dist_w 
dist_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_dist_sec_a_rf.csv")
dist_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_sec_a_c_rf.csv")

### cat_v
cv_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_cv_sec_a_rf.csv")
cv_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_sec_a_c_rf.csv")

### alg_cover 
ac_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_ac_sec_a_rf.csv")
ac_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_sec_a_c_rf.csv")

### moos_cover 
mc_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_mc_sec_a_rf.csv")
mc_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_sec_a_c_rf.csv")

### cpom_cover 
cc_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_cc_sec_a_rf.csv")
cc_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_sec_a_c_rf.csv")

### clog_3 
clog_3_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_a_rf.csv")
clog_3_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_a_c_rf.csv")

### clog_6 
clog_6_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_a_rf.csv")
clog_6_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_a_c_rf.csv")

### sub_type
sub_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_sub_sec_a_rf.csv")
sub_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_sec_a_c_rf.csv")

### pH_before
phb_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_phb_sec_a_rf.csv")
phb_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_phb_sec_a_c_rf.csv")

### pH_during
phd_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_phd_sec_a_rf.csv")
phd_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_phd_sec_a_c_rf.csv")

### pH_after
pha_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_pha_sec_a_rf.csv")
pha_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_pha_sec_a_c_rf.csv")

### conduct_before
cb_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_cb_sec_a_rf.csv")
cb_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_cb_sec_a_c_rf.csv")

### conduct_during
cd_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_cd_sec_a_rf.csv")
cd_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_cd_sec_a_c_rf.csv")

### conduct_after
ca_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_ca_sec_a_rf.csv")
ca_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_ca_sec_a_c_rf.csv")

### ox_before
ob_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_ob_sec_a_rf.csv")
ob_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_ob_sec_a_c_rf.csv")

### ox_during
od_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_od_sec_a_rf.csv")
od_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_od_sec_a_c_rf.csv")

### ox_after
oa_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_oa_sec_a_rf.csv")
oa_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_oa_sec_a_c_rf.csv")

### turb_before
tb_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_tb_sec_a_rf.csv")
tb_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_tb_sec_a_c_rf.csv")

### turb_during
td_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_td_sec_a_rf.csv")
td_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_td_sec_a_c_rf.csv")

### turb_after
ta_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_ta_sec_a_rf.csv")
ta_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_ta_sec_a_c_rf.csv")

### temp_before
teb_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_teb_sec_a_rf.csv")
teb_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_teb_sec_a_c_rf.csv")

### temp_during
ted_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_ted_sec_a_rf.csv")
ted_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_ted_sec_a_c_rf.csv")

### temp_after
tea_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_tea_sec_a_rf.csv")
tea_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_tea_sec_a_c_rf.csv")

### q_before
qb_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_qb_sec_a_rf.csv")
qb_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_qb_sec_a_c_rf.csv")

### q_during
qd_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_qd_sec_a_rf.csv")
qd_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_qd_sec_a_c_rf.csv")

### q_after
qa_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_qa_sec_a_rf.csv")
qa_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_qa_sec_a_c_rf.csv")

### gaug_before
gb_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_gb_sec_a_rf.csv")
gb_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_gb_sec_a_c_rf.csv")

### gaug_during
gd_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_gd_sec_a_rf.csv")
gd_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_gd_sec_a_c_rf.csv")

### gaug_after
ga_sec_a_rf <- read_delim("ML_Model/pdp_data/pdp_ga_sec_a_rf.csv")
ga_sec_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_ga_sec_a_c_rf.csv")

# With relative abundance as response -----------------------------------------
### velocity
v_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_v_sec_ra_rf.csv")
v_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_sec_ra_c_rf.csv") 

### wd_m
wd_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_wd_sec_ra_rf.csv")
wd_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_sec_ra_c_rf.csv")

### x/y
x_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_x_sec_ra_rf.csv")
y_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_y_sec_ra_rf.csv")

### z 
z_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_z_sec_ra_rf.csv")
z_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_sec_ra_c_rf.csv")

### dist_w 
dist_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_dist_sec_ra_rf.csv")
dist_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_sec_ra_c_rf.csv")

### cat_v
cv_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_cv_sec_ra_rf.csv")
cv_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_sec_ra_c_rf.csv")

### alg_cover 
ac_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_ac_sec_ra_rf.csv")
ac_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_sec_ra_c_rf.csv")

### moos_cover 
mc_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_mc_sec_ra_rf.csv")
mc_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_sec_ra_c_rf.csv")

### cpom_cover 
cc_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_cc_sec_ra_rf.csv")
cc_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_sec_ra_c_rf.csv")

### clog_3 
clog_3_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_ra_rf.csv")
clog_3_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_ra_c_rf.csv")

### clog_6 
clog_6_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_ra_rf.csv")
clog_6_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_ra_c_rf.csv")

### sub_type
sub_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_sub_sec_ra_rf.csv")
sub_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_sec_ra_c_rf.csv")

### pH_before
phb_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_phb_sec_ra_rf.csv")
phb_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_phb_sec_ra_c_rf.csv")

### pH_during
phd_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_phd_sec_ra_rf.csv")
phd_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_phd_sec_ra_c_rf.csv")

### pH_after
pha_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_pha_sec_ra_rf.csv")
pha_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_pha_sec_ra_c_rf.csv")

### conduct_before
cb_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_cb_sec_ra_rf.csv")
cb_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_cb_sec_ra_c_rf.csv")

### conduct_during
cd_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_cd_sec_ra_rf.csv")
cd_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_cd_sec_ra_c_rf.csv")

### conduct_after
ca_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_ca_sec_ra_rf.csv")
ca_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_ca_sec_ra_c_rf.csv")

### ox_before
ob_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_ob_sec_ra_rf.csv")
ob_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_ob_sec_ra_c_rf.csv")

### ox_during
od_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_od_sec_ra_rf.csv")
od_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_od_sec_ra_c_rf.csv")

### ox_after
oa_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_oa_sec_ra_rf.csv")
oa_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_oa_sec_ra_c_rf.csv")

### turb_before
tb_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_tb_sec_ra_rf.csv")
tb_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_tb_sec_ra_c_rf.csv")

### turb_during
td_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_td_sec_ra_rf.csv")
td_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_td_sec_ra_c_rf.csv")

### turb_after
ta_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_ta_sec_ra_rf.csv")
ta_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_ta_sec_ra_c_rf.csv")

### temp_before
teb_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_teb_sec_ra_rf.csv")
teb_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_teb_sec_ra_c_rf.csv")

### temp_during
ted_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_ted_sec_ra_rf.csv")
ted_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_ted_sec_ra_c_rf.csv")

### temp_after
tea_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_tea_sec_ra_rf.csv")
tea_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_tea_sec_ra_c_rf.csv")

### q_before
qb_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_qb_sec_ra_rf.csv")
qb_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_qb_sec_ra_c_rf.csv")

### q_during
qd_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_qd_sec_ra_rf.csv")
qd_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_qd_sec_ra_c_rf.csv")

### q_after
qa_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_qa_sec_ra_rf.csv")
qa_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_qa_sec_ra_c_rf.csv")

### gaug_before
gb_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_gb_sec_ra_rf.csv")
gb_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_gb_sec_ra_c_rf.csv")

### gaug_during
gd_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_gd_sec_ra_rf.csv")
gd_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_gd_sec_ra_c_rf.csv")

### gaug_after
ga_sec_ra_rf <- read_delim("ML_Model/pdp_data/pdp_ga_sec_ra_rf.csv")
ga_sec_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_ga_sec_ra_c_rf.csv")

```

## RF added
```{r}
### PREDICTOR: VELOCITY ### -------------------------------------------------
# With k_index as response --------------------------------------------------
### velocity
v_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_k_rf_add.csv")
v_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_k_c_rf_add.csv") 

### froude
f_v_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_v_k_rf_add.csv")
f_v_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_v_k_c_rf_add.csv") 

### shear_stress
s_v_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_v_k_rf_add.csv")
s_v_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_v_k_c_rf_add.csv") 

### stream_power
sp_v_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_k_rf_add.csv")
sp_v_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_k_c_rf_add.csv") 

### x/y
x_v_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_v_k_rf_add.csv")
y_v_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_v_k_rf_add.csv") 

# With shannon index as response ----------------------------------------------
### velocity
v_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_s_rf_add.csv")
v_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_s_c_rf_add.csv") 

### froude
f_v_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_v_s_rf_add.csv")
f_v_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_v_s_c_rf_add.csv") 

### shear_stress
s_v_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_v_s_rf_add.csv")
s_v_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_v_s_c_rf_add.csv") 

### stream_power
sp_v_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_s_rf_add.csv")
sp_v_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_s_c_rf_add.csv") 

### x/y
x_v_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_v_s_rf_add.csv")
y_v_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_v_s_rf_add.csv") 

# With abundance as response --------------------------------------------------
### velocity
v_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_a_rf_add.csv")
v_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_a_c_rf_add.csv") 

### froude
f_v_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_v_a_rf_add.csv")
f_v_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_v_a_c_rf_add.csv") 

### shear_stress
s_v_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_v_a_rf_add.csv")
s_v_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_v_a_c_rf_add.csv") 

### stream_power
sp_v_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_a_rf_add.csv")
sp_v_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_a_c_rf_add.csv") 

### x/y
x_v_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_v_a_rf_add.csv")
y_v_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_v_a_rf_add.csv") 

# With rel_abundance as response ----------------------------------------------
### velocity
v_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_ra_rf_add.csv")
v_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_ra_c_rf_add.csv")

### froude
f_v_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_v_ra_rf_add.csv")
f_v_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_v_ra_c_rf_add.csv") 

### shear_stress
s_v_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_v_ra_rf_add.csv")
s_v_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_v_ra_c_rf_add.csv") 

### stream_power
sp_v_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_ra_rf_add.csv")
sp_v_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_ra_c_rf_add.csv") 

### x/y
x_v_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_v_ra_rf_add.csv")
y_v_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_v_ra_rf_add.csv")

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response ---------------------------------------------------
### velocity
v_wd_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_wd_k_rf_add.csv")
v_wd_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_wd_k_c_rf_add.csv") 

### froude
f_wd_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_k_rf_add.csv")
f_wd_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_k_c_rf_add.csv") 

### shear_stress
s_wd_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_k_rf_add.csv")
s_wd_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_k_c_rf_add.csv") 

### stream_power
sp_wd_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_k_rf_add.csv")
sp_wd_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_k_c_rf_add.csv") 

### wd_m
wd_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_k_rf_add.csv")
wd_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_k_c_rf_add.csv")

### x/y
x_wd_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_wd_k_rf_add.csv")
y_wd_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_wd_k_rf_add.csv")

# With shannon index as response ----------------------------------------------
### velocity
v_wd_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_wd_s_rf_add.csv")
v_wd_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_wd_s_c_rf_add.csv") 

### froude
f_wd_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_s_rf_add.csv")
f_wd_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_s_c_rf_add.csv") 

### shear_stress
s_wd_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_s_rf_add.csv")
s_wd_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_s_c_rf_add.csv") 

### stream_power
sp_wd_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_s_rf_add.csv")
sp_wd_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_s_c_rf_add.csv")

### wd_m
wd_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_s_rf_add.csv")
wd_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_s_c_rf_add.csv")

### x/y
x_wd_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_wd_s_rf_add.csv")
y_wd_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_wd_s_rf_add.csv")

# With abundance as response --------------------------------------------------
### velocity
v_wd_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_wd_a_rf_add.csv")
v_wd_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_wd_a_c_rf_add.csv")

### froude
f_wd_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_a_rf_add.csv")
f_wd_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_a_c_rf_add.csv") 

### shear_stress
s_wd_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_a_rf_add.csv")
s_wd_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_a_c_rf_add.csv") 

### stream_power
sp_wd_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_a_rf_add.csv")
sp_wd_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_a_c_rf_add.csv")

### wd_m
wd_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_a_rf_add.csv")
wd_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_a_c_rf_add.csv")

### x/y
x_wd_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_wd_a_rf_add.csv")
y_wd_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_wd_a_rf_add.csv")

# With rel_abundance as response ---------------------------------------------
### velocity
v_wd_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_wd_ra_rf_add.csv")
v_wd_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_wd_ra_c_rf_add.csv") 

### froude
f_wd_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_ra_rf_add.csv")
f_wd_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_ra_c_rf_add.csv") 

### shear_stress
s_wd_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_ra_rf_add.csv")
s_wd_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_ra_c_rf_add.csv") 

### stream_power
sp_wd_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_ra_rf_add.csv")
sp_wd_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_ra_c_rf_add.csv")

### wd_m
wd_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_ra_rf_add.csv")
wd_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_ra_c_rf_add.csv")

### x/y
x_wd_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_wd_ra_rf_add.csv")
y_wd_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_wd_ra_rf_add.csv")

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
### velocity
v_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_samp_k_rf_add.csv")
v_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_samp_k_c_rf_add.csv") 

### froude
f_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_k_rf_add.csv")
f_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_k_c_rf_add.csv") 

### shear_stress
s_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_k_rf_add.csv")
s_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_k_c_rf_add.csv") 

### stream_power
sp_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_k_rf_add.csv")
sp_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_k_c_rf_add.csv")

### wd_m
wd_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_samp_k_rf_add.csv")
wd_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_samp_k_c_rf_add.csv")

### x/y
x_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_samp_k_rf_add.csv")
y_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_samp_k_rf_add.csv")

### z 
z_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_samp_k_rf_add.csv")
z_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_samp_k_c_rf_add.csv")

### dist_w 
dist_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_samp_k_rf_add.csv")
dist_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_samp_k_c_rf_add.csv")

### cat_v
cv_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_samp_k_rf_add.csv")
cv_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_samp_k_c_rf_add.csv")

### alg_cover 
ac_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_samp_k_rf_add.csv")
ac_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_samp_k_c_rf_add.csv")

### moos_cover 
mc_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_samp_k_rf_add.csv")
mc_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_samp_k_c_rf_add.csv")

### cpom_cover 
cc_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_samp_k_rf_add.csv")
cc_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_samp_k_c_rf_add.csv")

### clog_3 
clog_3_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_k_rf_add.csv")
clog_3_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_k_c_rf_add.csv")

### clog_6 
clog_6_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_k_rf_add.csv")
clog_6_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_k_c_rf_add.csv")

### sub_type
sub_samp_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_samp_k_rf_add.csv")
sub_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_samp_k_c_rf_add.csv")

# With shannon index as response ----------------------------------------------
### velocity
v_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_samp_s_rf_add.csv")
v_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_samp_s_c_rf_add.csv") 

### froude
f_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_s_rf_add.csv")
f_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_s_c_rf_add.csv") 

### shear_stress
s_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_s_rf_add.csv")
s_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_s_c_rf_add.csv") 

### stream_power
sp_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_s_rf_add.csv")
sp_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_s_c_rf_add.csv")

### wd_m
wd_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_samp_s_rf_add.csv")
wd_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_samp_s_c_rf_add.csv")

### x/y
x_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_samp_s_rf_add.csv")
y_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_samp_s_rf_add.csv")

### z 
z_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_samp_s_rf_add.csv")
z_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_samp_s_c_rf_add.csv")

### dist_w 
dist_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_samp_s_rf_add.csv")
dist_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_samp_s_c_rf_add.csv")

### cat_v
cv_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_samp_s_rf_add.csv")
cv_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_samp_s_c_rf_add.csv")

### alg_cover 
ac_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_samp_s_rf_add.csv")
ac_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_samp_s_c_rf_add.csv")

### moos_cover 
mc_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_samp_s_rf_add.csv")
mc_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_samp_s_c_rf_add.csv")

### cpom_cover 
cc_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_samp_s_rf_add.csv")
cc_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_samp_s_c_rf_add.csv")

### clog_3 
clog_3_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_s_rf_add.csv")
clog_3_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_s_c_rf_add.csv")

### clog_6 
clog_6_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_s_rf_add.csv")
clog_6_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_s_c_rf_add.csv")

### sub_type
sub_samp_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_samp_s_rf_add.csv")
sub_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_samp_s_c_rf_add.csv")

# With abundance as response --------------------------------------------------
### velocity
v_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_samp_a_rf_add.csv")
v_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_samp_a_c_rf_add.csv") 

### froude
f_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_a_rf_add.csv")
f_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_a_c_rf_add.csv") 

### shear_stress
s_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_a_rf_add.csv")
s_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_a_c_rf_add.csv") 

### stream_power
sp_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_a_rf_add.csv")
sp_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_a_c_rf_add.csv")

### wd_m
wd_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_samp_a_rf_add.csv")
wd_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_samp_a_c_rf_add.csv")

### x/y
x_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_samp_a_rf_add.csv")
y_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_samp_a_rf_add.csv")

### z 
z_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_samp_a_rf_add.csv")
z_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_samp_a_c_rf_add.csv")

### dist_w 
dist_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_samp_a_rf_add.csv")
dist_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_samp_a_c_rf_add.csv")

### cat_v
cv_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_samp_a_rf_add.csv")
cv_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_samp_a_c_rf_add.csv")

### alg_cover 
ac_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_samp_a_rf_add.csv")
ac_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_samp_a_c_rf_add.csv")

### moos_cover 
mc_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_samp_a_rf_add.csv")
mc_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_samp_a_c_rf_add.csv")

### cpom_cover 
cc_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_samp_a_rf_add.csv")
cc_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_samp_a_c_rf_add.csv")

### clog_3 
clog_3_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_a_rf_add.csv")
clog_3_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_a_c_rf_add.csv")

### clog_6 
clog_6_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_a_rf_add.csv")
clog_6_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_a_c_rf_add.csv")

### sub_type
sub_samp_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_samp_a_rf_add.csv")
sub_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_samp_a_c_rf_add.csv")

# With rel_abundance as response ----------------------------------------------
### velocity
v_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_samp_ra_rf_add.csv")
v_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_samp_ra_c_rf_add.csv") 

### froude
f_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_ra_rf_add.csv")
f_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_ra_c_rf_add.csv") 

### shear_stress
s_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_ra_rf_add.csv")
s_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_ra_c_rf_add.csv") 

### stream_power
sp_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_ra_rf_add.csv")
sp_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_ra_c_rf_add.csv")

### wd_m
wd_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_samp_ra_rf_add.csv")
wd_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_samp_ra_c_rf_add.csv")

### x/y
x_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_samp_ra_rf_add.csv")
y_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_samp_ra_rf_add.csv")

### z 
z_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_samp_ra_rf_add.csv")
z_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_samp_ra_c_rf_add.csv")

### dist_w 
dist_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_samp_ra_rf_add.csv")
dist_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_samp_ra_c_rf_add.csv")

### cat_v
cv_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_samp_ra_rf_add.csv")
cv_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_samp_ra_c_rf_add.csv")

### alg_cover 
ac_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_samp_ra_rf_add.csv")
ac_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_samp_ra_c_rf_add.csv")

### moos_cover 
mc_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_samp_ra_rf_add.csv")
mc_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_samp_ra_c_rf_add.csv")

### cpom_cover 
cc_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_samp_ra_rf_add.csv")
cc_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_samp_ra_c_rf_add.csv")

### clog_3 
clog_3_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_rf_add.csv")
clog_3_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_c_rf_add.csv")

### clog_6 
clog_6_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_rf_add.csv")
clog_6_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_c_rf_add.csv")

### sub_type
sub_samp_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_samp_ra_rf_add.csv")
sub_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_samp_ra_c_rf_add.csv")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity
v_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_sec_k_rf_add.csv")
v_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_sec_k_c_rf_add.csv") 

### froude
f_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_k_rf_add.csv")
f_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_k_c_rf_add.csv") 

### shear_stress
s_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_k_rf_add.csv")
s_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_k_c_rf_add.csv") 

### stream_power
sp_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_k_rf_add.csv")
sp_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_k_c_rf_add.csv")

### wd_m
wd_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_sec_k_rf_add.csv")
wd_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_sec_k_c_rf_add.csv")

### x/y
x_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_sec_k_rf_add.csv")
y_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_sec_k_rf_add.csv")

### z 
z_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_sec_k_rf_add.csv")
z_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_sec_k_c_rf_add.csv")

### dist_w 
dist_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_sec_k_rf_add.csv")
dist_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_sec_k_c_rf_add.csv")

### cat_v
cv_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_sec_k_rf_add.csv")
cv_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_sec_k_c_rf_add.csv")

### alg_cover 
ac_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_sec_k_rf_add.csv")
ac_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_sec_k_c_rf_add.csv")

### moos_cover 
mc_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_sec_k_rf_add.csv")
mc_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_sec_k_c_rf_add.csv")

### cpom_cover 
cc_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_sec_k_rf_add.csv")
cc_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_sec_k_c_rf_add.csv")

### clog_3 
clog_3_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_k_rf_add.csv")
clog_3_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_k_c_rf_add.csv")

### clog_6 
clog_6_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_k_rf_add.csv")
clog_6_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_k_c_rf_add.csv")

### sub_type
sub_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_sec_k_rf_add.csv")
sub_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_sec_k_c_rf_add.csv")

### pH_before
phb_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_phb_sec_k_rf_add.csv")
phb_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_phb_sec_k_c_rf_add.csv")

### pH_during
phd_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_phd_sec_k_rf_add.csv")
phd_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_phd_sec_k_c_rf_add.csv")

### pH_after
pha_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_pha_sec_k_rf_add.csv")
pha_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_pha_sec_k_c_rf_add.csv")

### conduct_before
cb_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_cb_sec_k_rf_add.csv")
cb_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cb_sec_k_c_rf_add.csv")

### conduct_during
cd_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_cd_sec_k_rf_add.csv")
cd_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cd_sec_k_c_rf_add.csv")

### conduct_after
ca_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_ca_sec_k_rf_add.csv")
ca_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ca_sec_k_c_rf_add.csv")

### ox_before
ob_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_ob_sec_k_rf_add.csv")
ob_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ob_sec_k_c_rf_add.csv")

### ox_during
od_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_od_sec_k_rf_add.csv")
od_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_od_sec_k_c_rf_add.csv")

### ox_after
oa_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_oa_sec_k_rf_add.csv")
oa_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_oa_sec_k_c_rf_add.csv")

### turb_before
tb_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_tb_sec_k_rf_add.csv")
tb_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_tb_sec_k_c_rf_add.csv")

### turb_during
td_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_td_sec_k_rf_add.csv")
td_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_td_sec_k_c_rf_add.csv")

### turb_after
ta_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_ta_sec_k_rf_add.csv")
ta_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ta_sec_k_c_rf_add.csv")

### temp_before
teb_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_teb_sec_k_rf_add.csv")
teb_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_teb_sec_k_c_rf_add.csv")

### temp_during
ted_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_ted_sec_k_rf_add.csv")
ted_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ted_sec_k_c_rf_add.csv")

### temp_after
tea_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_tea_sec_k_rf_add.csv")
tea_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_tea_sec_k_c_rf_add.csv")

### q_before
qb_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_qb_sec_k_rf_add.csv")
qb_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_qb_sec_k_c_rf_add.csv")

### q_during
qd_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_qd_sec_k_rf_add.csv")
qd_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_qd_sec_k_c_rf_add.csv")

### q_after
qa_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_qa_sec_k_rf_add.csv")
qa_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_qa_sec_k_c_rf_add.csv")

### gaug_before
gb_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_gb_sec_k_rf_add.csv")
gb_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_gb_sec_k_c_rf_add.csv")

### gaug_during
gd_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_gd_sec_k_rf_add.csv")
gd_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_gd_sec_k_c_rf_add.csv")

### gaug_after
ga_sec_k_rf_add <- read_delim("ML_Model/pdp_data/pdp_ga_sec_k_rf_add.csv")
ga_sec_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ga_sec_k_c_rf_add.csv")

# With shannon index as response ----------------------------------------------
### velocity
v_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_sec_s_rf_add.csv")
v_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_sec_s_c_rf_add.csv") 

### froude
f_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_s_rf_add.csv")
f_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_s_c_rf_add.csv") 

### shear_stress
s_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_s_rf_add.csv")
s_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_s_c_rf_add.csv") 

### stream_power
sp_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_s_rf_add.csv")
sp_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_s_c_rf_add.csv")

### wd_m
wd_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_sec_s_rf_add.csv")
wd_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_sec_s_c_rf_add.csv")

### x/y
x_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_sec_s_rf_add.csv")
y_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_sec_s_rf_add.csv")

### z 
z_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_sec_s_rf_add.csv")
z_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_sec_s_c_rf_add.csv")

### dist_w 
dist_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_sec_s_rf_add.csv")
dist_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_sec_s_c_rf_add.csv")

### cat_v
cv_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_sec_s_rf_add.csv")
cv_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_sec_s_c_rf_add.csv")

### alg_cover 
ac_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_sec_s_rf_add.csv")
ac_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_sec_s_c_rf_add.csv")

### moos_cover 
mc_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_sec_s_rf_add.csv")
mc_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_sec_s_c_rf_add.csv")

### cpom_cover 
cc_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_sec_s_rf_add.csv")
cc_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_sec_s_c_rf_add.csv")

### clog_3 
clog_3_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_s_rf_add.csv")
clog_3_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_s_c_rf_add.csv")

### clog_6 
clog_6_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_s_rf_add.csv")
clog_6_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_s_c_rf_add.csv")

### sub_type
sub_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_sec_s_rf_add.csv")
sub_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_sec_s_c_rf_add.csv")

### pH_before
phb_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_phb_sec_s_rf_add.csv")
phb_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_phb_sec_s_c_rf_add.csv")

### pH_during
phd_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_phd_sec_s_rf_add.csv")
phd_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_phd_sec_s_c_rf_add.csv")

### pH_after
pha_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_pha_sec_s_rf_add.csv")
pha_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_pha_sec_s_c_rf_add.csv")

### conduct_before
cb_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_cb_sec_s_rf_add.csv")
cb_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cb_sec_s_c_rf_add.csv")

### conduct_during
cd_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_cd_sec_s_rf_add.csv")
cd_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cd_sec_s_c_rf_add.csv")

### conduct_after
ca_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_ca_sec_s_rf_add.csv")
ca_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ca_sec_s_c_rf_add.csv")

### ox_before
ob_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_ob_sec_s_rf_add.csv")
ob_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ob_sec_s_c_rf_add.csv")

### ox_during
od_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_od_sec_s_rf_add.csv")
od_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_od_sec_s_c_rf_add.csv")

### ox_after
oa_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_oa_sec_s_rf_add.csv")
oa_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_oa_sec_s_c_rf_add.csv")

### turb_before
tb_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_tb_sec_s_rf_add.csv")
tb_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_tb_sec_s_c_rf_add.csv")

### turb_during
td_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_td_sec_s_rf_add.csv")
td_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_td_sec_s_c_rf_add.csv")

### turb_after
ta_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_ta_sec_s_rf_add.csv")
ta_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ta_sec_s_c_rf_add.csv")

### temp_before
teb_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_teb_sec_s_rf_add.csv")
teb_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_teb_sec_s_c_rf_add.csv")

### temp_during
ted_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_ted_sec_s_rf_add.csv")
ted_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ted_sec_s_c_rf_add.csv")

### temp_after
tea_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_tea_sec_s_rf_add.csv")
tea_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_tea_sec_s_c_rf_add.csv")

### q_before
qb_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_qb_sec_s_rf_add.csv")
qb_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_qb_sec_s_c_rf_add.csv")

### q_during
qd_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_qd_sec_s_rf_add.csv")
qd_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_qd_sec_s_c_rf_add.csv")

### q_after
qa_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_qa_sec_s_rf_add.csv")
qa_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_qa_sec_s_c_rf_add.csv")

### gaug_before
gb_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_gb_sec_s_rf_add.csv")
gb_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_gb_sec_s_c_rf_add.csv")

### gaug_during
gd_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_gd_sec_s_rf_add.csv")
gd_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_gd_sec_s_c_rf_add.csv")

### gaug_after
ga_sec_s_rf_add <- read_delim("ML_Model/pdp_data/pdp_ga_sec_s_rf_add.csv")
ga_sec_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ga_sec_s_c_rf_add.csv")

# With abundance as response --------------------------------------------------
### velocity
v_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_sec_a_rf_add.csv")
v_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_sec_a_c_rf_add.csv") 

### froude
f_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_a_rf_add.csv")
f_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_a_c_rf_add.csv") 

### shear_stress
s_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_a_rf_add.csv")
s_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_a_c_rf_add.csv") 

### stream_power
sp_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_a_rf_add.csv")
sp_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_a_c_rf_add.csv")

### wd_m
wd_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_sec_a_rf_add.csv")
wd_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_sec_a_c_rf_add.csv")

### x/y
x_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_sec_a_rf_add.csv")
y_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_sec_a_rf_add.csv")

### z 
z_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_sec_a_rf_add.csv")
z_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_sec_a_c_rf_add.csv")

### dist_w 
dist_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_sec_a_rf_add.csv")
dist_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_sec_a_c_rf_add.csv")

### cat_v
cv_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_sec_a_rf_add.csv")
cv_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_sec_a_c_rf_add.csv")

### alg_cover 
ac_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_sec_a_rf_add.csv")
ac_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_sec_a_c_rf_add.csv")

### moos_cover 
mc_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_sec_a_rf_add.csv")
mc_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_sec_a_c_rf_add.csv")

### cpom_cover 
cc_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_sec_a_rf_add.csv")
cc_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_sec_a_c_rf_add.csv")

### clog_3 
clog_3_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_a_rf_add.csv")
clog_3_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_a_c_rf_add.csv")

### clog_6 
clog_6_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_a_rf_add.csv")
clog_6_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_a_c_rf_add.csv")

### sub_type
sub_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_sec_a_rf_add.csv")
sub_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_sec_a_c_rf_add.csv")

### pH_before
phb_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_phb_sec_a_rf_add.csv")
phb_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_phb_sec_a_c_rf_add.csv")

### pH_during
phd_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_phd_sec_a_rf_add.csv")
phd_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_phd_sec_a_c_rf_add.csv")

### pH_after
pha_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_pha_sec_a_rf_add.csv")
pha_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_pha_sec_a_c_rf_add.csv")

### conduct_before
cb_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_cb_sec_a_rf_add.csv")
cb_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cb_sec_a_c_rf_add.csv")

### conduct_during
cd_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_cd_sec_a_rf_add.csv")
cd_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cd_sec_a_c_rf_add.csv")

### conduct_after
ca_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_ca_sec_a_rf_add.csv")
ca_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ca_sec_a_c_rf_add.csv")

### ox_before
ob_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_ob_sec_a_rf_add.csv")
ob_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ob_sec_a_c_rf_add.csv")

### ox_during
od_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_od_sec_a_rf_add.csv")
od_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_od_sec_a_c_rf_add.csv")

### ox_after
oa_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_oa_sec_a_rf_add.csv")
oa_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_oa_sec_a_c_rf_add.csv")

### turb_before
tb_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_tb_sec_a_rf_add.csv")
tb_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_tb_sec_a_c_rf_add.csv")

### turb_during
td_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_td_sec_a_rf_add.csv")
td_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_td_sec_a_c_rf_add.csv")

### turb_after
ta_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_ta_sec_a_rf_add.csv")
ta_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ta_sec_a_c_rf_add.csv")

### temp_before
teb_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_teb_sec_a_rf_add.csv")
teb_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_teb_sec_a_c_rf_add.csv")

### temp_during
ted_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_ted_sec_a_rf_add.csv")
ted_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ted_sec_a_c_rf_add.csv")

### temp_after
tea_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_tea_sec_a_rf_add.csv")
tea_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_tea_sec_a_c_rf_add.csv")

### q_before
qb_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_qb_sec_a_rf_add.csv")
qb_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_qb_sec_a_c_rf_add.csv")

### q_during
qd_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_qd_sec_a_rf_add.csv")
qd_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_qd_sec_a_c_rf_add.csv")

### q_after
qa_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_qa_sec_a_rf_add.csv")
qa_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_qa_sec_a_c_rf_add.csv")

### gaug_before
gb_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_gb_sec_a_rf_add.csv")
gb_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_gb_sec_a_c_rf_add.csv")

### gaug_during
gd_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_gd_sec_a_rf_add.csv")
gd_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_gd_sec_a_c_rf_add.csv")

### gaug_after
ga_sec_a_rf_add <- read_delim("ML_Model/pdp_data/pdp_ga_sec_a_rf_add.csv")
ga_sec_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ga_sec_a_c_rf_add.csv")

# With relative abundance as response -----------------------------------------
### velocity
v_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_sec_ra_rf_add.csv")
v_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_sec_ra_c_rf_add.csv") 

### froude
f_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_ra_rf_add.csv")
f_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_ra_c_rf_add.csv") 

### shear_stress
s_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_ra_rf_add.csv")
s_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_ra_c_rf_add.csv") 

### stream_power
sp_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_ra_rf_add.csv")
sp_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_ra_c_rf_add.csv")

### wd_m
wd_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_sec_ra_rf_add.csv")
wd_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_sec_ra_c_rf_add.csv")

### x/y
x_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_x_sec_ra_rf_add.csv")
y_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_y_sec_ra_rf_add.csv")

### z 
z_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_sec_ra_rf_add.csv")
z_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_sec_ra_c_rf_add.csv")

### dist_w 
dist_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_sec_ra_rf_add.csv")
dist_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_sec_ra_c_rf_add.csv")

### cat_v
cv_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_sec_ra_rf_add.csv")
cv_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_sec_ra_c_rf_add.csv")

### alg_cover 
ac_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_sec_ra_rf_add.csv")
ac_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_sec_ra_c_rf_add.csv")

### moos_cover 
mc_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_sec_ra_rf_add.csv")
mc_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_sec_ra_c_rf_add.csv")

### cpom_cover 
cc_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_sec_ra_rf_add.csv")
cc_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_sec_ra_c_rf_add.csv")

### clog_3 
clog_3_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_ra_rf_add.csv")
clog_3_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_sec_ra_c_rf_add.csv")

### clog_6 
clog_6_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_ra_rf_add.csv")
clog_6_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_sec_ra_c_rf_add.csv")

### sub_type
sub_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_sec_ra_rf_add.csv")
sub_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_sec_ra_c_rf_add.csv")

### pH_before
phb_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_phb_sec_ra_rf_add.csv")
phb_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_phb_sec_ra_c_rf_add.csv")

### pH_during
phd_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_phd_sec_ra_rf_add.csv")
phd_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_phd_sec_ra_c_rf_add.csv")

### pH_after
pha_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_pha_sec_ra_rf_add.csv")
pha_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_pha_sec_ra_c_rf_add.csv")

### conduct_before
cb_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_cb_sec_ra_rf_add.csv")
cb_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cb_sec_ra_c_rf_add.csv")

### conduct_during
cd_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_cd_sec_ra_rf_add.csv")
cd_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cd_sec_ra_c_rf_add.csv")

### conduct_after
ca_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_ca_sec_ra_rf_add.csv")
ca_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ca_sec_ra_c_rf_add.csv")

### ox_before
ob_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_ob_sec_ra_rf_add.csv")
ob_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ob_sec_ra_c_rf_add.csv")

### ox_during
od_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_od_sec_ra_rf_add.csv")
od_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_od_sec_ra_c_rf_add.csv")

### ox_after
oa_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_oa_sec_ra_rf_add.csv")
oa_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_oa_sec_ra_c_rf_add.csv")

### turb_before
tb_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_tb_sec_ra_rf_add.csv")
tb_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_tb_sec_ra_c_rf_add.csv")

### turb_during
td_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_td_sec_ra_rf_add.csv")
td_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_td_sec_ra_c_rf_add.csv")

### turb_after
ta_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_ta_sec_ra_rf_add.csv")
ta_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ta_sec_ra_c_rf_add.csv")

### temp_before
teb_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_teb_sec_ra_rf_add.csv")
teb_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_teb_sec_ra_c_rf_add.csv")

### temp_during
ted_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_ted_sec_ra_rf_add.csv")
ted_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ted_sec_ra_c_rf_add.csv")

### temp_after
tea_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_tea_sec_ra_rf_add.csv")
tea_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_tea_sec_ra_c_rf_add.csv")

### q_before
qb_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_qb_sec_ra_rf_add.csv")
qb_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_qb_sec_ra_c_rf_add.csv")

### q_during
qd_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_qd_sec_ra_rf_add.csv")
qd_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_qd_sec_ra_c_rf_add.csv")

### q_after
qa_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_qa_sec_ra_rf_add.csv")
qa_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_qa_sec_ra_c_rf_add.csv")

### gaug_before
gb_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_gb_sec_ra_rf_add.csv")
gb_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_gb_sec_ra_c_rf_add.csv")

### gaug_during
gd_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_gd_sec_ra_rf_add.csv")
gd_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_gd_sec_ra_c_rf_add.csv")

### gaug_after
ga_sec_ra_rf_add <- read_delim("ML_Model/pdp_data/pdp_ga_sec_ra_rf_add.csv")
ga_sec_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ga_sec_ra_c_rf_add.csv")
```

## BRT normal 
```{r}
### PREDICTOR: VELOCITY ### -------------------------------------------------
# With k_index as response --------------------------------------------------
### velocity
v_k_brt <- read.delim("ML_Model/pdp_data/pdp_v_k_brt.csv", sep = ",")
v_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_k_c_brt.csv", sep = ",")

### x/y
x_v_k_brt <- read.delim("ML_Model/pdp_data/pdp_x_v_k_brt.csv", sep = ",")
y_v_k_brt <- read.delim("ML_Model/pdp_data/pdp_y_v_k_brt.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_s_brt <- read.delim("ML_Model/pdp_data/pdp_v_s_brt.csv", sep = ",")
v_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_s_c_brt.csv", sep = ",")

### x/y
x_v_s_brt <- read.delim("ML_Model/pdp_data/pdp_x_v_s_brt.csv", sep = ",")
y_v_s_brt <- read.delim("ML_Model/pdp_data/pdp_y_v_s_brt.csv", sep = ",")

# With abundance as response --------------------------------------------------
### velocity 
v_a_brt <- read.delim("ML_Model/pdp_data/pdp_v_a_brt.csv", sep = ",")
v_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_a_c_brt.csv", sep = ",")

### x/y
x_v_a_brt <- read.delim("ML_Model/pdp_data/pdp_x_v_a_brt.csv", sep = ",")
y_v_a_brt <- read.delim("ML_Model/pdp_data/pdp_y_v_a_brt.csv", sep = ",")

# With rel_abundance as response ----------------------------------------------
### velocity 
v_ra_brt <- read.delim("ML_Model/pdp_data/pdp_v_ra_brt.csv", sep = ",")
v_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_ra_c_brt.csv", sep = ",")

### x/y
x_v_ra_brt <- read.delim("ML_Model/pdp_data/pdp_x_v_ra_brt.csv", sep = ",")
y_v_ra_brt <- read.delim("ML_Model/pdp_data/pdp_y_v_ra_brt.csv", sep = ",")

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
v_wd_k_brt <- read.delim("ML_Model/pdp_data/pdp_v_wd_k_brt.csv", sep = ",")
v_wd_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_wd_k_c_brt.csv", sep = ",")

### wd_m 
wd_k_brt <- read.delim("ML_Model/pdp_data/pdp_wd_k_brt.csv", sep = ",")
wd_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_k_c_brt.csv", sep = ",")

### x/y
x_wd_k_brt <- read.delim("ML_Model/pdp_data/pdp_x_wd_k_brt.csv", sep = ",")
y_wd_k_brt <- read.delim("ML_Model/pdp_data/pdp_y_wd_k_brt.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_wd_s_brt <- read.delim("ML_Model/pdp_data/pdp_v_wd_s_brt.csv", sep = ",")
v_wd_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_wd_s_c_brt.csv", sep = ",")

### wd_m 
wd_s_brt <- read.delim("ML_Model/pdp_data/pdp_wd_s_brt.csv", sep = ",")
wd_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_s_c_brt.csv", sep = ",")

### x/y
x_wd_s_brt <- read.delim("ML_Model/pdp_data/pdp_x_wd_s_brt.csv", sep = ",")
y_wd_s_brt <- read.delim("ML_Model/pdp_data/pdp_y_wd_s_brt.csv", sep = ",")

# With abundance as response --------------------------------------------------
### velocity 
v_wd_a_brt <- read.delim("ML_Model/pdp_data/pdp_v_wd_a_brt.csv", sep = ",")
v_wd_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_wd_a_c_brt.csv", sep = ",")

### wd_m 
wd_a_brt <- read.delim("ML_Model/pdp_data/pdp_wd_a_brt.csv", sep = ",")
wd_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_a_c_brt.csv", sep = ",")

### x/y
x_wd_a_brt <- read.delim("ML_Model/pdp_data/pdp_x_wd_a_brt.csv", sep = ",")
y_wd_a_brt <- read.delim("ML_Model/pdp_data/pdp_y_wd_a_brt.csv", sep = ",")

# With rel_abundance as response ---------------------------------------------
### velocity 
v_wd_ra_brt <- read.delim("ML_Model/pdp_data/pdp_v_wd_ra_brt.csv", sep = ",")
v_wd_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_wd_ra_c_brt.csv", sep = ",")

### wd_m 
wd_ra_brt <- read.delim("ML_Model/pdp_data/pdp_wd_ra_brt.csv", sep = ",")
wd_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_ra_c_brt.csv", sep = ",")

### x/y
x_wd_ra_brt <- read.delim("ML_Model/pdp_data/pdp_x_wd_ra_brt.csv", sep = ",")
y_wd_ra_brt <- read.delim("ML_Model/pdp_data/pdp_y_wd_ra_brt.csv", sep = ",")

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
v_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_v_samp_k_brt.csv", sep = ",")
v_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_samp_k_c_brt.csv", sep = ",")

### wd_m 
wd_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_wd_samp_k_brt.csv", sep = ",")
wd_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_samp_k_c_brt.csv", sep = ",")

### x/y
x_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_x_samp_k_brt.csv", sep = ",")
y_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_y_samp_k_brt.csv", sep = ",")

### z 
z_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_z_samp_k_brt.csv", sep = ",")
z_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_z_samp_k_c_brt.csv", sep = ",")

### dist_w 
dist_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_dist_samp_k_brt.csv", sep = ",")
dist_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_dist_samp_k_c_brt.csv", sep = ",")

### cat_v 
cv_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_cv_samp_k_brt.csv", sep = ",")
cv_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_cv_samp_k_c_brt.csv", sep = ",")

### alg_cover 
ac_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_ac_samp_k_brt.csv", sep = ",")
ac_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_ac_samp_k_c_brt.csv", sep = ",")

### moos_cover 
mc_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_mc_samp_k_brt.csv", sep = ",")
mc_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_mc_samp_k_c_brt.csv", sep = ",")

### cpom_cover 
cc_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_cc_samp_k_brt.csv", sep = ",")
cc_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_cc_samp_k_c_brt.csv", sep = ",")

### clog_3 
clog_3_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_k_brt.csv", sep = ",")
clog_3_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_k_c_brt.csv", sep = ",")

### clog_6
clog_6_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_k_brt.csv", sep = ",")
clog_6_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_k_c_brt.csv", sep = ",")

### sub_type
sub_samp_k_brt <- read.delim("ML_Model/pdp_data/pdp_sub_samp_k_brt.csv", sep = ",")
sub_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_sub_samp_k_c_brt.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_v_samp_s_brt.csv", sep = ",")
v_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_samp_s_c_brt.csv", sep = ",")

### wd_m 
wd_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_wd_samp_s_brt.csv", sep = ",")
wd_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_samp_s_c_brt.csv", sep = ",")

### x/y
x_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_x_samp_s_brt.csv", sep = ",")
y_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_y_samp_s_brt.csv", sep = ",")

### z 
z_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_z_samp_s_brt.csv", sep = ",")
z_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_z_samp_s_c_brt.csv", sep = ",")

### dist_w 
dist_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_dist_samp_s_brt.csv", sep = ",")
dist_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_dist_samp_s_c_brt.csv", sep = ",")

### cat_v 
cv_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_cv_samp_s_brt.csv", sep = ",")
cv_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_cv_samp_s_c_brt.csv", sep = ",")

### alg_cover 
ac_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_ac_samp_s_brt.csv", sep = ",")
ac_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_ac_samp_s_c_brt.csv", sep = ",")

### moos_cover 
mc_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_mc_samp_s_brt.csv", sep = ",")
mc_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_mc_samp_s_c_brt.csv", sep = ",")

### cpom_cover 
cc_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_cc_samp_s_brt.csv", sep = ",")
cc_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_cc_samp_s_c_brt.csv", sep = ",")

### clog_3 
clog_3_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_s_brt.csv", sep = ",")
clog_3_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_s_c_brt.csv", sep = ",")

### clog_6
clog_6_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_s_brt.csv", sep = ",")
clog_6_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_s_c_brt.csv", sep = ",")

### sub_type
sub_samp_s_brt <- read.delim("ML_Model/pdp_data/pdp_sub_samp_s_brt.csv", sep = ",")
sub_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_sub_samp_s_c_brt.csv", sep = ",")

# With abundance as response --------------------------------------------------
### velocity 
v_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_v_samp_a_brt.csv", sep = ",")
v_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_samp_a_c_brt.csv", sep = ",")

### wd_m 
wd_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_wd_samp_a_brt.csv", sep = ",")
wd_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_samp_a_c_brt.csv", sep = ",")

### x/y
x_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_x_samp_a_brt.csv", sep = ",")
y_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_y_samp_a_brt.csv", sep = ",")

### z 
z_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_z_samp_a_brt.csv", sep = ",")
z_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_z_samp_a_c_brt.csv", sep = ",")

### dist_w 
dist_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_dist_samp_a_brt.csv", sep = ",")
dist_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_dist_samp_a_c_brt.csv", sep = ",")

### cat_v 
cv_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_cv_samp_a_brt.csv", sep = ",")
cv_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_cv_samp_a_c_brt.csv", sep = ",")

### alg_cover 
ac_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_ac_samp_a_brt.csv", sep = ",")
ac_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_ac_samp_a_c_brt.csv", sep = ",")

### moos_cover 
mc_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_mc_samp_a_brt.csv", sep = ",")
mc_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_mc_samp_a_c_brt.csv", sep = ",")

### cpom_cover 
cc_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_cc_samp_a_brt.csv", sep = ",")
cc_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_cc_samp_a_c_brt.csv", sep = ",")

### clog_3 
clog_3_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_a_brt.csv", sep = ",")
clog_3_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_a_c_brt.csv", sep = ",")

### clog_6
clog_6_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_a_brt.csv", sep = ",")
clog_6_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_a_c_brt.csv", sep = ",")

### sub_type
sub_samp_a_brt <- read.delim("ML_Model/pdp_data/pdp_sub_samp_a_brt.csv", sep = ",")
sub_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_sub_samp_a_c_brt.csv", sep = ",")

# With rel_abundance as response ----------------------------------------------
### velocity 
v_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_v_samp_ra_brt.csv", sep = ",")
v_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_samp_ra_c_brt.csv", sep = ",")

### wd_m 
wd_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_wd_samp_ra_brt.csv", sep = ",")
wd_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_samp_ra_c_brt.csv", sep = ",")

### x/y
x_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_x_samp_ra_brt.csv", sep = ",")
y_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_y_samp_ra_brt.csv", sep = ",")

### z 
z_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_z_samp_ra_brt.csv", sep = ",")
z_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_z_samp_ra_c_brt.csv", sep = ",")

### dist_w 
dist_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_dist_samp_ra_brt.csv", sep = ",")
dist_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_dist_samp_ra_c_brt.csv", sep = ",")

### cat_v 
cv_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_cv_samp_ra_brt.csv", sep = ",")
cv_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_cv_samp_ra_c_brt.csv", sep = ",")

### alg_cover 
ac_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_ac_samp_ra_brt.csv", sep = ",")
ac_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_ac_samp_ra_c_brt.csv", sep = ",")

### moos_cover 
mc_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_mc_samp_ra_brt.csv", sep = ",")
mc_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_mc_samp_ra_c_brt.csv", sep = ",")

### cpom_cover 
cc_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_cc_samp_ra_brt.csv", sep = ",")
cc_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_cc_samp_ra_c_brt.csv", sep = ",")

### clog_3 
clog_3_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_brt.csv", sep = ",")
clog_3_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_c_brt.csv", sep = ",")

### clog_6
clog_6_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_brt.csv", sep = ",")
clog_6_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_c_brt.csv", sep = ",")

### sub_type
sub_samp_ra_brt <- read.delim("ML_Model/pdp_data/pdp_sub_samp_ra_brt.csv", sep = ",")
sub_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_sub_samp_ra_c_brt.csv", sep = ",")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
v_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_v_sec_k_brt.csv", sep = ",")
v_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_sec_k_c_brt.csv", sep = ",")

### wd_m 
wd_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_wd_sec_k_brt.csv", sep = ",")
wd_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_sec_k_c_brt.csv", sep = ",")

### x/y
x_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_x_sec_k_brt.csv", sep = ",")
y_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_y_sec_k_brt.csv", sep = ",")

### z 
z_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_z_sec_k_brt.csv", sep = ",")
z_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_z_sec_k_c_brt.csv", sep = ",")

### dist_w 
dist_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_dist_sec_k_brt.csv", sep = ",")
dist_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_dist_sec_k_c_brt.csv", sep = ",")

### cat_v 
cv_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_cv_sec_k_brt.csv", sep = ",")
cv_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_cv_sec_k_c_brt.csv", sep = ",")

### alg_cover 
ac_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_ac_sec_k_brt.csv", sep = ",")
ac_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_ac_sec_k_c_brt.csv", sep = ",")

### moos_cover 
mc_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_mc_sec_k_brt.csv", sep = ",")
mc_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_mc_sec_k_c_brt.csv", sep = ",")

### cpom_cover 
cc_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_cc_sec_k_brt.csv", sep = ",")
cc_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_cc_sec_k_c_brt.csv", sep = ",")

### clog_3 
clog_3_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_k_brt.csv", sep = ",")
clog_3_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_k_c_brt.csv", sep = ",")

### clog_6
clog_6_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_k_brt.csv", sep = ",")
clog_6_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_k_c_brt.csv", sep = ",")

### sub_type
sub_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_sub_sec_k_brt.csv", sep = ",")
sub_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_sub_sec_k_c_brt.csv", sep = ",")

### pH_before
phb_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_phb_sec_k_brt.csv", sep = ",")
phb_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_phb_sec_k_c_brt.csv", sep = ",")

### pH_during
phd_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_phd_sec_k_brt.csv", sep = ",")
phd_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_phd_sec_k_c_brt.csv", sep = ",")

### pH_after
pha_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_pha_sec_k_brt.csv", sep = ",")
pha_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_pha_sec_k_c_brt.csv", sep = ",")

### conduct_before
cb_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_cb_sec_k_brt.csv", sep = ",")
cb_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_cb_sec_k_c_brt.csv", sep = ",")

### conduct_during
cd_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_cd_sec_k_brt.csv", sep = ",")
cd_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_cd_sec_k_c_brt.csv", sep = ",")

### conduct_after
ca_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_ca_sec_k_brt.csv", sep = ",")
ca_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_ca_sec_k_c_brt.csv", sep = ",")

### ox_before
ob_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_ob_sec_k_brt.csv", sep = ",")
ob_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_ob_sec_k_c_brt.csv", sep = ",")

### ox_during
od_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_od_sec_k_brt.csv", sep = ",")
od_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_od_sec_k_c_brt.csv", sep = ",")

### ox_after
oa_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_oa_sec_k_brt.csv", sep = ",")
oa_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_oa_sec_k_c_brt.csv", sep = ",")

### turb_before
tb_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_tb_sec_k_brt.csv", sep = ",")
tb_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_tb_sec_k_c_brt.csv", sep = ",")

### turb_during
td_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_td_sec_k_brt.csv", sep = ",")
td_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_td_sec_k_c_brt.csv", sep = ",")

### turb_after
ta_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_ta_sec_k_brt.csv", sep = ",")
ta_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_ta_sec_k_c_brt.csv", sep = ",")

### temp_before
teb_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_teb_sec_k_brt.csv", sep = ",")
teb_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_teb_sec_k_c_brt.csv", sep = ",")

### temp_during
ted_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_ted_sec_k_brt.csv", sep = ",")
ted_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_ted_sec_k_c_brt.csv", sep = ",")

### temp_after
tea_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_tea_sec_k_brt.csv", sep = ",")
tea_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_tea_sec_k_c_brt.csv", sep = ",")

### q_before
qb_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_qb_sec_k_brt.csv", sep = ",")
qb_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_qb_sec_k_c_brt.csv", sep = ",")

### q_during
qd_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_qd_sec_k_brt.csv", sep = ",")
qd_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_qd_sec_k_c_brt.csv", sep = ",")

### q_after
qa_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_qa_sec_k_brt.csv", sep = ",")
qa_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_qa_sec_k_c_brt.csv", sep = ",")

### gaug_before
gb_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_gb_sec_k_brt.csv", sep = ",")
gb_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_gb_sec_k_c_brt.csv", sep = ",")

### gaug_during
gd_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_gd_sec_k_brt.csv", sep = ",")
gd_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_gd_sec_k_c_brt.csv", sep = ",")

### gaug_after
ga_sec_k_brt <- read.delim("ML_Model/pdp_data/pdp_ga_sec_k_brt.csv", sep = ",")
ga_sec_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_ga_sec_k_c_brt.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_v_sec_s_brt.csv", sep = ",")
v_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_sec_s_c_brt.csv", sep = ",")

### wd_m 
wd_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_wd_sec_s_brt.csv", sep = ",")
wd_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_sec_s_c_brt.csv", sep = ",")

### x/y
x_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_x_sec_s_brt.csv", sep = ",")
y_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_y_sec_s_brt.csv", sep = ",")

### z 
z_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_z_sec_s_brt.csv", sep = ",")
z_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_z_sec_s_c_brt.csv", sep = ",")

### dist_w 
dist_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_dist_sec_s_brt.csv", sep = ",")
dist_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_dist_sec_s_c_brt.csv", sep = ",")

### cat_v 
cv_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_cv_sec_s_brt.csv", sep = ",")
cv_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_cv_sec_s_c_brt.csv", sep = ",")

### alg_cover 
ac_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_ac_sec_s_brt.csv", sep = ",")
ac_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_ac_sec_s_c_brt.csv", sep = ",")

### moos_cover 
mc_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_mc_sec_s_brt.csv", sep = ",")
mc_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_mc_sec_s_c_brt.csv", sep = ",")

### cpom_cover 
cc_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_cc_sec_s_brt.csv", sep = ",")
cc_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_cc_sec_s_c_brt.csv", sep = ",")

### clog_3 
clog_3_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_s_brt.csv", sep = ",")
clog_3_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_s_c_brt.csv", sep = ",")

### clog_6
clog_6_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_s_brt.csv", sep = ",")
clog_6_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_s_c_brt.csv", sep = ",")

### sub_type
sub_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_sub_sec_s_brt.csv", sep = ",")
sub_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_sub_sec_s_c_brt.csv", sep = ",")

### pH_before
phb_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_phb_sec_s_brt.csv", sep = ",")
phb_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_phb_sec_s_c_brt.csv", sep = ",")

### pH_during
phd_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_phd_sec_s_brt.csv", sep = ",")
phd_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_phd_sec_s_c_brt.csv", sep = ",")

### pH_after
pha_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_pha_sec_s_brt.csv", sep = ",")
pha_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_pha_sec_s_c_brt.csv", sep = ",")

### conduct_before
cb_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_cb_sec_s_brt.csv", sep = ",")
cb_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_cb_sec_s_c_brt.csv", sep = ",")

### conduct_during
cd_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_cd_sec_s_brt.csv", sep = ",")
cd_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_cd_sec_s_c_brt.csv", sep = ",")

### conduct_after
ca_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_ca_sec_s_brt.csv", sep = ",")
ca_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_ca_sec_s_c_brt.csv", sep = ",")

### ox_before
ob_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_ob_sec_s_brt.csv", sep = ",")
ob_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_ob_sec_s_c_brt.csv", sep = ",")

### ox_during
od_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_od_sec_s_brt.csv", sep = ",")
od_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_od_sec_s_c_brt.csv", sep = ",")

### ox_after
oa_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_oa_sec_s_brt.csv", sep = ",")
oa_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_oa_sec_s_c_brt.csv", sep = ",")

### turb_before
tb_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_tb_sec_s_brt.csv", sep = ",")
tb_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_tb_sec_s_c_brt.csv", sep = ",")

### turb_during
td_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_td_sec_s_brt.csv", sep = ",")
td_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_td_sec_s_c_brt.csv", sep = ",")

### turb_after
ta_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_ta_sec_s_brt.csv", sep = ",")
ta_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_ta_sec_s_c_brt.csv", sep = ",")

### temp_before
teb_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_teb_sec_s_brt.csv", sep = ",")
teb_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_teb_sec_s_c_brt.csv", sep = ",")

### temp_during
ted_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_ted_sec_s_brt.csv", sep = ",")
ted_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_ted_sec_s_c_brt.csv", sep = ",")

### temp_after
tea_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_tea_sec_s_brt.csv", sep = ",")
tea_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_tea_sec_s_c_brt.csv", sep = ",")

### q_before
qb_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_qb_sec_s_brt.csv", sep = ",")
qb_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_qb_sec_s_c_brt.csv", sep = ",")

### q_during
qd_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_qd_sec_s_brt.csv", sep = ",")
qd_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_qd_sec_s_c_brt.csv", sep = ",")

### q_after
qa_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_qa_sec_s_brt.csv", sep = ",")
qa_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_qa_sec_s_c_brt.csv", sep = ",")

### gaug_before
gb_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_gb_sec_s_brt.csv", sep = ",")
gb_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_gb_sec_s_c_brt.csv", sep = ",")

### gaug_during
gd_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_gd_sec_s_brt.csv", sep = ",")
gd_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_gd_sec_s_c_brt.csv", sep = ",")

### gaug_after
ga_sec_s_brt <- read.delim("ML_Model/pdp_data/pdp_ga_sec_s_brt.csv", sep = ",")
ga_sec_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_ga_sec_s_c_brt.csv", sep = ",")

# With abundance as response ----------------------------------------------
### velocity 
v_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_v_sec_a_brt.csv", sep = ",")
v_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_sec_a_c_brt.csv", sep = ",")

### wd_m 
wd_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_wd_sec_a_brt.csv", sep = ",")
wd_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_sec_a_c_brt.csv", sep = ",")

### x/y
x_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_x_sec_a_brt.csv", sep = ",")
y_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_y_sec_a_brt.csv", sep = ",")

### z 
z_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_z_sec_a_brt.csv", sep = ",")
z_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_z_sec_a_c_brt.csv", sep = ",")

### dist_w 
dist_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_dist_sec_a_brt.csv", sep = ",")
dist_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_dist_sec_a_c_brt.csv", sep = ",")

### cat_v 
cv_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_cv_sec_a_brt.csv", sep = ",")
cv_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_cv_sec_a_c_brt.csv", sep = ",")

### alg_cover 
ac_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_ac_sec_a_brt.csv", sep = ",")
ac_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_ac_sec_a_c_brt.csv", sep = ",")

### moos_cover 
mc_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_mc_sec_a_brt.csv", sep = ",")
mc_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_mc_sec_a_c_brt.csv", sep = ",")

### cpom_cover 
cc_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_cc_sec_a_brt.csv", sep = ",")
cc_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_cc_sec_a_c_brt.csv", sep = ",")

### clog_3 
clog_3_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_a_brt.csv", sep = ",")
clog_3_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_a_c_brt.csv", sep = ",")

### clog_6
clog_6_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_a_brt.csv", sep = ",")
clog_6_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_a_c_brt.csv", sep = ",")

### sub_type
sub_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_sub_sec_a_brt.csv", sep = ",")
sub_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_sub_sec_a_c_brt.csv", sep = ",")

### pH_before
phb_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_phb_sec_a_brt.csv", sep = ",")
phb_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_phb_sec_a_c_brt.csv", sep = ",")

### pH_during
phd_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_phd_sec_a_brt.csv", sep = ",")
phd_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_phd_sec_a_c_brt.csv", sep = ",")

### pH_after
pha_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_pha_sec_a_brt.csv", sep = ",")
pha_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_pha_sec_a_c_brt.csv", sep = ",")

### conduct_before
cb_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_cb_sec_a_brt.csv", sep = ",")
cb_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_cb_sec_a_c_brt.csv", sep = ",")

### conduct_during
cd_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_cd_sec_a_brt.csv", sep = ",")
cd_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_cd_sec_a_c_brt.csv", sep = ",")

### conduct_after
ca_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_ca_sec_a_brt.csv", sep = ",")
ca_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_ca_sec_a_c_brt.csv", sep = ",")

### ox_before
ob_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_ob_sec_a_brt.csv", sep = ",")
ob_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_ob_sec_a_c_brt.csv", sep = ",")

### ox_during
od_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_od_sec_a_brt.csv", sep = ",")
od_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_od_sec_a_c_brt.csv", sep = ",")

### ox_after
oa_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_oa_sec_a_brt.csv", sep = ",")
oa_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_oa_sec_a_c_brt.csv", sep = ",")

### turb_before
tb_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_tb_sec_a_brt.csv", sep = ",")
tb_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_tb_sec_a_c_brt.csv", sep = ",")

### turb_during
td_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_td_sec_a_brt.csv", sep = ",")
td_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_td_sec_a_c_brt.csv", sep = ",")

### turb_after
ta_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_ta_sec_a_brt.csv", sep = ",")
ta_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_ta_sec_a_c_brt.csv", sep = ",")

### temp_before
teb_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_teb_sec_a_brt.csv", sep = ",")
teb_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_teb_sec_a_c_brt.csv", sep = ",")

### temp_during
ted_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_ted_sec_a_brt.csv", sep = ",")
ted_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_ted_sec_a_c_brt.csv", sep = ",")

### temp_after
tea_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_tea_sec_a_brt.csv", sep = ",")
tea_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_tea_sec_a_c_brt.csv", sep = ",")

### q_before
qb_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_qb_sec_a_brt.csv", sep = ",")
qb_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_qb_sec_a_c_brt.csv", sep = ",")

### q_during
qd_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_qd_sec_a_brt.csv", sep = ",")
qd_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_qd_sec_a_c_brt.csv", sep = ",")

### q_after
qa_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_qa_sec_a_brt.csv", sep = ",")
qa_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_qa_sec_a_c_brt.csv", sep = ",")

### gaug_before
gb_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_gb_sec_a_brt.csv", sep = ",")
gb_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_gb_sec_a_c_brt.csv", sep = ",")

### gaug_during
gd_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_gd_sec_a_brt.csv", sep = ",")
gd_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_gd_sec_a_c_brt.csv", sep = ",")

### gaug_after
ga_sec_a_brt <- read.delim("ML_Model/pdp_data/pdp_ga_sec_a_brt.csv", sep = ",")
ga_sec_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_ga_sec_a_c_brt.csv", sep = ",")

# With rel_abundance as response ----------------------------------------------
### velocity 
v_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_v_sec_ra_brt.csv", sep = ",")
v_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_sec_ra_c_brt.csv", sep = ",")

### wd_m 
wd_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_wd_sec_ra_brt.csv", sep = ",")
wd_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_sec_ra_c_brt.csv", sep = ",")

### x/y
x_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_x_sec_ra_brt.csv", sep = ",")
y_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_y_sec_ra_brt.csv", sep = ",")

### z 
z_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_z_sec_ra_brt.csv", sep = ",")
z_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_z_sec_ra_c_brt.csv", sep = ",")

### dist_w 
dist_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_dist_sec_ra_brt.csv", sep = ",")
dist_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_dist_sec_ra_c_brt.csv", sep = ",")

### cat_v 
cv_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_cv_sec_ra_brt.csv", sep = ",")
cv_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_cv_sec_ra_c_brt.csv", sep = ",")

### alg_cover 
ac_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_ac_sec_ra_brt.csv", sep = ",")
ac_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_ac_sec_ra_c_brt.csv", sep = ",")

### moos_cover 
mc_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_mc_sec_ra_brt.csv", sep = ",")
mc_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_mc_sec_ra_c_brt.csv", sep = ",")

### cpom_cover 
cc_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_cc_sec_ra_brt.csv", sep = ",")
cc_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_cc_sec_ra_c_brt.csv", sep = ",")

### clog_3 
clog_3_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_ra_brt.csv", sep = ",")
clog_3_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_ra_c_brt.csv", sep = ",")

### clog_6
clog_6_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_ra_brt.csv", sep = ",")
clog_6_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_ra_c_brt.csv", sep = ",")

### sub_type
sub_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_sub_sec_ra_brt.csv", sep = ",")
sub_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_sub_sec_ra_c_brt.csv", sep = ",")

### pH_before
phb_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_phb_sec_ra_brt.csv", sep = ",")
phb_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_phb_sec_ra_c_brt.csv", sep = ",")

### pH_during
phd_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_phd_sec_ra_brt.csv", sep = ",")
phd_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_phd_sec_ra_c_brt.csv", sep = ",")

### pH_after
pha_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_pha_sec_ra_brt.csv", sep = ",")
pha_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_pha_sec_ra_c_brt.csv", sep = ",")

### conduct_before
cb_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_cb_sec_ra_brt.csv", sep = ",")
cb_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_cb_sec_ra_c_brt.csv", sep = ",")

### conduct_during
cd_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_cd_sec_ra_brt.csv", sep = ",")
cd_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_cd_sec_ra_c_brt.csv", sep = ",")

### conduct_after
ca_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_ca_sec_ra_brt.csv", sep = ",")
ca_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_ca_sec_ra_c_brt.csv", sep = ",")

### ox_before
ob_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_ob_sec_ra_brt.csv", sep = ",")
ob_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_ob_sec_ra_c_brt.csv", sep = ",")

### ox_during
od_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_od_sec_ra_brt.csv", sep = ",")
od_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_od_sec_ra_c_brt.csv", sep = ",")

### ox_after
oa_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_oa_sec_ra_brt.csv", sep = ",")
oa_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_oa_sec_ra_c_brt.csv", sep = ",")

### turb_before
tb_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_tb_sec_ra_brt.csv", sep = ",")
tb_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_tb_sec_ra_c_brt.csv", sep = ",")

### turb_during
td_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_td_sec_ra_brt.csv", sep = ",")
td_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_td_sec_ra_c_brt.csv", sep = ",")

### turb_after
ta_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_ta_sec_ra_brt.csv", sep = ",")
ta_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_ta_sec_ra_c_brt.csv", sep = ",")

### temp_before
teb_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_teb_sec_ra_brt.csv", sep = ",")
teb_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_teb_sec_ra_c_brt.csv", sep = ",")

### temp_during
ted_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_ted_sec_ra_brt.csv", sep = ",")
ted_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_ted_sec_ra_c_brt.csv", sep = ",")

### temp_after
tea_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_tea_sec_ra_brt.csv", sep = ",")
tea_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_tea_sec_ra_c_brt.csv", sep = ",")

### q_before
qb_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_qb_sec_ra_brt.csv", sep = ",")
qb_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_qb_sec_ra_c_brt.csv", sep = ",")

### q_during
qd_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_qd_sec_ra_brt.csv", sep = ",")
qd_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_qd_sec_ra_c_brt.csv", sep = ",")

### q_after
qa_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_qa_sec_ra_brt.csv", sep = ",")
qa_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_qa_sec_ra_c_brt.csv", sep = ",")

### gaug_before
gb_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_gb_sec_ra_brt.csv", sep = ",")
gb_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_gb_sec_ra_c_brt.csv", sep = ",")

### gaug_during
gd_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_gd_sec_ra_brt.csv", sep = ",")
gd_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_gd_sec_ra_c_brt.csv", sep = ",")

### gaug_after
ga_sec_ra_brt <- read.delim("ML_Model/pdp_data/pdp_ga_sec_ra_brt.csv", sep = ",")
ga_sec_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_ga_sec_ra_c_brt.csv", sep = ",")
```

## BRT added
```{r}
### PREDICTOR: VELOCITY ### -------------------------------------------------
# With k_index as response --------------------------------------------------
### velocity
v_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_k_brt_add.csv", sep = ",")
v_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_k_c_brt_add.csv", sep = ",")

### froude
f_v_k_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_v_k_brt_add.csv")
f_v_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_v_k_c_brt_add.csv") 

### shear_stress
s_v_k_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_v_k_brt_add.csv")
s_v_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_v_k_c_brt_add.csv") 

### stream_power
sp_v_k_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_k_brt_add.csv")
sp_v_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_k_c_brt_add.csv") 

### x/y
x_v_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_v_k_brt_add.csv", sep = ",")
y_v_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_v_k_brt_add.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_s_brt_add.csv", sep = ",")
v_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_s_c_brt_add.csv", sep = ",")

### froude
f_v_s_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_v_s_brt_add.csv")
f_v_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_v_s_c_brt_add.csv") 

### shear_stress
s_v_s_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_v_s_brt_add.csv")
s_v_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_v_s_c_brt_add.csv") 

### stream_power
sp_v_s_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_s_brt_add.csv")
sp_v_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_s_c_brt_add.csv") 

### x/y
x_v_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_v_s_brt_add.csv", sep = ",")
y_v_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_v_s_brt_add.csv", sep = ",")

# With abundance as response --------------------------------------------------
### velocity 
v_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_a_brt_add.csv", sep = ",")
v_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_a_c_brt_add.csv", sep = ",")

### froude
f_v_a_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_v_a_brt_add.csv")
f_v_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_v_a_c_brt_add.csv") 

### shear_stress
s_v_a_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_v_a_brt_add.csv")
s_v_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_v_a_c_brt_add.csv") 

### stream_power
sp_v_a_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_a_brt_add.csv")
sp_v_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_a_c_brt_add.csv") 

### x/y
x_v_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_v_a_brt_add.csv", sep = ",")
y_v_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_v_a_brt_add.csv", sep = ",")

# With rel_abundance as response ----------------------------------------------
### velocity 
v_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_ra_brt_add.csv", sep = ",")
v_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_ra_c_brt_add.csv", sep = ",")

### froude
f_v_ra_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_v_ra_brt_add.csv")
f_v_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_v_ra_c_brt_add.csv") 

### shear_stress
s_v_ra_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_v_ra_brt_add.csv")
s_v_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_v_ra_c_brt_add.csv") 

### stream_power
sp_v_ra_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_ra_brt_add.csv")
sp_v_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_ra_c_brt_add.csv") 

### x/y
x_v_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_v_ra_brt_add.csv", sep = ",")
y_v_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_v_ra_brt_add.csv", sep = ",")

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
v_wd_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_wd_k_brt_add.csv", sep = ",")
v_wd_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_wd_k_c_brt_add.csv", sep = ",")

### froude
f_wd_k_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_k_brt_add.csv")
f_wd_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_k_c_brt_add.csv") 

### shear_stress
s_wd_k_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_k_brt_add.csv")
s_wd_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_k_c_brt_add.csv") 

### stream_power
sp_wd_k_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_k_brt_add.csv")
sp_wd_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_k_c_brt_add.csv") 

### wd_m 
wd_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_k_brt_add.csv", sep = ",")
wd_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_k_c_brt_add.csv", sep = ",")

### x/y
x_wd_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_wd_k_brt_add.csv", sep = ",")
y_wd_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_wd_k_brt_add.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_wd_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_wd_s_brt_add.csv", sep = ",")
v_wd_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_wd_s_c_brt_add.csv", sep = ",")

### froude
f_wd_s_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_s_brt_add.csv")
f_wd_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_s_c_brt_add.csv") 

### shear_stress
s_wd_s_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_s_brt_add.csv")
s_wd_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_s_c_brt_add.csv") 

### stream_power
sp_wd_s_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_s_brt_add.csv")
sp_wd_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_s_c_brt_add.csv") 

### wd_m 
wd_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_s_brt_add.csv", sep = ",")
wd_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_s_c_brt_add.csv", sep = ",")

### x/y
x_wd_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_wd_s_brt_add.csv", sep = ",")
y_wd_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_wd_s_brt_add.csv", sep = ",")

# With abundance as response --------------------------------------------------
### velocity 
v_wd_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_wd_a_brt_add.csv", sep = ",")
v_wd_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_wd_a_c_brt_add.csv", sep = ",")

### froude
f_wd_a_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_a_brt_add.csv")
f_wd_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_a_c_brt_add.csv") 

### shear_stress
s_wd_a_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_a_brt_add.csv")
s_wd_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_a_c_brt_add.csv") 

### stream_power
sp_wd_a_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_a_brt_add.csv")
sp_wd_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_a_c_brt_add.csv") 

### wd_m 
wd_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_a_brt_add.csv", sep = ",")
wd_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_a_c_brt_add.csv", sep = ",")

### x/y
x_wd_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_wd_a_brt_add.csv", sep = ",")
y_wd_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_wd_a_brt_add.csv", sep = ",")

# With rel_abundance as response ---------------------------------------------
### velocity 
v_wd_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_wd_ra_brt_add.csv", sep = ",")
v_wd_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_wd_ra_c_brt_add.csv", sep = ",")

### froude
f_wd_ra_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_ra_brt_add.csv")
f_wd_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_ra_c_brt_add.csv") 

### shear_stress
s_wd_ra_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_ra_brt_add.csv")
s_wd_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_ra_c_brt_add.csv") 

### stream_power
sp_wd_ra_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_ra_brt_add.csv")
sp_wd_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_ra_c_brt_add.csv") 

### wd_m 
wd_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_ra_brt_add.csv", sep = ",")
wd_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_ra_c_brt_add.csv", sep = ",")

### x/y
x_wd_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_wd_ra_brt_add.csv", sep = ",")
y_wd_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_wd_ra_brt_add.csv", sep = ",")

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
v_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_samp_k_brt_add.csv", sep = ",")
v_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_samp_k_c_brt_add.csv", sep = ",")

### froude
f_samp_k_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_k_brt_add.csv")
f_samp_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_k_c_brt_add.csv") 

### shear_stress
s_samp_k_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_k_brt_add.csv")
s_samp_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_k_c_brt_add.csv") 

### stream_power
sp_samp_k_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_k_brt_add.csv")
sp_samp_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_k_c_brt_add.csv") 

### wd_m 
wd_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_samp_k_brt_add.csv", sep = ",")
wd_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_samp_k_c_brt_add.csv", sep = ",")

### x/y
x_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_samp_k_brt_add.csv", sep = ",")
y_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_samp_k_brt_add.csv", sep = ",")

### z 
z_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_samp_k_brt_add.csv", sep = ",")
z_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_samp_k_c_brt_add.csv", sep = ",")

### dist_w 
dist_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_samp_k_brt_add.csv", sep = ",")
dist_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_samp_k_c_brt_add.csv", sep = ",")

### cat_v 
cv_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_samp_k_brt_add.csv", sep = ",")
cv_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_samp_k_c_brt_add.csv", sep = ",")

### alg_cover 
ac_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_samp_k_brt_add.csv", sep = ",")
ac_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_samp_k_c_brt_add.csv", sep = ",")

### moos_cover 
mc_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_samp_k_brt_add.csv", sep = ",")
mc_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_samp_k_c_brt_add.csv", sep = ",")

### cpom_cover 
cc_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_samp_k_brt_add.csv", sep = ",")
cc_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_samp_k_c_brt_add.csv", sep = ",")

### clog_3 
clog_3_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_k_brt_add.csv", sep = ",")
clog_3_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_k_c_brt_add.csv", sep = ",")

### clog_6
clog_6_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_k_brt_add.csv", sep = ",")
clog_6_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_k_c_brt_add.csv", sep = ",")

### sub_type
sub_samp_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_samp_k_brt_add.csv", sep = ",")
sub_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_samp_k_c_brt_add.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_samp_s_brt_add.csv", sep = ",")
v_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_samp_s_c_brt_add.csv", sep = ",")

### froude
f_samp_s_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_s_brt_add.csv")
f_samp_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_s_c_brt_add.csv") 

### shear_stress
s_samp_s_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_s_brt_add.csv")
s_samp_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_s_c_brt_add.csv") 

### stream_power
sp_samp_s_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_s_brt_add.csv")
sp_samp_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_s_c_brt_add.csv")

### wd_m 
wd_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_samp_s_brt_add.csv", sep = ",")
wd_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_samp_s_c_brt_add.csv", sep = ",")

### x/y
x_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_samp_s_brt_add.csv", sep = ",")
y_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_samp_s_brt_add.csv", sep = ",")

### z 
z_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_samp_s_brt_add.csv", sep = ",")
z_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_samp_s_c_brt_add.csv", sep = ",")

### dist_w 
dist_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_samp_s_brt_add.csv", sep = ",")
dist_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_samp_s_c_brt_add.csv", sep = ",")

### cat_v 
cv_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_samp_s_brt_add.csv", sep = ",")
cv_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_samp_s_c_brt_add.csv", sep = ",")

### alg_cover 
ac_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_samp_s_brt_add.csv", sep = ",")
ac_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_samp_s_c_brt_add.csv", sep = ",")

### moos_cover 
mc_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_samp_s_brt_add.csv", sep = ",")
mc_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_samp_s_c_brt_add.csv", sep = ",")

### cpom_cover 
cc_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_samp_s_brt_add.csv", sep = ",")
cc_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_samp_s_c_brt_add.csv", sep = ",")

### clog_3 
clog_3_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_s_brt_add.csv", sep = ",")
clog_3_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_s_c_brt_add.csv", sep = ",")

### clog_6
clog_6_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_s_brt_add.csv", sep = ",")
clog_6_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_s_c_brt_add.csv", sep = ",")

### sub_type
sub_samp_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_samp_s_brt_add.csv", sep = ",")
sub_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_samp_s_c_brt_add.csv", sep = ",")

# With abundance as response --------------------------------------------------
### velocity 
v_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_samp_a_brt_add.csv", sep = ",")
v_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_samp_a_c_brt_add.csv", sep = ",")

### froude
f_samp_a_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_a_brt_add.csv")
f_samp_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_a_c_brt_add.csv") 

### shear_stress
s_samp_a_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_a_brt_add.csv")
s_samp_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_a_c_brt_add.csv") 

### stream_power
sp_samp_a_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_a_brt_add.csv")
sp_samp_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_a_c_brt_add.csv")

### wd_m 
wd_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_samp_a_brt_add.csv", sep = ",")
wd_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_samp_a_c_brt_add.csv", sep = ",")

### x/y
x_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_samp_a_brt_add.csv", sep = ",")
y_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_samp_a_brt_add.csv", sep = ",")

### z 
z_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_samp_a_brt_add.csv", sep = ",")
z_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_samp_a_c_brt_add.csv", sep = ",")

### dist_w 
dist_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_samp_a_brt_add.csv", sep = ",")
dist_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_samp_a_c_brt_add.csv", sep = ",")

### cat_v 
cv_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_samp_a_brt_add.csv", sep = ",")
cv_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_samp_a_c_brt_add.csv", sep = ",")

### alg_cover 
ac_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_samp_a_brt_add.csv", sep = ",")
ac_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_samp_a_c_brt_add.csv", sep = ",")

### moos_cover 
mc_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_samp_a_brt_add.csv", sep = ",")
mc_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_samp_a_c_brt_add.csv", sep = ",")

### cpom_cover 
cc_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_samp_a_brt_add.csv", sep = ",")
cc_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_samp_a_c_brt_add.csv", sep = ",")

### clog_3 
clog_3_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_a_brt_add.csv", sep = ",")
clog_3_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_a_c_brt_add.csv", sep = ",")

### clog_6
clog_6_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_a_brt_add.csv", sep = ",")
clog_6_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_a_c_brt_add.csv", sep = ",")

### sub_type
sub_samp_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_samp_a_brt_add.csv", sep = ",")
sub_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_samp_a_c_brt_add.csv", sep = ",")

# With rel_abundance as response ----------------------------------------------
### velocity 
v_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_samp_ra_brt_add.csv", sep = ",")
v_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_samp_ra_c_brt_add.csv", sep = ",")

### froude
f_samp_ra_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_ra_brt_add.csv")
f_samp_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_ra_c_brt_add.csv") 

### shear_stress
s_samp_ra_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_ra_brt_add.csv")
s_samp_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_ra_c_brt_add.csv") 

### stream_power
sp_samp_ra_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_ra_brt_add.csv")
sp_samp_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_ra_c_brt_add.csv")

### wd_m 
wd_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_samp_ra_brt_add.csv", sep = ",")
wd_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_samp_ra_c_brt_add.csv", sep = ",")

### x/y
x_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_samp_ra_brt_add.csv", sep = ",")
y_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_samp_ra_brt_add.csv", sep = ",")

### z 
z_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_samp_ra_brt_add.csv", sep = ",")
z_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_samp_ra_c_brt_add.csv", sep = ",")

### dist_w 
dist_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_samp_ra_brt_add.csv", sep = ",")
dist_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_samp_ra_c_brt_add.csv", sep = ",")

### cat_v 
cv_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_samp_ra_brt_add.csv", sep = ",")
cv_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_samp_ra_c_brt_add.csv", sep = ",")

### alg_cover 
ac_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_samp_ra_brt_add.csv", sep = ",")
ac_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_samp_ra_c_brt_add.csv", sep = ",")

### moos_cover 
mc_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_samp_ra_brt_add.csv", sep = ",")
mc_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_samp_ra_c_brt_add.csv", sep = ",")

### cpom_cover 
cc_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_samp_ra_brt_add.csv", sep = ",")
cc_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_samp_ra_c_brt_add.csv", sep = ",")

### clog_3 
clog_3_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_brt_add.csv", sep = ",")
clog_3_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_c_brt_add.csv", sep = ",")

### clog_6
clog_6_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_brt_add.csv", sep = ",")
clog_6_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_c_brt_add.csv", sep = ",")

### sub_type
sub_samp_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_samp_ra_brt_add.csv", sep = ",")
sub_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_samp_ra_c_brt_add.csv", sep = ",")

### PREDICTORS: ALL PREDICTORS ### --------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
v_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_sec_k_brt_add.csv", sep = ",")
v_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_sec_k_c_brt_add.csv", sep = ",")

### froude
f_sec_k_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_k_brt_add.csv")
f_sec_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_k_c_brt_add.csv") 

### shear_stress
s_sec_k_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_k_brt_add.csv")
s_sec_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_k_c_brt_add.csv") 

### stream_power
sp_sec_k_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_k_brt_add.csv")
sp_sec_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_k_c_brt_add.csv")

### wd_m 
wd_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_sec_k_brt_add.csv", sep = ",")
wd_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_sec_k_c_brt_add.csv", sep = ",")

### x/y
x_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_sec_k_brt_add.csv", sep = ",")
y_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_sec_k_brt_add.csv", sep = ",")

### z 
z_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_sec_k_brt_add.csv", sep = ",")
z_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_sec_k_c_brt_add.csv", sep = ",")

### dist_w 
dist_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_sec_k_brt_add.csv", sep = ",")
dist_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_sec_k_c_brt_add.csv", sep = ",")

### cat_v 
cv_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_sec_k_brt_add.csv", sep = ",")
cv_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_sec_k_c_brt_add.csv", sep = ",")

### alg_cover 
ac_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_sec_k_brt_add.csv", sep = ",")
ac_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_sec_k_c_brt_add.csv", sep = ",")

### moos_cover 
mc_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_sec_k_brt_add.csv", sep = ",")
mc_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_sec_k_c_brt_add.csv", sep = ",")

### cpom_cover 
cc_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_sec_k_brt_add.csv", sep = ",")
cc_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_sec_k_c_brt_add.csv", sep = ",")

### clog_3 
clog_3_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_k_brt_add.csv", sep = ",")
clog_3_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_k_c_brt_add.csv", sep = ",")

### clog_6
clog_6_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_k_brt_add.csv", sep = ",")
clog_6_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_k_c_brt_add.csv", sep = ",")

### sub_type
sub_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_sec_k_brt_add.csv", sep = ",")
sub_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_sec_k_c_brt_add.csv", sep = ",")

### pH_before
phb_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_phb_sec_k_brt_add.csv", sep = ",")
phb_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_phb_sec_k_c_brt_add.csv", sep = ",")

### pH_during
phd_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_phd_sec_k_brt_add.csv", sep = ",")
phd_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_phd_sec_k_c_brt_add.csv", sep = ",")

### pH_after
pha_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_pha_sec_k_brt_add.csv", sep = ",")
pha_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_pha_sec_k_c_brt_add.csv", sep = ",")

### conduct_before
cb_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_cb_sec_k_brt_add.csv", sep = ",")
cb_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cb_sec_k_c_brt_add.csv", sep = ",")

### conduct_during
cd_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_cd_sec_k_brt_add.csv", sep = ",")
cd_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cd_sec_k_c_brt_add.csv", sep = ",")

### conduct_after
ca_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_ca_sec_k_brt_add.csv", sep = ",")
ca_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ca_sec_k_c_brt_add.csv", sep = ",")

### ox_before
ob_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_ob_sec_k_brt_add.csv", sep = ",")
ob_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ob_sec_k_c_brt_add.csv", sep = ",")

### ox_during
od_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_od_sec_k_brt_add.csv", sep = ",")
od_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_od_sec_k_c_brt_add.csv", sep = ",")

### ox_after
oa_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_oa_sec_k_brt_add.csv", sep = ",")
oa_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_oa_sec_k_c_brt_add.csv", sep = ",")

### turb_before
tb_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_tb_sec_k_brt_add.csv", sep = ",")
tb_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_tb_sec_k_c_brt_add.csv", sep = ",")

### turb_during
td_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_td_sec_k_brt_add.csv", sep = ",")
td_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_td_sec_k_c_brt_add.csv", sep = ",")

### turb_after
ta_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_ta_sec_k_brt_add.csv", sep = ",")
ta_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ta_sec_k_c_brt_add.csv", sep = ",")

### temp_before
teb_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_teb_sec_k_brt_add.csv", sep = ",")
teb_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_teb_sec_k_c_brt_add.csv", sep = ",")

### temp_during
ted_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_ted_sec_k_brt_add.csv", sep = ",")
ted_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ted_sec_k_c_brt_add.csv", sep = ",")

### temp_after
tea_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_tea_sec_k_brt_add.csv", sep = ",")
tea_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_tea_sec_k_c_brt_add.csv", sep = ",")

### q_before
qb_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_qb_sec_k_brt_add.csv", sep = ",")
qb_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_qb_sec_k_c_brt_add.csv", sep = ",")

### q_during
qd_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_qd_sec_k_brt_add.csv", sep = ",")
qd_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_qd_sec_k_c_brt_add.csv", sep = ",")

### q_after
qa_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_qa_sec_k_brt_add.csv", sep = ",")
qa_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_qa_sec_k_c_brt_add.csv", sep = ",")

### gaug_before
gb_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_gb_sec_k_brt_add.csv", sep = ",")
gb_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_gb_sec_k_c_brt_add.csv", sep = ",")

### gaug_during
gd_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_gd_sec_k_brt_add.csv", sep = ",")
gd_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_gd_sec_k_c_brt_add.csv", sep = ",")

### gaug_after
ga_sec_k_brt_add <- read.delim("ML_Model/pdp_data/pdp_ga_sec_k_brt_add.csv", sep = ",")
ga_sec_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ga_sec_k_c_brt_add.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_sec_s_brt_add.csv", sep = ",")
v_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_sec_s_c_brt_add.csv", sep = ",")

### froude
f_sec_s_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_s_brt_add.csv")
f_sec_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_s_c_brt_add.csv") 

### shear_stress
s_sec_s_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_s_brt_add.csv")
s_sec_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_s_c_brt_add.csv") 

### stream_power
sp_sec_s_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_s_brt_add.csv")
sp_sec_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_s_c_brt_add.csv")

### wd_m 
wd_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_sec_s_brt_add.csv", sep = ",")
wd_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_sec_s_c_brt_add.csv", sep = ",")

### x/y
x_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_sec_s_brt_add.csv", sep = ",")
y_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_sec_s_brt_add.csv", sep = ",")

### z 
z_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_sec_s_brt_add.csv", sep = ",")
z_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_sec_s_c_brt_add.csv", sep = ",")

### dist_w 
dist_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_sec_s_brt_add.csv", sep = ",")
dist_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_sec_s_c_brt_add.csv", sep = ",")

### cat_v 
cv_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_sec_s_brt_add.csv", sep = ",")
cv_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_sec_s_c_brt_add.csv", sep = ",")

### alg_cover 
ac_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_sec_s_brt_add.csv", sep = ",")
ac_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_sec_s_c_brt_add.csv", sep = ",")

### moos_cover 
mc_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_sec_s_brt_add.csv", sep = ",")
mc_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_sec_s_c_brt_add.csv", sep = ",")

### cpom_cover 
cc_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_sec_s_brt_add.csv", sep = ",")
cc_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_sec_s_c_brt_add.csv", sep = ",")

### clog_3 
clog_3_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_s_brt_add.csv", sep = ",")
clog_3_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_s_c_brt_add.csv", sep = ",")

### clog_6
clog_6_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_s_brt_add.csv", sep = ",")
clog_6_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_s_c_brt_add.csv", sep = ",")

### sub_type
sub_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_sec_s_brt_add.csv", sep = ",")
sub_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_sec_s_c_brt_add.csv", sep = ",")

### pH_before
phb_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_phb_sec_s_brt_add.csv", sep = ",")
phb_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_phb_sec_s_c_brt_add.csv", sep = ",")

### pH_during
phd_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_phd_sec_s_brt_add.csv", sep = ",")
phd_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_phd_sec_s_c_brt_add.csv", sep = ",")

### pH_after
pha_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_pha_sec_s_brt_add.csv", sep = ",")
pha_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_pha_sec_s_c_brt_add.csv", sep = ",")

### conduct_before
cb_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_cb_sec_s_brt_add.csv", sep = ",")
cb_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cb_sec_s_c_brt_add.csv", sep = ",")

### conduct_during
cd_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_cd_sec_s_brt_add.csv", sep = ",")
cd_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cd_sec_s_c_brt_add.csv", sep = ",")

### conduct_after
ca_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_ca_sec_s_brt_add.csv", sep = ",")
ca_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ca_sec_s_c_brt_add.csv", sep = ",")

### ox_before
ob_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_ob_sec_s_brt_add.csv", sep = ",")
ob_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ob_sec_s_c_brt_add.csv", sep = ",")

### ox_during
od_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_od_sec_s_brt_add.csv", sep = ",")
od_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_od_sec_s_c_brt_add.csv", sep = ",")

### ox_after
oa_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_oa_sec_s_brt_add.csv", sep = ",")
oa_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_oa_sec_s_c_brt_add.csv", sep = ",")

### turb_before
tb_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_tb_sec_s_brt_add.csv")
tb_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_tb_sec_s_c_brt_add.csv")

### turb_during
td_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_td_sec_s_brt_add.csv", sep = ",")
td_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_td_sec_s_c_brt_add.csv", sep = ",")

### turb_after
ta_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_ta_sec_s_brt_add.csv", sep = ",")
ta_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ta_sec_s_c_brt_add.csv", sep = ",")

### temp_before
teb_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_teb_sec_s_brt_add.csv", sep = ",")
teb_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_teb_sec_s_c_brt_add.csv", sep = ",")

### temp_during
ted_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_ted_sec_s_brt_add.csv", sep = ",")
ted_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ted_sec_s_c_brt_add.csv", sep = ",")

### temp_after
tea_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_tea_sec_s_brt_add.csv", sep = ",")
tea_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_tea_sec_s_c_brt_add.csv", sep = ",")

### q_before
qb_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_qb_sec_s_brt_add.csv", sep = ",")
qb_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_qb_sec_s_c_brt_add.csv", sep = ",")

### q_during
qd_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_qd_sec_s_brt_add.csv", sep = ",")
qd_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_qd_sec_s_c_brt_add.csv", sep = ",")

### q_after
qa_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_qa_sec_s_brt_add.csv", sep = ",")
qa_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_qa_sec_s_c_brt_add.csv", sep = ",")

### gaug_before
gb_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_gb_sec_s_brt_add.csv", sep = ",")
gb_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_gb_sec_s_c_brt_add.csv", sep = ",")

### gaug_during
gd_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_gd_sec_s_brt_add.csv", sep = ",")
gd_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_gd_sec_s_c_brt_add.csv", sep = ",")

### gaug_after
ga_sec_s_brt_add <- read.delim("ML_Model/pdp_data/pdp_ga_sec_s_brt_add.csv", sep = ",")
ga_sec_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ga_sec_s_c_brt_add.csv", sep = ",")

# With abundance as response ----------------------------------------------
### velocity 
v_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_sec_a_brt_add.csv", sep = ",")
v_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_sec_a_c_brt_add.csv", sep = ",")

### froude
f_sec_a_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_a_brt_add.csv")
f_sec_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_a_c_brt_add.csv") 

### shear_stress
s_sec_a_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_a_brt_add.csv")
s_sec_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_a_c_brt_add.csv") 

### stream_power
sp_sec_a_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_a_brt_add.csv")
sp_sec_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_a_c_brt_add.csv")

### wd_m 
wd_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_sec_a_brt_add.csv", sep = ",")
wd_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_sec_a_c_brt_add.csv", sep = ",")

### x/y
x_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_sec_a_brt_add.csv", sep = ",")
y_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_sec_a_brt_add.csv", sep = ",")

### z 
z_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_sec_a_brt_add.csv", sep = ",")
z_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_sec_a_c_brt_add.csv", sep = ",")

### dist_w 
dist_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_sec_a_brt_add.csv", sep = ",")
dist_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_sec_a_c_brt_add.csv", sep = ",")

### cat_v 
cv_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_sec_a_brt_add.csv", sep = ",")
cv_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_sec_a_c_brt_add.csv", sep = ",")

### alg_cover 
ac_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_sec_a_brt_add.csv", sep = ",")
ac_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_sec_a_c_brt_add.csv", sep = ",")

### moos_cover 
mc_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_sec_a_brt_add.csv", sep = ",")
mc_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_sec_a_c_brt_add.csv", sep = ",")

### cpom_cover 
cc_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_sec_a_brt_add.csv", sep = ",")
cc_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_sec_a_c_brt_add.csv", sep = ",")

### clog_3 
clog_3_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_a_brt_add.csv", sep = ",")
clog_3_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_a_c_brt_add.csv", sep = ",")

### clog_6
clog_6_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_a_brt_add.csv", sep = ",")
clog_6_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_a_c_brt_add.csv", sep = ",")

### sub_type
sub_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_sec_a_brt_add.csv", sep = ",")
sub_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_sec_a_c_brt_add.csv", sep = ",")

### pH_before
phb_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_phb_sec_a_brt_add.csv", sep = ",")
phb_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_phb_sec_a_c_brt_add.csv", sep = ",")

### pH_during
phd_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_phd_sec_a_brt_add.csv", sep = ",")
phd_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_phd_sec_a_c_brt_add.csv", sep = ",")

### pH_after
pha_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_pha_sec_a_brt_add.csv", sep = ",")
pha_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_pha_sec_a_c_brt_add.csv", sep = ",")

### conduct_before
cb_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_cb_sec_a_brt_add.csv", sep = ",")
cb_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cb_sec_a_c_brt_add.csv", sep = ",")

### conduct_during
cd_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_cd_sec_a_brt_add.csv", sep = ",")
cd_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cd_sec_a_c_brt_add.csv", sep = ",")

### conduct_after
ca_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_ca_sec_a_brt_add.csv", sep = ",")
ca_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ca_sec_a_c_brt_add.csv", sep = ",")

### ox_before
ob_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_ob_sec_a_brt_add.csv", sep = ",")
ob_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ob_sec_a_c_brt_add.csv", sep = ",")

### ox_during
od_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_od_sec_a_brt_add.csv", sep = ",")
od_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_od_sec_a_c_brt_add.csv", sep = ",")

### ox_after
oa_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_oa_sec_a_brt_add.csv", sep = ",")
oa_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_oa_sec_a_c_brt_add.csv", sep = ",")

### turb_before
tb_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_tb_sec_a_brt_add.csv", sep = ",")
tb_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_tb_sec_a_c_brt_add.csv", sep = ",")

### turb_during
td_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_td_sec_a_brt_add.csv", sep = ",")
td_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_td_sec_a_c_brt_add.csv", sep = ",")

### turb_after
ta_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_ta_sec_a_brt_add.csv", sep = ",")
ta_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ta_sec_a_c_brt_add.csv", sep = ",")

### temp_before
teb_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_teb_sec_a_brt_add.csv", sep = ",")
teb_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_teb_sec_a_c_brt_add.csv", sep = ",")

### temp_during
ted_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_ted_sec_a_brt_add.csv", sep = ",")
ted_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ted_sec_a_c_brt_add.csv", sep = ",")

### temp_after
tea_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_tea_sec_a_brt_add.csv", sep = ",")
tea_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_tea_sec_a_c_brt_add.csv", sep = ",")

### q_before
qb_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_qb_sec_a_brt_add.csv", sep = ",")
qb_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_qb_sec_a_c_brt_add.csv", sep = ",")

### q_during
qd_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_qd_sec_a_brt_add.csv", sep = ",")
qd_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_qd_sec_a_c_brt_add.csv", sep = ",")

### q_after
qa_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_qa_sec_a_brt_add.csv", sep = ",")
qa_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_qa_sec_a_c_brt_add.csv", sep = ",")

### gaug_before
gb_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_gb_sec_a_brt_add.csv", sep = ",")
gb_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_gb_sec_a_c_brt_add.csv", sep = ",")

### gaug_during
gd_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_gd_sec_a_brt_add.csv", sep = ",")
gd_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_gd_sec_a_c_brt_add.csv", sep = ",")

### gaug_after
ga_sec_a_brt_add <- read.delim("ML_Model/pdp_data/pdp_ga_sec_a_brt_add.csv", sep = ",")
ga_sec_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ga_sec_a_c_brt_add.csv", sep = ",")

# With rel_abundance as response ----------------------------------------------
### velocity 
v_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_sec_ra_brt_add.csv", sep = ",")
v_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_sec_ra_c_brt_add.csv", sep = ",")

### froude
f_sec_ra_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_ra_brt_add.csv")
f_sec_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_sec_ra_c_brt_add.csv") 

### shear_stress
s_sec_ra_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_ra_brt_add.csv")
s_sec_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_sec_ra_c_brt_add.csv") 

### stream_power
sp_sec_ra_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_ra_brt_add.csv")
sp_sec_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_sec_ra_c_brt_add.csv")

### wd_m 
wd_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_sec_ra_brt_add.csv", sep = ",")
wd_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_sec_ra_c_brt_add.csv", sep = ",")

### x/y
x_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_x_sec_ra_brt_add.csv", sep = ",")
y_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_y_sec_ra_brt_add.csv", sep = ",")

### z 
z_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_sec_ra_brt_add.csv", sep = ",")
z_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_sec_ra_c_brt_add.csv", sep = ",")

### dist_w 
dist_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_sec_ra_brt_add.csv", sep = ",")
dist_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_sec_ra_c_brt_add.csv", sep = ",")

### cat_v 
cv_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_sec_ra_brt_add.csv", sep = ",")
cv_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_sec_ra_c_brt_add.csv", sep = ",")

### alg_cover 
ac_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_sec_ra_brt_add.csv", sep = ",")
ac_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_sec_ra_c_brt_add.csv", sep = ",")

### moos_cover 
mc_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_sec_ra_brt_add.csv", sep = ",")
mc_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_sec_ra_c_brt_add.csv", sep = ",")

### cpom_cover 
cc_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_sec_ra_brt_add.csv", sep = ",")
cc_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_sec_ra_c_brt_add.csv", sep = ",")

### clog_3 
clog_3_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_ra_brt_add.csv", sep = ",")
clog_3_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_sec_ra_c_brt_add.csv", sep = ",")

### clog_6
clog_6_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_ra_brt_add.csv", sep = ",")
clog_6_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_sec_ra_c_brt_add.csv", sep = ",")

### sub_type
sub_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_sec_ra_brt_add.csv", sep = ",")
sub_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_sec_ra_c_brt_add.csv", sep = ",")

### pH_before
phb_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_phb_sec_ra_brt_add.csv", sep = ",")
phb_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_phb_sec_ra_c_brt_add.csv", sep = ",")

### pH_during
phd_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_phd_sec_ra_brt_add.csv", sep = ",")
phd_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_phd_sec_ra_c_brt_add.csv", sep = ",")

### pH_after
pha_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_pha_sec_ra_brt_add.csv", sep = ",")
pha_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_pha_sec_ra_c_brt_add.csv", sep = ",")

### conduct_before
cb_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_cb_sec_ra_brt_add.csv", sep = ",")
cb_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cb_sec_ra_c_brt_add.csv", sep = ",")

### conduct_during
cd_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_cd_sec_ra_brt_add.csv", sep = ",")
cd_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cd_sec_ra_c_brt_add.csv", sep = ",")

### conduct_after
ca_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_ca_sec_ra_brt_add.csv", sep = ",")
ca_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ca_sec_ra_c_brt_add.csv", sep = ",")

### ox_before
ob_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_ob_sec_ra_brt_add.csv", sep = ",")
ob_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ob_sec_ra_c_brt_add.csv", sep = ",")

### ox_during
od_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_od_sec_ra_brt_add.csv", sep = ",")
od_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_od_sec_ra_c_brt_add.csv", sep = ",")

### ox_after
oa_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_oa_sec_ra_brt_add.csv", sep = ",")
oa_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_oa_sec_ra_c_brt_add.csv", sep = ",")

### turb_before
tb_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_tb_sec_ra_brt_add.csv", sep = ",")
tb_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_tb_sec_ra_c_brt_add.csv", sep = ",")

### turb_during
td_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_td_sec_ra_brt_add.csv", sep = ",")
td_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_td_sec_ra_c_brt_add.csv", sep = ",")

### turb_after
ta_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_ta_sec_ra_brt_add.csv", sep = ",")
ta_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ta_sec_ra_c_brt_add.csv", sep = ",")

### temp_before
teb_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_teb_sec_ra_brt_add.csv", sep = ",")
teb_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_teb_sec_ra_c_brt_add.csv", sep = ",")

### temp_during
ted_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_ted_sec_ra_brt_add.csv", sep = ",")
ted_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ted_sec_ra_c_brt_add.csv", sep = ",")

### temp_after
tea_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_tea_sec_ra_brt_add.csv", sep = ",")
tea_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_tea_sec_ra_c_brt_add.csv", sep = ",")

### q_before
qb_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_qb_sec_ra_brt_add.csv", sep = ",")
qb_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_qb_sec_ra_c_brt_add.csv", sep = ",")

### q_during
qd_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_qd_sec_ra_brt_add.csv", sep = ",")
qd_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_qd_sec_ra_c_brt_add.csv", sep = ",")

### q_after
qa_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_qa_sec_ra_brt_add.csv", sep = ",")
qa_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_qa_sec_ra_c_brt_add.csv", sep = ",")

### gaug_before
gb_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_gb_sec_ra_brt_add.csv", sep = ",")
gb_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_gb_sec_ra_c_brt_add.csv", sep = ",")

### gaug_during
gd_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_gd_sec_ra_brt_add.csv", sep = ",")
gd_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_gd_sec_ra_c_brt_add.csv", sep = ",")

### gaug_after
ga_sec_ra_brt_add <- read.delim("ML_Model/pdp_data/pdp_ga_sec_ra_brt_add.csv", sep = ",")
ga_sec_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ga_sec_ra_c_brt_add.csv", sep = ",")
```

# Plots
## RF normal 
### ok - Predictor: Velocity
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_k_rf <- ggplot(v_k_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_k_c_rf <- ggplot(v_k_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_k_rf.png", plot = p_v_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_k_c_rf.png", plot = p_v_k_c_rf, width = 6, height = 5)

### x/y
p_x_v_k_rf <- ggplot(x_v_k_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_k_rf <- ggplot(y_v_k_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_k_rf.png", plot = p_x_v_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_k_rf.png", plot = p_y_v_k_rf, width = 6, height = 5)

# With shannon index as response ----------------------------------------------
### velocity
p_v_s_rf <- ggplot(v_s_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_s_c_rf <- ggplot(v_s_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_s_rf.png", plot = p_v_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_s_c_rf.png", plot = p_v_s_c_rf, width = 6, height = 5)

### x/y
p_x_v_s_rf <- ggplot(x_v_s_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_s_rf <- ggplot(y_v_s_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_s_rf.png", plot = p_x_v_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_s_rf.png", plot = p_y_v_s_rf, width = 6, height = 5)

# With abundance as response --------------------------------------------------
### velocity
p_v_a_rf <- ggplot(v_a_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_a_c_rf <- ggplot(v_a_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_a_rf.png", plot = p_v_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_a_c_rf.png", plot = p_v_a_c_rf, width = 6, height = 5)

### x/y
p_x_v_a_rf <- ggplot(x_v_a_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_a_rf <- ggplot(y_v_a_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_a_rf.png", plot = p_x_v_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_a_rf.png", plot = p_y_v_a_rf, width = 6, height = 5)

# With rel_abundance as response --------------------------------------------------
### velocity
p_v_ra_rf <- ggplot(v_ra_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_ra_c_rf <- ggplot(v_ra_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_ra_rf.png", plot = p_v_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_ra_c_rf.png", plot = p_v_ra_c_rf, width = 6, height = 5)

### x/y
p_x_v_ra_rf <- ggplot(x_v_ra_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_ra_rf <- ggplot(y_v_ra_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_ra_rf.png", plot = p_x_v_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_ra_rf.png", plot = p_y_v_ra_rf, width = 6, height = 5)
```

### ok - Predictors: V + WD
```{r}
### PREDICTOR: V + WD ### ---------------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_wd_k_rf <- ggplot(v_wd_k_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_wd_k_c_rf <- ggplot(v_wd_k_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_wd_k_rf.png", plot = p_v_wd_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_wd_k_c_rf.png", plot = p_v_wd_k_c_rf, width = 6, height = 5)

### wd_m 
p_wd_k_rf <- ggplot(wd_k_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_k_c_rf <- ggplot(wd_k_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_k_rf.png", plot = p_wd_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_k_c_rf.png", plot = p_wd_k_c_rf, width = 6, height = 5)

### x/y
p_x_wd_k_rf <- ggplot(x_wd_k_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_wd_k_rf <- ggplot(y_wd_k_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_wd_k_rf.png", plot = p_x_wd_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_wd_k_rf.png", plot = p_y_wd_k_rf, width = 6, height = 5)

# With shannon index as response ----------------------------------------------
### velocity
p_v_s_rf <- ggplot(v_s_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_s_c_rf <- ggplot(v_s_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_s_rf.png", plot = p_v_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_s_c_rf.png", plot = p_v_s_c_rf, width = 6, height = 5)

### wd_m 
p_wd_s_rf <- ggplot(wd_s_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_s_c_rf <- ggplot(wd_s_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_s_rf.png", plot = p_wd_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_s_c_rf.png", plot = p_wd_s_c_rf, width = 6, height = 5)


### x/y
p_x_v_s_rf <- ggplot(x_v_s_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_s_rf <- ggplot(y_v_s_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_s_rf.png", plot = p_x_v_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_s_rf.png", plot = p_y_v_s_rf, width = 6, height = 5)

# With abundance as response --------------------------------------------------
### velocity
p_v_a_rf <- ggplot(v_a_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_a_c_rf <- ggplot(v_a_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_a_rf.png", plot = p_v_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_a_c_rf.png", plot = p_v_a_c_rf, width = 6, height = 5)

### wd_m 
p_wd_a_rf <- ggplot(wd_a_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_a_c_rf <- ggplot(wd_a_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_a_rf.png", plot = p_wd_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_a_c_rf.png", plot = p_wd_a_c_rf, width = 6, height = 5)

### x/y
p_x_v_a_rf <- ggplot(x_v_a_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_a_rf <- ggplot(y_v_a_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_a_rf.png", plot = p_x_v_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_a_rf.png", plot = p_y_v_a_rf, width = 6, height = 5)

# With rel_abundance as response --------------------------------------------------
### velocity
p_v_ra_rf <- ggplot(v_ra_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_ra_c_rf <- ggplot(v_ra_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_ra_rf.png", plot = p_v_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_ra_c_rf.png", plot = p_v_ra_c_rf, width = 6, height = 5)

### wd_m 
p_wd_ra_rf <- ggplot(wd_ra_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_ra_c_rf <- ggplot(wd_ra_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_ra_rf.png", plot = p_wd_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_ra_c_rf.png", plot = p_wd_ra_c_rf, width = 6, height = 5)

### x/y
p_x_v_ra_rf <- ggplot(x_v_ra_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_ra_rf <- ggplot(y_v_ra_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_ra_rf.png", plot = p_x_v_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_ra_rf.png", plot = p_y_v_ra_rf, width = 6, height = 5)
```

### ok - Predictors: Sampling Locations
```{r}
### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_samp_k_rf <- ggplot(v_samp_k_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_k_c_rf <- ggplot(v_samp_k_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_k_rf.png", plot = p_v_samp_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_k_c_rf.png", plot = p_v_samp_k_c_rf, width = 6, height = 5)

### wd_m 
p_wd_samp_k_rf <- ggplot(wd_samp_k_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_k_c_rf <- ggplot(wd_samp_k_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_k_rf.png", plot = p_wd_samp_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_k_c_rf.png", plot = p_wd_samp_k_c_rf, width = 6, height = 5)

### x/y
p_x_samp_k_rf <- ggplot(x_samp_k_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_k_rf <- ggplot(y_samp_k_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_k_rf.png", plot = p_x_samp_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_k_rf.png", plot = p_y_samp_k_rf, width = 6, height = 5)

### z 
p_z_samp_k_rf <- ggplot(z_samp_k_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_k_c_rf <- ggplot(z_samp_k_c_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_k_rf.png", plot = p_z_samp_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_k_c_rf.png", plot = p_z_samp_k_c_rf, width = 6, height = 5)

### dist_w 
p_dist_samp_k_rf <- ggplot(dist_samp_k_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_k_c_rf <- ggplot(dist_samp_k_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_k_rf.png", plot = p_dist_samp_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_k_c_rf.png", plot = p_dist_samp_k_c_rf, width = 6, height = 5)

### cat_v
p_cv_samp_k_rf <- ggplot(cv_samp_k_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_k_c_rf <- ggplot(cv_samp_k_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_k_rf.png", plot = p_cv_samp_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_k_c_rf.png", plot = p_cv_samp_k_c_rf, width = 6, height = 5)

### alg_cover 
p_ac_samp_k_rf <- ggplot(ac_samp_k_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_k_c_rf <- ggplot(ac_samp_k_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_k_rf.png", plot = p_ac_samp_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_k_c_rf.png", plot = p_ac_samp_k_c_rf, width = 6, height = 5)

### moos_cover
p_mc_samp_k_rf <- ggplot(mc_samp_k_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_k_c_rf <- ggplot(mc_samp_k_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_k_rf.png", plot = p_mc_samp_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_k_c_rf.png", plot = p_mc_samp_k_c_rf, width = 6, height = 5)

### cpom_cover 
p_cc_samp_k_rf <- ggplot(cc_samp_k_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_k_c_rf <- ggplot(cc_samp_k_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_k_rf.png", plot = p_cc_samp_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_k_c_rf.png", plot = p_cc_samp_k_c_rf, width = 6, height = 5)

### clog_3 
p_clog_3_samp_k_rf <- ggplot(clog_3_samp_k_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_k_c_rf <- ggplot(clog_3_samp_k_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_k_rf.png", plot = p_clog_3_samp_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_k_c_rf.png", plot = p_clog_3_samp_k_c_rf, width = 6, height = 5)

### clog_6 
p_clog_6_samp_k_rf <- ggplot(clog_6_samp_k_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_k_c_rf <- ggplot(clog_6_samp_k_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_k_rf.png", plot = p_clog_6_samp_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_k_c_rf.png", plot = p_clog_6_samp_k_c_rf, width = 6, height = 5)

### sub_type
p_sub_samp_k_rf <- ggplot(sub_samp_k_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_k_c_rf <- ggplot(sub_samp_k_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_k_rf.png", plot = p_sub_samp_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_k_c_rf.png", plot = p_sub_samp_k_c_rf, width = 6, height = 5)

# With shannon index as response ----------------------------------------------
### velocity
p_v_samp_s_rf <- ggplot(v_samp_s_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_s_c_rf <- ggplot(v_samp_s_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_s_rf.png", plot = p_v_samp_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_s_c_rf.png", plot = p_v_samp_s_c_rf, width = 6, height = 5)

### wd_m 
p_wd_samp_s_rf <- ggplot(wd_samp_s_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_s_c_rf <- ggplot(wd_samp_s_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_s_rf.png", plot = p_wd_samp_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_s_c_rf.png", plot = p_wd_samp_s_c_rf, width = 6, height = 5)


### x/y
p_x_samp_s_rf <- ggplot(x_samp_s_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_s_rf <- ggplot(y_samp_s_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_s_rf.png", plot = p_x_samp_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_s_rf.png", plot = p_y_samp_s_rf, width = 6, height = 5)

### z 
p_z_samp_s_rf <- ggplot(z_samp_s_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_s_c_rf <- ggplot(z_samp_s_c_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_s_rf.png", plot = p_z_samp_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_s_c_rf.png", plot = p_z_samp_s_c_rf, width = 6, height = 5)

### dist_w 
p_dist_samp_s_rf <- ggplot(dist_samp_s_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_s_c_rf <- ggplot(dist_samp_s_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_s_rf.png", plot = p_dist_samp_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_s_c_rf.png", plot = p_dist_samp_s_c_rf, width = 6, height = 5)

### cat_v
p_cv_samp_s_rf <- ggplot(cv_samp_s_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_s_c_rf <- ggplot(cv_samp_s_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_s_rf.png", plot = p_cv_samp_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_s_c_rf.png", plot = p_cv_samp_s_c_rf, width = 6, height = 5)

### alg_cover 
p_ac_samp_s_rf <- ggplot(ac_samp_s_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_s_c_rf <- ggplot(ac_samp_s_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_s_rf.png", plot = p_ac_samp_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_s_c_rf.png", plot = p_ac_samp_s_c_rf, width = 6, height = 5)

### moos_cover
p_mc_samp_s_rf <- ggplot(mc_samp_s_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_s_c_rf <- ggplot(mc_samp_s_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_s_rf.png", plot = p_mc_samp_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_s_c_rf.png", plot = p_mc_samp_s_c_rf, width = 6, height = 5)

### cpom_cover 
p_cc_samp_s_rf <- ggplot(cc_samp_s_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_s_c_rf <- ggplot(cc_samp_s_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_s_rf.png", plot = p_cc_samp_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_s_c_rf.png", plot = p_cc_samp_s_c_rf, width = 6, height = 5)

### clog_3 
p_clog_3_samp_s_rf <- ggplot(clog_3_samp_s_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_s_c_rf <- ggplot(clog_3_samp_s_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_s_rf.png", plot = p_clog_3_samp_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_s_c_rf.png", plot = p_clog_3_samp_s_c_rf, width = 6, height = 5)

### clog_6 
p_clog_6_samp_s_rf <- ggplot(clog_6_samp_s_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_s_c_rf <- ggplot(clog_6_samp_s_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_s_rf.png", plot = p_clog_6_samp_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_s_c_rf.png", plot = p_clog_6_samp_s_c_rf, width = 6, height = 5)

### sub_type
p_sub_samp_s_rf <- ggplot(sub_samp_s_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_s_c_rf <- ggplot(sub_samp_s_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Shannon Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_s_rf.png", plot = p_sub_samp_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_s_c_rf.png", plot = p_sub_samp_s_c_rf, width = 6, height = 5)


# With abundance as response --------------------------------------------------
### velocity
p_v_samp_a_rf <- ggplot(v_samp_a_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_a_c_rf <- ggplot(v_samp_a_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_a_rf.png", plot = p_v_samp_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_a_c_rf.png", plot = p_v_samp_a_c_rf, width = 6, height = 5)

### wd_m 
p_wd_samp_a_rf <- ggplot(wd_samp_a_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_a_c_rf <- ggplot(wd_samp_a_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_a_rf.png", plot = p_wd_samp_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_a_c_rf.png", plot = p_wd_samp_a_c_rf, width = 6, height = 5)


### x/y
p_x_samp_a_rf <- ggplot(x_samp_a_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_a_rf <- ggplot(y_samp_a_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_a_rf.png", plot = p_x_samp_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_a_rf.png", plot = p_y_samp_a_rf, width = 6, height = 5)

### z 
p_z_samp_a_rf <- ggplot(z_samp_a_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_a_c_rf <- ggplot(z_samp_a_c_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_a_rf.png", plot = p_z_samp_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_a_c_rf.png", plot = p_z_samp_a_c_rf, width = 6, height = 5)

### dist_w 
p_dist_samp_a_rf <- ggplot(dist_samp_a_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_a_c_rf <- ggplot(dist_samp_a_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_a_rf.png", plot = p_dist_samp_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_a_c_rf.png", plot = p_dist_samp_a_c_rf, width = 6, height = 5)

### cat_v
p_cv_samp_a_rf <- ggplot(cv_samp_a_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_a_c_rf <- ggplot(cv_samp_a_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_a_rf.png", plot = p_cv_samp_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_a_c_rf.png", plot = p_cv_samp_a_c_rf, width = 6, height = 5)

### alg_cover 
p_ac_samp_a_rf <- ggplot(ac_samp_a_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_a_c_rf <- ggplot(ac_samp_a_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_a_rf.png", plot = p_ac_samp_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_a_c_rf.png", plot = p_ac_samp_a_c_rf, width = 6, height = 5)

### moos_cover
p_mc_samp_a_rf <- ggplot(mc_samp_a_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_a_c_rf <- ggplot(mc_samp_a_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_a_rf.png", plot = p_mc_samp_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_a_c_rf.png", plot = p_mc_samp_a_c_rf, width = 6, height = 5)

### cpom_cover 
p_cc_samp_a_rf <- ggplot(cc_samp_a_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_a_c_rf <- ggplot(cc_samp_a_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_a_rf.png", plot = p_cc_samp_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_a_c_rf.png", plot = p_cc_samp_a_c_rf, width = 6, height = 5)

### clog_3 
p_clog_3_samp_a_rf <- ggplot(clog_3_samp_a_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_a_c_rf <- ggplot(clog_3_samp_a_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_a_rf.png", plot = p_clog_3_samp_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_a_c_rf.png", plot = p_clog_3_samp_a_c_rf, width = 6, height = 5)

### clog_6 
p_clog_6_samp_a_rf <- ggplot(clog_6_samp_a_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_a_c_rf <- ggplot(clog_6_samp_a_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_a_rf.png", plot = p_clog_6_samp_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_a_c_rf.png", plot = p_clog_6_samp_a_c_rf, width = 6, height = 5)

### sub_type
p_sub_samp_a_rf <- ggplot(sub_samp_a_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_a_c_rf <- ggplot(sub_samp_a_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_a_rf.png", plot = p_sub_samp_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_a_c_rf.png", plot = p_sub_samp_a_c_rf, width = 6, height = 5)


# With rel_abundance as response --------------------------------------------------
### velocity
p_v_samp_ra_rf <- ggplot(v_samp_ra_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_ra_c_rf <- ggplot(v_samp_ra_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_ra_rf.png", plot = p_v_samp_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_ra_c_rf.png", plot = p_v_samp_ra_c_rf, width = 6, height = 5)

### wd_m 
p_wd_samp_ra_rf <- ggplot(wd_samp_ra_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_ra_c_rf <- ggplot(wd_samp_ra_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_ra_rf.png", plot = p_wd_samp_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_ra_c_rf.png", plot = p_wd_samp_ra_c_rf, width = 6, height = 5)


### x/y
p_x_samp_ra_rf <- ggplot(x_samp_ra_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_ra_rf <- ggplot(y_samp_ra_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_ra_rf.png", plot = p_x_samp_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_ra_rf.png", plot = p_y_samp_ra_rf, width = 6, height = 5)

### z 
p_z_samp_ra_rf <- ggplot(z_samp_ra_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_ra_c_rf <- ggplot(z_samp_ra_c_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_ra_rf.png", plot = p_z_samp_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_ra_c_rf.png", plot = p_z_samp_ra_c_rf, width = 6, height = 5)

### dist_w 
p_dist_samp_ra_rf <- ggplot(dist_samp_ra_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_ra_c_rf <- ggplot(dist_samp_ra_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_ra_rf.png", plot = p_dist_samp_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_ra_c_rf.png", plot = p_dist_samp_ra_c_rf, width = 6, height = 5)

### cat_v
p_cv_samp_ra_rf <- ggplot(cv_samp_ra_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_ra_c_rf <- ggplot(cv_samp_ra_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_ra_rf.png", plot = p_cv_samp_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_ra_c_rf.png", plot = p_cv_samp_ra_c_rf, width = 6, height = 5)

### alg_cover 
p_ac_samp_ra_rf <- ggplot(ac_samp_ra_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_ra_c_rf <- ggplot(ac_samp_ra_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_ra_rf.png", plot = p_ac_samp_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_ra_c_rf.png", plot = p_ac_samp_ra_c_rf, width = 6, height = 5)

### moos_cover
p_mc_samp_ra_rf <- ggplot(mc_samp_ra_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_ra_c_rf <- ggplot(mc_samp_ra_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_ra_rf.png", plot = p_mc_samp_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_ra_c_rf.png", plot = p_mc_samp_ra_c_rf, width = 6, height = 5)

### cpom_cover 
p_cc_samp_ra_rf <- ggplot(cc_samp_ra_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_ra_c_rf <- ggplot(cc_samp_ra_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_ra_rf.png", plot = p_cc_samp_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_ra_c_rf.png", plot = p_cc_samp_ra_c_rf, width = 6, height = 5)

### clog_3 
p_clog_3_samp_ra_rf <- ggplot(clog_3_samp_ra_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_ra_c_rf <- ggplot(clog_3_samp_ra_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_ra_rf.png", plot = p_clog_3_samp_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_ra_c_rf.png", plot = p_clog_3_samp_ra_c_rf, width = 6, height = 5)

### clog_6 
p_clog_6_samp_ra_rf <- ggplot(clog_6_samp_ra_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_ra_c_rf <- ggplot(clog_6_samp_ra_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_ra_rf.png", plot = p_clog_6_samp_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_ra_c_rf.png", plot = p_clog_6_samp_ra_c_rf, width = 6, height = 5)

### sub_type
p_sub_samp_ra_rf <- ggplot(sub_samp_ra_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_ra_c_rf <- ggplot(sub_samp_ra_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_ra_rf.png", plot = p_sub_samp_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_ra_c_rf.png", plot = p_sub_samp_ra_c_rf, width = 6, height = 5)
```

### ! Predictors: All Predictors
```{r}
### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_sec_k_rf <- ggplot(v_sec_k_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_sec_k_c_rf <- ggplot(v_sec_k_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_sec_k_rf.png", plot = p_v_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_sec_k_c_rf.png", plot = p_v_sec_k_c_rf, width = 6, height = 5)

### wd_m 
p_wd_sec_k_rf <- ggplot(wd_sec_k_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_sec_k_c_rf <- ggplot(wd_sec_k_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_sec_k_rf.png", plot = p_wd_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_sec_k_c_rf.png", plot = p_wd_sec_k_c_rf, width = 6, height = 5)

### x/y
p_x_sec_k_rf <- ggplot(x_sec_k_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_sec_k_rf <- ggplot(y_sec_k_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_sec_k_rf.png", plot = p_x_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_sec_k_rf.png", plot = p_y_sec_k_rf, width = 6, height = 5)

### z 
p_z_sec_k_rf <- ggplot(z_sec_k_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_sec_k_c_rf <- ggplot(z_sec_k_c_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_sec_k_rf.png", plot = p_z_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_sec_k_c_rf.png", plot = p_z_sec_k_c_rf, width = 6, height = 5)

### dist_w 
p_dist_sec_k_rf <- ggplot(dist_sec_k_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_sec_k_c_rf <- ggplot(dist_sec_k_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_sec_k_rf.png", plot = p_dist_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_sec_k_c_rf.png", plot = p_dist_sec_k_c_rf, width = 6, height = 5)

### cat_v
p_cv_sec_k_rf <- ggplot(cv_sec_k_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_sec_k_c_rf <- ggplot(cv_sec_k_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_sec_k_rf.png", plot = p_cv_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_sec_k_c_rf.png", plot = p_cv_sec_k_c_rf, width = 6, height = 5)

### alg_cover 
p_ac_sec_k_rf <- ggplot(ac_sec_k_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_sec_k_c_rf <- ggplot(ac_sec_k_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_sec_k_rf.png", plot = p_ac_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_sec_k_c_rf.png", plot = p_ac_sec_k_c_rf, width = 6, height = 5)

### moos_cover
p_mc_sec_k_rf <- ggplot(mc_sec_k_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_sec_k_c_rf <- ggplot(mc_sec_k_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_sec_k_rf.png", plot = p_mc_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_sec_k_c_rf.png", plot = p_mc_sec_k_c_rf, width = 6, height = 5)

### cpom_cover 
p_cc_sec_k_rf <- ggplot(cc_sec_k_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_sec_k_c_rf <- ggplot(cc_sec_k_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_sec_k_rf.png", plot = p_cc_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_sec_k_c_rf.png", plot = p_cc_sec_k_c_rf, width = 6, height = 5)

### clog_3 
p_clog_3_sec_k_rf <- ggplot(clog_3_sec_k_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_sec_k_c_rf <- ggplot(clog_3_sec_k_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_sec_k_rf.png", plot = p_clog_3_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_sec_k_c_rf.png", plot = p_clog_3_sec_k_c_rf, width = 6, height = 5)

### clog_6 
p_clog_6_sec_k_rf <- ggplot(clog_6_sec_k_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_sec_k_c_rf <- ggplot(clog_6_sec_k_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_sec_k_rf.png", plot = p_clog_6_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_sec_k_c_rf.png", plot = p_clog_6_sec_k_c_rf, width = 6, height = 5)

### sub_type
p_sub_sec_k_rf <- ggplot(sub_sec_k_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_sec_k_c_rf <- ggplot(sub_sec_k_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_sec_k_rf.png", plot = p_sub_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_sec_k_c_rf.png", plot = p_sub_sec_k_c_rf, width = 6, height = 5)

### pH_before
p_phb_sec_k_rf <- ggplot(phb_sec_k_rf, aes(pH_before, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "pH before Sampling",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_phb_sec_k_c_rf <- ggplot(phb_sec_k_rf, aes(pH_before, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "pH before Sampling",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_phb_sec_k_rf.png", plot = p_phb_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_phb_sec_k_c_rf.png", plot = p_phb_sec_k_c_rf, width = 6, height = 5)

### pH_during
p_phd_sec_k_rf <- ggplot(phd_sec_k_rf, aes(pH_during, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "pH during Sampling",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_phd_sec_k_c_rf <- ggplot(phd_sec_k_rf, aes(pH_during, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "pH during Sampling",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_phd_sec_k_rf.png", plot = p_phd_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_phd_sec_k_c_rf.png", plot = p_phd_sec_k_c_rf, width = 6, height = 5)

### pH_after
p_pha_sec_k_rf <- ggplot(pha_sec_k_rf, aes(pH_after, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "pH after Sampling",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_pha_sec_k_c_rf <- ggplot(pha_sec_k_rf, aes(pH_after, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "pH after Sampling",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_pha_sec_k_rf.png", plot = p_pha_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_pha_sec_k_c_rf.png", plot = p_pha_sec_k_c_rf, width = 6, height = 5)

### conduct_before
p_cb_sec_k_rf <- ggplot(cb_sec_k_rf, aes(conduct_before, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Conduction before Sampling",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cb_sec_k_c_rf <- ggplot(cb_sec_k_rf, aes(conduct_before, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Conduction before Sampling",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cb_sec_k_rf.png", plot = p_cb_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cb_sec_k_c_rf.png", plot = p_cb_sec_k_c_rf, width = 6, height = 5)

### conduct_during
p_cd_sec_k_rf <- ggplot(cd_sec_k_rf, aes(conduct_during, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Conduction during Sampling",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cd_sec_k_c_rf <- ggplot(cd_sec_k_rf, aes(conduct_during, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Conduction during Sampling",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cd_sec_k_rf.png", plot = p_cd_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cd_sec_k_c_rf.png", plot = p_cd_sec_k_c_rf, width = 6, height = 5)

### conduct_after
p_ca_sec_k_rf <- ggplot(ca_sec_k_rf, aes(conduct_after, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Conduction after Sampling",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ca_sec_k_c_rf <- ggplot(ca_sec_k_rf, aes(conduct_after, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Conduction after Sampling",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ca_sec_k_rf.png", plot = p_ca_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ca_sec_k_c_rf.png", plot = p_ca_sec_k_c_rf, width = 6, height = 5)

### ox_before
p_ob_sec_k_rf <- ggplot(ob_sec_k_rf, aes(ox_before, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Oxygen before Sampling",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ob_sec_k_c_rf <- ggplot(ob_sec_k_rf, aes(ox_before, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Oxygen before Sampling",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ob_sec_k_rf.png", plot = p_ob_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ob_sec_k_c_rf.png", plot = p_ob_sec_k_c_rf, width = 6, height = 5)

### ox_during
p_od_sec_k_rf <- ggplot(od_sec_k_rf, aes(ox_during, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Oxygen during Sampling",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_od_sec_k_c_rf <- ggplot(od_sec_k_rf, aes(ox_during, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Oxygen during Sampling",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_od_sec_k_rf.png", plot = p_od_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_od_sec_k_c_rf.png", plot = p_od_sec_k_c_rf, width = 6, height = 5)

### ox_after
p_oa_sec_k_rf <- ggplot(oa_sec_k_rf, aes(ox_after, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Oxygen after Sampling",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_oa_sec_k_c_rf <- ggplot(oa_sec_k_rf, aes(ox_after, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Oxygen after Sampling",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_oa_sec_k_rf.png", plot = p_oa_sec_k_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_oa_sec_k_c_rf.png", plot = p_oa_sec_k_c_rf, width = 6, height = 5)

### turb_before
tb_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_tb_sec_k_rf.csv")
tb_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_tb_sec_k_c_rf.csv")

### turb_during
td_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_td_sec_k_rf.csv")
td_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_td_sec_k_c_rf.csv")

### turb_after
ta_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_ta_sec_k_rf.csv")
ta_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_ta_sec_k_c_rf.csv")

### temp_before
teb_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_teb_sec_k_rf.csv")
teb_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_teb_sec_k_c_rf.csv")

### temp_during
ted_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_ted_sec_k_rf.csv")
ted_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_ted_sec_k_c_rf.csv")

### temp_after
tea_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_tea_sec_k_rf.csv")
tea_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_tea_sec_k_c_rf.csv")

### q_before
qb_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_qb_sec_k_rf.csv")
qb_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_qb_sec_k_c_rf.csv")

### q_during
qd_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_qd_sec_k_rf.csv")
qd_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_qd_sec_k_c_rf.csv")

### q_after
qa_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_qa_sec_k_rf.csv")
qa_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_qa_sec_k_c_rf.csv")

### gaug_before
gb_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_gb_sec_k_rf.csv")
gb_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_gb_sec_k_c_rf.csv")

### gaug_during
gd_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_gd_sec_k_rf.csv")
gd_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_gd_sec_k_c_rf.csv")

### gaug_after
ga_sec_k_rf <- read_delim("ML_Model/pdp_data/pdp_ga_sec_k_rf.csv")
ga_sec_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_ga_sec_k_c_rf.csv")


# With shannon index as response ----------------------------------------------
### velocity
p_v_sec_s_rf <- ggplot(v_sec_s_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_sec_s_c_rf <- ggplot(v_sec_s_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_sec_s_rf.png", plot = p_v_sec_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_sec_s_c_rf.png", plot = p_v_sec_s_c_rf, width = 6, height = 5)

### wd_m 
p_wd_sec_s_rf <- ggplot(wd_sec_s_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_sec_s_c_rf <- ggplot(wd_sec_s_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_sec_s_rf.png", plot = p_wd_sec_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_sec_s_c_rf.png", plot = p_wd_sec_s_c_rf, width = 6, height = 5)


### x/y
p_x_sec_s_rf <- ggplot(x_sec_s_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_sec_s_rf <- ggplot(y_sec_s_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_sec_s_rf.png", plot = p_x_sec_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_sec_s_rf.png", plot = p_y_sec_s_rf, width = 6, height = 5)

### z 
p_z_sec_s_rf <- ggplot(z_sec_s_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_sec_s_c_rf <- ggplot(z_sec_s_c_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_sec_s_rf.png", plot = p_z_sec_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_sec_s_c_rf.png", plot = p_z_sec_s_c_rf, width = 6, height = 5)

### dist_w 
p_dist_sec_s_rf <- ggplot(dist_sec_s_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_sec_s_c_rf <- ggplot(dist_sec_s_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_sec_s_rf.png", plot = p_dist_sec_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_sec_s_c_rf.png", plot = p_dist_sec_s_c_rf, width = 6, height = 5)

### cat_v
p_cv_sec_s_rf <- ggplot(cv_sec_s_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_sec_s_c_rf <- ggplot(cv_sec_s_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_sec_s_rf.png", plot = p_cv_sec_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_sec_s_c_rf.png", plot = p_cv_sec_s_c_rf, width = 6, height = 5)

### alg_cover 
p_ac_sec_s_rf <- ggplot(ac_sec_s_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_sec_s_c_rf <- ggplot(ac_sec_s_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_sec_s_rf.png", plot = p_ac_sec_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_sec_s_c_rf.png", plot = p_ac_sec_s_c_rf, width = 6, height = 5)

### moos_cover
p_mc_sec_s_rf <- ggplot(mc_sec_s_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_sec_s_c_rf <- ggplot(mc_sec_s_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_sec_s_rf.png", plot = p_mc_sec_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_sec_s_c_rf.png", plot = p_mc_sec_s_c_rf, width = 6, height = 5)

### cpom_cover 
p_cc_sec_s_rf <- ggplot(cc_sec_s_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_sec_s_c_rf <- ggplot(cc_sec_s_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_sec_s_rf.png", plot = p_cc_sec_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_sec_s_c_rf.png", plot = p_cc_sec_s_c_rf, width = 6, height = 5)

### clog_3 
p_clog_3_sec_s_rf <- ggplot(clog_3_sec_s_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_sec_s_c_rf <- ggplot(clog_3_sec_s_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_sec_s_rf.png", plot = p_clog_3_sec_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_sec_s_c_rf.png", plot = p_clog_3_sec_s_c_rf, width = 6, height = 5)

### clog_6 
p_clog_6_sec_s_rf <- ggplot(clog_6_sec_s_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_sec_s_c_rf <- ggplot(clog_6_sec_s_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_sec_s_rf.png", plot = p_clog_6_sec_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_sec_s_c_rf.png", plot = p_clog_6_sec_s_c_rf, width = 6, height = 5)

### sub_type
p_sub_sec_s_rf <- ggplot(sub_sec_s_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_sec_s_c_rf <- ggplot(sub_sec_s_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_sec_s_rf.png", plot = p_sub_sec_s_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_sec_s_c_rf.png", plot = p_sub_sec_s_c_rf, width = 6, height = 5)


# With abundance as response --------------------------------------------------
### velocity
p_v_sec_a_rf <- ggplot(v_sec_a_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_sec_a_c_rf <- ggplot(v_sec_a_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_sec_a_rf.png", plot = p_v_sec_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_sec_a_c_rf.png", plot = p_v_sec_a_c_rf, width = 6, height = 5)

### wd_m 
p_wd_sec_a_rf <- ggplot(wd_sec_a_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_sec_a_c_rf <- ggplot(wd_sec_a_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_sec_a_rf.png", plot = p_wd_sec_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_sec_a_c_rf.png", plot = p_wd_sec_a_c_rf, width = 6, height = 5)


### x/y
p_x_sec_a_rf <- ggplot(x_sec_a_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_sec_a_rf <- ggplot(y_sec_a_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_sec_a_rf.png", plot = p_x_sec_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_sec_a_rf.png", plot = p_y_sec_a_rf, width = 6, height = 5)

### z 
p_z_sec_a_rf <- ggplot(z_sec_a_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_sec_a_c_rf <- ggplot(z_sec_a_c_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_sec_a_rf.png", plot = p_z_sec_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_sec_a_c_rf.png", plot = p_z_sec_a_c_rf, width = 6, height = 5)

### dist_w 
p_dist_sec_a_rf <- ggplot(dist_sec_a_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_sec_a_c_rf <- ggplot(dist_sec_a_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_sec_a_rf.png", plot = p_dist_sec_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_sec_a_c_rf.png", plot = p_dist_sec_a_c_rf, width = 6, height = 5)

### cat_v
p_cv_sec_a_rf <- ggplot(cv_sec_a_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_sec_a_c_rf <- ggplot(cv_sec_a_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_sec_a_rf.png", plot = p_cv_sec_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_sec_a_c_rf.png", plot = p_cv_sec_a_c_rf, width = 6, height = 5)

### alg_cover 
p_ac_sec_a_rf <- ggplot(ac_sec_a_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_sec_a_c_rf <- ggplot(ac_sec_a_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_sec_a_rf.png", plot = p_ac_sec_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_sec_a_c_rf.png", plot = p_ac_sec_a_c_rf, width = 6, height = 5)

### moos_cover
p_mc_sec_a_rf <- ggplot(mc_sec_a_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_sec_a_c_rf <- ggplot(mc_sec_a_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_sec_a_rf.png", plot = p_mc_sec_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_sec_a_c_rf.png", plot = p_mc_sec_a_c_rf, width = 6, height = 5)

### cpom_cover 
p_cc_sec_a_rf <- ggplot(cc_sec_a_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_sec_a_c_rf <- ggplot(cc_sec_a_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_sec_a_rf.png", plot = p_cc_sec_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_sec_a_c_rf.png", plot = p_cc_sec_a_c_rf, width = 6, height = 5)

### clog_3 
p_clog_3_sec_a_rf <- ggplot(clog_3_sec_a_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_sec_a_c_rf <- ggplot(clog_3_sec_a_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_sec_a_rf.png", plot = p_clog_3_sec_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_sec_a_c_rf.png", plot = p_clog_3_sec_a_c_rf, width = 6, height = 5)

### clog_6 
p_clog_6_sec_a_rf <- ggplot(clog_6_sec_a_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_sec_a_c_rf <- ggplot(clog_6_sec_a_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_sec_a_rf.png", plot = p_clog_6_sec_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_sec_a_c_rf.png", plot = p_clog_6_sec_a_c_rf, width = 6, height = 5)

### sub_type
p_sub_sec_a_rf <- ggplot(sub_sec_a_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_sec_a_c_rf <- ggplot(sub_sec_a_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_sec_a_rf.png", plot = p_sub_sec_a_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_sec_a_c_rf.png", plot = p_sub_sec_a_c_rf, width = 6, height = 5)


# With rel_abundance as response --------------------------------------------------
### velocity
p_v_sec_ra_rf <- ggplot(v_sec_ra_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_sec_ra_c_rf <- ggplot(v_sec_ra_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_sec_ra_rf.png", plot = p_v_sec_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_sec_ra_c_rf.png", plot = p_v_sec_ra_c_rf, width = 6, height = 5)

### wd_m 
p_wd_sec_ra_rf <- ggplot(wd_sec_ra_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_sec_ra_c_rf <- ggplot(wd_sec_ra_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_sec_ra_rf.png", plot = p_wd_sec_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_sec_ra_c_rf.png", plot = p_wd_sec_ra_c_rf, width = 6, height = 5)


### x/y
p_x_sec_ra_rf <- ggplot(x_sec_ra_rf, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_sec_ra_rf <- ggplot(y_sec_ra_rf, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_sec_ra_rf.png", plot = p_x_sec_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_sec_ra_rf.png", plot = p_y_sec_ra_rf, width = 6, height = 5)

### z 
p_z_sec_ra_rf <- ggplot(z_sec_ra_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_sec_ra_c_rf <- ggplot(z_sec_ra_c_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_sec_ra_rf.png", plot = p_z_sec_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_sec_ra_c_rf.png", plot = p_z_sec_ra_c_rf, width = 6, height = 5)

### dist_w 
p_dist_sec_ra_rf <- ggplot(dist_sec_ra_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_sec_ra_c_rf <- ggplot(dist_sec_ra_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_sec_ra_rf.png", plot = p_dist_sec_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_sec_ra_c_rf.png", plot = p_dist_sec_ra_c_rf, width = 6, height = 5)

### cat_v
p_cv_sec_ra_rf <- ggplot(cv_sec_ra_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_sec_ra_c_rf <- ggplot(cv_sec_ra_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_sec_ra_rf.png", plot = p_cv_sec_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_sec_ra_c_rf.png", plot = p_cv_sec_ra_c_rf, width = 6, height = 5)

### alg_cover 
p_ac_sec_ra_rf <- ggplot(ac_sec_ra_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_sec_ra_c_rf <- ggplot(ac_sec_ra_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_sec_ra_rf.png", plot = p_ac_sec_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_sec_ra_c_rf.png", plot = p_ac_sec_ra_c_rf, width = 6, height = 5)

### moos_cover
p_mc_sec_ra_rf <- ggplot(mc_sec_ra_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_sec_ra_c_rf <- ggplot(mc_sec_ra_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_sec_ra_rf.png", plot = p_mc_sec_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_sec_ra_c_rf.png", plot = p_mc_sec_ra_c_rf, width = 6, height = 5)

### cpom_cover 
p_cc_sec_ra_rf <- ggplot(cc_sec_ra_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_sec_ra_c_rf <- ggplot(cc_sec_ra_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_sec_ra_rf.png", plot = p_cc_sec_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_sec_ra_c_rf.png", plot = p_cc_sec_ra_c_rf, width = 6, height = 5)

### clog_3 
p_clog_3_sec_ra_rf <- ggplot(clog_3_sec_ra_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_sec_ra_c_rf <- ggplot(clog_3_sec_ra_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_sec_ra_rf.png", plot = p_clog_3_sec_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_sec_ra_c_rf.png", plot = p_clog_3_sec_ra_c_rf, width = 6, height = 5)

### clog_6 
p_clog_6_sec_ra_rf <- ggplot(clog_6_sec_ra_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_sec_ra_c_rf <- ggplot(clog_6_sec_ra_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_sec_ra_rf.png", plot = p_clog_6_sec_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_sec_ra_c_rf.png", plot = p_clog_6_sec_ra_c_rf, width = 6, height = 5)

### sub_type
p_sub_sec_ra_rf <- ggplot(sub_sec_ra_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_sec_ra_c_rf <- ggplot(sub_sec_ra_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: All Predictors"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_sec_ra_rf.png", plot = p_sub_sec_ra_rf, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_sec_ra_c_rf.png", plot = p_sub_sec_ra_c_rf, width = 6, height = 5)
```

### Combined
```{r}
# all indices together --------------------------------------------------------
v_in_rf <- rbind(v_k_rf, v_s_rf, v_ra_rf) # v_a_rf

ggplot(v_in_rf, aes(velocity, yhat, group = index)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line(aes(linetype = index)) + 
  labs(
    x = "Velocity (m/s)",
    y = "Indices",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal()
```


## RF added
### Predictor: Velocity
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_k_rf_add <- ggplot(v_k_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_k_c_rf_add <- ggplot(v_k_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_k_rf_add.png", plot = p_v_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_k_c_rf_add.png", plot = p_v_k_c_rf_add, width = 6, height = 5)

### froude 
p_f_v_k_rf_add <- ggplot(f_v_k_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "K-Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_f_v_k_c_rf_add <- ggplot(f_v_k_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "K-Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_v_k_rf_add.png", plot = p_f_v_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_v_k_c_rf_add.png", plot = p_f_v_k_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_v_k_rf_add <- ggplot(s_v_k_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "K-Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_s_v_k_c_rf_add <- ggplot(s_v_k_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "K-Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_v_k_rf_add.png", plot = p_s_v_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_v_k_c_rf_add.png", plot = p_s_v_k_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_v_k_rf_add <- ggplot(sp_v_k_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "K-Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sp_v_k_c_rf_add <- ggplot(sp_v_k_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "K-Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_v_k_rf_add.png", plot = p_sp_v_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_v_k_c_rf_add.png", plot = p_sp_v_k_c_rf_add, width = 6, height = 5)

### x/y
p_x_v_k_rf_add <- ggplot(x_v_k_rf_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_k_rf_add <- ggplot(y_v_k_rf_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_k_rf_add.png", plot = p_x_v_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_k_rf_add.png", plot = p_y_v_k_rf_add, width = 6, height = 5)

# With shannon index as response ----------------------------------------------
### velocity
p_v_s_rf_add <- ggplot(v_s_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_s_c_rf_add <- ggplot(v_s_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_s_rf_add.png", plot = p_v_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_s_c_rf_add.png", plot = p_v_s_c_rf_add, width = 6, height = 5)

### froude 
p_f_v_s_rf_add <- ggplot(f_v_s_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_f_v_s_c_rf_add <- ggplot(f_v_s_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_v_s_rf_add.png", plot = p_f_v_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_v_s_c_rf_add.png", plot = p_f_v_s_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_v_s_rf_add <- ggplot(s_v_s_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_s_v_s_c_rf_add <- ggplot(s_v_s_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_v_s_rf_add.png", plot = p_s_v_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_v_s_c_rf_add.png", plot = p_s_v_s_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_v_s_rf_add <- ggplot(sp_v_s_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sp_v_s_c_rf_add <- ggplot(sp_v_s_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_v_s_rf_add.png", plot = p_sp_v_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_v_s_c_rf_add.png", plot = p_sp_v_s_c_rf_add, width = 6, height = 5)

### x/y
p_x_v_s_rf_add <- ggplot(x_v_s_rf_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_s_rf_add <- ggplot(y_v_s_rf_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_s_rf_add.png", plot = p_x_v_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_s_rf_add.png", plot = p_y_v_s_rf_add, width = 6, height = 5)

# With abundance as response --------------------------------------------------
### velocity
p_v_a_rf_add <- ggplot(v_a_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_a_c_rf_add <- ggplot(v_a_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_a_rf_add.png", plot = p_v_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_a_c_rf_add.png", plot = p_v_a_c_rf_add, width = 6, height = 5)

### froude 
p_f_v_a_rf_add <- ggplot(f_v_a_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_f_v_a_c_rf_add <- ggplot(f_v_a_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_v_a_rf_add.png", plot = p_f_v_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_v_a_c_rf_add.png", plot = p_f_v_a_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_v_a_rf_add <- ggplot(s_v_a_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_s_v_a_c_rf_add <- ggplot(s_v_a_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_v_a_rf_add.png", plot = p_s_v_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_v_a_c_rf_add.png", plot = p_s_v_a_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_v_a_rf_add <- ggplot(sp_v_a_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sp_v_a_c_rf_add <- ggplot(sp_v_a_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_v_a_rf_add.png", plot = p_sp_v_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_v_a_c_rf_add.png", plot = p_sp_v_a_c_rf_add, width = 6, height = 5)


### x/y
p_x_v_a_rf_add <- ggplot(x_v_a_rf_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_a_rf_add <- ggplot(y_v_a_rf_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_a_rf_add.png", plot = p_x_v_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_a_rf_add.png", plot = p_y_v_a_rf_add, width = 6, height = 5)

# With rel_abundance as response --------------------------------------------------
### velocity
p_v_ra_rf_add <- ggplot(v_ra_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_ra_c_rf_add <- ggplot(v_ra_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_ra_rf_add.png", plot = p_v_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_ra_c_rf_add.png", plot = p_v_ra_c_rf_add, width = 6, height = 5)

### froude 
p_f_v_ra_rf_add <- ggplot(f_v_ra_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_f_v_ra_c_rf_add <- ggplot(f_v_ra_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_v_ra_rf_add.png", plot = p_f_v_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_v_ra_c_rf_add.png", plot = p_f_v_ra_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_v_ra_rf_add <- ggplot(s_v_ra_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_s_v_ra_c_rf_add <- ggplot(s_v_ra_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_v_ra_rf_add.png", plot = p_s_v_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_v_ra_c_rf_add.png", plot = p_s_v_ra_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_v_ra_rf_add <- ggplot(sp_v_ra_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sp_v_ra_c_rf_add <- ggplot(sp_v_ra_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_v_ra_rf_add.png", plot = p_sp_v_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_v_ra_c_rf_add.png", plot = p_sp_v_ra_c_rf_add, width = 6, height = 5)

### x/y
p_x_v_ra_rf_add <- ggplot(x_v_ra_rf_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_ra_rf_add <- ggplot(y_v_ra_rf_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_ra_rf_add.png", plot = p_x_v_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_ra_rf_add.png", plot = p_y_v_ra_rf_add, width = 6, height = 5)
```

### Predictors: V + WD
```{r}
### PREDICTOR: V + WD ### ---------------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_wd_k_rf_add <- ggplot(v_wd_k_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_wd_k_c_rf_add <- ggplot(v_wd_k_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_wd_k_rf_add.png", plot = p_v_wd_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_wd_k_c_rf_add.png", plot = p_v_wd_k_c_rf_add, width = 6, height = 5)

### wd_m 
p_wd_k_rf_add <- ggplot(wd_k_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_k_c_rf_add <- ggplot(wd_k_c_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_k_rf_add.png", plot = p_wd_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_k_c_rf_add.png", plot = p_wd_k_c_rf_add, width = 6, height = 5)

### froude 
p_f_wd_k_rf_add <- ggplot(f_wd_k_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "K-Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_f_wd_k_c_rf_add <- ggplot(f_wd_k_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "K-Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_wd_k_rf_add.png", plot = p_f_wd_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_wd_k_c_rf_add.png", plot = p_f_wd_k_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_wd_k_rf_add <- ggplot(s_wd_k_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "K-Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_s_wd_k_c_rf_add <- ggplot(s_wd_k_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "K-Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_wd_k_rf_add.png", plot = p_s_wd_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_wd_k_c_rf_add.png", plot = p_s_wd_k_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_wd_k_rf_add <- ggplot(sp_wd_k_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "K-Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sp_wd_k_c_rf_add <- ggplot(sp_wd_k_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "K-Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_wd_k_rf_add.png", plot = p_sp_wd_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_wd_k_c_rf_add.png", plot = p_sp_wd_k_c_rf_add, width = 6, height = 5)

### x/y
p_x_wd_k_rf_add <- ggplot(x_wd_k_rf_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_wd_k_rf_add <- ggplot(y_wd_k_rf_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_wd_k_rf_add.png", plot = p_x_wd_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_wd_k_rf_add.png", plot = p_y_wd_k_rf_add, width = 6, height = 5)

# With shannon index as response ----------------------------------------------
### velocity
p_v_s_rf_add <- ggplot(v_s_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_s_c_rf_add <- ggplot(v_s_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_s_rf_add.png", plot = p_v_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_s_c_rf_add.png", plot = p_v_s_c_rf_add, width = 6, height = 5)

### wd_m 
p_wd_s_rf_add <- ggplot(wd_s_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_s_c_rf_add <- ggplot(wd_s_c_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_s_rf_add.png", plot = p_wd_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_s_c_rf_add.png", plot = p_wd_s_c_rf_add, width = 6, height = 5)

### froude 
p_f_wd_s_rf_add <- ggplot(f_wd_s_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_f_wd_s_c_rf_add <- ggplot(f_wd_s_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_wd_s_rf_add.png", plot = p_f_wd_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_wd_s_c_rf_add.png", plot = p_f_wd_s_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_wd_s_rf_add <- ggplot(s_wd_s_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_s_wd_s_c_rf_add <- ggplot(s_wd_s_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_wd_s_rf_add.png", plot = p_s_wd_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_wd_s_c_rf_add.png", plot = p_s_wd_s_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_wd_s_rf_add <- ggplot(sp_wd_s_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sp_wd_s_c_rf_add <- ggplot(sp_wd_s_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_wd_s_rf_add.png", plot = p_sp_wd_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_wd_s_c_rf_add.png", plot = p_sp_wd_s_c_rf_add, width = 6, height = 5)

### x/y
p_x_v_s_rf_add <- ggplot(x_v_s_rf_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_s_rf_add <- ggplot(y_v_s_rf_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_s_rf_add.png", plot = p_x_v_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_s_rf_add.png", plot = p_y_v_s_rf_add, width = 6, height = 5)

# With abundance as response --------------------------------------------------
### velocity
p_v_a_rf_add <- ggplot(v_a_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_a_c_rf_add <- ggplot(v_a_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_a_rf_add.png", plot = p_v_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_a_c_rf_add.png", plot = p_v_a_c_rf_add, width = 6, height = 5)

### wd_m 
p_wd_a_rf_add <- ggplot(wd_a_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_a_c_rf_add <- ggplot(wd_a_c_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_a_rf_add.png", plot = p_wd_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_a_c_rf_add.png", plot = p_wd_a_c_rf_add, width = 6, height = 5)

### froude 
p_f_wd_a_rf_add <- ggplot(f_wd_a_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_f_wd_a_c_rf_add <- ggplot(f_wd_a_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_wd_a_rf_add.png", plot = p_f_wd_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_wd_a_c_rf_add.png", plot = p_f_wd_a_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_wd_a_rf_add <- ggplot(s_wd_a_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_s_wd_a_c_rf_add <- ggplot(s_wd_a_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_wd_a_rf_add.png", plot = p_s_wd_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_wd_a_c_rf_add.png", plot = p_s_wd_a_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_wd_a_rf_add <- ggplot(sp_wd_a_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sp_wd_a_c_rf_add <- ggplot(sp_wd_a_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_wd_a_rf_add.png", plot = p_sp_wd_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_wd_a_c_rf_add.png", plot = p_sp_wd_a_c_rf_add, width = 6, height = 5)

### x/y
p_x_v_a_rf_add <- ggplot(x_v_a_rf_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_a_rf_add <- ggplot(y_v_a_rf_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_a_rf_add.png", plot = p_x_v_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_a_rf_add.png", plot = p_y_v_a_rf_add, width = 6, height = 5)

# With rel_abundance as response --------------------------------------------------
### velocity
p_v_ra_rf_add <- ggplot(v_ra_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_ra_c_rf_add <- ggplot(v_ra_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_ra_rf_add.png", plot = p_v_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_ra_c_rf_add.png", plot = p_v_ra_c_rf_add, width = 6, height = 5)

### wd_m 
p_wd_ra_rf_add <- ggplot(wd_ra_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_ra_c_rf_add <- ggplot(wd_ra_c_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_ra_rf_add.png", plot = p_wd_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_ra_c_rf_add.png", plot = p_wd_ra_c_rf_add, width = 6, height = 5)

### froude 
p_f_wd_ra_rf_add <- ggplot(f_wd_ra_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_f_wd_ra_c_rf_add <- ggplot(f_wd_ra_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_wd_ra_rf_add.png", plot = p_f_wd_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_wd_ra_c_rf_add.png", plot = p_f_wd_ra_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_wd_ra_rf_add <- ggplot(s_wd_ra_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_s_wd_ra_c_rf_add <- ggplot(s_wd_ra_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_wd_ra_rf_add.png", plot = p_s_wd_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_wd_ra_c_rf_add.png", plot = p_s_wd_ra_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_wd_ra_rf_add <- ggplot(sp_wd_ra_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sp_wd_ra_c_rf_add <- ggplot(sp_wd_ra_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_wd_ra_rf_add.png", plot = p_sp_wd_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_wd_ra_c_rf_add.png", plot = p_sp_wd_ra_c_rf_add, width = 6, height = 5)

### x/y
p_x_v_ra_rf_add <- ggplot(x_v_ra_rf_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_ra_rf_add <- ggplot(y_v_ra_rf_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_ra_rf_add.png", plot = p_x_v_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_ra_rf_add.png", plot = p_y_v_ra_rf_add, width = 6, height = 5)
```

### Predictors: Sampling Locations
```{r}
### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_samp_k_rf_add <- ggplot(v_samp_k_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_k_c_rf_add <- ggplot(v_samp_k_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_k_rf_add.png", plot = p_v_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_k_c_rf_add.png", plot = p_v_samp_k_c_rf_add, width = 6, height = 5)

### froude 
p_f_samp_k_rf_add <- ggplot(f_samp_k_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "K-Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_f_samp_k_c_rf_add <- ggplot(f_samp_k_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "K-Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_samp_k_rf_add.png", plot = p_f_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_samp_k_c_rf_add.png", plot = p_f_samp_k_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_samp_k_rf_add <- ggplot(s_samp_k_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "K-Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_s_samp_k_c_rf_add <- ggplot(s_samp_k_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "K-Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_samp_k_rf_add.png", plot = p_s_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_samp_k_c_rf_add.png", plot = p_s_samp_k_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_samp_k_rf_add <- ggplot(sp_samp_k_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "K-Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sp_samp_k_c_rf_add <- ggplot(sp_samp_k_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "K-Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_samp_k_rf_add.png", plot = p_sp_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_samp_k_c_rf_add.png", plot = p_sp_samp_k_c_rf_add, width = 6, height = 5)


### wd_m 
p_wd_samp_k_rf_add <- ggplot(wd_samp_k_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_k_c_rf_add <- ggplot(wd_samp_k_c_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_k_rf_add.png", plot = p_wd_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_k_c_rf_add.png", plot = p_wd_samp_k_c_rf_add, width = 6, height = 5)

### x/y
p_x_samp_k_rf_add <- ggplot(x_samp_k_rf_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_k_rf_add <- ggplot(y_samp_k_rf_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_k_rf_add.png", plot = p_x_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_k_rf_add.png", plot = p_y_samp_k_rf_add, width = 6, height = 5)

### z 
p_z_samp_k_rf_add <- ggplot(z_samp_k_rf_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_k_c_rf_add <- ggplot(z_samp_k_c_rf_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_k_rf_add.png", plot = p_z_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_k_c_rf_add.png", plot = p_z_samp_k_c_rf_add, width = 6, height = 5)

### dist_w 
p_dist_samp_k_rf_add <- ggplot(dist_samp_k_rf_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_k_c_rf_add <- ggplot(dist_samp_k_rf_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_k_rf_add.png", plot = p_dist_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_k_c_rf_add.png", plot = p_dist_samp_k_c_rf_add, width = 6, height = 5)

### cat_v
p_cv_samp_k_rf_add <- ggplot(cv_samp_k_rf_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_k_c_rf_add <- ggplot(cv_samp_k_rf_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_k_rf_add.png", plot = p_cv_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_k_c_rf_add.png", plot = p_cv_samp_k_c_rf_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_k_rf_add <- ggplot(ac_samp_k_rf_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_k_c_rf_add <- ggplot(ac_samp_k_rf_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_k_rf_add.png", plot = p_ac_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_k_c_rf_add.png", plot = p_ac_samp_k_c_rf_add, width = 6, height = 5)

### moos_cover
p_mc_samp_k_rf_add <- ggplot(mc_samp_k_rf_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_k_c_rf_add <- ggplot(mc_samp_k_rf_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_k_rf_add.png", plot = p_mc_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_k_c_rf_add.png", plot = p_mc_samp_k_c_rf_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_k_rf_add <- ggplot(cc_samp_k_rf_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_k_c_rf_add <- ggplot(cc_samp_k_rf_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_k_rf_add.png", plot = p_cc_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_k_c_rf_add.png", plot = p_cc_samp_k_c_rf_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_k_rf_add <- ggplot(clog_3_samp_k_rf_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_k_c_rf_add <- ggplot(clog_3_samp_k_rf_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_k_rf_add.png", plot = p_clog_3_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_k_c_rf_add.png", plot = p_clog_3_samp_k_c_rf_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_k_rf_add <- ggplot(clog_6_samp_k_rf_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_k_c_rf_add <- ggplot(clog_6_samp_k_rf_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_k_rf_add.png", plot = p_clog_6_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_k_c_rf_add.png", plot = p_clog_6_samp_k_c_rf_add, width = 6, height = 5)

### sub_type
p_sub_samp_k_rf_add <- ggplot(sub_samp_k_rf_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_k_c_rf_add <- ggplot(sub_samp_k_rf_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_k_rf_add.png", plot = p_sub_samp_k_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_k_c_rf_add.png", plot = p_sub_samp_k_c_rf_add, width = 6, height = 5)

# With shannon index as response ----------------------------------------------
### velocity
p_v_samp_s_rf_add <- ggplot(v_samp_s_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_s_c_rf_add <- ggplot(v_samp_s_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_s_rf_add.png", plot = p_v_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_s_c_rf_add.png", plot = p_v_samp_s_c_rf_add, width = 6, height = 5)

### froude 
p_f_samp_s_rf_add <- ggplot(f_samp_s_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_f_samp_s_c_rf_add <- ggplot(f_samp_s_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_samp_s_rf_add.png", plot = p_f_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_samp_s_c_rf_add.png", plot = p_f_samp_s_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_samp_s_rf_add <- ggplot(s_samp_s_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_s_samp_s_c_rf_add <- ggplot(s_samp_s_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_samp_s_rf_add.png", plot = p_s_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_samp_s_c_rf_add.png", plot = p_s_samp_s_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_samp_s_rf_add <- ggplot(sp_samp_s_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sp_samp_s_c_rf_add <- ggplot(sp_samp_s_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_samp_s_rf_add.png", plot = p_sp_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_samp_s_c_rf_add.png", plot = p_sp_samp_s_c_rf_add, width = 6, height = 5)

### wd_m 
p_wd_samp_s_rf_add <- ggplot(wd_samp_s_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_s_c_rf_add <- ggplot(wd_samp_s_c_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_s_rf_add.png", plot = p_wd_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_s_c_rf_add.png", plot = p_wd_samp_s_c_rf_add, width = 6, height = 5)


### x/y
p_x_samp_s_rf_add <- ggplot(x_samp_s_rf_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_s_rf_add <- ggplot(y_samp_s_rf_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_s_rf_add.png", plot = p_x_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_s_rf_add.png", plot = p_y_samp_s_rf_add, width = 6, height = 5)

### z 
p_z_samp_s_rf_add <- ggplot(z_samp_s_rf_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_s_c_rf_add <- ggplot(z_samp_s_c_rf_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_s_rf_add.png", plot = p_z_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_s_c_rf_add.png", plot = p_z_samp_s_c_rf_add, width = 6, height = 5)

### dist_w 
p_dist_samp_s_rf_add <- ggplot(dist_samp_s_rf_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_s_c_rf_add <- ggplot(dist_samp_s_rf_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_s_rf_add.png", plot = p_dist_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_s_c_rf_add.png", plot = p_dist_samp_s_c_rf_add, width = 6, height = 5)

### cat_v
p_cv_samp_s_rf_add <- ggplot(cv_samp_s_rf_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_s_c_rf_add <- ggplot(cv_samp_s_rf_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_s_rf_add.png", plot = p_cv_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_s_c_rf_add.png", plot = p_cv_samp_s_c_rf_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_s_rf_add <- ggplot(ac_samp_s_rf_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_s_c_rf_add <- ggplot(ac_samp_s_rf_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_s_rf_add.png", plot = p_ac_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_s_c_rf_add.png", plot = p_ac_samp_s_c_rf_add, width = 6, height = 5)

### moos_cover
p_mc_samp_s_rf_add <- ggplot(mc_samp_s_rf_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_s_c_rf_add <- ggplot(mc_samp_s_rf_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_s_rf_add.png", plot = p_mc_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_s_c_rf_add.png", plot = p_mc_samp_s_c_rf_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_s_rf_add <- ggplot(cc_samp_s_rf_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_s_c_rf_add <- ggplot(cc_samp_s_rf_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_s_rf_add.png", plot = p_cc_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_s_c_rf_add.png", plot = p_cc_samp_s_c_rf_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_s_rf_add <- ggplot(clog_3_samp_s_rf_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_s_c_rf_add <- ggplot(clog_3_samp_s_rf_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_s_rf_add.png", plot = p_clog_3_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_s_c_rf_add.png", plot = p_clog_3_samp_s_c_rf_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_s_rf_add <- ggplot(clog_6_samp_s_rf_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_s_c_rf_add <- ggplot(clog_6_samp_s_rf_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_s_rf_add.png", plot = p_clog_6_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_s_c_rf_add.png", plot = p_clog_6_samp_s_c_rf_add, width = 6, height = 5)

### sub_type
p_sub_samp_s_rf_add <- ggplot(sub_samp_s_rf_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Shannon Index",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_s_c_rf_add <- ggplot(sub_samp_s_rf_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Shannon Index",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_s_rf_add.png", plot = p_sub_samp_s_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_s_c_rf_add.png", plot = p_sub_samp_s_c_rf_add, width = 6, height = 5)


# With abundance as response --------------------------------------------------
### velocity
p_v_samp_a_rf_add <- ggplot(v_samp_a_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_a_c_rf_add <- ggplot(v_samp_a_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_a_rf_add.png", plot = p_v_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_a_c_rf_add.png", plot = p_v_samp_a_c_rf_add, width = 6, height = 5)

### froude 
p_f_samp_a_rf_add <- ggplot(f_samp_a_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_f_samp_a_c_rf_add <- ggplot(f_samp_a_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_samp_a_rf_add.png", plot = p_f_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_samp_a_c_rf_add.png", plot = p_f_samp_a_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_samp_a_rf_add <- ggplot(s_samp_a_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_s_samp_a_c_rf_add <- ggplot(s_samp_a_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_samp_a_rf_add.png", plot = p_s_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_samp_a_c_rf_add.png", plot = p_s_samp_a_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_samp_a_rf_add <- ggplot(sp_samp_a_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sp_samp_a_c_rf_add <- ggplot(sp_samp_a_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_samp_a_rf_add.png", plot = p_sp_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_samp_a_c_rf_add.png", plot = p_sp_samp_a_c_rf_add, width = 6, height = 5)

### wd_m 
p_wd_samp_a_rf_add <- ggplot(wd_samp_a_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_a_c_rf_add <- ggplot(wd_samp_a_c_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_a_rf_add.png", plot = p_wd_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_a_c_rf_add.png", plot = p_wd_samp_a_c_rf_add, width = 6, height = 5)


### x/y
p_x_samp_a_rf_add <- ggplot(x_samp_a_rf_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_a_rf_add <- ggplot(y_samp_a_rf_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_a_rf_add.png", plot = p_x_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_a_rf_add.png", plot = p_y_samp_a_rf_add, width = 6, height = 5)

### z 
p_z_samp_a_rf_add <- ggplot(z_samp_a_rf_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_a_c_rf_add <- ggplot(z_samp_a_c_rf_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_a_rf_add.png", plot = p_z_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_a_c_rf_add.png", plot = p_z_samp_a_c_rf_add, width = 6, height = 5)

### dist_w 
p_dist_samp_a_rf_add <- ggplot(dist_samp_a_rf_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_a_c_rf_add <- ggplot(dist_samp_a_rf_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_a_rf_add.png", plot = p_dist_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_a_c_rf_add.png", plot = p_dist_samp_a_c_rf_add, width = 6, height = 5)

### cat_v
p_cv_samp_a_rf_add <- ggplot(cv_samp_a_rf_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_a_c_rf_add <- ggplot(cv_samp_a_rf_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_a_rf_add.png", plot = p_cv_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_a_c_rf_add.png", plot = p_cv_samp_a_c_rf_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_a_rf_add <- ggplot(ac_samp_a_rf_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_a_c_rf_add <- ggplot(ac_samp_a_rf_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_a_rf_add.png", plot = p_ac_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_a_c_rf_add.png", plot = p_ac_samp_a_c_rf_add, width = 6, height = 5)

### moos_cover
p_mc_samp_a_rf_add <- ggplot(mc_samp_a_rf_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_a_c_rf_add <- ggplot(mc_samp_a_rf_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_a_rf_add.png", plot = p_mc_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_a_c_rf_add.png", plot = p_mc_samp_a_c_rf_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_a_rf_add <- ggplot(cc_samp_a_rf_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_a_c_rf_add <- ggplot(cc_samp_a_rf_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_a_rf_add.png", plot = p_cc_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_a_c_rf_add.png", plot = p_cc_samp_a_c_rf_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_a_rf_add <- ggplot(clog_3_samp_a_rf_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_a_c_rf_add <- ggplot(clog_3_samp_a_rf_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_a_rf_add.png", plot = p_clog_3_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_a_c_rf_add.png", plot = p_clog_3_samp_a_c_rf_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_a_rf_add <- ggplot(clog_6_samp_a_rf_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_a_c_rf_add <- ggplot(clog_6_samp_a_rf_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_a_rf_add.png", plot = p_clog_6_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_a_c_rf_add.png", plot = p_clog_6_samp_a_c_rf_add, width = 6, height = 5)

### sub_type
p_sub_samp_a_rf_add <- ggplot(sub_samp_a_rf_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_a_c_rf_add <- ggplot(sub_samp_a_rf_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_a_rf_add.png", plot = p_sub_samp_a_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_a_c_rf_add.png", plot = p_sub_samp_a_c_rf_add, width = 6, height = 5)


# With rel_abundance as response --------------------------------------------------
### velocity
p_v_samp_ra_rf_add <- ggplot(v_samp_ra_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_ra_c_rf_add <- ggplot(v_samp_ra_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_ra_rf_add.png", plot = p_v_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_ra_c_rf_add.png", plot = p_v_samp_ra_c_rf_add, width = 6, height = 5)

### froude 
p_f_samp_ra_rf_add <- ggplot(f_samp_ra_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_f_samp_ra_c_rf_add <- ggplot(f_samp_ra_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_samp_ra_rf_add.png", plot = p_f_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_samp_ra_c_rf_add.png", plot = p_f_samp_ra_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_samp_ra_rf_add <- ggplot(s_samp_ra_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_s_samp_ra_c_rf_add <- ggplot(s_samp_ra_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_samp_ra_rf_add.png", plot = p_s_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_samp_ra_c_rf_add.png", plot = p_s_samp_ra_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_samp_ra_rf_add <- ggplot(sp_samp_ra_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sp_samp_ra_c_rf_add <- ggplot(sp_samp_ra_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_samp_ra_rf_add.png", plot = p_sp_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_samp_ra_c_rf_add.png", plot = p_sp_samp_ra_c_rf_add, width = 6, height = 5)

### wd_m 
p_wd_samp_ra_rf_add <- ggplot(wd_samp_ra_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_ra_c_rf_add <- ggplot(wd_samp_ra_c_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_ra_rf_add.png", plot = p_wd_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_ra_c_rf_add.png", plot = p_wd_samp_ra_c_rf_add, width = 6, height = 5)


### x/y
p_x_samp_ra_rf_add <- ggplot(x_samp_ra_rf_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_ra_rf_add <- ggplot(y_samp_ra_rf_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_ra_rf_add.png", plot = p_x_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_ra_rf_add.png", plot = p_y_samp_ra_rf_add, width = 6, height = 5)

### z 
p_z_samp_ra_rf_add <- ggplot(z_samp_ra_rf_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_ra_c_rf_add <- ggplot(z_samp_ra_c_rf_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_ra_rf_add.png", plot = p_z_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_ra_c_rf_add.png", plot = p_z_samp_ra_c_rf_add, width = 6, height = 5)

### dist_w 
p_dist_samp_ra_rf_add <- ggplot(dist_samp_ra_rf_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_ra_c_rf_add <- ggplot(dist_samp_ra_rf_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_ra_rf_add.png", plot = p_dist_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_ra_c_rf_add.png", plot = p_dist_samp_ra_c_rf_add, width = 6, height = 5)

### cat_v
p_cv_samp_ra_rf_add <- ggplot(cv_samp_ra_rf_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_ra_c_rf_add <- ggplot(cv_samp_ra_rf_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_ra_rf_add.png", plot = p_cv_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_ra_c_rf_add.png", plot = p_cv_samp_ra_c_rf_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_ra_rf_add <- ggplot(ac_samp_ra_rf_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_ra_c_rf_add <- ggplot(ac_samp_ra_rf_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_ra_rf_add.png", plot = p_ac_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_ra_c_rf_add.png", plot = p_ac_samp_ra_c_rf_add, width = 6, height = 5)

### moos_cover
p_mc_samp_ra_rf_add <- ggplot(mc_samp_ra_rf_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_ra_c_rf_add <- ggplot(mc_samp_ra_rf_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_ra_rf_add.png", plot = p_mc_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_ra_c_rf_add.png", plot = p_mc_samp_ra_c_rf_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_ra_rf_add <- ggplot(cc_samp_ra_rf_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_ra_c_rf_add <- ggplot(cc_samp_ra_rf_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_ra_rf_add.png", plot = p_cc_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_ra_c_rf_add.png", plot = p_cc_samp_ra_c_rf_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_ra_rf_add <- ggplot(clog_3_samp_ra_rf_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_ra_c_rf_add <- ggplot(clog_3_samp_ra_rf_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_ra_rf_add.png", plot = p_clog_3_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_ra_c_rf_add.png", plot = p_clog_3_samp_ra_c_rf_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_ra_rf_add <- ggplot(clog_6_samp_ra_rf_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_ra_c_rf_add <- ggplot(clog_6_samp_ra_rf_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_ra_rf_add.png", plot = p_clog_6_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_ra_c_rf_add.png", plot = p_clog_6_samp_ra_c_rf_add, width = 6, height = 5)

### sub_type
p_sub_samp_ra_rf_add <- ggplot(sub_samp_ra_rf_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance",
    title = "Ranger Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_ra_c_rf_add <- ggplot(sub_samp_ra_rf_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance",
    title = "Ranger Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_ra_rf_add.png", plot = p_sub_samp_ra_rf_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_ra_c_rf_add.png", plot = p_sub_samp_ra_c_rf_add, width = 6, height = 5)
```

## BRT normal
### Predictor: Velocity
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_k_brt <- ggplot(v_k_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_k_c_brt <- ggplot(v_k_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_k_brt.png", plot = p_v_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_k_c_brt.png", plot = p_v_k_c_brt, width = 6, height = 5)

### x/y
p_x_v_k_brt <- ggplot(x_v_k_brt, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_k_brt <- ggplot(y_v_k_brt, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_k_brt.png", plot = p_x_v_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_k_brt.png", plot = p_y_v_k_brt, width = 6, height = 5)

# With shannon index as response ----------------------------------------------
### velocity
p_v_s_brt <- ggplot(v_s_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_s_c_brt <- ggplot(v_s_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_s_brt.png", plot = p_v_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_s_c_brt.png", plot = p_v_s_c_brt, width = 6, height = 5)

### x/y
p_x_v_s_brt <- ggplot(x_v_s_brt, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_s_brt <- ggplot(y_v_s_brt, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_s_brt.png", plot = p_x_v_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_s_brt.png", plot = p_y_v_s_brt, width = 6, height = 5)

# With abundance as response --------------------------------------------------
### velocity
p_v_a_brt <- ggplot(v_a_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_a_c_brt <- ggplot(v_a_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_a_brt.png", plot = p_v_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_a_c_brt.png", plot = p_v_a_c_brt, width = 6, height = 5)

### x/y
p_x_v_a_brt <- ggplot(x_v_a_brt, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_a_brt <- ggplot(y_v_a_brt, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_a_brt.png", plot = p_x_v_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_a_brt.png", plot = p_y_v_a_brt, width = 6, height = 5)

# With rel_abundance as response --------------------------------------------------
### velocity
p_v_ra_brt <- ggplot(v_ra_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_ra_c_brt <- ggplot(v_ra_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_ra_brt.png", plot = p_v_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_ra_c_brt.png", plot = p_v_ra_c_brt, width = 6, height = 5)

### x/y
p_x_v_ra_brt <- ggplot(x_v_ra_brt, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_ra_brt <- ggplot(y_v_ra_brt, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_ra_brt.png", plot = p_x_v_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_ra_brt.png", plot = p_y_v_ra_brt, width = 6, height = 5)
```

### Predictors: V + WD
```{r}
### PREDICTOR: V + WD ### ---------------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_wd_k_brt <- ggplot(v_wd_k_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_wd_k_c_brt <- ggplot(v_wd_k_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_wd_k_brt.png", plot = p_v_wd_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_wd_k_c_brt.png", plot = p_v_wd_k_c_brt, width = 6, height = 5)

### wd_m 
p_wd_k_brt <- ggplot(wd_k_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_k_c_brt <- ggplot(wd_k_c_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_k_brt.png", plot = p_wd_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_k_c_brt.png", plot = p_wd_k_c_brt, width = 6, height = 5)

### x/y
p_x_wd_k_brt <- ggplot(x_wd_k_brt, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_wd_k_brt <- ggplot(y_wd_k_brt, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_wd_k_brt.png", plot = p_x_wd_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_wd_k_brt.png", plot = p_y_wd_k_brt, width = 6, height = 5)

# With shannon index as response ----------------------------------------------
### velocity
p_v_s_brt <- ggplot(v_s_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_s_c_brt <- ggplot(v_s_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_s_brt.png", plot = p_v_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_s_c_brt.png", plot = p_v_s_c_brt, width = 6, height = 5)

### wd_m 
p_wd_s_brt <- ggplot(wd_s_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_s_c_brt <- ggplot(wd_s_c_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_s_brt.png", plot = p_wd_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_s_c_brt.png", plot = p_wd_s_c_brt, width = 6, height = 5)

### x/y
p_x_v_s_brt <- ggplot(x_v_s_brt, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_s_brt <- ggplot(y_v_s_brt, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_s_brt.png", plot = p_x_v_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_s_brt.png", plot = p_y_v_s_brt, width = 6, height = 5)

# With abundance as response --------------------------------------------------
### velocity
p_v_a_brt <- ggplot(v_a_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_a_c_brt <- ggplot(v_a_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_a_brt.png", plot = p_v_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_a_c_brt.png", plot = p_v_a_c_brt, width = 6, height = 5)

### wd_m 
p_wd_a_brt <- ggplot(wd_a_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_a_c_brt <- ggplot(wd_a_c_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_a_brt.png", plot = p_wd_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_a_c_brt.png", plot = p_wd_a_c_brt, width = 6, height = 5)


### x/y
p_x_v_a_brt <- ggplot(x_v_a_brt, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_a_brt <- ggplot(y_v_a_brt, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_a_brt.png", plot = p_x_v_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_a_brt.png", plot = p_y_v_a_brt, width = 6, height = 5)

# With rel_abundance as response --------------------------------------------------
### velocity
p_v_ra_brt <- ggplot(v_ra_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_ra_c_brt <- ggplot(v_ra_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_ra_brt.png", plot = p_v_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_ra_c_brt.png", plot = p_v_ra_c_brt, width = 6, height = 5)

### wd_m 
p_wd_ra_brt <- ggplot(wd_ra_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_ra_c_brt <- ggplot(wd_ra_c_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_ra_brt.png", plot = p_wd_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_ra_c_brt.png", plot = p_wd_ra_c_brt, width = 6, height = 5)


### x/y
p_x_v_ra_brt <- ggplot(x_v_ra_brt, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_ra_brt <- ggplot(y_v_ra_brt, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_ra_brt.png", plot = p_x_v_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_ra_brt.png", plot = p_y_v_ra_brt, width = 6, height = 5)
```

### Predictors: Sampling Locations
```{r}
### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_samp_k_brt <- ggplot(v_samp_k_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_k_c_brt <- ggplot(v_samp_k_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_k_brt.png", plot = p_v_samp_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_k_c_brt.png", plot = p_v_samp_k_c_brt, width = 6, height = 5)

### wd_m 
p_wd_samp_k_brt <- ggplot(wd_samp_k_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_k_c_brt <- ggplot(wd_samp_k_c_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_k_brt.png", plot = p_wd_samp_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_k_c_brt.png", plot = p_wd_samp_k_c_brt, width = 6, height = 5)

### x/y
p_x_samp_k_brt <- ggplot(x_samp_k_brt, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_k_brt <- ggplot(y_samp_k_brt, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_k_brt.png", plot = p_x_samp_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_k_brt.png", plot = p_y_samp_k_brt, width = 6, height = 5)

### z 
p_z_samp_k_brt <- ggplot(z_samp_k_brt, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_k_c_brt <- ggplot(z_samp_k_c_brt, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_k_brt.png", plot = p_z_samp_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_k_c_brt.png", plot = p_z_samp_k_c_brt, width = 6, height = 5)

### dist_w 
p_dist_samp_k_brt <- ggplot(dist_samp_k_brt, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_k_c_brt <- ggplot(dist_samp_k_brt, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_k_brt.png", plot = p_dist_samp_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_k_c_brt.png", plot = p_dist_samp_k_c_brt, width = 6, height = 5)

### cat_v
p_cv_samp_k_brt <- ggplot(cv_samp_k_brt, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_k_c_brt <- ggplot(cv_samp_k_brt, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_k_brt.png", plot = p_cv_samp_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_k_c_brt.png", plot = p_cv_samp_k_c_brt, width = 6, height = 5)

### alg_cover 
p_ac_samp_k_brt <- ggplot(ac_samp_k_brt, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_k_c_brt <- ggplot(ac_samp_k_brt, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_k_brt.png", plot = p_ac_samp_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_k_c_brt.png", plot = p_ac_samp_k_c_brt, width = 6, height = 5)

### moos_cover
p_mc_samp_k_brt <- ggplot(mc_samp_k_brt, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_k_c_brt <- ggplot(mc_samp_k_brt, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_k_brt.png", plot = p_mc_samp_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_k_c_brt.png", plot = p_mc_samp_k_c_brt, width = 6, height = 5)

### cpom_cover 
p_cc_samp_k_brt <- ggplot(cc_samp_k_brt, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_k_c_brt <- ggplot(cc_samp_k_brt, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_k_brt.png", plot = p_cc_samp_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_k_c_brt.png", plot = p_cc_samp_k_c_brt, width = 6, height = 5)

### clog_3 
p_clog_3_samp_k_brt <- ggplot(clog_3_samp_k_brt, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_k_c_brt <- ggplot(clog_3_samp_k_brt, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_k_brt.png", plot = p_clog_3_samp_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_k_c_brt.png", plot = p_clog_3_samp_k_c_brt, width = 6, height = 5)

### clog_6 
p_clog_6_samp_k_brt <- ggplot(clog_6_samp_k_brt, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_k_c_brt <- ggplot(clog_6_samp_k_brt, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_k_brt.png", plot = p_clog_6_samp_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_k_c_brt.png", plot = p_clog_6_samp_k_c_brt, width = 6, height = 5)

### sub_type
p_sub_samp_k_brt <- ggplot(sub_samp_k_brt, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_k_c_brt <- ggplot(sub_samp_k_brt, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_k_brt.png", plot = p_sub_samp_k_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_k_c_brt.png", plot = p_sub_samp_k_c_brt, width = 6, height = 5)

# With shannon index as response ----------------------------------------------
### velocity
p_v_samp_s_brt <- ggplot(v_samp_s_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_s_c_brt <- ggplot(v_samp_s_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_s_brt.png", plot = p_v_samp_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_s_c_brt.png", plot = p_v_samp_s_c_brt, width = 6, height = 5)

### wd_m 
p_wd_samp_s_brt <- ggplot(wd_samp_s_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_s_c_brt <- ggplot(wd_samp_s_c_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_s_brt.png", plot = p_wd_samp_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_s_c_brt.png", plot = p_wd_samp_s_c_brt, width = 6, height = 5)


### x/y
p_x_samp_s_brt <- ggplot(x_samp_s_brt, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_s_brt <- ggplot(y_samp_s_brt, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_s_brt.png", plot = p_x_samp_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_s_brt.png", plot = p_y_samp_s_brt, width = 6, height = 5)

### z 
p_z_samp_s_brt <- ggplot(z_samp_s_brt, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_s_c_brt <- ggplot(z_samp_s_c_brt, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_s_brt.png", plot = p_z_samp_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_s_c_brt.png", plot = p_z_samp_s_c_brt, width = 6, height = 5)

### dist_w 
p_dist_samp_s_brt <- ggplot(dist_samp_s_brt, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_s_c_brt <- ggplot(dist_samp_s_brt, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_s_brt.png", plot = p_dist_samp_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_s_c_brt.png", plot = p_dist_samp_s_c_brt, width = 6, height = 5)

### cat_v
p_cv_samp_s_brt <- ggplot(cv_samp_s_brt, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_s_c_brt <- ggplot(cv_samp_s_brt, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_s_brt.png", plot = p_cv_samp_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_s_c_brt.png", plot = p_cv_samp_s_c_brt, width = 6, height = 5)

### alg_cover 
p_ac_samp_s_brt <- ggplot(ac_samp_s_brt, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_s_c_brt <- ggplot(ac_samp_s_brt, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_s_brt.png", plot = p_ac_samp_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_s_c_brt.png", plot = p_ac_samp_s_c_brt, width = 6, height = 5)

### moos_cover
p_mc_samp_s_brt <- ggplot(mc_samp_s_brt, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_s_c_brt <- ggplot(mc_samp_s_brt, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_s_brt.png", plot = p_mc_samp_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_s_c_brt.png", plot = p_mc_samp_s_c_brt, width = 6, height = 5)

### cpom_cover 
p_cc_samp_s_brt <- ggplot(cc_samp_s_brt, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_s_c_brt <- ggplot(cc_samp_s_brt, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_s_brt.png", plot = p_cc_samp_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_s_c_brt.png", plot = p_cc_samp_s_c_brt, width = 6, height = 5)

### clog_3 
p_clog_3_samp_s_brt <- ggplot(clog_3_samp_s_brt, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_s_c_brt <- ggplot(clog_3_samp_s_brt, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_s_brt.png", plot = p_clog_3_samp_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_s_c_brt.png", plot = p_clog_3_samp_s_c_brt, width = 6, height = 5)

### clog_6 
p_clog_6_samp_s_brt <- ggplot(clog_6_samp_s_brt, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_s_c_brt <- ggplot(clog_6_samp_s_brt, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_s_brt.png", plot = p_clog_6_samp_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_s_c_brt.png", plot = p_clog_6_samp_s_c_brt, width = 6, height = 5)

### sub_type
p_sub_samp_s_brt <- ggplot(sub_samp_s_brt, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_s_c_brt <- ggplot(sub_samp_s_brt, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_s_brt.png", plot = p_sub_samp_s_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_s_c_brt.png", plot = p_sub_samp_s_c_brt, width = 6, height = 5)


# With abundance as response --------------------------------------------------
### velocity
p_v_samp_a_brt <- ggplot(v_samp_a_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_a_c_brt <- ggplot(v_samp_a_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_a_brt.png", plot = p_v_samp_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_a_c_brt.png", plot = p_v_samp_a_c_brt, width = 6, height = 5)

### wd_m 
p_wd_samp_a_brt <- ggplot(wd_samp_a_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_a_c_brt <- ggplot(wd_samp_a_c_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_a_brt.png", plot = p_wd_samp_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_a_c_brt.png", plot = p_wd_samp_a_c_brt, width = 6, height = 5)

### x/y
p_x_samp_a_brt <- ggplot(x_samp_a_brt, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_a_brt <- ggplot(y_samp_a_brt, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_a_brt.png", plot = p_x_samp_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_a_brt.png", plot = p_y_samp_a_brt, width = 6, height = 5)

### z 
p_z_samp_a_brt <- ggplot(z_samp_a_brt, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_a_c_brt <- ggplot(z_samp_a_c_brt, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_a_brt.png", plot = p_z_samp_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_a_c_brt.png", plot = p_z_samp_a_c_brt, width = 6, height = 5)

### dist_w 
p_dist_samp_a_brt <- ggplot(dist_samp_a_brt, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_a_c_brt <- ggplot(dist_samp_a_brt, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_a_brt.png", plot = p_dist_samp_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_a_c_brt.png", plot = p_dist_samp_a_c_brt, width = 6, height = 5)

### cat_v
p_cv_samp_a_brt <- ggplot(cv_samp_a_brt, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_a_c_brt <- ggplot(cv_samp_a_brt, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_a_brt.png", plot = p_cv_samp_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_a_c_brt.png", plot = p_cv_samp_a_c_brt, width = 6, height = 5)

### alg_cover 
p_ac_samp_a_brt <- ggplot(ac_samp_a_brt, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_a_c_brt <- ggplot(ac_samp_a_brt, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_a_brt.png", plot = p_ac_samp_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_a_c_brt.png", plot = p_ac_samp_a_c_brt, width = 6, height = 5)

### moos_cover
p_mc_samp_a_brt <- ggplot(mc_samp_a_brt, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_a_c_brt <- ggplot(mc_samp_a_brt, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_a_brt.png", plot = p_mc_samp_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_a_c_brt.png", plot = p_mc_samp_a_c_brt, width = 6, height = 5)

### cpom_cover 
p_cc_samp_a_brt <- ggplot(cc_samp_a_brt, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_a_c_brt <- ggplot(cc_samp_a_brt, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_a_brt.png", plot = p_cc_samp_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_a_c_brt.png", plot = p_cc_samp_a_c_brt, width = 6, height = 5)

### clog_3 
p_clog_3_samp_a_brt <- ggplot(clog_3_samp_a_brt, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_a_c_brt <- ggplot(clog_3_samp_a_brt, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_a_brt.png", plot = p_clog_3_samp_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_a_c_brt.png", plot = p_clog_3_samp_a_c_brt, width = 6, height = 5)

### clog_6 
p_clog_6_samp_a_brt <- ggplot(clog_6_samp_a_brt, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_a_c_brt <- ggplot(clog_6_samp_a_brt, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_a_brt.png", plot = p_clog_6_samp_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_a_c_brt.png", plot = p_clog_6_samp_a_c_brt, width = 6, height = 5)

### sub_type
p_sub_samp_a_brt <- ggplot(sub_samp_a_brt, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_a_c_brt <- ggplot(sub_samp_a_brt, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_a_brt.png", plot = p_sub_samp_a_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_a_c_brt.png", plot = p_sub_samp_a_c_brt, width = 6, height = 5)


# With rel_abundance as response --------------------------------------------------
### velocity
p_v_samp_ra_brt <- ggplot(v_samp_ra_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_ra_c_brt <- ggplot(v_samp_ra_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_ra_brt.png", plot = p_v_samp_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_ra_c_brt.png", plot = p_v_samp_ra_c_brt, width = 6, height = 5)

### wd_m 
p_wd_samp_ra_brt <- ggplot(wd_samp_ra_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_ra_c_brt <- ggplot(wd_samp_ra_c_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_ra_brt.png", plot = p_wd_samp_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_ra_c_brt.png", plot = p_wd_samp_ra_c_brt, width = 6, height = 5)

### x/y
p_x_samp_ra_brt <- ggplot(x_samp_ra_brt, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_ra_brt <- ggplot(y_samp_ra_brt, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_ra_brt.png", plot = p_x_samp_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_ra_brt.png", plot = p_y_samp_ra_brt, width = 6, height = 5)

### z 
p_z_samp_ra_brt <- ggplot(z_samp_ra_brt, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_ra_c_brt <- ggplot(z_samp_ra_c_brt, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_ra_brt.png", plot = p_z_samp_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_ra_c_brt.png", plot = p_z_samp_ra_c_brt, width = 6, height = 5)

### dist_w 
p_dist_samp_ra_brt <- ggplot(dist_samp_ra_brt, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_ra_c_brt <- ggplot(dist_samp_ra_brt, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_ra_brt.png", plot = p_dist_samp_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_ra_c_brt.png", plot = p_dist_samp_ra_c_brt, width = 6, height = 5)

### cat_v
p_cv_samp_ra_brt <- ggplot(cv_samp_ra_brt, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_ra_c_brt <- ggplot(cv_samp_ra_brt, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_ra_brt.png", plot = p_cv_samp_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_ra_c_brt.png", plot = p_cv_samp_ra_c_brt, width = 6, height = 5)

### alg_cover 
p_ac_samp_ra_brt <- ggplot(ac_samp_ra_brt, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_ra_c_brt <- ggplot(ac_samp_ra_brt, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_ra_brt.png", plot = p_ac_samp_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_ra_c_brt.png", plot = p_ac_samp_ra_c_brt, width = 6, height = 5)

### moos_cover
p_mc_samp_ra_brt <- ggplot(mc_samp_ra_brt, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_ra_c_brt <- ggplot(mc_samp_ra_brt, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_ra_brt.png", plot = p_mc_samp_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_ra_c_brt.png", plot = p_mc_samp_ra_c_brt, width = 6, height = 5)

### cpom_cover 
p_cc_samp_ra_brt <- ggplot(cc_samp_ra_brt, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_ra_c_brt <- ggplot(cc_samp_ra_brt, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_ra_brt.png", plot = p_cc_samp_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_ra_c_brt.png", plot = p_cc_samp_ra_c_brt, width = 6, height = 5)

### clog_3 
p_clog_3_samp_ra_brt <- ggplot(clog_3_samp_ra_brt, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_ra_c_brt <- ggplot(clog_3_samp_ra_brt, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_ra_brt.png", plot = p_clog_3_samp_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_ra_c_brt.png", plot = p_clog_3_samp_ra_c_brt, width = 6, height = 5)

### clog_6 
p_clog_6_samp_ra_brt <- ggplot(clog_6_samp_ra_brt, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_ra_c_brt <- ggplot(clog_6_samp_ra_brt, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_ra_brt.png", plot = p_clog_6_samp_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_ra_c_brt.png", plot = p_clog_6_samp_ra_c_brt, width = 6, height = 5)

### sub_type
p_sub_samp_ra_brt <- ggplot(sub_samp_ra_brt, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_ra_c_brt <- ggplot(sub_samp_ra_brt, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_ra_brt.png", plot = p_sub_samp_ra_brt, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_ra_c_brt.png", plot = p_sub_samp_ra_c_brt, width = 6, height = 5)
```

## BRT added
### Predictor: Velocity
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_k_brt_add <- ggplot(v_k_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_k_c_brt_add <- ggplot(v_k_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_k_brt_add.png", plot = p_v_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_k_c_brt_add.png", plot = p_v_k_c_brt_add, width = 6, height = 5)

### froude 
p_f_v_k_brt_add <- ggplot(f_v_k_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "K-Index",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_f_v_k_c_brt_add <- ggplot(f_v_k_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "K-Index",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_f_v_k_brt_add.png", plot = p_f_v_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_v_k_c_brt_add.png", plot = p_f_v_k_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_v_k_brt_add <- ggplot(s_v_k_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "K-Index",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_s_v_k_c_brt_add <- ggplot(s_v_k_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "K-Index",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_s_v_k_brt_add.png", plot = p_s_v_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_v_k_c_brt_add.png", plot = p_s_v_k_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_v_k_brt_add <- ggplot(sp_v_k_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "K-Index",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_sp_v_k_c_brt_add <- ggplot(sp_v_k_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "K-Index",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_sp_v_k_brt_add.png", plot = p_sp_v_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_v_k_c_brt_add.png", plot = p_sp_v_k_c_brt_add, width = 6, height = 5)

### x/y
p_x_v_k_brt_add <- ggplot(x_v_k_brt_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_k_brt_add <- ggplot(y_v_k_brt_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_k_brt_add.png", plot = p_x_v_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_k_brt_add.png", plot = p_y_v_k_brt_add, width = 6, height = 5)

# With shannon index as response ----------------------------------------------
### velocity
p_v_s_brt_add <- ggplot(v_s_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_s_c_brt_add <- ggplot(v_s_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_s_brt_add.png", plot = p_v_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_s_c_brt_add.png", plot = p_v_s_c_brt_add, width = 6, height = 5)

### froude 
p_f_v_s_brt_add <- ggplot(f_v_s_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_f_v_s_c_brt_add <- ggplot(f_v_s_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_f_v_s_brt_add.png", plot = p_f_v_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_v_s_c_brt_add.png", plot = p_f_v_s_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_v_s_brt_add <- ggplot(s_v_s_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_s_v_s_c_brt_add <- ggplot(s_v_s_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_s_v_s_brt_add.png", plot = p_s_v_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_v_s_c_brt_add.png", plot = p_s_v_s_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_v_s_brt_add <- ggplot(sp_v_s_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_sp_v_s_c_brt_add <- ggplot(sp_v_s_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_sp_v_s_brt_add.png", plot = p_sp_v_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_v_s_c_brt_add.png", plot = p_sp_v_s_c_brt_add, width = 6, height = 5)

### x/y
p_x_v_s_brt_add <- ggplot(x_v_s_brt_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_s_brt_add <- ggplot(y_v_s_brt_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_s_brt_add.png", plot = p_x_v_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_s_brt_add.png", plot = p_y_v_s_brt_add, width = 6, height = 5)

# With abundance as response --------------------------------------------------
### velocity
p_v_a_brt_add <- ggplot(v_a_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_a_c_brt_add <- ggplot(v_a_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_a_brt_add.png", plot = p_v_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_a_c_brt_add.png", plot = p_v_a_c_brt_add, width = 6, height = 5)

### froude 
p_f_v_a_brt_add <- ggplot(f_v_a_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_f_v_a_c_brt_add <- ggplot(f_v_a_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_f_v_a_brt_add.png", plot = p_f_v_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_v_a_c_brt_add.png", plot = p_f_v_a_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_v_a_brt_add <- ggplot(s_v_a_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_s_v_a_c_brt_add <- ggplot(s_v_a_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_s_v_a_brt_add.png", plot = p_s_v_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_v_a_c_brt_add.png", plot = p_s_v_a_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_v_a_brt_add <- ggplot(sp_v_a_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_sp_v_a_c_brt_add <- ggplot(sp_v_a_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_sp_v_a_brt_add.png", plot = p_sp_v_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_v_a_c_brt_add.png", plot = p_sp_v_a_c_brt_add, width = 6, height = 5)

### x/y
p_x_v_a_brt_add <- ggplot(x_v_a_brt_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_a_brt_add <- ggplot(y_v_a_brt_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_a_brt_add.png", plot = p_x_v_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_a_brt_add.png", plot = p_y_v_a_brt_add, width = 6, height = 5)

# With rel_abundance as response --------------------------------------------------
### velocity
p_v_ra_brt_add <- ggplot(v_ra_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_ra_c_brt_add <- ggplot(v_ra_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_ra_brt_add.png", plot = p_v_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_ra_c_brt_add.png", plot = p_v_ra_c_brt_add, width = 6, height = 5)

### froude 
p_f_v_ra_brt_add <- ggplot(f_v_ra_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_f_v_ra_c_brt_add <- ggplot(f_v_ra_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_f_v_ra_brt_add.png", plot = p_f_v_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_v_ra_c_brt_add.png", plot = p_f_v_ra_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_v_ra_brt_add <- ggplot(s_v_ra_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_s_v_ra_c_brt_add <- ggplot(s_v_ra_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_s_v_ra_brt_add.png", plot = p_s_v_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_v_ra_c_brt_add.png", plot = p_s_v_ra_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_v_ra_brt_add <- ggplot(sp_v_ra_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_sp_v_ra_c_brt_add <- ggplot(sp_v_ra_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_sp_v_ra_brt_add.png", plot = p_sp_v_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_v_ra_c_brt_add.png", plot = p_sp_v_ra_c_brt_add, width = 6, height = 5)

### x/y
p_x_v_ra_brt_add <- ggplot(x_v_ra_brt_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_ra_brt_add <- ggplot(y_v_ra_brt_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_ra_brt_add.png", plot = p_x_v_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_ra_brt_add.png", plot = p_y_v_ra_brt_add, width = 6, height = 5)
```

### Predictors: V + WD
```{r}
### PREDICTOR: V + WD ### ---------------------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_wd_k_brt_add <- ggplot(v_wd_k_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_wd_k_c_brt_add <- ggplot(v_wd_k_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_wd_k_brt_add.png", plot = p_v_wd_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_wd_k_c_brt_add.png", plot = p_v_wd_k_c_brt_add, width = 6, height = 5)

### wd_m 
p_wd_k_brt_add <- ggplot(wd_k_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_k_c_brt_add <- ggplot(wd_k_c_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_k_brt_add.png", plot = p_wd_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_k_c_brt_add.png", plot = p_wd_k_c_brt_add, width = 6, height = 5)

### froude 
p_f_wd_k_brt_add <- ggplot(f_wd_k_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "K-Index",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_f_wd_k_c_brt_add <- ggplot(f_wd_k_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "K-Index",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_f_wd_k_brt_add.png", plot = p_f_wd_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_wd_k_c_brt_add.png", plot = p_f_wd_k_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_wd_k_brt_add <- ggplot(s_wd_k_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "K-Index",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_s_wd_k_c_brt_add <- ggplot(s_wd_k_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "K-Index",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_s_wd_k_brt_add.png", plot = p_s_wd_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_wd_k_c_brt_add.png", plot = p_s_wd_k_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_wd_k_brt_add <- ggplot(sp_wd_k_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "K-Index",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_sp_wd_k_c_brt_add <- ggplot(sp_wd_k_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "K-Index",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_sp_wd_k_brt_add.png", plot = p_sp_wd_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_wd_k_c_brt_add.png", plot = p_sp_wd_k_c_brt_add, width = 6, height = 5)

### x/y
p_x_wd_k_brt_add <- ggplot(x_wd_k_brt_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_wd_k_brt_add <- ggplot(y_wd_k_brt_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_wd_k_brt_add.png", plot = p_x_wd_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_wd_k_brt_add.png", plot = p_y_wd_k_brt_add, width = 6, height = 5)

# With shannon index as response ----------------------------------------------
### velocity
p_v_s_brt_add <- ggplot(v_s_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_s_c_brt_add <- ggplot(v_s_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_s_brt_add.png", plot = p_v_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_s_c_brt_add.png", plot = p_v_s_c_brt_add, width = 6, height = 5)

### wd_m 
p_wd_s_brt_add <- ggplot(wd_s_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_s_c_brt_add <- ggplot(wd_s_c_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_s_brt_add.png", plot = p_wd_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_s_c_brt_add.png", plot = p_wd_s_c_brt_add, width = 6, height = 5)

### froude 
p_f_wd_s_brt_add <- ggplot(f_wd_s_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_f_wd_s_c_brt_add <- ggplot(f_wd_s_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_f_wd_s_brt_add.png", plot = p_f_wd_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_wd_s_c_brt_add.png", plot = p_f_wd_s_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_wd_s_brt_add <- ggplot(s_wd_s_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_s_wd_s_c_brt_add <- ggplot(s_wd_s_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_s_wd_s_brt_add.png", plot = p_s_wd_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_wd_s_c_brt_add.png", plot = p_s_wd_s_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_wd_s_brt_add <- ggplot(sp_wd_s_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_sp_wd_s_c_brt_add <- ggplot(sp_wd_s_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_sp_wd_s_brt_add.png", plot = p_sp_wd_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_wd_s_c_brt_add.png", plot = p_sp_wd_s_c_brt_add, width = 6, height = 5)

### x/y
p_x_v_s_brt_add <- ggplot(x_v_s_brt_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_s_brt_add <- ggplot(y_v_s_brt_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_s_brt_add.png", plot = p_x_v_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_s_brt_add.png", plot = p_y_v_s_brt_add, width = 6, height = 5)

# With abundance as response --------------------------------------------------
### velocity
p_v_a_brt_add <- ggplot(v_a_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_a_c_brt_add <- ggplot(v_a_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_a_brt_add.png", plot = p_v_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_a_c_brt_add.png", plot = p_v_a_c_brt_add, width = 6, height = 5)

### wd_m 
p_wd_a_brt_add <- ggplot(wd_a_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_a_c_brt_add <- ggplot(wd_a_c_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_a_brt_add.png", plot = p_wd_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_a_c_brt_add.png", plot = p_wd_a_c_brt_add, width = 6, height = 5)

### froude 
p_f_wd_a_brt_add <- ggplot(f_wd_a_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_f_wd_a_c_brt_add <- ggplot(f_wd_a_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_f_wd_a_brt_add.png", plot = p_f_wd_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_wd_a_c_brt_add.png", plot = p_f_wd_a_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_wd_a_brt_add <- ggplot(s_wd_a_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_s_wd_a_c_brt_add <- ggplot(s_wd_a_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_s_wd_a_brt_add.png", plot = p_s_wd_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_wd_a_c_brt_add.png", plot = p_s_wd_a_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_wd_a_brt_add <- ggplot(sp_wd_a_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_sp_wd_a_c_brt_add <- ggplot(sp_wd_a_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_sp_wd_a_brt_add.png", plot = p_sp_wd_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_wd_a_c_brt_add.png", plot = p_sp_wd_a_c_brt_add, width = 6, height = 5)

### x/y
p_x_v_a_brt_add <- ggplot(x_v_a_brt_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_a_brt_add <- ggplot(y_v_a_brt_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_a_brt_add.png", plot = p_x_v_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_a_brt_add.png", plot = p_y_v_a_brt_add, width = 6, height = 5)

# With rel_abundance as response --------------------------------------------------
### velocity
p_v_ra_brt_add <- ggplot(v_ra_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_ra_c_brt_add <- ggplot(v_ra_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_ra_brt_add.png", plot = p_v_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_ra_c_brt_add.png", plot = p_v_ra_c_brt_add, width = 6, height = 5)

### wd_m 
p_wd_ra_brt_add <- ggplot(wd_ra_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_ra_c_brt_add <- ggplot(wd_ra_c_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_ra_brt_add.png", plot = p_wd_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_ra_c_brt_add.png", plot = p_wd_ra_c_brt_add, width = 6, height = 5)

### froude 
p_f_wd_ra_brt_add <- ggplot(f_wd_ra_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_f_wd_ra_c_brt_add <- ggplot(f_wd_ra_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_f_wd_ra_brt_add.png", plot = p_f_wd_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_f_wd_ra_c_brt_add.png", plot = p_f_wd_ra_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_wd_ra_brt_add <- ggplot(s_wd_ra_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_s_wd_ra_c_brt_add <- ggplot(s_wd_ra_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_s_wd_ra_brt_add.png", plot = p_s_wd_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_s_wd_ra_c_brt_add.png", plot = p_s_wd_ra_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_wd_ra_brt_add <- ggplot(sp_wd_ra_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates"
  ) +
  theme_minimal()

p_sp_wd_ra_c_brt_add <- ggplot(sp_wd_ra_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance",
    title = "Xgboost Model without Coordinates"
  ) +
  theme_minimal()

# save the plots 
ggsave("ML_model/plots/pdp_sp_wd_ra_brt_add.png", plot = p_sp_wd_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sp_wd_ra_c_brt_add.png", plot = p_sp_wd_ra_c_brt_add, width = 6, height = 5)

### x/y
p_x_v_ra_brt_add <- ggplot(x_v_ra_brt_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_v_ra_brt_add <- ggplot(y_v_ra_brt_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictor: Velocity & Water Depth"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_v_ra_brt_add.png", plot = p_x_v_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_v_ra_brt_add.png", plot = p_y_v_ra_brt_add, width = 6, height = 5)
```

### Predictors: Sampling Locations
```{r}
### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_samp_k_brt_add <- ggplot(v_samp_k_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_k_c_brt_add <- ggplot(v_samp_k_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_k_brt_add.png", plot = p_v_samp_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_k_c_brt_add.png", plot = p_v_samp_k_c_brt_add, width = 6, height = 5)

### wd_m 
p_wd_samp_k_brt_add <- ggplot(wd_samp_k_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_k_c_brt_add <- ggplot(wd_samp_k_c_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_k_brt_add.png", plot = p_wd_samp_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_k_c_brt_add.png", plot = p_wd_samp_k_c_brt_add, width = 6, height = 5)

### x/y
p_x_samp_k_brt_add <- ggplot(x_samp_k_brt_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_k_brt_add <- ggplot(y_samp_k_brt_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_k_brt_add.png", plot = p_x_samp_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_k_brt_add.png", plot = p_y_samp_k_brt_add, width = 6, height = 5)

### z 
p_z_samp_k_brt_add <- ggplot(z_samp_k_brt_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_k_c_brt_add <- ggplot(z_samp_k_c_brt_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_k_brt_add.png", plot = p_z_samp_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_k_c_brt_add.png", plot = p_z_samp_k_c_brt_add, width = 6, height = 5)

### dist_w 
p_dist_samp_k_brt_add <- ggplot(dist_samp_k_brt_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_k_c_brt_add <- ggplot(dist_samp_k_brt_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_k_brt_add.png", plot = p_dist_samp_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_k_c_brt_add.png", plot = p_dist_samp_k_c_brt_add, width = 6, height = 5)

### cat_v
p_cv_samp_k_brt_add <- ggplot(cv_samp_k_brt_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_k_c_brt_add <- ggplot(cv_samp_k_brt_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_k_brt_add.png", plot = p_cv_samp_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_k_c_brt_add.png", plot = p_cv_samp_k_c_brt_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_k_brt_add <- ggplot(ac_samp_k_brt_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_k_c_brt_add <- ggplot(ac_samp_k_brt_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_k_brt_add.png", plot = p_ac_samp_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_k_c_brt_add.png", plot = p_ac_samp_k_c_brt_add, width = 6, height = 5)

### moos_cover
p_mc_samp_k_brt_add <- ggplot(mc_samp_k_brt_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_k_c_brt_add <- ggplot(mc_samp_k_brt_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_k_brt_add.png", plot = p_mc_samp_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_k_c_brt_add.png", plot = p_mc_samp_k_c_brt_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_k_brt_add <- ggplot(cc_samp_k_brt_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_k_c_brt_add <- ggplot(cc_samp_k_brt_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_k_brt_add.png", plot = p_cc_samp_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_k_c_brt_add.png", plot = p_cc_samp_k_c_brt_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_k_brt_add <- ggplot(clog_3_samp_k_brt_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_k_c_brt_add <- ggplot(clog_3_samp_k_brt_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_k_brt_add.png", plot = p_clog_3_samp_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_k_c_brt_add.png", plot = p_clog_3_samp_k_c_brt_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_k_brt_add <- ggplot(clog_6_samp_k_brt_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_k_c_brt_add <- ggplot(clog_6_samp_k_brt_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_k_brt_add.png", plot = p_clog_6_samp_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_k_c_brt_add.png", plot = p_clog_6_samp_k_c_brt_add, width = 6, height = 5)

### sub_type
p_sub_samp_k_brt_add <- ggplot(sub_samp_k_brt_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_k_c_brt_add <- ggplot(sub_samp_k_brt_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_k_brt_add.png", plot = p_sub_samp_k_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_k_c_brt_add.png", plot = p_sub_samp_k_c_brt_add, width = 6, height = 5)

# With shannon index as response ----------------------------------------------
### velocity
p_v_samp_s_brt_add <- ggplot(v_samp_s_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_s_c_brt_add <- ggplot(v_samp_s_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_s_brt_add.png", plot = p_v_samp_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_s_c_brt_add.png", plot = p_v_samp_s_c_brt_add, width = 6, height = 5)

### wd_m 
p_wd_samp_s_brt_add <- ggplot(wd_samp_s_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_s_c_brt_add <- ggplot(wd_samp_s_c_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_s_brt_add.png", plot = p_wd_samp_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_s_c_brt_add.png", plot = p_wd_samp_s_c_brt_add, width = 6, height = 5)


### x/y
p_x_samp_s_brt_add <- ggplot(x_samp_s_brt_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_s_brt_add <- ggplot(y_samp_s_brt_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_s_brt_add.png", plot = p_x_samp_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_s_brt_add.png", plot = p_y_samp_s_brt_add, width = 6, height = 5)

### z 
p_z_samp_s_brt_add <- ggplot(z_samp_s_brt_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_s_c_brt_add <- ggplot(z_samp_s_c_brt_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_s_brt_add.png", plot = p_z_samp_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_s_c_brt_add.png", plot = p_z_samp_s_c_brt_add, width = 6, height = 5)

### dist_w 
p_dist_samp_s_brt_add <- ggplot(dist_samp_s_brt_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_s_c_brt_add <- ggplot(dist_samp_s_brt_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_s_brt_add.png", plot = p_dist_samp_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_s_c_brt_add.png", plot = p_dist_samp_s_c_brt_add, width = 6, height = 5)

### cat_v
p_cv_samp_s_brt_add <- ggplot(cv_samp_s_brt_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_s_c_brt_add <- ggplot(cv_samp_s_brt_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_s_brt_add.png", plot = p_cv_samp_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_s_c_brt_add.png", plot = p_cv_samp_s_c_brt_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_s_brt_add <- ggplot(ac_samp_s_brt_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_s_c_brt_add <- ggplot(ac_samp_s_brt_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_s_brt_add.png", plot = p_ac_samp_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_s_c_brt_add.png", plot = p_ac_samp_s_c_brt_add, width = 6, height = 5)

### moos_cover
p_mc_samp_s_brt_add <- ggplot(mc_samp_s_brt_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_s_c_brt_add <- ggplot(mc_samp_s_brt_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_s_brt_add.png", plot = p_mc_samp_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_s_c_brt_add.png", plot = p_mc_samp_s_c_brt_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_s_brt_add <- ggplot(cc_samp_s_brt_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_s_c_brt_add <- ggplot(cc_samp_s_brt_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_s_brt_add.png", plot = p_cc_samp_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_s_c_brt_add.png", plot = p_cc_samp_s_c_brt_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_s_brt_add <- ggplot(clog_3_samp_s_brt_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_s_c_brt_add <- ggplot(clog_3_samp_s_brt_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_s_brt_add.png", plot = p_clog_3_samp_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_s_c_brt_add.png", plot = p_clog_3_samp_s_c_brt_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_s_brt_add <- ggplot(clog_6_samp_s_brt_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_s_c_brt_add <- ggplot(clog_6_samp_s_brt_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_s_brt_add.png", plot = p_clog_6_samp_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_s_c_brt_add.png", plot = p_clog_6_samp_s_c_brt_add, width = 6, height = 5)

### sub_type
p_sub_samp_s_brt_add <- ggplot(sub_samp_s_brt_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Shannon Index",
    title = "Xgboost Model with Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_s_c_brt_add <- ggplot(sub_samp_s_brt_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Shannon Index",
    title = "Xgboost Model without Coordinates",
    subtitle = "Predictors: Sampling Locations"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_s_brt_add.png", plot = p_sub_samp_s_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_s_c_brt_add.png", plot = p_sub_samp_s_c_brt_add, width = 6, height = 5)


# With abundance as response --------------------------------------------------
### velocity
p_v_samp_a_brt_add <- ggplot(v_samp_a_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_a_c_brt_add <- ggplot(v_samp_a_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_a_brt_add.png", plot = p_v_samp_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_a_c_brt_add.png", plot = p_v_samp_a_c_brt_add, width = 6, height = 5)

### wd_m 
p_wd_samp_a_brt_add <- ggplot(wd_samp_a_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_a_c_brt_add <- ggplot(wd_samp_a_c_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_a_brt_add.png", plot = p_wd_samp_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_a_c_brt_add.png", plot = p_wd_samp_a_c_brt_add, width = 6, height = 5)

### x/y
p_x_samp_a_brt_add <- ggplot(x_samp_a_brt_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_a_brt_add <- ggplot(y_samp_a_brt_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_a_brt_add.png", plot = p_x_samp_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_a_brt_add.png", plot = p_y_samp_a_brt_add, width = 6, height = 5)

### z 
p_z_samp_a_brt_add <- ggplot(z_samp_a_brt_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_a_c_brt_add <- ggplot(z_samp_a_c_brt_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_a_brt_add.png", plot = p_z_samp_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_a_c_brt_add.png", plot = p_z_samp_a_c_brt_add, width = 6, height = 5)

### dist_w 
p_dist_samp_a_brt_add <- ggplot(dist_samp_a_brt_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_a_c_brt_add <- ggplot(dist_samp_a_brt_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_a_brt_add.png", plot = p_dist_samp_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_a_c_brt_add.png", plot = p_dist_samp_a_c_brt_add, width = 6, height = 5)

### cat_v
p_cv_samp_a_brt_add <- ggplot(cv_samp_a_brt_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_a_c_brt_add <- ggplot(cv_samp_a_brt_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_a_brt_add.png", plot = p_cv_samp_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_a_c_brt_add.png", plot = p_cv_samp_a_c_brt_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_a_brt_add <- ggplot(ac_samp_a_brt_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_a_c_brt_add <- ggplot(ac_samp_a_brt_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_a_brt_add.png", plot = p_ac_samp_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_a_c_brt_add.png", plot = p_ac_samp_a_c_brt_add, width = 6, height = 5)

### moos_cover
p_mc_samp_a_brt_add <- ggplot(mc_samp_a_brt_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_a_c_brt_add <- ggplot(mc_samp_a_brt_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_a_brt_add.png", plot = p_mc_samp_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_a_c_brt_add.png", plot = p_mc_samp_a_c_brt_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_a_brt_add <- ggplot(cc_samp_a_brt_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_a_c_brt_add <- ggplot(cc_samp_a_brt_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_a_brt_add.png", plot = p_cc_samp_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_a_c_brt_add.png", plot = p_cc_samp_a_c_brt_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_a_brt_add <- ggplot(clog_3_samp_a_brt_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_a_c_brt_add <- ggplot(clog_3_samp_a_brt_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_a_brt_add.png", plot = p_clog_3_samp_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_a_c_brt_add.png", plot = p_clog_3_samp_a_c_brt_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_a_brt_add <- ggplot(clog_6_samp_a_brt_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_a_c_brt_add <- ggplot(clog_6_samp_a_brt_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_a_brt_add.png", plot = p_clog_6_samp_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_a_c_brt_add.png", plot = p_clog_6_samp_a_c_brt_add, width = 6, height = 5)

### sub_type
p_sub_samp_a_brt_add <- ggplot(sub_samp_a_brt_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_a_c_brt_add <- ggplot(sub_samp_a_brt_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_a_brt_add.png", plot = p_sub_samp_a_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_a_c_brt_add.png", plot = p_sub_samp_a_c_brt_add, width = 6, height = 5)


# With rel_abundance as response --------------------------------------------------
### velocity
p_v_samp_ra_brt_add <- ggplot(v_samp_ra_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_v_samp_ra_c_brt_add <- ggplot(v_samp_ra_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_ra_brt_add.png", plot = p_v_samp_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_v_samp_ra_c_brt_add.png", plot = p_v_samp_ra_c_brt_add, width = 6, height = 5)

### wd_m 
p_wd_samp_ra_brt_add <- ggplot(wd_samp_ra_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_wd_samp_ra_c_brt_add <- ggplot(wd_samp_ra_c_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_ra_brt_add.png", plot = p_wd_samp_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_wd_samp_ra_c_brt_add.png", plot = p_wd_samp_ra_c_brt_add, width = 6, height = 5)

### x/y
p_x_samp_ra_brt_add <- ggplot(x_samp_ra_brt_add, aes(x, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "X Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_y_samp_ra_brt_add <- ggplot(y_samp_ra_brt_add, aes(y, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Y Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_x_samp_ra_brt_add.png", plot = p_x_samp_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_y_samp_ra_brt_add.png", plot = p_y_samp_ra_brt_add, width = 6, height = 5)

### z 
p_z_samp_ra_brt_add <- ggplot(z_samp_ra_brt_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_z_samp_ra_c_brt_add <- ggplot(z_samp_ra_c_brt_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_ra_brt_add.png", plot = p_z_samp_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_z_samp_ra_c_brt_add.png", plot = p_z_samp_ra_c_brt_add, width = 6, height = 5)

### dist_w 
p_dist_samp_ra_brt_add <- ggplot(dist_samp_ra_brt_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_dist_samp_ra_c_brt_add <- ggplot(dist_samp_ra_brt_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_ra_brt_add.png", plot = p_dist_samp_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_dist_samp_ra_c_brt_add.png", plot = p_dist_samp_ra_c_brt_add, width = 6, height = 5)

### cat_v
p_cv_samp_ra_brt_add <- ggplot(cv_samp_ra_brt_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cv_samp_ra_c_brt_add <- ggplot(cv_samp_ra_brt_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_ra_brt_add.png", plot = p_cv_samp_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cv_samp_ra_c_brt_add.png", plot = p_cv_samp_ra_c_brt_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_ra_brt_add <- ggplot(ac_samp_ra_brt_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_ac_samp_ra_c_brt_add <- ggplot(ac_samp_ra_brt_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_ra_brt_add.png", plot = p_ac_samp_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_ac_samp_ra_c_brt_add.png", plot = p_ac_samp_ra_c_brt_add, width = 6, height = 5)

### moos_cover
p_mc_samp_ra_brt_add <- ggplot(mc_samp_ra_brt_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_mc_samp_ra_c_brt_add <- ggplot(mc_samp_ra_brt_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_ra_brt_add.png", plot = p_mc_samp_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_mc_samp_ra_c_brt_add.png", plot = p_mc_samp_ra_c_brt_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_ra_brt_add <- ggplot(cc_samp_ra_brt_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_cc_samp_ra_c_brt_add <- ggplot(cc_samp_ra_brt_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_ra_brt_add.png", plot = p_cc_samp_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_cc_samp_ra_c_brt_add.png", plot = p_cc_samp_ra_c_brt_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_ra_brt_add <- ggplot(clog_3_samp_ra_brt_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_3_samp_ra_c_brt_add <- ggplot(clog_3_samp_ra_brt_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_ra_brt_add.png", plot = p_clog_3_samp_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_3_samp_ra_c_brt_add.png", plot = p_clog_3_samp_ra_c_brt_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_ra_brt_add <- ggplot(clog_6_samp_ra_brt_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_clog_6_samp_ra_c_brt_add <- ggplot(clog_6_samp_ra_brt_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_ra_brt_add.png", plot = p_clog_6_samp_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_clog_6_samp_ra_c_brt_add.png", plot = p_clog_6_samp_ra_c_brt_add, width = 6, height = 5)

### sub_type
p_sub_samp_ra_brt_add <- ggplot(sub_samp_ra_brt_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

p_sub_samp_ra_c_brt_add <- ggplot(sub_samp_ra_brt_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_ra_brt_add.png", plot = p_sub_samp_ra_brt_add, width = 6, height = 5)
ggsave("ML_model/plots/pdp_sub_samp_ra_c_brt_add.png", plot = p_sub_samp_ra_c_brt_add, width = 6, height = 5)
```

## All models 
```{r}
# bind all models with k_index -----------------------------------------------
mod_k_v <- rbind(v_k_rf, v_k_rf_add, v_k_brt, v_k_brt_add)
mod_k_v_c <- rbind(v_k_c_rf, v_k_c_rf_add, v_k_c_brt, v_k_c_brt_add)
```

