---
title: "pdp_plots"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
pkgCheck("Fgmutils") # for bias calculation (bias() function)
pkgCheck("hydroGOF") # for NSE calculation with NSE() function 
```

# Load Data
## RF normal
```{r}
### PREDICTOR: VELOCITY ### -------------------------------------------------
# With k_index as response --------------------------------------------------
### velocity
v_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_k_c_rf.csv") 

# With shannon index as response ----------------------------------------------
### velocity
v_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_s_c_rf.csv") 

# With abundance as response --------------------------------------------------
### velocity
v_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_a_c_rf.csv") 

# With rel_abundance as response ----------------------------------------------
### velocity
v_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_ra_c_rf.csv") 

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response ---------------------------------------------------
### velocity
v_wd_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_wd_k_c_rf.csv") 

### wd_m
wd_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_k_c_rf.csv")

# With shannon index as response ----------------------------------------------
### velocity
v_wd_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_wd_s_c_rf.csv") 

### wd_m
wd_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_s_c_rf.csv")

# With abundance as response --------------------------------------------------
### velocity
v_wd_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_wd_a_c_rf.csv") 

### wd_m
wd_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_a_c_rf.csv")

# With rel_abundance as response ---------------------------------------------
### velocity
v_wd_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_wd_ra_c_rf.csv") 

### wd_m
wd_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_ra_c_rf.csv")

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
### velocity
v_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_k_c_rf.csv") 

### wd_m
wd_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_k_c_rf.csv")

### z 
z_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_k_c_rf.csv")

### dist_w 
dist_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_k_c_rf.csv")

### cat_v
cv_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_k_c_rf.csv")

### alg_cover 
ac_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_k_c_rf.csv")

### moos_cover 
mc_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_k_c_rf.csv")

### cpom_cover 
cc_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_k_c_rf.csv")

### clog_3 
clog_3_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_k_c_rf.csv")

### clog_6 
clog_6_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_k_c_rf.csv")

### sub_type
sub_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_k_c_rf.csv")

# With shannon index as response ----------------------------------------------
### velocity
v_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_s_c_rf.csv") 

### wd_m
wd_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_s_c_rf.csv")

### z 
z_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_s_c_rf.csv")

### dist_w 
dist_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_s_c_rf.csv")

### cat_v
cv_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_s_c_rf.csv")

### alg_cover 
ac_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_s_c_rf.csv")

### moos_cover 
mc_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_s_c_rf.csv")

### cpom_cover 
cc_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_s_c_rf.csv")

### clog_3 
clog_3_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_s_c_rf.csv")

### clog_6 
clog_6_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_s_c_rf.csv")

### sub_type
sub_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_s_c_rf.csv")

# With abundance as response --------------------------------------------------
### velocity
v_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_a_c_rf.csv") 

### wd_m
wd_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_a_c_rf.csv")

### z 
z_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_a_c_rf.csv")

### dist_w 
dist_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_a_c_rf.csv")

### cat_v
cv_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_a_c_rf.csv")

### alg_cover 
ac_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_a_c_rf.csv")

### moos_cover 
mc_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_a_c_rf.csv")

### cpom_cover 
cc_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_a_c_rf.csv")

### clog_3 
clog_3_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_a_c_rf.csv")

### clog_6 
clog_6_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_a_c_rf.csv")

### sub_type
sub_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_a_c_rf.csv")

# With rel_abundance as response ----------------------------------------------
### velocity
v_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_ra_c_rf.csv") 

### wd_m
wd_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_ra_c_rf.csv")

### z 
z_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_ra_c_rf.csv")

### dist_w 
dist_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_ra_c_rf.csv")

### cat_v
cv_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_ra_c_rf.csv")

### alg_cover 
ac_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_ra_c_rf.csv")

### moos_cover 
mc_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_ra_c_rf.csv")

### cpom_cover 
cc_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_ra_c_rf.csv")

### clog_3 
clog_3_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_c_rf.csv")

### clog_6 
clog_6_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_c_rf.csv")

### sub_type
sub_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_ra_c_rf.csv")
```

## RF added
```{r}
### PREDICTOR: VELOCITY ### -------------------------------------------------
# With k_index as response --------------------------------------------------
### velocity
v_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_k_c_rf_add.csv") 

### froude
f_v_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_v_k_c_rf_add.csv") 

### shear_stress
s_v_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_v_k_c_rf_add.csv") 

### stream_power
sp_v_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_k_c_rf_add.csv") 

# With shannon index as response ----------------------------------------------
### velocity
v_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_s_c_rf_add.csv") 

### froude
f_v_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_v_s_c_rf_add.csv") 

### shear_stress
s_v_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_v_s_c_rf_add.csv") 

### stream_power
sp_v_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_s_c_rf_add.csv") 

# With abundance as response --------------------------------------------------
### velocity
v_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_a_c_rf_add.csv") 

### froude
f_v_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_v_a_c_rf_add.csv") 

### shear_stress
s_v_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_v_a_c_rf_add.csv") 

### stream_power
sp_v_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_a_c_rf_add.csv") 

# With rel_abundance as response ----------------------------------------------
### velocity
v_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_ra_c_rf_add.csv")

### froude
f_v_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_v_ra_c_rf_add.csv") 

### shear_stress
s_v_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_v_ra_c_rf_add.csv") 

### stream_power
sp_v_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_ra_c_rf_add.csv") 

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response ---------------------------------------------------
### velocity
v_wd_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_wd_k_c_rf_add.csv") 

### froude
f_wd_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_k_c_rf_add.csv") 

### shear_stress
s_wd_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_k_c_rf_add.csv") 

### stream_power
sp_wd_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_k_c_rf_add.csv") 

### wd_m
wd_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_k_c_rf_add.csv")

# With shannon index as response ----------------------------------------------
### velocity
v_wd_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_wd_s_c_rf_add.csv") 

### froude
f_wd_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_s_c_rf_add.csv") 

### shear_stress
s_wd_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_s_c_rf_add.csv") 

### stream_power
sp_wd_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_s_c_rf_add.csv")

### wd_m
wd_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_s_c_rf_add.csv")

# With abundance as response --------------------------------------------------
### velocity
v_wd_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_wd_a_c_rf_add.csv")

### froude
f_wd_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_a_c_rf_add.csv") 

### shear_stress
s_wd_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_a_c_rf_add.csv") 

### stream_power
sp_wd_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_a_c_rf_add.csv")

### wd_m
wd_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_a_c_rf_add.csv")

# With rel_abundance as response ---------------------------------------------
### velocity
v_wd_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_wd_ra_c_rf_add.csv") 

### froude
f_wd_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_ra_c_rf_add.csv") 

### shear_stress
s_wd_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_ra_c_rf_add.csv") 

### stream_power
sp_wd_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_ra_c_rf_add.csv")

### wd_m
wd_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_ra_c_rf_add.csv")

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
### velocity
v_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_samp_k_c_rf_add.csv") 

### froude
f_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_k_c_rf_add.csv") 

### shear_stress
s_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_k_c_rf_add.csv") 

### stream_power
sp_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_k_c_rf_add.csv")

### wd_m
wd_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_samp_k_c_rf_add.csv")

### z 
z_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_samp_k_c_rf_add.csv")

### dist_w 
dist_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_samp_k_c_rf_add.csv")

### cat_v
cv_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_samp_k_c_rf_add.csv")

### alg_cover 
ac_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_samp_k_c_rf_add.csv")

### moos_cover 
mc_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_samp_k_c_rf_add.csv")

### cpom_cover 
cc_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_samp_k_c_rf_add.csv")

### clog_3 
clog_3_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_k_c_rf_add.csv")

### clog_6 
clog_6_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_k_c_rf_add.csv")

### sub_type
sub_samp_k_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_samp_k_c_rf_add.csv")

# With shannon index as response ----------------------------------------------
### velocity
v_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_samp_s_c_rf_add.csv") 

### froude
f_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_s_c_rf_add.csv") 

### shear_stress
s_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_s_c_rf_add.csv") 

### stream_power
sp_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_s_c_rf_add.csv")

### wd_m
wd_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_samp_s_c_rf_add.csv")

### z 
z_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_samp_s_c_rf_add.csv")

### dist_w 
dist_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_samp_s_c_rf_add.csv")

### cat_v
cv_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_samp_s_c_rf_add.csv")

### alg_cover 
ac_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_samp_s_c_rf_add.csv")

### moos_cover 
mc_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_samp_s_c_rf_add.csv")

### cpom_cover 
cc_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_samp_s_c_rf_add.csv")

### clog_3 
clog_3_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_s_c_rf_add.csv")

### clog_6 
clog_6_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_s_c_rf_add.csv")

### sub_type
sub_samp_s_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_samp_s_c_rf_add.csv")

# With abundance as response --------------------------------------------------
### velocity
v_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_samp_a_c_rf_add.csv") 

### froude
f_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_a_c_rf_add.csv") 

### shear_stress
s_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_a_c_rf_add.csv") 

### stream_power
sp_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_a_c_rf_add.csv")

### wd_m
wd_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_samp_a_c_rf_add.csv")

### z 
z_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_samp_a_c_rf_add.csv")

### dist_w 
dist_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_samp_a_c_rf_add.csv")

### cat_v
cv_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_samp_a_c_rf_add.csv")

### alg_cover 
ac_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_samp_a_c_rf_add.csv")

### moos_cover 
mc_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_samp_a_c_rf_add.csv")

### cpom_cover 
cc_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_samp_a_c_rf_add.csv")

### clog_3 
clog_3_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_a_c_rf_add.csv")

### clog_6 
clog_6_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_a_c_rf_add.csv")

### sub_type
sub_samp_a_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_samp_a_c_rf_add.csv")

# With rel_abundance as response ----------------------------------------------
### velocity
v_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_v_samp_ra_c_rf_add.csv") 

### froude
f_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_ra_c_rf_add.csv") 

### shear_stress
s_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_ra_c_rf_add.csv") 

### stream_power
sp_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_ra_c_rf_add.csv")

### wd_m
wd_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_wd_samp_ra_c_rf_add.csv")

### z 
z_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_z_samp_ra_c_rf_add.csv")

### dist_w 
dist_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_dist_samp_ra_c_rf_add.csv")

### cat_v
cv_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cv_samp_ra_c_rf_add.csv")

### alg_cover 
ac_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_ac_samp_ra_c_rf_add.csv")

### moos_cover 
mc_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_mc_samp_ra_c_rf_add.csv")

### cpom_cover 
cc_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_cc_samp_ra_c_rf_add.csv")

### clog_3 
clog_3_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_c_rf_add.csv")

### clog_6 
clog_6_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_c_rf_add.csv")

### sub_type
sub_samp_ra_c_rf_add <- read_delim("ML_Model/pdp_data/pdp_sub_samp_ra_c_rf_add.csv")
```

## BRT normal 
```{r}
### PREDICTOR: VELOCITY ### -------------------------------------------------
# With k_index as response --------------------------------------------------
### velocity
v_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_k_c_brt.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_s_c_brt.csv", sep = ",")

# With abundance as response --------------------------------------------------
### velocity 
v_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_a_c_brt.csv", sep = ",")

# With rel_abundance as response ----------------------------------------------
### velocity 
v_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_ra_c_brt.csv", sep = ",")

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
v_wd_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_wd_k_c_brt.csv", sep = ",")

### wd_m 
wd_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_k_c_brt.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_wd_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_wd_s_c_brt.csv", sep = ",")

### wd_m 
wd_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_s_c_brt.csv", sep = ",")

# With abundance as response --------------------------------------------------
### velocity 
v_wd_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_wd_a_c_brt.csv", sep = ",")

### wd_m 
wd_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_a_c_brt.csv", sep = ",")

# With rel_abundance as response ---------------------------------------------
### velocity 
v_wd_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_wd_ra_c_brt.csv", sep = ",")

### wd_m 
wd_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_ra_c_brt.csv", sep = ",")

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
v_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_samp_k_c_brt.csv", sep = ",")

### wd_m 
wd_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_samp_k_c_brt.csv", sep = ",")

### z 
z_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_z_samp_k_c_brt.csv", sep = ",")

### dist_w 
dist_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_dist_samp_k_c_brt.csv", sep = ",")

### cat_v 
cv_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_cv_samp_k_c_brt.csv", sep = ",")

### alg_cover 
ac_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_ac_samp_k_c_brt.csv", sep = ",")

### moos_cover 
mc_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_mc_samp_k_c_brt.csv", sep = ",")

### cpom_cover 
cc_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_cc_samp_k_c_brt.csv", sep = ",")

### clog_3 
clog_3_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_k_c_brt.csv", sep = ",")

### clog_6
clog_6_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_k_c_brt.csv", sep = ",")

### sub_type
sub_samp_k_c_brt <- read.delim("ML_Model/pdp_data/pdp_sub_samp_k_c_brt.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_samp_s_c_brt.csv", sep = ",")

### wd_m 
wd_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_samp_s_c_brt.csv", sep = ",")

### z 
z_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_z_samp_s_c_brt.csv", sep = ",")

### dist_w 
dist_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_dist_samp_s_c_brt.csv", sep = ",")

### cat_v 
cv_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_cv_samp_s_c_brt.csv", sep = ",")

### alg_cover 
ac_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_ac_samp_s_c_brt.csv", sep = ",")

### moos_cover 
mc_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_mc_samp_s_c_brt.csv", sep = ",")

### cpom_cover 
cc_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_cc_samp_s_c_brt.csv", sep = ",")

### clog_3 
clog_3_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_s_c_brt.csv", sep = ",")

### clog_6
clog_6_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_s_c_brt.csv", sep = ",")

### sub_type
sub_samp_s_c_brt <- read.delim("ML_Model/pdp_data/pdp_sub_samp_s_c_brt.csv", sep = ",")

# With abundance as response --------------------------------------------------
### velocity 
v_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_samp_a_c_brt.csv", sep = ",")

### wd_m 
wd_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_samp_a_c_brt.csv", sep = ",")

### z 
z_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_z_samp_a_c_brt.csv", sep = ",")

### dist_w 
dist_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_dist_samp_a_c_brt.csv", sep = ",")

### cat_v 
cv_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_cv_samp_a_c_brt.csv", sep = ",")

### alg_cover 
ac_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_ac_samp_a_c_brt.csv", sep = ",")

### moos_cover 
mc_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_mc_samp_a_c_brt.csv", sep = ",")

### cpom_cover 
cc_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_cc_samp_a_c_brt.csv", sep = ",")

### clog_3 
clog_3_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_a_c_brt.csv", sep = ",")

### clog_6
clog_6_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_a_c_brt.csv", sep = ",")

### sub_type
sub_samp_a_c_brt <- read.delim("ML_Model/pdp_data/pdp_sub_samp_a_c_brt.csv", sep = ",")

# With rel_abundance as response ----------------------------------------------
### velocity 
v_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_v_samp_ra_c_brt.csv", sep = ",")

### wd_m 
wd_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_wd_samp_ra_c_brt.csv", sep = ",")

### z 
z_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_z_samp_ra_c_brt.csv", sep = ",")

### dist_w 
dist_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_dist_samp_ra_c_brt.csv", sep = ",")

### cat_v 
cv_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_cv_samp_ra_c_brt.csv", sep = ",")

### alg_cover 
ac_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_ac_samp_ra_c_brt.csv", sep = ",")

### moos_cover 
mc_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_mc_samp_ra_c_brt.csv", sep = ",")

### cpom_cover 
cc_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_cc_samp_ra_c_brt.csv", sep = ",")

### clog_3 
clog_3_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_c_brt.csv", sep = ",")

### clog_6
clog_6_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_c_brt.csv", sep = ",")

### sub_type
sub_samp_ra_c_brt <- read.delim("ML_Model/pdp_data/pdp_sub_samp_ra_c_brt.csv", sep = ",")
```

## BRT added
```{r}
### PREDICTOR: VELOCITY ### -------------------------------------------------
# With k_index as response --------------------------------------------------
### velocity
v_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_k_c_brt_add.csv", sep = ",")

### froude
f_v_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_v_k_c_brt_add.csv") 

### shear_stress
s_v_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_v_k_c_brt_add.csv") 

### stream_power
sp_v_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_k_c_brt_add.csv") 

# With shannon index as response ----------------------------------------------
### velocity 
v_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_s_c_brt_add.csv", sep = ",")

### froude
f_v_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_v_s_c_brt_add.csv") 

### shear_stress
s_v_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_v_s_c_brt_add.csv") 

### stream_power
sp_v_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_s_c_brt_add.csv") 

# With abundance as response --------------------------------------------------
### velocity 
v_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_a_c_brt_add.csv", sep = ",")

### froude
f_v_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_v_a_c_brt_add.csv") 

### shear_stress
s_v_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_v_a_c_brt_add.csv") 

### stream_power
sp_v_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_a_c_brt_add.csv") 

# With rel_abundance as response ----------------------------------------------
### velocity 
v_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_ra_c_brt_add.csv", sep = ",")

### froude
f_v_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_v_ra_c_brt_add.csv") 

### shear_stress
s_v_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_v_ra_c_brt_add.csv") 

### stream_power
sp_v_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_v_ra_c_brt_add.csv") 

### PREDICTORS: VELOCITY + WD ### --------------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
v_wd_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_wd_k_c_brt_add.csv", sep = ",")

### froude
f_wd_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_k_c_brt_add.csv") 

### shear_stress
s_wd_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_k_c_brt_add.csv") 

### stream_power
sp_wd_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_k_c_brt_add.csv") 

### wd_m 
wd_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_k_c_brt_add.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_wd_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_wd_s_c_brt_add.csv", sep = ",")

### froude
f_wd_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_s_c_brt_add.csv") 

### shear_stress
s_wd_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_s_c_brt_add.csv") 

### stream_power
sp_wd_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_s_c_brt_add.csv") 

### wd_m 
wd_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_s_c_brt_add.csv", sep = ",")

# With abundance as response --------------------------------------------------
### velocity 
v_wd_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_wd_a_c_brt_add.csv", sep = ",")

### froude
f_wd_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_a_c_brt_add.csv") 

### shear_stress
s_wd_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_a_c_brt_add.csv") 

### stream_power
sp_wd_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_a_c_brt_add.csv") 

### wd_m 
wd_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_a_c_brt_add.csv", sep = ",")

# With rel_abundance as response ---------------------------------------------
### velocity 
v_wd_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_wd_ra_c_brt_add.csv", sep = ",")

### froude
f_wd_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_wd_ra_c_brt_add.csv") 

### shear_stress
s_wd_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_wd_ra_c_brt_add.csv") 

### stream_power
sp_wd_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_wd_ra_c_brt_add.csv") 

### wd_m 
wd_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_ra_c_brt_add.csv", sep = ",")

### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
### velocity 
v_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_samp_k_c_brt_add.csv", sep = ",")

### froude
f_samp_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_k_c_brt_add.csv") 

### shear_stress
s_samp_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_k_c_brt_add.csv") 

### stream_power
sp_samp_k_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_k_c_brt_add.csv") 

### wd_m 
wd_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_samp_k_c_brt_add.csv", sep = ",")

### z 
z_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_samp_k_c_brt_add.csv", sep = ",")

### dist_w 
dist_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_samp_k_c_brt_add.csv", sep = ",")

### cat_v 
cv_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_samp_k_c_brt_add.csv", sep = ",")

### alg_cover 
ac_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_samp_k_c_brt_add.csv", sep = ",")

### moos_cover 
mc_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_samp_k_c_brt_add.csv", sep = ",")

### cpom_cover 
cc_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_samp_k_c_brt_add.csv", sep = ",")

### clog_3 
clog_3_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_k_c_brt_add.csv", sep = ",")

### clog_6
clog_6_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_k_c_brt_add.csv", sep = ",")

### sub_type
sub_samp_k_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_samp_k_c_brt_add.csv", sep = ",")

# With shannon index as response ----------------------------------------------
### velocity 
v_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_samp_s_c_brt_add.csv", sep = ",")

### froude
f_samp_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_s_c_brt_add.csv") 

### shear_stress
s_samp_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_s_c_brt_add.csv") 

### stream_power
sp_samp_s_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_s_c_brt_add.csv")

### wd_m 
wd_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_samp_s_c_brt_add.csv", sep = ",")

### z 
z_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_samp_s_c_brt_add.csv", sep = ",")

### dist_w 
dist_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_samp_s_c_brt_add.csv", sep = ",")

### cat_v 
cv_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_samp_s_c_brt_add.csv", sep = ",")

### alg_cover 
ac_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_samp_s_c_brt_add.csv", sep = ",")

### moos_cover 
mc_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_samp_s_c_brt_add.csv", sep = ",")

### cpom_cover 
cc_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_samp_s_c_brt_add.csv", sep = ",")

### clog_3 
clog_3_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_s_c_brt_add.csv", sep = ",")

### clog_6
clog_6_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_s_c_brt_add.csv", sep = ",")

### sub_type
sub_samp_s_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_samp_s_c_brt_add.csv", sep = ",")

# With abundance as response --------------------------------------------------
### velocity 
v_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_samp_a_c_brt_add.csv", sep = ",")

### froude
f_samp_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_a_c_brt_add.csv") 

### shear_stress
s_samp_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_a_c_brt_add.csv") 

### stream_power
sp_samp_a_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_a_c_brt_add.csv")

### wd_m 
wd_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_samp_a_c_brt_add.csv", sep = ",")

### z 
z_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_samp_a_c_brt_add.csv", sep = ",")

### dist_w 
dist_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_samp_a_c_brt_add.csv", sep = ",")

### cat_v 
cv_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_samp_a_c_brt_add.csv", sep = ",")

### alg_cover 
ac_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_samp_a_c_brt_add.csv", sep = ",")

### moos_cover 
mc_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_samp_a_c_brt_add.csv", sep = ",")

### cpom_cover 
cc_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_samp_a_c_brt_add.csv", sep = ",")

### clog_3 
clog_3_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_a_c_brt_add.csv", sep = ",")

### clog_6
clog_6_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_a_c_brt_add.csv", sep = ",")

### sub_type
sub_samp_a_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_samp_a_c_brt_add.csv", sep = ",")

# With rel_abundance as response ----------------------------------------------
### velocity 
v_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_v_samp_ra_c_brt_add.csv", sep = ",")

### froude
f_samp_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_f_samp_ra_c_brt_add.csv") 

### shear_stress
s_samp_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_s_samp_ra_c_brt_add.csv") 

### stream_power
sp_samp_ra_c_brt_add <- read_delim("ML_Model/pdp_data/pdp_sp_samp_ra_c_brt_add.csv")

### wd_m 
wd_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_wd_samp_ra_c_brt_add.csv", sep = ",")

### z 
z_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_z_samp_ra_c_brt_add.csv", sep = ",")

### dist_w 
dist_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_dist_samp_ra_c_brt_add.csv", sep = ",")

### cat_v 
cv_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cv_samp_ra_c_brt_add.csv", sep = ",")

### alg_cover 
ac_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_ac_samp_ra_c_brt_add.csv", sep = ",")

### moos_cover 
mc_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_mc_samp_ra_c_brt_add.csv", sep = ",")

### cpom_cover 
cc_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_cc_samp_ra_c_brt_add.csv", sep = ",")

### clog_3 
clog_3_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_c_brt_add.csv", sep = ",")

### clog_6
clog_6_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_c_brt_add.csv", sep = ",")

### sub_type
sub_samp_ra_c_brt_add <- read.delim("ML_Model/pdp_data/pdp_sub_samp_ra_c_brt_add.csv", sep = ",")
```

# Plots
## RF normal 
### Predictor: Velocity
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With abundance as response --------------------------------------------------
### velocity
p_v_a_c_rf <- ggplot(v_a_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_v_a_c_rf.png", plot = p_v_a_c_rf, width = 6, height = 5)

# With rel_abundance as response --------------------------------------------------
### velocity
p_v_ra_c_rf <- ggplot(v_ra_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_v_ra_c_rf.png", plot = p_v_ra_c_rf, width = 6, height = 5)
```

### Predictors: Sampling Locations
```{r}
### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_samp_k_c_rf <- ggplot(v_samp_k_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_k_c_rf.png", plot = p_v_samp_k_c_rf, width = 6, height = 5)

### wd_m 
p_wd_samp_k_c_rf <- ggplot(wd_samp_k_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_k_c_rf.png", plot = p_wd_samp_k_c_rf, width = 6, height = 5)

### z 
p_z_samp_k_c_rf <- ggplot(z_samp_k_c_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_k_c_rf.png", plot = p_z_samp_k_c_rf, width = 6, height = 5)

### dist_w 
p_dist_samp_k_c_rf <- ggplot(dist_samp_k_c_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_k_c_rf.png", plot = p_dist_samp_k_c_rf, width = 6, height = 5)

### cat_v
p_cv_samp_k_c_rf <- ggplot(cv_samp_k_c_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_k_c_rf.png", plot = p_cv_samp_k_c_rf, width = 6, height = 5)

### alg_cover 
p_ac_samp_k_c_rf <- ggplot(ac_samp_k_c_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_k_c_rf.png", plot = p_ac_samp_k_c_rf, width = 6, height = 5)

### moos_cover
p_mc_samp_k_c_rf <- ggplot(mc_samp_k_c_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_k_c_rf.png", plot = p_mc_samp_k_c_rf, width = 6, height = 5)

### cpom_cover 
p_cc_samp_k_c_rf <- ggplot(cc_samp_k_c_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_k_c_rf.png", plot = p_cc_samp_k_c_rf, width = 6, height = 5)

### clog_3 
p_clog_3_samp_k_c_rf <- ggplot(clog_3_samp_k_c_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_k_c_rf.png", plot = p_clog_3_samp_k_c_rf, width = 6, height = 5)

### clog_6 
p_clog_6_samp_k_c_rf <- ggplot(clog_6_samp_k_c_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_k_c_rf.png", plot = p_clog_6_samp_k_c_rf, width = 6, height = 5)

### sub_type
p_sub_samp_k_c_rf <- ggplot(sub_samp_k_c_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_k_c_rf.png", plot = p_sub_samp_k_c_rf, width = 6, height = 5)

# With abundance as response --------------------------------------------------
### velocity
p_v_samp_a_c_rf <- ggplot(v_samp_a_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_a_c_rf.png", plot = p_v_samp_a_c_rf, width = 6, height = 5)

### wd_m 
p_wd_samp_a_c_rf <- ggplot(wd_samp_a_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_a_c_rf.png", plot = p_wd_samp_a_c_rf, width = 6, height = 5)

### z 
p_z_samp_a_c_rf <- ggplot(z_samp_a_c_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_a_c_rf.png", plot = p_z_samp_a_c_rf, width = 6, height = 5)

### dist_w 
p_dist_samp_a_c_rf <- ggplot(dist_samp_a_c_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_a_c_rf.png", plot = p_dist_samp_a_c_rf, width = 6, height = 5)

### cat_v
p_cv_samp_a_c_rf <- ggplot(cv_samp_a_c_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_a_c_rf.png", plot = p_cv_samp_a_c_rf, width = 6, height = 5)

### alg_cover 
p_ac_samp_a_c_rf <- ggplot(ac_samp_a_c_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_a_c_rf.png", plot = p_ac_samp_a_c_rf, width = 6, height = 5)

### moos_cover
p_mc_samp_a_c_rf <- ggplot(mc_samp_a_c_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_a_c_rf.png", plot = p_mc_samp_a_c_rf, width = 6, height = 5)

### cpom_cover 
p_cc_samp_a_c_rf <- ggplot(cc_samp_a_c_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_a_c_rf.png", plot = p_cc_samp_a_c_rf, width = 6, height = 5)

### clog_3 
p_clog_3_samp_a_c_rf <- ggplot(clog_3_samp_a_c_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_a_c_rf.png", plot = p_clog_3_samp_a_c_rf, width = 6, height = 5)

### clog_6 
p_clog_6_samp_a_c_rf <- ggplot(clog_6_samp_a_c_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_a_c_rf.png", plot = p_clog_6_samp_a_c_rf, width = 6, height = 5)

### sub_type
p_sub_samp_a_c_rf <- ggplot(sub_samp_a_c_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_a_c_rf.png", plot = p_sub_samp_a_c_rf, width = 6, height = 5)


# With rel_abundance as response --------------------------------------------------
### velocity
p_v_samp_ra_c_rf <- ggplot(v_samp_ra_c_rf, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_ra_c_rf.png", plot = p_v_samp_ra_c_rf, width = 6, height = 5)

### wd_m 
p_wd_samp_ra_c_rf <- ggplot(wd_samp_ra_c_rf, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_ra_c_rf.png", plot = p_wd_samp_ra_c_rf, width = 6, height = 5)

### z 
p_z_samp_ra_c_rf <- ggplot(z_samp_ra_c_rf, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_ra_c_rf.png", plot = p_z_samp_ra_c_rf, width = 6, height = 5)

### dist_w 
p_dist_samp_ra_c_rf <- ggplot(dist_samp_ra_c_rf, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_ra_c_rf.png", plot = p_dist_samp_ra_c_rf, width = 6, height = 5)

### cat_v
p_cv_samp_ra_c_rf <- ggplot(cv_samp_ra_c_rf, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_ra_c_rf.png", plot = p_cv_samp_ra_c_rf, width = 6, height = 5)

### alg_cover 
p_ac_samp_ra_c_rf <- ggplot(ac_samp_ra_c_rf, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_ra_c_rf.png", plot = p_ac_samp_ra_c_rf, width = 6, height = 5)

### moos_cover
p_mc_samp_ra_c_rf <- ggplot(mc_samp_ra_c_rf, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_ra_c_rf.png", plot = p_mc_samp_ra_c_rf, width = 6, height = 5)

### cpom_cover 
p_cc_samp_ra_c_rf <- ggplot(cc_samp_ra_c_rf, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_ra_c_rf.png", plot = p_cc_samp_ra_c_rf, width = 6, height = 5)

### clog_3 
p_clog_3_samp_ra_c_rf <- ggplot(clog_3_samp_ra_c_rf, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_ra_c_rf.png", plot = p_clog_3_samp_ra_c_rf, width = 6, height = 5)

### clog_6 
p_clog_6_samp_ra_c_rf <- ggplot(clog_6_samp_ra_c_rf, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_ra_c_rf.png", plot = p_clog_6_samp_ra_c_rf, width = 6, height = 5)

### sub_type
p_sub_samp_ra_c_rf <- ggplot(sub_samp_ra_c_rf, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_ra_c_rf.png", plot = p_sub_samp_ra_c_rf, width = 6, height = 5)
```

## RF added
### Predictor: Velocity
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With abundance as response --------------------------------------------------
### velocity
p_v_a_c_rf_add <- ggplot(v_a_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_a_c_rf_add.png", plot = p_v_a_c_rf_add, width = 6, height = 5)

### froude 
p_f_v_a_c_rf_add <- ggplot(f_v_a_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_v_a_c_rf_add.png", plot = p_f_v_a_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_v_a_c_rf_add <- ggplot(s_v_a_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_v_a_c_rf_add.png", plot = p_s_v_a_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_v_a_c_rf_add <- ggplot(sp_v_a_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_v_a_c_rf_add.png", plot = p_sp_v_a_c_rf_add, width = 6, height = 5)

# With rel_abundance as response --------------------------------------------------
### velocity
p_v_ra_c_rf_add <- ggplot(v_ra_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_ra_c_rf_add.png", plot = p_v_ra_c_rf_add, width = 6, height = 5)

### froude 
p_f_v_ra_c_rf_add <- ggplot(f_v_ra_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_v_ra_c_rf_add.png", plot = p_f_v_ra_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_v_ra_c_rf_add <- ggplot(s_v_ra_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_v_ra_c_rf_add.png", plot = p_s_v_ra_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_v_ra_c_rf_add <- ggplot(sp_v_ra_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_v_ra_c_rf_add.png", plot = p_sp_v_ra_c_rf_add, width = 6, height = 5)
```

### Predictors: Sampling Locations
```{r}
### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_samp_k_c_rf_add <- ggplot(v_samp_k_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_k_c_rf_add.png", plot = p_v_samp_k_c_rf_add, width = 6, height = 5)

### froude 
p_f_samp_k_c_rf_add <- ggplot(f_samp_k_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_samp_k_c_rf_add.png", plot = p_f_samp_k_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_samp_k_c_rf_add <- ggplot(s_samp_k_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_samp_k_c_rf_add.png", plot = p_s_samp_k_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_samp_k_c_rf_add <- ggplot(sp_samp_k_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_samp_k_c_rf_add.png", plot = p_sp_samp_k_c_rf_add, width = 6, height = 5)


### wd_m 
p_wd_samp_k_c_rf_add <- ggplot(wd_samp_k_c_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_k_c_rf_add.png", plot = p_wd_samp_k_c_rf_add, width = 6, height = 5)

### z 
p_z_samp_k_c_rf_add <- ggplot(z_samp_k_c_rf_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_k_c_rf_add.png", plot = p_z_samp_k_c_rf_add, width = 6, height = 5)

### dist_w 
p_dist_samp_k_c_rf_add <- ggplot(dist_samp_k_c_rf_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_k_c_rf_add.png", plot = p_dist_samp_k_c_rf_add, width = 6, height = 5)

### cat_v
p_cv_samp_k_c_rf_add <- ggplot(cv_samp_k_c_rf_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_k_c_rf_add.png", plot = p_cv_samp_k_c_rf_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_k_c_rf_add <- ggplot(ac_samp_k_c_rf_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_k_c_rf_add.png", plot = p_ac_samp_k_c_rf_add, width = 6, height = 5)

### moos_cover
p_mc_samp_k_c_rf_add <- ggplot(mc_samp_k_c_rf_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_k_c_rf_add.png", plot = p_mc_samp_k_c_rf_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_k_c_rf_add <- ggplot(cc_samp_k_c_rf_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_k_c_rf_add.png", plot = p_cc_samp_k_c_rf_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_k_c_rf_add <- ggplot(clog_3_samp_k_c_rf_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_k_c_rf_add.png", plot = p_clog_3_samp_k_c_rf_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_k_c_rf_add <- ggplot(clog_6_samp_k_c_rf_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_k_c_rf_add.png", plot = p_clog_6_samp_k_c_rf_add, width = 6, height = 5)

### sub_type
p_sub_samp_k_c_rf_add <- ggplot(sub_samp_k_c_rf_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_k_c_rf_add.png", plot = p_sub_samp_k_c_rf_add, width = 6, height = 5)

# With abundance as response --------------------------------------------------
### velocity
p_v_samp_a_c_rf_add <- ggplot(v_samp_a_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_a_c_rf_add.png", plot = p_v_samp_a_c_rf_add, width = 6, height = 5)

### froude 
p_f_samp_a_c_rf_add <- ggplot(f_samp_a_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_samp_a_c_rf_add.png", plot = p_f_samp_a_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_samp_a_c_rf_add <- ggplot(s_samp_a_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_samp_a_c_rf_add.png", plot = p_s_samp_a_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_samp_a_c_rf_add <- ggplot(sp_samp_a_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_samp_a_c_rf_add.png", plot = p_sp_samp_a_c_rf_add, width = 6, height = 5)

### wd_m 
p_wd_samp_a_c_rf_add <- ggplot(wd_samp_a_c_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_a_c_rf_add.png", plot = p_wd_samp_a_c_rf_add, width = 6, height = 5)

### z 
p_z_samp_a_c_rf_add <- ggplot(z_samp_a_c_rf_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_a_c_rf_add.png", plot = p_z_samp_a_c_rf_add, width = 6, height = 5)

### dist_w 
p_dist_samp_a_c_rf_add <- ggplot(dist_samp_a_c_rf_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_a_c_rf_add.png", plot = p_dist_samp_a_c_rf_add, width = 6, height = 5)

### cat_v
p_cv_samp_a_c_rf_add <- ggplot(cv_samp_a_c_rf_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_a_c_rf_add.png", plot = p_cv_samp_a_c_rf_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_a_c_rf_add <- ggplot(ac_samp_a_c_rf_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_a_c_rf_add.png", plot = p_ac_samp_a_c_rf_add, width = 6, height = 5)

### moos_cover
p_mc_samp_a_c_rf_add <- ggplot(mc_samp_a_c_rf_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_a_c_rf_add.png", plot = p_mc_samp_a_c_rf_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_a_c_rf_add <- ggplot(cc_samp_a_c_rf_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_a_c_rf_add.png", plot = p_cc_samp_a_c_rf_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_a_c_rf_add <- ggplot(clog_3_samp_a_c_rf_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_a_c_rf_add.png", plot = p_clog_3_samp_a_c_rf_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_a_c_rf_add <- ggplot(clog_6_samp_a_c_rf_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_a_c_rf_add.png", plot = p_clog_6_samp_a_c_rf_add, width = 6, height = 5)

### sub_type
p_sub_samp_a_c_rf_add <- ggplot(sub_samp_a_c_rf_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_a_c_rf_add.png", plot = p_sub_samp_a_c_rf_add, width = 6, height = 5)


# With rel_abundance as response --------------------------------------------------
### velocity
p_v_samp_ra_c_rf_add <- ggplot(v_samp_ra_c_rf_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_ra_c_rf_add.png", plot = p_v_samp_ra_c_rf_add, width = 6, height = 5)

### froude 
p_f_samp_ra_c_rf_add <- ggplot(f_samp_ra_c_rf_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_samp_ra_c_rf_add.png", plot = p_f_samp_ra_c_rf_add, width = 6, height = 5)

### shear_stress 
p_s_samp_ra_c_rf_add <- ggplot(s_samp_ra_c_rf_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_samp_ra_c_rf_add.png", plot = p_s_samp_ra_c_rf_add, width = 6, height = 5)

### stream_power 
p_sp_samp_ra_c_rf_add <- ggplot(sp_samp_ra_c_rf_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_samp_ra_c_rf_add.png", plot = p_sp_samp_ra_c_rf_add, width = 6, height = 5)

### wd_m 
p_wd_samp_ra_c_rf_add <- ggplot(wd_samp_ra_c_rf_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_ra_c_rf_add.png", plot = p_wd_samp_ra_c_rf_add, width = 6, height = 5)

### z 
p_z_samp_ra_c_rf_add <- ggplot(z_samp_ra_c_rf_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_ra_c_rf_add.png", plot = p_z_samp_ra_c_rf_add, width = 6, height = 5)

### dist_w 
p_dist_samp_ra_c_rf_add <- ggplot(dist_samp_ra_c_rf_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_ra_c_rf_add.png", plot = p_dist_samp_ra_c_rf_add, width = 6, height = 5)

### cat_v
p_cv_samp_ra_c_rf_add <- ggplot(cv_samp_ra_c_rf_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_ra_c_rf_add.png", plot = p_cv_samp_ra_c_rf_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_ra_c_rf_add <- ggplot(ac_samp_ra_c_rf_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_ra_c_rf_add.png", plot = p_ac_samp_ra_c_rf_add, width = 6, height = 5)

### moos_cover
p_mc_samp_ra_c_rf_add <- ggplot(mc_samp_ra_c_rf_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_ra_c_rf_add.png", plot = p_mc_samp_ra_c_rf_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_ra_c_rf_add <- ggplot(cc_samp_ra_c_rf_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_ra_c_rf_add.png", plot = p_cc_samp_ra_c_rf_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_ra_c_rf_add <- ggplot(clog_3_samp_ra_c_rf_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_ra_c_rf_add.png", plot = p_clog_3_samp_ra_c_rf_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_ra_c_rf_add <- ggplot(clog_6_samp_ra_c_rf_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_ra_c_rf_add.png", plot = p_clog_6_samp_ra_c_rf_add, width = 6, height = 5)

### sub_type
p_sub_samp_ra_c_rf_add <- ggplot(sub_samp_ra_c_rf_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_ra_c_rf_add.png", plot = p_sub_samp_ra_c_rf_add, width = 6, height = 5)
```

## BRT normal
### Predictor: Velocity
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With abundance as response --------------------------------------------------
### velocity
p_v_a_c_brt <- ggplot(v_a_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_a_c_brt.png", plot = p_v_a_c_brt, width = 6, height = 5)

# With rel_abundance as response --------------------------------------------------
### velocity
p_v_ra_c_brt <- ggplot(v_ra_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_ra_c_brt.png", plot = p_v_ra_c_brt, width = 6, height = 5)
```

### Predictors: Sampling Locations
```{r}
### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response ----------------------------------------------------
### velocity 
p_v_samp_k_c_brt <- ggplot(v_samp_k_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_k_c_brt.png", plot = p_v_samp_k_c_brt, width = 6, height = 5)

### wd_m 
p_wd_samp_k_c_brt <- ggplot(wd_samp_k_c_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_k_c_brt.png", plot = p_wd_samp_k_c_brt, width = 6, height = 5)

### z 
p_z_samp_k_c_brt <- ggplot(z_samp_k_c_brt, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_k_c_brt.png", plot = p_z_samp_k_c_brt, width = 6, height = 5)

### dist_w 
p_dist_samp_k_c_brt <- ggplot(dist_samp_k_c_brt, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_k_c_brt.png", plot = p_dist_samp_k_c_brt, width = 6, height = 5)

### cat_v
p_cv_samp_k_c_brt <- ggplot(cv_samp_k_c_brt, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_k_c_brt.png", plot = p_cv_samp_k_c_brt, width = 6, height = 5)

### alg_cover 
p_ac_samp_k_c_brt <- ggplot(ac_samp_k_c_brt, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_k_c_brt.png", plot = p_ac_samp_k_c_brt, width = 6, height = 5)

### moos_cover
p_mc_samp_k_c_brt <- ggplot(mc_samp_k_c_brt, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_k_c_brt.png", plot = p_mc_samp_k_c_brt, width = 6, height = 5)

### cpom_cover 
p_cc_samp_k_c_brt <- ggplot(cc_samp_k_c_brt, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_k_c_brt.png", plot = p_cc_samp_k_c_brt, width = 6, height = 5)

### clog_3 
p_clog_3_samp_k_c_brt <- ggplot(clog_3_samp_k_c_brt, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_k_c_brt.png", plot = p_clog_3_samp_k_c_brt, width = 6, height = 5)

### clog_6 
p_clog_6_samp_k_c_brt <- ggplot(clog_6_samp_k_c_brt, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_k_c_brt.png", plot = p_clog_6_samp_k_c_brt, width = 6, height = 5)

### sub_type
p_sub_samp_k_c_brt <- ggplot(sub_samp_k_c_brt, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_k_c_brt.png", plot = p_sub_samp_k_c_brt, width = 6, height = 5)

# With abundance as response --------------------------------------------------
### velocity
p_v_samp_a_c_brt <- ggplot(v_samp_a_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_a_c_brt.png", plot = p_v_samp_a_c_brt, width = 6, height = 5)

### wd_m 
p_wd_samp_a_c_brt <- ggplot(wd_samp_a_c_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_a_c_brt.png", plot = p_wd_samp_a_c_brt, width = 6, height = 5)

### z 
p_z_samp_a_c_brt <- ggplot(z_samp_a_c_brt, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_a_c_brt.png", plot = p_z_samp_a_c_brt, width = 6, height = 5)

### dist_w 
p_dist_samp_a_c_brt <- ggplot(dist_samp_a_c_brt, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_a_c_brt.png", plot = p_dist_samp_a_c_brt, width = 6, height = 5)

### cat_v
p_cv_samp_a_c_brt <- ggplot(cv_samp_a_c_brt, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_a_c_brt.png", plot = p_cv_samp_a_c_brt, width = 6, height = 5)

### alg_cover 
p_ac_samp_a_c_brt <- ggplot(ac_samp_a_c_brt, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_a_c_brt.png", plot = p_ac_samp_a_c_brt, width = 6, height = 5)

### moos_cover
p_mc_samp_a_c_brt <- ggplot(mc_samp_a_c_brt, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_a_c_brt.png", plot = p_mc_samp_a_c_brt, width = 6, height = 5)

### cpom_cover 
p_cc_samp_a_c_brt <- ggplot(cc_samp_a_c_brt, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_a_c_brt.png", plot = p_cc_samp_a_c_brt, width = 6, height = 5)

### clog_3 
p_clog_3_samp_a_c_brt <- ggplot(clog_3_samp_a_c_brt, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_a_c_brt.png", plot = p_clog_3_samp_a_c_brt, width = 6, height = 5)

### clog_6 
p_clog_6_samp_a_c_brt <- ggplot(clog_6_samp_a_c_brt, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_a_c_brt.png", plot = p_clog_6_samp_a_c_brt, width = 6, height = 5)

### sub_type
p_sub_samp_a_c_brt <- ggplot(sub_samp_a_c_brt, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_a_c_brt.png", plot = p_sub_samp_a_c_brt, width = 6, height = 5)


# With rel_abundance as response --------------------------------------------------
### velocity
p_v_samp_ra_c_brt <- ggplot(v_samp_ra_c_brt, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_ra_c_brt.png", plot = p_v_samp_ra_c_brt, width = 6, height = 5)

### wd_m 
p_wd_samp_ra_c_brt <- ggplot(wd_samp_ra_c_brt, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_ra_c_brt.png", plot = p_wd_samp_ra_c_brt, width = 6, height = 5)

### z 
p_z_samp_ra_c_brt <- ggplot(z_samp_ra_c_brt, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_ra_c_brt.png", plot = p_z_samp_ra_c_brt, width = 6, height = 5)

### dist_w 
p_dist_samp_ra_c_brt <- ggplot(dist_samp_ra_c_brt, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_ra_c_brt.png", plot = p_dist_samp_ra_c_brt, width = 6, height = 5)

### cat_v
p_cv_samp_ra_c_brt <- ggplot(cv_samp_ra_c_brt, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_ra_c_brt.png", plot = p_cv_samp_ra_c_brt, width = 6, height = 5)

### alg_cover 
p_ac_samp_ra_c_brt <- ggplot(ac_samp_ra_c_brt, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_ra_c_brt.png", plot = p_ac_samp_ra_c_brt, width = 6, height = 5)

### moos_cover
p_mc_samp_ra_c_brt <- ggplot(mc_samp_ra_c_brt, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_ra_c_brt.png", plot = p_mc_samp_ra_c_brt, width = 6, height = 5)

### cpom_cover 
p_cc_samp_ra_c_brt <- ggplot(cc_samp_ra_c_brt, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_ra_c_brt.png", plot = p_cc_samp_ra_c_brt, width = 6, height = 5)

### clog_3 
p_clog_3_samp_ra_c_brt <- ggplot(clog_3_samp_ra_c_brt, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_ra_c_brt.png", plot = p_clog_3_samp_ra_c_brt, width = 6, height = 5)

### clog_6 
p_clog_6_samp_ra_c_brt <- ggplot(clog_6_samp_ra_c_brt, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_ra_c_brt.png", plot = p_clog_6_samp_ra_c_brt, width = 6, height = 5)

### sub_type
p_sub_samp_ra_c_brt <- ggplot(sub_samp_ra_c_brt, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_ra_c_brt.png", plot = p_sub_samp_ra_c_brt, width = 6, height = 5)
```

## BRT added
### Predictor: Velocity
```{r}
### PREDICTOR: VELOCITY ### ---------------------------------------------------
# With abundance as response --------------------------------------------------
### velocity
p_v_a_c_brt_add <- ggplot(v_a_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_a_c_brt_add.png", plot = p_v_a_c_brt_add, width = 6, height = 5)

### froude 
p_f_v_a_c_brt_add <- ggplot(f_v_a_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_v_a_c_brt_add.png", plot = p_f_v_a_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_v_a_c_brt_add <- ggplot(s_v_a_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_v_a_c_brt_add.png", plot = p_s_v_a_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_v_a_c_brt_add <- ggplot(sp_v_a_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_v_a_c_brt_add.png", plot = p_sp_v_a_c_brt_add, width = 6, height = 5)

# With rel_abundance as response --------------------------------------------------
### velocity
p_v_ra_c_brt_add <- ggplot(v_ra_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_ra_c_brt_add.png", plot = p_v_ra_c_brt_add, width = 6, height = 5)

### froude 
p_f_v_ra_c_brt_add <- ggplot(f_v_ra_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_v_ra_c_brt_add.png", plot = p_f_v_ra_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_v_ra_c_brt_add <- ggplot(s_v_ra_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_v_ra_c_brt_add.png", plot = p_s_v_ra_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_v_ra_c_brt_add <- ggplot(sp_v_ra_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_v_ra_c_brt_add.png", plot = p_sp_v_ra_c_brt_add, width = 6, height = 5)
```

### Predictors: Sampling Locations
```{r}
### PREDICTOR: SAMPLING LOCATIONS ### -----------------------------------------
# With k_index as response ----------------------------------------------------
### froude 
p_f_samp_k_c_brt_add <- ggplot(f_samp_k_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_samp_k_c_brt_add.png", plot = p_f_samp_k_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_samp_k_c_brt_add <- ggplot(s_samp_k_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_samp_k_c_brt_add.png", plot = p_s_samp_k_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_samp_k_c_brt_add <- ggplot(sp_samp_k_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_samp_k_c_brt_add.png", plot = p_sp_samp_k_c_brt_add, width = 6, height = 5)

### velocity 
p_v_samp_k_c_brt_add <- ggplot(v_samp_k_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_k_c_brt_add.png", plot = p_v_samp_k_c_brt_add, width = 6, height = 5)

### wd_m 
p_wd_samp_k_c_brt_add <- ggplot(wd_samp_k_c_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_k_c_brt_add.png", plot = p_wd_samp_k_c_brt_add, width = 6, height = 5)

### z 
p_z_samp_k_c_brt_add <- ggplot(z_samp_k_c_brt_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_k_c_brt_add.png", plot = p_z_samp_k_c_brt_add, width = 6, height = 5)

### dist_w 
p_dist_samp_k_c_brt_add <- ggplot(dist_samp_k_c_brt_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_k_c_brt_add.png", plot = p_dist_samp_k_c_brt_add, width = 6, height = 5)

### cat_v
p_cv_samp_k_c_brt_add <- ggplot(cv_samp_k_c_brt_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_k_c_brt_add.png", plot = p_cv_samp_k_c_brt_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_k_c_brt_add <- ggplot(ac_samp_k_c_brt_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_k_c_brt_add.png", plot = p_ac_samp_k_c_brt_add, width = 6, height = 5)

### moos_cover
p_mc_samp_k_c_brt_add <- ggplot(mc_samp_k_c_brt_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_k_c_brt_add.png", plot = p_mc_samp_k_c_brt_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_k_c_brt_add <- ggplot(cc_samp_k_c_brt_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_k_c_brt_add.png", plot = p_cc_samp_k_c_brt_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_k_c_brt_add <- ggplot(clog_3_samp_k_c_brt_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_k_c_brt_add.png", plot = p_clog_3_samp_k_c_brt_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_k_c_brt_add <- ggplot(clog_6_samp_k_c_brt_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_k_c_brt_add.png", plot = p_clog_6_samp_k_c_brt_add, width = 6, height = 5)

### sub_type
p_sub_samp_k_c_brt_add <- ggplot(sub_samp_k_c_brt_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "K-Index"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_k_c_brt_add.png", plot = p_sub_samp_k_c_brt_add, width = 6, height = 5)

# With abundance as response --------------------------------------------------
### froude 
p_f_samp_a_c_brt_add <- ggplot(f_samp_a_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_samp_a_c_brt_add.png", plot = p_f_samp_a_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_samp_a_c_brt_add <- ggplot(s_samp_a_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_samp_a_c_brt_add.png", plot = p_s_samp_a_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_samp_a_c_brt_add <- ggplot(sp_samp_a_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_samp_a_c_brt_add.png", plot = p_sp_samp_a_c_brt_add, width = 6, height = 5)

### velocity
p_v_samp_a_c_brt_add <- ggplot(v_samp_a_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_a_c_brt_add.png", plot = p_v_samp_a_c_brt_add, width = 6, height = 5)

### wd_m 
p_wd_samp_a_c_brt_add <- ggplot(wd_samp_a_c_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_a_c_brt_add.png", plot = p_wd_samp_a_c_brt_add, width = 6, height = 5)

### z 
p_z_samp_a_c_brt_add <- ggplot(z_samp_a_c_brt_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_a_c_brt_add.png", plot = p_z_samp_a_c_brt_add, width = 6, height = 5)

### dist_w 
p_dist_samp_a_c_brt_add <- ggplot(dist_samp_a_c_brt_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_a_c_brt_add.png", plot = p_dist_samp_a_c_brt_add, width = 6, height = 5)

### cat_v
p_cv_samp_a_c_brt_add <- ggplot(cv_samp_a_c_brt_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_a_c_brt_add.png", plot = p_cv_samp_a_c_brt_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_a_c_brt_add <- ggplot(ac_samp_a_c_brt_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_a_c_brt_add.png", plot = p_ac_samp_a_c_brt_add, width = 6, height = 5)

### moos_cover
p_mc_samp_a_c_brt_add <- ggplot(mc_samp_a_c_brt_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_a_c_brt_add.png", plot = p_mc_samp_a_c_brt_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_a_c_brt_add <- ggplot(cc_samp_a_c_brt_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_a_c_brt_add.png", plot = p_cc_samp_a_c_brt_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_a_c_brt_add <- ggplot(clog_3_samp_a_c_brt_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_a_c_brt_add.png", plot = p_clog_3_samp_a_c_brt_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_a_c_brt_add <- ggplot(clog_6_samp_a_c_brt_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_a_c_brt_add.png", plot = p_clog_6_samp_a_c_brt_add, width = 6, height = 5)

### sub_type
p_sub_samp_a_c_brt_add <- ggplot(sub_samp_a_c_brt_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Absolute Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_a_c_brt_add.png", plot = p_sub_samp_a_c_brt_add, width = 6, height = 5)


# With rel_abundance as response --------------------------------------------------
### froude 
p_f_samp_ra_c_brt_add <- ggplot(f_samp_ra_c_brt_add, aes(froude, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Froude",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_f_samp_ra_c_brt_add.png", plot = p_f_samp_ra_c_brt_add, width = 6, height = 5)

### shear_stress 
p_s_samp_ra_c_brt_add <- ggplot(s_samp_ra_c_brt_add, aes(shear_stress, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Shear Stress",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_s_samp_ra_c_brt_add.png", plot = p_s_samp_ra_c_brt_add, width = 6, height = 5)

### stream_power 
p_sp_samp_ra_c_brt_add <- ggplot(sp_samp_ra_c_brt_add, aes(stream_power, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Stream Power",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sp_samp_ra_c_brt_add.png", plot = p_sp_samp_ra_c_brt_add, width = 6, height = 5)


### velocity
p_v_samp_ra_c_brt_add <- ggplot(v_samp_ra_c_brt_add, aes(velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_v_samp_ra_c_brt_add.png", plot = p_v_samp_ra_c_brt_add, width = 6, height = 5)

### wd_m 
p_wd_samp_ra_c_brt_add <- ggplot(wd_samp_ra_c_brt_add, aes(x = wd_m, y = yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_wd_samp_ra_c_brt_add.png", plot = p_wd_samp_ra_c_brt_add, width = 6, height = 5)

### z 
p_z_samp_ra_c_brt_add <- ggplot(z_samp_ra_c_brt_add, aes(z, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Z Coordinate (CH1903+/LV95)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_z_samp_ra_c_brt_add.png", plot = p_z_samp_ra_c_brt_add, width = 6, height = 5)

### dist_w 
p_dist_samp_ra_c_brt_add <- ggplot(dist_samp_ra_c_brt_add, aes(dist_w, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Distance Waterline (m)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_dist_samp_ra_c_brt_add.png", plot = p_dist_samp_ra_c_brt_add, width = 6, height = 5)

### cat_v
p_cv_samp_ra_c_brt_add <- ggplot(cv_samp_ra_c_brt_add, aes(cat_velocity, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Category Velocity Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cv_samp_ra_c_brt_add.png", plot = p_cv_samp_ra_c_brt_add, width = 6, height = 5)

### alg_cover 
p_ac_samp_ra_c_brt_add <- ggplot(ac_samp_ra_c_brt_add, aes(alg_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Algea Cover Class (1-5)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_ac_samp_ra_c_brt_add.png", plot = p_ac_samp_ra_c_brt_add, width = 6, height = 5)

### moos_cover
p_mc_samp_ra_c_brt_add <- ggplot(mc_samp_ra_c_brt_add, aes(moos_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Moos Cover Class (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_mc_samp_ra_c_brt_add.png", plot = p_mc_samp_ra_c_brt_add, width = 6, height = 5)

### cpom_cover 
p_cc_samp_ra_c_brt_add <- ggplot(cc_samp_ra_c_brt_add, aes(cpom_cover, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "CPOM Cover Class (1-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_cc_samp_ra_c_brt_add.png", plot = p_cc_samp_ra_c_brt_add, width = 6, height = 5)

### clog_3 
p_clog_3_samp_ra_c_brt_add <- ggplot(clog_3_samp_ra_c_brt_add, aes(clog_3_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 3 Class (0-2)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_3_samp_ra_c_brt_add.png", plot = p_clog_3_samp_ra_c_brt_add, width = 6, height = 5)

### clog_6 
p_clog_6_samp_ra_c_brt_add <- ggplot(clog_6_samp_ra_c_brt_add, aes(clog_6_class_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Clogging 6 Class (0-6)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_clog_6_samp_ra_c_brt_add.png", plot = p_clog_6_samp_ra_c_brt_add, width = 6, height = 5)

### sub_type
p_sub_samp_ra_c_brt_add <- ggplot(sub_samp_ra_c_brt_add, aes(sub_type_int, yhat)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Substrate Type (0-3)",
    y = "Relative Abundance"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14))

# save the plots 
ggsave("ML_model/plots/pdp_sub_samp_ra_c_brt_add.png", plot = p_sub_samp_ra_c_brt_add, width = 6, height = 5)
```

## All models 
### Normal Models
  v_wd_k_rf, v_wd_k_rf_add, v_wd_k_brt, v_wd_k_brt_add,
                 v_samp_k_rf, v_samp_k_rf_add, v_samp_k_brt, v_samp_k_brt_add,
                 v_sec_k_rf, v_sec_k_rf_add, v_sec_k_brt, v_sec_k_brt_add
```{r}
# bind all models with k_index -----------------------------------------------
mod_k_v_c <- rbind(v_k_c_rf, v_k_c_rf_add, v_k_c_brt, v_k_c_brt_add)

mod_k_wd_c <- rbind(wd_k_c_rf, wd_k_c_rf_add, wd_k_c_brt, wd_k_c_brt_add)
```

```{r}
ggplot(mod_k_v, aes(velocity, yhat, group = mod)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line(aes(linetype = mod)) + 
  labs(
    x = "Velocity (m/s)",
    y = "K-Index"
  ) +
  theme_minimal()
```

