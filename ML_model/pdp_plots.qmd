---
title: "pdp_plots"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
pkgCheck("Fgmutils") # for bias calculation (bias() function)
pkgCheck("hydroGOF") # for NSE calculation with NSE() function 
```

# Load Data
```{r}
# With k_index as response ---------------------------------------------------
### velocity
v_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_var_k_c_rf.csv") 

### wd_m
wd_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_var_k_c_rf.csv")

### z 
z_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_var_k_c_rf.csv")

### phosphor 
p_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_p_var_k_c_rf.csv")

### nitrogen
n_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_n_var_k_c_rf.csv")

### ecomorph_class 
e_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_e_var_k_c_rf.csv")  |>
  mutate(ecomorph = c("-", 1, 2, 3, 4))

### biogeo_int
b_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_b_var_k_c_rf.csv") |>
  mutate(biogeo = c("Southern Alps", "Central Plateau",  "Northern Alps", "Eastern Central Alps"))

```

# Plots
```{r}
# With k_index as response ----------------------------------------------------
# Logit transformation function
logit <- function(x){
  x <- x/100
  log(x/(1-x))
}

v_var_k_c_rf <- v_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

### velocity 
p_v_var_k_c_rf <- ggplot(v_var_k_c_rf, aes(velocity, yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_v_var_k_c_rf.png", plot = p_v_var_k_c_rf, width = 6, height = 5)

### wd_m 
wd_var_k_c_rf <- wd_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

p_wd_var_k_c_rf <- ggplot(wd_var_k_c_rf, aes(x = wd_m, y = yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_wd_var_k_c_rf.png", plot = p_wd_var_k_c_rf, width = 6, height = 5)

### z 
z_var_k_c_rf <- z_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

p_z_var_k_c_rf <- ggplot(z_var_k_c_rf, aes(z, yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Elevation [m.a.s.l.]",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_z_var_k_c_rf.png", plot = p_z_var_k_c_rf, width = 6, height = 5)

### Nitrogen
n_var_k_c_rf <- n_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

p_n_var_k_c_rf <- ggplot(n_var_k_c_rf, aes(mean_diff_nitrogen, yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Mean diffuse total nitrogen [kg/ha a]",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_n_var_k_c_rf.png", plot = p_n_var_k_c_rf, width = 6, height = 5)

### phosphor
p_var_k_c_rf <- p_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

p_p_var_k_c_rf <- ggplot(p_var_k_c_rf, aes(mean_diff_phosphor, yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Mean diffuse total phosphorous [kg/ha a]",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_p_var_k_c_rf.png", plot = p_p_var_k_c_rf, width = 6, height = 5)

### ecomorph_class
e_var_k_c_rf <- e_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

p_e_var_k_c_rf <- ggplot(e_var_k_c_rf, aes(ecomorph, yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line(aes(group = 1)) + 
  labs(
    x = "Ecomorphology Class",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_e_var_k_c_rf.png", plot = p_e_var_k_c_rf, width = 6, height = 5)

### bioregion
b_var_k_c_rf <- b_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

b_var_k_c_rf$biogeo_order <- factor(b_var_k_c_rf$biogeo, levels = c("Southern Alps", "Eastern Central Alps", "Northern Alps","Central Plateau"))

p_b_var_k_c_rf <- ggplot(b_var_k_c_rf, aes(biogeo_order, yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line(aes(group = 1)) + 
  labs(
    x = "Biogeographical region",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16)) +
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))

# save the plots 
ggsave("ML_model/plots/pdp_b_var_k_c_rf.png", plot = p_b_var_k_c_rf, width = 6, height = 5)
```




