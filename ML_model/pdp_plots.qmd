---
title: "pdp_plots"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("data.table")  # fast data.frame manipulation (used by mlr3)
pkgCheck("mlr3") # machine learning (see Chapter 12)
pkgCheck("mlr3spatiotempcv") # spatio-temporal resampling 
pkgCheck("mlr3tuning") # hyperparameter tuning package
pkgCheck("mlr3learners") # interface to most important machine learning packages
pkgCheck("paradox") # defining hyperparameter spaces
pkgCheck("ranger")  # rf package
pkgCheck("tree") # decision tree package
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("gbm")
pkgCheck("xgboost")
pkgCheck("caret") # for cohen's kappa calculation 
pkgCheck("pdp")
pkgCheck("Metrics")
pkgCheck("modEvA")
pkgCheck("tidyr")
pkgCheck("Fgmutils") # for bias calculation (bias() function)
pkgCheck("hydroGOF") # for NSE calculation with NSE() function 
```

# Load Data
## RF normal
```{r}
### PREDICTORS: SAMPLING LOCATIONS ### ---------------------------------------
# With k_index as response ---------------------------------------------------
### velocity
v_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_k_c_rf.csv") 

### wd_m
wd_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_k_c_rf.csv")

### z 
z_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_k_c_rf.csv")

### dist_w 
dist_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_k_c_rf.csv")

### cat_v
cv_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_k_c_rf.csv")

### alg_cover 
ac_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_k_c_rf.csv")

### moos_cover 
mc_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_k_c_rf.csv")

### cpom_cover 
cc_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_k_c_rf.csv")

### clog_3 
clog_3_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_k_c_rf.csv") |>
  mutate(clog_3_class = c("none", "slight-medium", "strong"))

### clog_6 
clog_6_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_k_c_rf.csv") |>
  mutate(clog_6_class = c("none", "none-light", "none-slight", "slight", "slight-medium", "medium-strong", "strong"))

### sub_type
sub_samp_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_k_c_rf.csv")|>
  mutate(sub_type = c("< 2.5 mm", "25 mm > x > 2.5 mm",  "250 mm > x > 25 mm", "> 250 mm"))

# With shannon index as response ----------------------------------------------
### velocity
v_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_s_c_rf.csv") 

### wd_m
wd_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_s_c_rf.csv")

### z 
z_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_s_c_rf.csv")

### dist_w 
dist_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_s_c_rf.csv")

### cat_v
cv_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_s_c_rf.csv")

### alg_cover 
ac_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_s_c_rf.csv")

### moos_cover 
mc_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_s_c_rf.csv")

### cpom_cover 
cc_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_s_c_rf.csv")

### clog_3 
clog_3_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_s_c_rf.csv") |>
  mutate(clog_3_class = c("none", "slight-medium", "strong"))

### clog_6 
clog_6_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_s_c_rf.csv")|>
  mutate(clog_6_class = c("none", "none-light", "none-slight", "slight", "slight-medium", "medium-strong", "strong"))

### sub_type
sub_samp_s_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_s_c_rf.csv")|>
  mutate(sub_type = c("< 2.5 mm", "25 mm > x > 2.5 mm",  "250 mm > x > 25 mm", "> 250 mm"))

# With abundance as response --------------------------------------------------
### velocity
v_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_a_c_rf.csv") 

### wd_m
wd_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_a_c_rf.csv")

### z 
z_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_a_c_rf.csv")

### dist_w 
dist_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_a_c_rf.csv")

### cat_v
cv_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_a_c_rf.csv")

### alg_cover 
ac_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_a_c_rf.csv")

### moos_cover 
mc_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_a_c_rf.csv")

### cpom_cover 
cc_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_a_c_rf.csv")

### clog_3 
clog_3_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_a_c_rf.csv")|>
  mutate(clog_3_class = c("none", "slight-medium", "strong"))

### clog_6 
clog_6_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_a_c_rf.csv")|>
  mutate(clog_6_class = c("none", "none-light", "none-slight", "slight", "slight-medium", "medium-strong", "strong"))

### sub_type
sub_samp_a_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_a_c_rf.csv") |>
  mutate(sub_type = c("< 2.5 mm", "25 mm > x > 2.5 mm",  "250 mm > x > 25 mm", "> 250 mm"))

# With rel_abundance as response ----------------------------------------------
### velocity
v_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_samp_ra_c_rf.csv") 

### wd_m
wd_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_samp_ra_c_rf.csv")

### z 
z_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_samp_ra_c_rf.csv")

### dist_w 
dist_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_dist_samp_ra_c_rf.csv")

### cat_v
cv_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_cv_samp_ra_c_rf.csv")

### alg_cover 
ac_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_ac_samp_ra_c_rf.csv")

### moos_cover 
mc_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_mc_samp_ra_c_rf.csv")

### cpom_cover 
cc_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_cc_samp_ra_c_rf.csv")

### clog_3 
clog_3_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_3_samp_ra_c_rf.csv") |>
  mutate(clog_3_class = c("none", "slight-medium", "strong"))

### clog_6 
clog_6_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_clog_6_samp_ra_c_rf.csv")|>
  mutate(clog_6_class = c("none", "none-light", "none-slight", "slight", "slight-medium", "medium-strong", "strong"))


### sub_type
sub_samp_ra_c_rf <- read_delim("ML_Model/pdp_data/pdp_sub_samp_ra_c_rf.csv")|>
  mutate(sub_type = c("< 2.5 mm", "25 mm > x > 2.5 mm",  "250 mm > x > 25 mm", "> 250 mm"))
```

```{r}
# With k_index as response ---------------------------------------------------
### velocity
v_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_v_var_k_c_rf.csv") 

### wd_m
wd_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_wd_var_k_c_rf.csv")

### z 
z_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_z_var_k_c_rf.csv")

### phosphor 
p_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_p_var_k_c_rf.csv")

### nitrogen
n_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_n_var_k_c_rf.csv")

### ecomorph_class 
e_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_e_var_k_c_rf.csv")  |>
  mutate(ecomorph = c("-", 1, 2, 3, 4))

### biogeo_int
b_var_k_c_rf <- read_delim("ML_Model/pdp_data/pdp_b_var_k_c_rf.csv") |>
  mutate(biogeo = c("Southern Alps", "Central Plateau",  "Northern Alps", "Eastern Central Alps"))

```


# Plots
## RF PREDICTORS: Selected Variables
```{r}
# With k_index as response ----------------------------------------------------
# Logit transformation function
logit <- function(x){
  x <- x/100
  log(x/(1-x))
}

v_var_k_c_rf <- v_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

### velocity 
p_v_var_k_c_rf <- ggplot(v_var_k_c_rf, aes(velocity, yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Velocity (m/s)",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_v_var_k_c_rf.png", plot = p_v_var_k_c_rf, width = 6, height = 5)

### wd_m 
wd_var_k_c_rf <- wd_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

p_wd_var_k_c_rf <- ggplot(wd_var_k_c_rf, aes(x = wd_m, y = yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Water Depth (m)",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_wd_var_k_c_rf.png", plot = p_wd_var_k_c_rf, width = 6, height = 5)

### z 
z_var_k_c_rf <- z_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

p_z_var_k_c_rf <- ggplot(z_var_k_c_rf, aes(z, yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Elevation [m.a.s.l.]",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_z_var_k_c_rf.png", plot = p_z_var_k_c_rf, width = 6, height = 5)

### Nitrogen
n_var_k_c_rf <- n_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

p_n_var_k_c_rf <- ggplot(n_var_k_c_rf, aes(mean_diff_nitrogen, yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Mean diffuse total nitrogen [kg/ha a]",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_n_var_k_c_rf.png", plot = p_n_var_k_c_rf, width = 6, height = 5)

### phosphor
p_var_k_c_rf <- p_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

p_p_var_k_c_rf <- ggplot(p_var_k_c_rf, aes(mean_diff_phosphor, yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line() + 
  labs(
    x = "Mean diffuse total phosphor [kg/ha a]",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_p_var_k_c_rf.png", plot = p_p_var_k_c_rf, width = 6, height = 5)

### ecomorph_class
e_var_k_c_rf <- e_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

p_e_var_k_c_rf <- ggplot(e_var_k_c_rf, aes(ecomorph, yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line(aes(group = 1)) + 
  labs(
    x = "Ecomorphology Class",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

# save the plots 
ggsave("ML_model/plots/pdp_e_var_k_c_rf.png", plot = p_e_var_k_c_rf, width = 6, height = 5)

### bioregion
b_var_k_c_rf <- b_var_k_c_rf |>
  mutate(yhat_log = scale(logit(yhat)))

b_var_k_c_rf$biogeo_order <- factor(b_var_k_c_rf$biogeo, levels = c("Southern Alps", "Eastern Central Alps", "Northern Alps","Central Plateau"))

p_b_var_k_c_rf <- ggplot(b_var_k_c_rf, aes(biogeo_order, yhat_log)) + 
  # yhat ist die response variable (k-index, simpson oder shannon)
  geom_line(aes(group = 1)) + 
  labs(
    x = "Biogeographical region",
    y = "Fitted K-Index (logit)"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16)) +
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))

# save the plots 
ggsave("ML_model/plots/pdp_b_var_k_c_rf.png", plot = p_b_var_k_c_rf, width = 6, height = 5)
```


## WUA Plots
```{r}
wua_hhs <- read_delim("ML_Model/scenarios/wua_hhs_k_var_rf.csv")

# WUA Plot --------------------------------------------------------
# create facet plot for WUA
# Set individual facet titles
wua_names <- c(
  "wua" = "WUA",
  "wua_pers" = "WUA persistent habitat"
)

wua_plot <- wua_hhs |> 
  pivot_longer(cols = c(wua, wua_pers)) |>
  ggplot(aes(Q, value, col = section)) +
  geom_point()+
  geom_line(lwd = 0.7)+
  facet_wrap(~name, labeller = as_labeller(wua_names)) +
  labs(x = expression(paste("Discharge [", m^3/s, "]")), 
       y = expression(paste("WUA [", m^2, "]")),
       col = "Study Area"
       ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14),
        legend.title = element_text(size=14),
        legend.text = element_text(size=12),
        strip.text = element_text(size=14)) +
  scale_y_continuous(limits = c(0, 500000), breaks = seq(0, 500000, by = 75000))

# HHS Plot --------------------------------------------------------
# Set individual facet titles
hhs_names <- c(
  "hhs" = "HHS",
  "hhs_pers" = "HHS persistent habitat"
)

hhs_plot <- wua_hhs |> 
  pivot_longer(cols = c(hhs, hhs_pers)) |>
  ggplot(aes(Q, value, col = section)) +
  geom_point()+
  geom_line(lwd = 0.7)+
  facet_wrap(~name, labeller = as_labeller(hhs_names)) +
  labs(x = expression(paste("Discharge [", m^3/s, "]")), 
       y = "HHS [-]",
       col = "Study Area"
       ) +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14),
        legend.title = element_text(size=14),
        legend.text = element_text(size=12),
        strip.text = element_text(size=14))


# save the plots 
ggsave("Stat_Analysis/plots/wua.png", plot = wua_plot, width = 8, height = 5)
ggsave("Stat_Analysis/plots/hhs.png", plot = hhs_plot, width = 8, height = 5)
```

```{r}
wua <- ggplot(wua_hhs, aes(x = Q, y = wua, col = section)) +
  geom_line() +
  geom_point() + 
  labs(
    x = "Discharge [", m^3/s, "]",
    y = "WUA [", m^2, "]",
    col = "Section",
    linetype = "Section"
  ) +
  theme_minimal() +
  theme_minimal() +
  theme(axis.text = element_text(size=12),
        axis.title = element_text(size=14),
        legend.title = element_text(size=14),
        legend.text = element_text(size=12)) +
  scale_y_continuous(limits = c(0, 500000), breaks = seq(0, 500000, by = 75000))
```



