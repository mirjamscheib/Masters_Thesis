---
title: "Hydrodynamic_Model_Results"
format: html
---

# Load packages
```{r}
# clear R memory 
rm(list = ls())

# load packages 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("raster")
pkgCheck("spsurvey")
pkgCheck("terra")
pkgCheck("ggplot2")
pkgCheck("tibble")
pkgCheck("readr")
pkgCheck("dplyr")
pkgCheck("tidyr")
pkgCheck("scales")
pkgCheck("hdf5r")
pkgCheck("sp")
pkgCheck("sf")
pkgCheck("spatstat.geom")
pkgCheck("spatstat.explore")
pkgCheck("gstat")
pkgCheck("purrr")
pkgCheck("rgdal")

# load self-written functions 
source("mth_functions.R")
```

# Glenner: GL1
## Single Attribute Rasters
```{r}
 GL1_3.28 <- hdm_results(h5_path = "hdm_models/GL1/results_GL1_3.28.h5", 
                        twodm_path = "hdm_models/GL1/GL1_mesh_computational-mesh_3.2dm",
                        shp_path = "raster_files/GL1_shape.shp", 
                        raster_v_path = "raster_files/GL1_v_3.28.tif",
                        raster_wd_path = "raster_files/GL1_wd_3.28.tif")

# Define the range of values for discharge and results_h5
h5_path_values <- c("hdm_models/GL1/results_GL1_3.28.h5", 
             "hdm_models/GL1/results_GL1_6.00.h5", 
             "hdm_models/GL1/results_GL1_9.00.h5", 
             "hdm_models/GL1/results_GL1_12.68.h5", 
             "hdm_models/GL1/results_GL1_16.00.h5", 
             "hdm_models/GL1/results_GL1_19.00.h5", 
             "hdm_models/GL1/results_GL1_22.00.h5", 
             "hdm_models/GL1/results_GL1_25.00.h5", 
             "hdm_models/GL1/results_GL1_28.00.h5", 
             "hdm_models/GL1/results_GL1_31.76.h5")
```

# Glenner: GL2
## Single Attribute Rasters
```{r}
# Define the range of values for discharge and results_h5
h5_path_values <- c("hdm_models/GL2/results_GL2_3.21.h5", 
             "hdm_models/GL2/results_GL2_6.00.h5", 
             "hdm_models/GL2/results_GL2_9.00.h5", 
             "hdm_models/GL2/results_GL2_11.00.h5", 
             "hdm_models/GL2/results_GL2_12.52.h5", 
             "hdm_models/GL2/results_GL2_16.00.h5", 
             "hdm_models/GL2/results_GL2_19.00.h5", 
             "hdm_models/GL2/results_GL2_22.00.h5", 
             "hdm_models/GL2/results_GL2_25.00.h5", 
             "hdm_models/GL2/results_GL2_28.00.h5",
             "hdm_models/GL2/results_GL2_31.53.h5")
raster_v_path_vaLues <- c("raster_files/GL2_v_3.21.tif", 
                   "raster_files/GL2_v_6.00.tif", 
                   "raster_files/GL2_v_9.00.tif", 
                   "raster_files/GL2_v_11.00.tif", 
                   "raster_files/GL2_v_12.52.tif",  
                   "raster_files/GL2_v_16.00.tif", 
                   "raster_files/GL2_v_19.00.tif", 
                   "raster_files/GL2_v_22.00.tif", 
                   "raster_files/GL2_v_25.00.tif", 
                   "raster_files/GL2_v_28.00.tif",
                   "raster_files/GL2_v_31.53.tif")
raster_wd_path_values <- c("raster_files/GL2_wd_3.21.tif", 
                   "raster_files/GL2_wd_6.00.tif", 
                   "raster_files/GL2_wd_9.00.tif", 
                   "raster_files/GL2_wd_11.00.tif", 
                   "raster_files/GL2_wd_12.52.tif",  
                   "raster_files/GL2_wd_16.00.tif", 
                   "raster_files/GL2_wd_19.00.tif", 
                   "raster_files/GL2_wd_22.00.tif", 
                   "raster_files/GL2_wd_25.00.tif", 
                   "raster_files/GL2_wd_28.00.tif",
                   "raster_files/GL2_wd_31.53.tif")
 

# Loop through the combinations of discharge and results_h5 values
for (i in seq_along(h5_path_values)) {
  for (j in seq_along(raster_v_path_vaLues)) {
    for (k in seq_along(raster_wd_path_values)) {
        hdm_results(
        h5_path = h5_path_values[i], 
        twodm_path = "hdm_models/GL2/Gl2_computational-mesh_mod.2dm",
        shp_path = "raster_files/GL2_shape.shp", 
        raster_v_path = raster_v_path_vaLues[j],
        raster_wd_path = raster_wd_path_values[k])
 # Check if all values are simulate, and exit the loop if true
    if (i == length(h5_path_values))
       break
  }
  }
}

test <- raster("raster_files/L2_wd_16.50.tif")
raster::crs(test) <- "EPSG:2056"
plot(test)

test[test == 0] <- NA
plot(test)
```

# ! - Landquart: L2
## velocity fehlt Single Attribute Rasters
```{r}
# Define the range of values for discharge and results_h5
h5_path_values <- c("hdm_models/L2/results_L2_2_40.h5",
                    "hdm_models/L2/results_L2_3_90.h5",
                    "hdm_models/L2/results_L2_7_00.h5",
                    "hdm_models/L2/results_L2_9_24.h5",
                    "hdm_models/L2/results_L2_13_30.h5",
                    "hdm_models/L2/results_L2_16_50.h5",
                    "hdm_models/L2/results_L2_18_90.h5")
raster_v_path_vaLues <- c("raster_files/L2_v_2_40.tif",
                          "raster_files/L2_v_3_90.tif",
                          "raster_files/L2_v_7_00.tif",
                          "raster_files/L2_v_9_24.tif",
                          "raster_files/L2_v_13_30.tif",
                          "raster_files/L2_v_16_50.tif",
                          "raster_files/L2_v_18_90.tif")
raster_wd_path_values <- c("raster_files/L2_wd_2_40.tif",
                          "raster_files/L2_wd_3_90.tif",
                          "raster_files/L2_wd_7_00.tif",
                          "raster_files/L2_wd_9_24.tif",
                          "raster_files/L2_wd_13_30.tif",
                          "raster_files/L2_wd_16_50.tif",
                          "raster_files/L2_wd_18_90.tif")
 

# Loop through the combinations of discharge and results_h5 values
for (i in seq_along(h5_path_values)) {
  for (j in seq_along(raster_v_path_vaLues)) {
    for (k in seq_along(raster_wd_path_values)) {
        hdm_results(
        h5_path = h5_path_values[i], 
        twodm_path = "hdm_models/L2/Landquart_computational-mesh_anto_depthcorr.2dm",
        shp_path = "raster_files/L2_shape.shp", 
        raster_v_path = raster_v_path_vaLues[j],
        raster_wd_path = raster_wd_path_values[k])
 # Check if all values are simulate, and exit the loop if true
    if (i == length(h5_path_values))
       break
  }
  }
}

test <- raster("raster_files/L2_v_2_40.tif")
raster::crs(test) <- "EPSG:2056"
plot(test)

test[test == 0] <- NA
plot(test)
```


## Stacked Rasters 
```{r}
# Define the range of values for discharge and results_h5
stacked_path_values <- c("rasters_stacked/L2_2.40.grd",
                         "rasters_stacked/L2_3.90.grd",
                         "rasters_stacked/L2_7.00.grd",
                         "rasters_stacked/L2_9.24.grd",
                         "rasters_stacked/L2_13.30.grd",
                         "rasters_stacked/L2_16.50.grd",
                         "rasters_stacked/L2_18.90.grd")
v_path_vaLues <- c("raster_files/L2_v_2.40.tif",
                          "raster_files/L2_v_3.90.tif",
                          "raster_files/L2_v_7.00.tif",
                          "raster_files/L2_v_9.24.tif",
                          "raster_files/L2_v_13.30.tif",
                          "raster_files/L2_v_16.50.tif",
                          "raster_files/L2_v_18.90.tif")
wd_path_values <- c("raster_files/L2_wd_2.40.tif",
                          "raster_files/L2_wd_3.90.tif",
                          "raster_files/L2_wd_7.00.tif",
                          "raster_files/L2_wd_9.24.tif",
                          "raster_files/L2_wd_13.30.tif",
                          "raster_files/L2_wd_16.50.tif",
                          "raster_files/L2_wd_18.90.tif")
 

# Loop through the combinations of discharge and results_h5 values
for (i in seq_along(stacked_path_values)) {
  for (j in seq_along(v_path_vaLues)) {
    for (k in seq_along(wd_path_values)) {
        stack_raster(v_path = v_path_vaLues[j],
             wd_path = wd_path_values[k],
             stack_path = stacked_path_values[i])
 # Check if all values are simulate, and exit the loop if true
    if (i == length(stacked_path_values))
       break
  }
  }
}
```

```{r}
# L2 with Q: 2.4 m3/s
stack_raster(v_path = "raster_files/L2_v_2.tif",
             wd_path = "raster_files/L2_wd_2.tif",
             stack_path = "rasters_stacked/L2_2.grd")

# L2 with Q: 3.9 m3/s
stack_raster(v_path = "raster_files/L2_v_3.tif",
             wd_path = "raster_files/L2_wd_3.tif",
             stack_path = "rasters_stacked/L2_3.grd")

# L2 with Q: 4.6 m3/s
stack_raster(v_path = "raster_files/L2_v_4.tif",
             wd_path = "raster_files/L2_wd_4.tif",
             stack_path = "rasters_stacked/L2_4.grd")

# L2 with Q: 7 m3/s
stack_raster(v_path = "raster_files/L2_v_7.tif",
             wd_path = "raster_files/L2_wd_7.tif",
             stack_path = "rasters_stacked/L2_7.grd")

# L2 with Q: 9.24 m3/s
stack_raster(v_path = "raster_files/L2_v_9.tif",
             wd_path = "raster_files/L2_wd_9.tif",
             stack_path = "rasters_stacked/L2_9.grd")

# L2 with Q: 11.4 m3/s
stack_raster(v_path = "raster_files/L2_v_11.tif",
             wd_path = "raster_files/L2_wd_11.tif",
             stack_path = "rasters_stacked/L2_11.grd")

# L2 with Q: 13.3 m3/s
stack_raster(v_path = "raster_files/L2_v_13.tif",
             wd_path = "raster_files/L2_wd_13.tif",
             stack_path = "rasters_stacked/L2_13.grd")

# L2 with Q: 15 m3/s
stack_raster(v_path = "raster_files/L2_v_15.tif",
             wd_path = "raster_files/L2_wd_15.tif",
             stack_path = "rasters_stacked/L2_15.grd")

# L2 with Q: 18.9 m3/s
stack_raster(v_path = "raster_files/L2_v_18.tif",
             wd_path = "raster_files/L2_wd_18.tif",
             stack_path = "rasters_stacked/L2_18.grd")
```


# ~ here Moesa: M1
## Single Attribute Rasters
```{r}
# Define the range of values for discharge and results_h5
h5_path_values <- c("hdm_models/M1/results_M1_0.47.h5",
                    "hdm_models/M1/results_M1_0.60.h5",
                    "hdm_models/M1/results_M1_4.00.h5",
                    "hdm_models/M1/results_M1_6.00.h5",
                    "hdm_models/M1/results_M1_8.00.h5",
                    "hdm_models/M1/results_M1_10.00.h5",
                    "hdm_models/M1/results_M1_12.00.h5",
                    "hdm_models/M1/results_M1_14.00.h5",
                    "hdm_models/M1/results_M1_16.00.h5",
                    "hdm_models/M1/results_M1_18.84.h5",
                    "hdm_models/M1/results_M1_22.84.h5")
raster_v_path_vaLues <- c("raster_files/M1_v_0.47.tif",
                          "raster_files/M1_v_0.60.tif",
                          "raster_files/M1_v_4.00.tif",
                          "raster_files/M1_v_6.00.tif",
                          "raster_files/M1_v_8.00.tif",
                          "raster_files/M1_v_10.00.tif",
                          "raster_files/M1_v_12.00.tif",
                          "raster_files/M1_v_14.00.tif",
                          "raster_files/M1_v_16.00.tif",
                          "raster_files/M1_v_18.84.tif",
                          "raster_files/M1_v_22.84.tif")
raster_wd_path_values <- c("raster_files/M1_wd_0.47.tif",
                          "raster_files/M1_wd_0.60.tif",
                          "raster_files/M1_wd_4.00.tif",
                          "raster_files/M1_wd_6.00.tif",
                          "raster_files/M1_wd_8.00.tif",
                          "raster_files/M1_wd_10.00.tif",
                          "raster_files/M1_wd_12.00.tif",
                          "raster_files/M1_wd_14.00.tif",
                          "raster_files/M1_wd_16.00.tif",
                          "raster_files/M1_wd_18.84.tif",
                          "raster_files/M1_wd_22.84.tif")
 

# Loop through the combinations of discharge and results_h5 values
for (i in seq_along(h5_path_values)) {
  for (j in seq_along(raster_v_path_vaLues)) {
    for (k in seq_along(raster_wd_path_values)) {
        hdm_results(
        h5_path = h5_path_values[i], 
        twodm_path = "hdm_models/M1/moesa_mzb_uebersicht_computational-mesh2.2dm",
        shp_path = "raster_files/M1_shape.shp", 
        raster_v_path = raster_v_path_vaLues[j],
        raster_wd_path = raster_wd_path_values[k])
 # Check if all values are simulate, and exit the loop if true
    if (i == length(h5_path_values))
       break
  }
  }
}
```

# * Sitter: S1
## Single Attribute Rasters
```{r}
S1_2 <- hdm_results(h5_path = "hdm_models/S1/results_S1_2.00.h5", 
                    twodm_path = "hdm_models/S1/S1_mesh_computational-mesh1.2dm",
                    shp_path = "raster_files/S1_shape.shp", 
                    raster_v_path = "raster_files/S1_v_2.00.tif",
                    raster_wd_path = "raster_files/S1_wd_2.00.tif")


S1_3.2 <- hdm_results(h5_path = "hdm_models/S1/results_S1_3.20.h5", 
                    twodm_path = "hdm_models/S1/S1_mesh_computational-mesh1.2dm",
                    shp_path = "raster_files/S1_shape.shp", 
                    raster_v_path = "raster_files/S1_v_3.20.tif",
                    raster_wd_path = "raster_files/S1_wd_3.20.tif")

S1_6.5 <- hdm_results(h5_path = "hdm_models/S1/results_S1_6.50.h5", 
                    twodm_path = "hdm_models/S1/S1_mesh_computational-mesh1.2dm",
                    shp_path = "raster_files/S1_shape.shp", 
                    raster_v_path = "raster_files/S1_v_6.50.tif",
                    raster_wd_path = "raster_files/S1_wd_6.50.tif")

S1_8.5 <- hdm_results(h5_path = "hdm_models/S1/results_S1_8.50.h5", 
                    twodm_path = "hdm_models/S1/S1_mesh_computational-mesh1.2dm",
                    shp_path = "raster_files/S1_shape.shp", 
                    raster_v_path = "raster_files/S1_v_8.50.tif",
                    raster_wd_path = "raster_files/S1_wd_8.50.tif")

S1_10.93 <- hdm_results(h5_path = "hdm_models/S1/results_S1_10.93.h5", 
                    twodm_path = "hdm_models/S1/S1_mesh_computational-mesh1.2dm",
                    shp_path = "raster_files/S1_shape.shp", 
                    raster_v_path = "raster_files/S1_v_10.93.tif",
                    raster_wd_path = "raster_files/S1_wd_10.93.tif")

S1_13 <- hdm_results(h5_path = "hdm_models/S1/results_S1_13.00.h5", 
                    twodm_path = "hdm_models/S1/S1_mesh_computational-mesh1.2dm",
                    shp_path = "raster_files/S1_shape.shp", 
                    raster_v_path = "raster_files/S1_v_13.00.tif",
                    raster_wd_path = "raster_files/S1_wd_13.00.tif")

S1_15 <- hdm_results(h5_path = "hdm_models/S1/results_S1_15.00.h5", 
                    twodm_path = "hdm_models/S1/S1_mesh_computational-mesh1.2dm",
                    shp_path = "raster_files/S1_shape.shp", 
                    raster_v_path = "raster_files/S1_v_15.00.tif",
                    raster_wd_path = "raster_files/S1_wd_15.00.tif")

S1_18 <- hdm_results(h5_path = "hdm_models/S1/results_S1_18.00.h5", 
                    twodm_path = "hdm_models/S1/S1_mesh_computational-mesh1.2dm",
                    shp_path = "raster_files/S1_shape.shp", 
                    raster_v_path = "raster_files/S1_v_18.00.tif",
                    raster_wd_path = "raster_files/S1_wd_18.00.tif")

S1_20 <- hdm_results(h5_path = "hdm_models/S1/results_S1_20.00.h5", 
                    twodm_path = "hdm_models/S1/S1_mesh_computational-mesh1.2dm",
                    shp_path = "raster_files/S1_shape.shp", 
                    raster_v_path = "raster_files/S1_v_20.00.tif",
                    raster_wd_path = "raster_files/S1_wd_20.00.tif")
```


# * Sitter: S2
## Single Attribute Rasters
```{r}
# Define the range of values for discharge and results_h5
h5_path_values <- c("hdm_models/S2/results_S2_2.00.h5",
                    "hdm_models/S2/results_S2_3.20.h5",
                    "hdm_models/S2/results_S2_6.50.h5",
                    "hdm_models/S2/results_S2_8.50.h5",
                    "hdm_models/S2/results_S2_10.93.h5",
                    "hdm_models/S2/results_S2_13.00.h5",
                    "hdm_models/S2/results_S2_15.00.h5",
                    "hdm_models/S2/results_S2_18.00.h5",
                    "hdm_models/S2/results_S2_20.00.h5")
raster_v_path_vaLues <- c("raster_files/S2_v_2.00.tif",
                          "raster_files/S2_v_3.20.tif",
                          "raster_files/S2_v_6.50.tif",
                          "raster_files/S2_v_8.50.tif",
                          "raster_files/S2_v_10.93.tif",
                          "raster_files/S2_v_13.00.tif",
                          "raster_files/S2_v_15.00.tif",
                          "raster_files/S2_v_18.00.tif",
                          "raster_files/S2_v_20.00.tif")
raster_wd_path_values <- c("raster_files/S2_wd_2.00.tif",
                          "raster_files/S2_wd_3.20.tif",
                          "raster_files/S2_wd_6.50.tif",
                          "raster_files/S2_wd_8.50.tif",
                          "raster_files/S2_wd_10.93.tif",
                          "raster_files/S2_wd_13.00.tif",
                          "raster_files/S2_wd_15.00.tif",
                          "raster_files/S2_wd_18.00.tif",
                          "raster_files/S2_wd_20.00.tif")
 

# Loop through the combinations of discharge and results_h5 values
for (i in seq_along(h5_path_values)) {
  for (j in seq_along(raster_v_path_vaLues)) {
    for (k in seq_along(raster_wd_path_values)) {
        hdm_results(
        h5_path = h5_path_values[i], 
        twodm_path = "hdm_models/S2/computational-mesh-7-290323.2dm",
        shp_path = "raster_files/S2_shape.shp", 
        raster_v_path = raster_v_path_vaLues[j],
        raster_wd_path = raster_wd_path_values[k])
 # Check if all values are simulate, and exit the loop if true
    if (i == length(h5_path_values))
       break
  }
  }
}

test <- raster("raster_files/S2_v_2.00.tif")
raster::crs(test) <- "EPSG:2056"
plot(test)

test[test == 0] <- NA
plot(test)
```



