---
title: "hdm_mi_analysis"
format: html
---

# Libraries 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("sf")
pkgCheck("terra")
pkgCheck("dplyr")
pkgCheck("readr")
pkgCheck("sp")
pkgCheck("raster")
pkgCheck("Metrics")
pkgCheck("tidyr")
pkgCheck("ggplot2")
```

vlt. zwischenschritt einbauen, Resultate vergleichen nur mit gemessenen wd und simulierten wd ein ML modell (welche Fehler macht das Modell, weil wir ihm nur simuliere Werte zum predicten geben anstatt)

Regressionsanalyse wd, v zwischen gemessen und simuliert, ich muss schon quantifizieren wie die abweichung zwischen input daten und simulierten daten sind. 

# Evaluation HDM Results
## Load rasters
```{r}
# read rasters containing wd and velocity 
GL1_ezg <- stack("Pre_Processing/rasters_stacked/GL1_2_56_ezg_add.grd")
GL2_ezg <- stack("Pre_Processing/rasters_stacked/GL2_2_37_ezg_add.grd")
L2_ezg <- stack("Pre_Processing/rasters_stacked/L2_9_54_ezg_add.grd")
M1_ezg <- stack("Pre_Processing/rasters_stacked/M1_1_50_ezg_add.grd")
S1_ezg <- stack("Pre_Processing/rasters_stacked/S1_1_94_ezg_add.grd")
S2_ezg <- stack("Pre_Processing/rasters_stacked/S2_1_93_ezg_add.grd")
TH4_ezg <- stack("Pre_Processing/rasters_stacked/TH4_35_12_ezg_add.grd")
VR3_ezg <- stack("Pre_Processing/rasters_stacked/VR3_21_51_ezg_add.grd")

# rename raster 
names(GL1_ezg) <- c("velocity", "wd_cm", "froude", "shear_stress", "stream_power")  
names(GL2_ezg) <- c("velocity", "wd_cm", "froude", "shear_stress", "stream_power")  
names(L2_ezg) <- c("velocity", "wd_cm", "froude", "shear_stress", "stream_power")  
names(M1_ezg) <- c("velocity", "wd_cm", "froude", "shear_stress", "stream_power")  
names(S1_ezg) <- c("velocity", "wd_cm", "froude", "shear_stress", "stream_power")  
names(S2_ezg) <- c("velocity", "wd_cm", "froude", "shear_stress", "stream_power")  
names(TH4_ezg) <- c("velocity", "wd_cm", "froude", "shear_stress", "stream_power")  
names(VR3_ezg) <- c("velocity", "wd_cm", "froude", "shear_stress", "stream_power")
```

## Load data 
```{r}
# load data 
data <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_wd_add.csv")

# prep extraction data 
## GL1
coord_GL1 <- data |>
  subset(Reach_Untersuchungsstelle == "GL1") |>
  dplyr::select(x, y) 

GL1 <- data |>
  subset(Reach_Untersuchungsstelle == "GL1") |>
  dplyr::select(-shannon, -abundance, -k_index, -rel_abundance)

## GL2
coord_GL2 <- data |>
  subset(Reach_Untersuchungsstelle == "GL2") |>
  dplyr::select(x, y) 

GL2 <- data |>
  subset(Reach_Untersuchungsstelle == "GL2") |>
  dplyr::select(-shannon, -abundance, -k_index, -rel_abundance)

## L2
coord_L2 <- data |>
  subset(Reach_Untersuchungsstelle == "L2") |>
  dplyr::select(x, y) 

L2 <- data |>
  subset(Reach_Untersuchungsstelle == "L2") |>
  dplyr::select(-shannon, -abundance, -k_index, -rel_abundance)

## M1
coord_M1 <- data |>
  subset(Reach_Untersuchungsstelle == "M1") |>
  dplyr::select(x, y) 

M1 <- data |>
  subset(Reach_Untersuchungsstelle == "M1") |>
  dplyr::select(-shannon, -abundance, -k_index, -rel_abundance)

## S1
coord_S1 <- data |>
  subset(Reach_Untersuchungsstelle == "S1") |>
  dplyr::select(x, y) 

S1 <- data |>
  subset(Reach_Untersuchungsstelle == "S1") |>
  dplyr::select(-shannon, -abundance, -k_index, -rel_abundance)

## S2
coord_S2 <- data |>
  subset(Reach_Untersuchungsstelle == "S2") |>
  dplyr::select(x, y) 

S2 <- data |>
  subset(Reach_Untersuchungsstelle == "S2") |>
  dplyr::select(-shannon, -abundance, -k_index, -rel_abundance)

## TH4
coord_TH4 <- data |>
  subset(Reach_Untersuchungsstelle == "TH4") |>
  dplyr::select(x, y) 

TH4 <- data |>
  subset(Reach_Untersuchungsstelle == "TH4") |>
  dplyr::select(-shannon, -abundance, -k_index, -rel_abundance)

## VR3
coord_VR3 <- data |>
  subset(Reach_Untersuchungsstelle == "VR3") |>
  dplyr::select(x, y) 

VR3 <- data |>
  subset(Reach_Untersuchungsstelle == "VR3") |>
  dplyr::select(-shannon, -abundance, -k_index, -rel_abundance)
```

## Extract information 
```{r}
# extract raster information for regression analysis
### GL1 ###
regr_GL1 <- raster::extract(GL1_ezg, coord_GL1) |>
  as.data.frame() |>
  rename(v_raster = velocity,
         wd_m_raster = wd_cm,
         froude_raster = froude,
         shear_raster = shear_stress,
         stream_raster = stream_power) |>
  cbind(GL1)

### GL2 ###
regr_GL2 <- raster::extract(GL2_ezg, coord_GL2) |>
  as.data.frame() |>
  rename(v_raster = velocity,
         wd_m_raster = wd_cm,
         froude_raster = froude,
         shear_raster = shear_stress,
         stream_raster = stream_power) |>
  cbind(GL2) 

### L2 ### 
regr_L2 <- raster::extract(L2_ezg, coord_L2) |>
  as.data.frame() |>
  rename(v_raster = velocity,
         wd_m_raster = wd_cm,
         froude_raster = froude,
         shear_raster = shear_stress,
         stream_raster = stream_power) |>
  cbind(L2) 

### M1 ###
regr_M1 <- raster::extract(M1_ezg, coord_M1) |>
  as.data.frame() |>
  rename(v_raster = velocity,
         wd_m_raster = wd_cm,
         froude_raster = froude,
         shear_raster = shear_stress,
         stream_raster = stream_power) |>
  cbind(M1)

### S1 ###
regr_S1 <- raster::extract(S1_ezg, coord_S1) |>
  as.data.frame() |>
  rename(v_raster = velocity,
         wd_m_raster = wd_cm,
         froude_raster = froude,
         shear_raster = shear_stress,
         stream_raster = stream_power) |>
  cbind(S1) 

### S2 ###
regr_S2 <- raster::extract(S2_ezg, coord_S2) |>
  as.data.frame() |>
  rename(v_raster = velocity,
         wd_m_raster = wd_cm,
         froude_raster = froude,
         shear_raster = shear_stress,
         stream_raster = stream_power) |>
  cbind(S2)

### TH4 ###
regr_TH4 <- raster::extract(TH4_ezg, coord_TH4) |>
  as.data.frame() |>
  rename(v_raster = velocity,
         wd_m_raster = wd_cm,
         froude_raster = froude,
         shear_raster = shear_stress,
         stream_raster = stream_power) |>
  cbind(TH4) 

### VR3 ###
regr_VR3 <- raster::extract(VR3_ezg, coord_VR3) |>
  as.data.frame() |>
  rename(v_raster = velocity,
         wd_m_raster = wd_cm,
         froude_raster = froude,
         shear_raster = shear_stress,
         stream_raster = stream_power) |>
  cbind(VR3)

### Combine into one dataframe ### 
regr_hdm <- rbind(regr_GL1, regr_GL2, regr_L2, regr_M1, regr_S1, regr_S2, regr_TH4, regr_VR3)

### Write .csv file ### 
write.csv(regr_hdm, "Stat_Analysis/regr_analysis_hdm.csv", row.names = FALSE)
```

# RMSE & MAE
```{r}
# load data 
data_hdm <- read_delim("Stat_Analysis/regr_analysis_hdm.csv") |>
  na.omit()

# prep extraction data 
## GL1
GL1 <- data_hdm |>
  subset(Reach_Untersuchungsstelle == "GL1") 

## GL2
GL2 <- data_hdm |>
  subset(Reach_Untersuchungsstelle == "GL2") 

## L2
L2 <- data_hdm |>
  subset(Reach_Untersuchungsstelle == "L2") 

## M1
M1 <- data_hdm |>
  subset(Reach_Untersuchungsstelle == "M1") 

## S1
S1 <- data_hdm |>
  subset(Reach_Untersuchungsstelle == "S1") 

## S2
S2 <- data_hdm |>
  subset(Reach_Untersuchungsstelle == "S2") 

## TH4
TH4 <- data_hdm |>
  subset(Reach_Untersuchungsstelle == "TH4") 

## VR3
VR3 <- data_hdm |>
  subset(Reach_Untersuchungsstelle == "VR3") 
```

### RMSE
```{r}
## GL1 
rmse_v_GL1 <- Metrics::rmse(actual = GL1$velocity, predicted = GL1$v_raster)
rmse_wd_GL1 <- Metrics::rmse(actual = GL1$wd_m, predicted = GL1$wd_m_raster)
rmse_f_GL1 <- Metrics::rmse(actual = GL1$froude, predicted = GL1$froude_raster)
rmse_s_GL1 <- Metrics::rmse(actual = GL1$shear_stress, predicted = GL1$shear_raster)
rmse_sp_GL1 <- Metrics::rmse(actual = GL1$stream_power, predicted = GL1$stream_raster)

## GL2 
rmse_v_GL2 <- Metrics::rmse(actual = GL2$velocity, predicted = GL2$v_raster)
rmse_wd_GL2 <- Metrics::rmse(actual = GL2$wd_m, predicted = GL2$wd_m_raster)
rmse_f_GL2 <- Metrics::rmse(actual = GL2$froude, predicted = GL2$froude_raster)
rmse_s_GL2 <- Metrics::rmse(actual = GL2$shear_stress, predicted = GL2$shear_raster)
rmse_sp_GL2 <- Metrics::rmse(actual = GL2$stream_power, predicted = GL2$stream_raster)

## L2 
rmse_v_L2 <- Metrics::rmse(actual = L2$velocity, predicted = L2$v_raster)
rmse_wd_L2 <- Metrics::rmse(actual = L2$wd_m, predicted = L2$wd_m_raster)
rmse_f_L2 <- Metrics::rmse(actual = L2$froude, predicted = L2$froude_raster)
rmse_s_L2 <- Metrics::rmse(actual = L2$shear_stress, predicted = L2$shear_raster)
rmse_sp_L2 <- Metrics::rmse(actual = L2$stream_power, predicted = L2$stream_raster)

## M1 
rmse_v_M1 <- Metrics::rmse(actual = M1$velocity, predicted = M1$v_raster)
rmse_wd_M1 <- Metrics::rmse(actual = M1$wd_m, predicted = M1$wd_m_raster)
rmse_f_M1 <- Metrics::rmse(actual = M1$froude, predicted = M1$froude_raster)
rmse_s_M1 <- Metrics::rmse(actual = M1$shear_stress, predicted = M1$shear_raster)
rmse_sp_M1 <- Metrics::rmse(actual = M1$stream_power, predicted = M1$stream_raster)

## S1
rmse_v_S1 <- Metrics::rmse(actual = S1$velocity, predicted = S1$v_raster)
rmse_wd_S1 <- Metrics::rmse(actual = S1$wd_m, predicted = S1$wd_m_raster)
rmse_f_S1 <- Metrics::rmse(actual = S1$froude, predicted = S1$froude_raster)
rmse_s_S1 <- Metrics::rmse(actual = S1$shear_stress, predicted = S1$shear_raster)
rmse_sp_S1 <- Metrics::rmse(actual = S1$stream_power, predicted = S1$stream_raster)

## S2
rmse_v_S2 <- Metrics::rmse(actual = S2$velocity, predicted = S2$v_raster)
rmse_wd_S2 <- Metrics::rmse(actual = S2$wd_m, predicted = S2$wd_m_raster)
rmse_f_S2 <- Metrics::rmse(actual = S2$froude, predicted = S2$froude_raster)
rmse_s_S2 <- Metrics::rmse(actual = S2$shear_stress, predicted = S2$shear_raster)
rmse_sp_S2 <- Metrics::rmse(actual = S2$stream_power, predicted = S2$stream_raster)

## TH4
rmse_v_TH4 <- Metrics::rmse(actual = TH4$velocity, predicted = TH4$v_raster)
rmse_wd_TH4 <- Metrics::rmse(actual = TH4$wd_m, predicted = TH4$wd_m_raster)
rmse_f_TH4 <- Metrics::rmse(actual = TH4$froude, predicted = TH4$froude_raster)
rmse_s_TH4 <- Metrics::rmse(actual = TH4$shear_stress, predicted = TH4$shear_raster)
rmse_sp_TH4 <- Metrics::rmse(actual = TH4$stream_power, predicted = TH4$stream_raster)

## VR3
rmse_v_VR3 <- Metrics::rmse(actual = VR3$velocity, predicted = VR3$v_raster)
rmse_wd_VR3 <- Metrics::rmse(actual = VR3$wd_m, predicted = VR3$wd_m_raster)
rmse_f_VR3 <- Metrics::rmse(actual = VR3$froude, predicted = VR3$froude_raster)
rmse_s_VR3 <- Metrics::rmse(actual = VR3$shear_stress, predicted = VR3$shear_raster)
rmse_sp_VR3 <- Metrics::rmse(actual = VR3$stream_power, predicted = VR3$stream_raster)

## ALL
rmse_v <- Metrics::rmse(actual = data_hdm$velocity, predicted = data_hdm$v_raster)
rmse_wd <- Metrics::rmse(actual = data_hdm$wd_m, predicted = data_hdm$wd_m_raster)
rmse_f <- Metrics::rmse(actual = data_hdm$froude, predicted = data_hdm$froude_raster)
rmse_s <- Metrics::rmse(actual = data_hdm$shear_stress, predicted = data_hdm$shear_raster)
rmse_sp <- Metrics::rmse(actual = data_hdm$stream_power, predicted = data_hdm$stream_raster)
```

### MAE
```{r}
## GL1 
mae_v_GL1 <- Metrics::mae(actual = GL1$velocity, predicted = GL1$v_raster)
mae_wd_GL1 <- Metrics::mae(actual = GL1$wd_m, predicted = GL1$wd_m_raster)
mae_f_GL1 <- Metrics::mae(actual = GL1$froude, predicted = GL1$froude_raster)
mae_s_GL1 <- Metrics::mae(actual = GL1$shear_stress, predicted = GL1$shear_raster)
mae_sp_GL1 <- Metrics::mae(actual = GL1$stream_power, predicted = GL1$stream_raster)

## GL2 
mae_v_GL2 <- Metrics::mae(actual = GL2$velocity, predicted = GL2$v_raster)
mae_wd_GL2 <- Metrics::mae(actual = GL2$wd_m, predicted = GL2$wd_m_raster)
mae_f_GL2 <- Metrics::mae(actual = GL2$froude, predicted = GL2$froude_raster)
mae_s_GL2 <- Metrics::mae(actual = GL2$shear_stress, predicted = GL2$shear_raster)
mae_sp_GL2 <- Metrics::mae(actual = GL2$stream_power, predicted = GL2$stream_raster)

## L2 
mae_v_L2 <- Metrics::mae(actual = L2$velocity, predicted = L2$v_raster)
mae_wd_L2 <- Metrics::mae(actual = L2$wd_m, predicted = L2$wd_m_raster)
mae_f_L2 <- Metrics::mae(actual = L2$froude, predicted = L2$froude_raster)
mae_s_L2 <- Metrics::mae(actual = L2$shear_stress, predicted = L2$shear_raster)
mae_sp_L2 <- Metrics::mae(actual = L2$stream_power, predicted = L2$stream_raster)

## M1 
mae_v_M1 <- Metrics::mae(actual = M1$velocity, predicted = M1$v_raster)
mae_wd_M1 <- Metrics::mae(actual = M1$wd_m, predicted = M1$wd_m_raster)
mae_f_M1 <- Metrics::mae(actual = M1$froude, predicted = M1$froude_raster)
mae_s_M1 <- Metrics::mae(actual = M1$shear_stress, predicted = M1$shear_raster)
mae_sp_M1 <- Metrics::mae(actual = M1$stream_power, predicted = M1$stream_raster)

## S1
mae_v_S1 <- Metrics::mae(actual = S1$velocity, predicted = S1$v_raster)
mae_wd_S1 <- Metrics::mae(actual = S1$wd_m, predicted = S1$wd_m_raster)
mae_f_S1 <- Metrics::mae(actual = S1$froude, predicted = S1$froude_raster)
mae_s_S1 <- Metrics::mae(actual = S1$shear_stress, predicted = S1$shear_raster)
mae_sp_S1 <- Metrics::mae(actual = S1$stream_power, predicted = S1$stream_raster)

## S2
mae_v_S2 <- Metrics::mae(actual = S2$velocity, predicted = S2$v_raster)
mae_wd_S2 <- Metrics::mae(actual = S2$wd_m, predicted = S2$wd_m_raster)
mae_f_S2 <- Metrics::mae(actual = S2$froude, predicted = S2$froude_raster)
mae_s_S2 <- Metrics::mae(actual = S2$shear_stress, predicted = S2$shear_raster)
mae_sp_S2 <- Metrics::mae(actual = S2$stream_power, predicted = S2$stream_raster)

## TH4
mae_v_TH4 <- Metrics::mae(actual = TH4$velocity, predicted = TH4$v_raster)
mae_wd_TH4 <- Metrics::mae(actual = TH4$wd_m, predicted = TH4$wd_m_raster)
mae_f_TH4 <- Metrics::mae(actual = TH4$froude, predicted = TH4$froude_raster)
mae_s_TH4 <- Metrics::mae(actual = TH4$shear_stress, predicted = TH4$shear_raster)
mae_sp_TH4 <- Metrics::mae(actual = TH4$stream_power, predicted = TH4$stream_raster)

## VR3
mae_v_VR3 <- Metrics::mae(actual = VR3$velocity, predicted = VR3$v_raster)
mae_wd_VR3 <- Metrics::mae(actual = VR3$wd_m, predicted = VR3$wd_m_raster)
mae_f_VR3 <- Metrics::mae(actual = VR3$froude, predicted = VR3$froude_raster)
mae_s_VR3 <- Metrics::mae(actual = VR3$shear_stress, predicted = VR3$shear_raster)
mae_sp_VR3 <- Metrics::mae(actual = VR3$stream_power, predicted = VR3$stream_raster)

## ALL
mae_v <- Metrics::mae(actual = data_hdm$velocity, predicted = data_hdm$v_raster)
mae_wd <- Metrics::mae(actual = data_hdm$wd_m, predicted = data_hdm$wd_m_raster)
mae_f <- Metrics::mae(actual = data_hdm$froude, predicted = data_hdm$froude_raster)
mae_s <- Metrics::mae(actual = data_hdm$shear_stress, predicted = data_hdm$shear_raster)
mae_sp <- Metrics::mae(actual = data_hdm$stream_power, predicted = data_hdm$stream_raster)
```

# Regr. Analysis
## Models
```{r}
## GL1 
regr_v_GL1 <- lm(v_raster ~ velocity, data = GL1)
sum_v_GL1 <- summary(regr_v_GL1)
p_v_GL1 <- sum_v_GL1$coefficients["velocity", "Pr(>|t|)"]
s_v_GL1 <- sum_v_GL1$coefficients["velocity", "Estimate"]

regr_wd_GL1 <- lm(wd_m_raster ~ wd_m, data = GL1)
sum_wd_GL1 <- summary(regr_wd_GL1)
p_wd_GL1 <- sum_wd_GL1$coefficients["wd_m", "Pr(>|t|)"]
s_wd_GL1 <- sum_wd_GL1$coefficients["wd_m", "Estimate"]

regr_f_GL1 <- lm(froude_raster ~ froude, data = GL1)
sum_f_GL1 <- summary(regr_f_GL1)
p_f_GL1 <- sum_f_GL1$coefficients["froude", "Pr(>|t|)"]
s_f_GL1 <- sum_f_GL1$coefficients["froude", "Estimate"]

regr_s_GL1 <- lm(shear_raster ~ shear_stress, data = GL1)
sum_s_GL1 <- summary(regr_s_GL1)
p_s_GL1 <- sum_s_GL1$coefficients["shear_stress", "Pr(>|t|)"]
s_s_GL1 <- sum_s_GL1$coefficients["shear_stress", "Estimate"]

regr_sp_GL1 <- lm(stream_raster ~ stream_power, data = GL1)
sum_sp_GL1 <- summary(regr_sp_GL1)
p_sp_GL1 <- sum_sp_GL1$coefficients["stream_power", "Pr(>|t|)"]
s_sp_GL1 <- sum_sp_GL1$coefficients["stream_power", "Estimate"]

## GL2
regr_v_GL2 <- lm(v_raster ~ velocity, data = GL2)
sum_v_GL2 <- summary(regr_v_GL2)
p_v_GL2 <- sum_v_GL2$coefficients["velocity", "Pr(>|t|)"]
s_v_GL2 <- sum_v_GL2$coefficients["velocity", "Estimate"]

regr_wd_GL2 <- lm(wd_m_raster ~ wd_m, data = GL2)
sum_wd_GL2 <- summary(regr_wd_GL2)
p_wd_GL2 <- sum_wd_GL2$coefficients["wd_m", "Pr(>|t|)"]
s_wd_GL2 <- sum_wd_GL2$coefficients["wd_m", "Estimate"]

regr_f_GL2 <- lm(froude_raster ~ froude, data = GL2)
sum_f_GL2 <- summary(regr_f_GL2)
p_f_GL2 <- sum_f_GL2$coefficients["froude", "Pr(>|t|)"]
s_f_GL2 <- sum_f_GL2$coefficients["froude", "Estimate"]

regr_s_GL2 <- lm(shear_raster ~ shear_stress, data = GL2)
sum_s_GL2 <- summary(regr_s_GL2)
p_s_GL2 <- sum_s_GL2$coefficients["shear_stress", "Pr(>|t|)"]
s_s_GL2 <- sum_s_GL2$coefficients["shear_stress", "Estimate"]

regr_sp_GL2 <- lm(stream_raster ~ stream_power, data = GL2)
sum_sp_GL2 <- summary(regr_sp_GL2)
p_sp_GL2 <- sum_sp_GL2$coefficients["stream_power", "Pr(>|t|)"]
s_sp_GL2 <- sum_sp_GL2$coefficients["stream_power", "Estimate"]

## L2
regr_v_L2 <- lm(v_raster ~ velocity, data = L2)
sum_v_L2 <- summary(regr_v_L2)
p_v_L2 <- sum_v_L2$coefficients["velocity", "Pr(>|t|)"]
s_v_L2 <- sum_v_L2$coefficients["velocity", "Estimate"]

regr_wd_L2 <- lm(wd_m_raster ~ wd_m, data = L2)
sum_wd_L2 <- summary(regr_wd_L2)
p_wd_L2 <- sum_wd_L2$coefficients["wd_m", "Pr(>|t|)"]
s_wd_L2 <- sum_wd_L2$coefficients["wd_m", "Estimate"]

regr_f_L2 <- lm(froude_raster ~ froude, data = L2)
sum_f_L2 <- summary(regr_f_L2)
p_f_L2 <- sum_f_L2$coefficients["froude", "Pr(>|t|)"]
s_f_L2 <- sum_f_L2$coefficients["froude", "Estimate"]

regr_s_L2 <- lm(shear_raster ~ shear_stress, data = L2)
sum_s_L2 <- summary(regr_s_L2)
p_s_L2 <- sum_s_L2$coefficients["shear_stress", "Pr(>|t|)"]
s_s_L2 <- sum_s_L2$coefficients["shear_stress", "Estimate"]

regr_sp_L2 <- lm(stream_raster ~ stream_power, data = L2)
sum_sp_L2 <- summary(regr_sp_L2)
p_sp_L2 <- sum_sp_L2$coefficients["stream_power", "Pr(>|t|)"]
s_sp_L2 <- sum_sp_L2$coefficients["stream_power", "Estimate"]

## M1
regr_v_M1 <- lm(v_raster ~ velocity, data = M1)
sum_v_M1 <- summary(regr_v_M1)
p_v_M1 <- sum_v_M1$coefficients["velocity", "Pr(>|t|)"]
s_v_M1 <- sum_v_M1$coefficients["velocity", "Estimate"]

regr_wd_M1 <- lm(wd_m_raster ~ wd_m, data = M1)
sum_wd_M1 <- summary(regr_wd_M1)
p_wd_M1 <- sum_wd_M1$coefficients["wd_m", "Pr(>|t|)"]
s_wd_M1 <- sum_wd_M1$coefficients["wd_m", "Estimate"]

regr_f_M1 <- lm(froude_raster ~ froude, data = M1)
sum_f_M1 <- summary(regr_f_M1)
p_f_M1 <- sum_f_M1$coefficients["froude", "Pr(>|t|)"]
s_f_M1 <- sum_f_M1$coefficients["froude", "Estimate"]

regr_s_M1 <- lm(shear_raster ~ shear_stress, data = M1)
sum_s_M1 <- summary(regr_s_M1)
p_s_M1 <- sum_s_M1$coefficients["shear_stress", "Pr(>|t|)"]
s_s_M1 <- sum_s_M1$coefficients["shear_stress", "Estimate"]

regr_sp_M1 <- lm(stream_raster ~ stream_power, data = M1)
sum_sp_M1 <- summary(regr_sp_M1)
p_sp_M1 <- sum_sp_M1$coefficients["stream_power", "Pr(>|t|)"]
s_sp_M1 <- sum_sp_M1$coefficients["stream_power", "Estimate"]

## S1
regr_v_S1 <- lm(v_raster ~ velocity, data = S1)
sum_v_S1 <- summary(regr_v_S1)
p_v_S1 <- sum_v_S1$coefficients["velocity", "Pr(>|t|)"]
s_v_S1 <- sum_v_S1$coefficients["velocity", "Estimate"]

regr_wd_S1 <- lm(wd_m_raster ~ wd_m, data = S1)
sum_wd_S1 <- summary(regr_wd_S1)
p_wd_S1 <- sum_wd_S1$coefficients["wd_m", "Pr(>|t|)"]
s_wd_S1 <- sum_wd_S1$coefficients["wd_m", "Estimate"]

regr_f_S1 <- lm(froude_raster ~ froude, data = S1)
sum_f_S1 <- summary(regr_f_S1)
p_f_S1 <- sum_f_S1$coefficients["froude", "Pr(>|t|)"]
s_f_S1 <- sum_f_S1$coefficients["froude", "Estimate"]

regr_s_S1 <- lm(shear_raster ~ shear_stress, data = S1)
sum_s_S1 <- summary(regr_s_S1)
p_s_S1 <- sum_s_S1$coefficients["shear_stress", "Pr(>|t|)"]
s_s_S1 <- sum_s_S1$coefficients["shear_stress", "Estimate"]

regr_sp_S1 <- lm(stream_raster ~ stream_power, data = S1)
sum_sp_S1 <- summary(regr_sp_S1)
p_sp_S1 <- sum_sp_S1$coefficients["stream_power", "Pr(>|t|)"]
s_sp_S1 <- sum_sp_S1$coefficients["stream_power", "Estimate"]

## S2
regr_v_S2 <- lm(v_raster ~ velocity, data = S2)
sum_v_S2 <- summary(regr_v_S2)
p_v_S2 <- sum_v_S2$coefficients["velocity", "Pr(>|t|)"]
s_v_S2 <- sum_v_S2$coefficients["velocity", "Estimate"]

regr_wd_S2 <- lm(wd_m_raster ~ wd_m, data = S2)
sum_wd_S2 <- summary(regr_wd_S2)
p_wd_S2 <- sum_wd_S2$coefficients["wd_m", "Pr(>|t|)"]
s_wd_S2 <- sum_wd_S2$coefficients["wd_m", "Estimate"]

regr_f_S2 <- lm(froude_raster ~ froude, data = S2)
sum_f_S2 <- summary(regr_f_S2)
p_f_S2 <- sum_f_S2$coefficients["froude", "Pr(>|t|)"]
s_f_S2 <- sum_f_S2$coefficients["froude", "Estimate"]

regr_s_S2 <- lm(shear_raster ~ shear_stress, data = S2)
sum_s_S2 <- summary(regr_s_S2)
p_s_S2 <- sum_s_S2$coefficients["shear_stress", "Pr(>|t|)"]
s_s_S2 <- sum_s_S2$coefficients["shear_stress", "Estimate"]

regr_sp_S2 <- lm(stream_raster ~ stream_power, data = S2)
sum_sp_S2 <- summary(regr_sp_S2)
p_sp_S2 <- sum_sp_S2$coefficients["stream_power", "Pr(>|t|)"]
s_sp_S2 <- sum_sp_S2$coefficients["stream_power", "Estimate"]

## TH4
regr_v_TH4 <- lm(v_raster ~ velocity, data = TH4)
sum_v_TH4 <- summary(regr_v_TH4)
p_v_TH4 <- sum_v_TH4$coefficients["velocity", "Pr(>|t|)"]
s_v_TH4 <- sum_v_TH4$coefficients["velocity", "Estimate"]

regr_wd_TH4 <- lm(wd_m_raster ~ wd_m, data = TH4)
sum_wd_TH4 <- summary(regr_wd_TH4)
p_wd_TH4 <- sum_wd_TH4$coefficients["wd_m", "Pr(>|t|)"]
s_wd_TH4 <- sum_wd_TH4$coefficients["wd_m", "Estimate"]

regr_f_TH4 <- lm(froude_raster ~ froude, data = TH4)
sum_f_TH4 <- summary(regr_f_TH4)
p_f_TH4 <- sum_f_TH4$coefficients["froude", "Pr(>|t|)"]
s_f_TH4 <- sum_f_TH4$coefficients["froude", "Estimate"]

regr_s_TH4 <- lm(shear_raster ~ shear_stress, data = TH4)
sum_s_TH4 <- summary(regr_s_TH4)
p_s_TH4 <- sum_s_TH4$coefficients["shear_stress", "Pr(>|t|)"]
s_s_TH4 <- sum_s_TH4$coefficients["shear_stress", "Estimate"]

regr_sp_TH4 <- lm(stream_raster ~ stream_power, data = TH4)
sum_sp_TH4 <- summary(regr_sp_TH4)
p_sp_TH4 <- sum_sp_TH4$coefficients["stream_power", "Pr(>|t|)"]
s_sp_TH4 <- sum_sp_TH4$coefficients["stream_power", "Estimate"]

## VR3
regr_v_VR3 <- lm(v_raster ~ velocity, data = VR3)
sum_v_VR3 <- summary(regr_v_VR3)
p_v_VR3 <- sum_v_VR3$coefficients["velocity", "Pr(>|t|)"]
s_v_VR3 <- sum_v_VR3$coefficients["velocity", "Estimate"]

regr_wd_VR3 <- lm(wd_m_raster ~ wd_m, data = VR3)
sum_wd_VR3 <- summary(regr_wd_VR3)
p_wd_VR3 <- sum_wd_VR3$coefficients["wd_m", "Pr(>|t|)"]
s_wd_VR3 <- sum_wd_VR3$coefficients["wd_m", "Estimate"]

regr_f_VR3 <- lm(froude_raster ~ froude, data = VR3)
sum_f_VR3 <- summary(regr_f_VR3)
p_f_VR3 <- sum_f_VR3$coefficients["froude", "Pr(>|t|)"]
s_f_VR3 <- sum_f_VR3$coefficients["froude", "Estimate"]

regr_s_VR3 <- lm(shear_raster ~ shear_stress, data = VR3)
sum_s_VR3 <- summary(regr_s_VR3)
p_s_VR3 <- sum_s_VR3$coefficients["shear_stress", "Pr(>|t|)"]
s_s_VR3 <- sum_s_VR3$coefficients["shear_stress", "Estimate"]

regr_sp_VR3 <- lm(stream_raster ~ stream_power, data = VR3)
sum_sp_VR3 <- summary(regr_sp_VR3)
p_sp_VR3 <- sum_sp_VR3$coefficients["stream_power", "Pr(>|t|)"]
s_sp_VR3 <- sum_sp_VR3$coefficients["stream_power", "Estimate"]

## ALL
regr_v <- lm(v_raster ~ velocity, data = data_hdm)
sum_v <- summary(regr_v)
p_v <- sum_v$coefficients["velocity", "Pr(>|t|)"]
s_v <- sum_v$coefficients["velocity", "Estimate"]

regr_wd <- lm(wd_m_raster ~ wd_m, data = data_hdm)
sum_wd <- summary(regr_wd)
p_wd <- sum_wd$coefficients["wd_m", "Pr(>|t|)"]
s_wd <- sum_wd$coefficients["wd_m", "Estimate"]

regr_f <- lm(froude_raster ~ froude, data = data_hdm)
sum_f <- summary(regr_f)
p_f <- sum_f$coefficients["froude", "Pr(>|t|)"]
s_f <- sum_f$coefficients["froude", "Estimate"]

regr_s <- lm(shear_raster ~ shear_stress, data = data_hdm)
sum_s <- summary(regr_s)
p_s <- sum_s$coefficients["shear_stress", "Pr(>|t|)"]
s_s <- sum_s$coefficients["shear_stress", "Estimate"]

regr_sp <- lm(stream_raster ~ stream_power, data = data_hdm)
sum_sp <- summary(regr_sp)
p_sp <- sum_sp$coefficients["stream_power", "Pr(>|t|)"]
s_sp <- sum_sp$coefficients["stream_power", "Estimate"]
```

## Stat. Analysis
```{r}
# Modellvoraussetzungen prüfen - residualplot 
par(mfrow=c(2, 2))
plot(regr_v_GL1)
plot(regr_wd_GL1)
plot(regr_f_GL1)
plot(regr_s_GL1)
plot(regr_sp_GL1)

plot(regr_v_GL2)
plot(regr_wd_GL2)
plot(regr_f_GL2)
plot(regr_s_GL2)
plot(regr_sp_GL2)

plot(regr_v_L2)
plot(regr_wd_L2)
plot(regr_f_L2)
plot(regr_s_L2)
plot(regr_sp_L2)

plot(regr_v_M1)
plot(regr_wd_M1)
plot(regr_f_M1)
plot(regr_s_M1)
plot(regr_sp_M1)

plot(regr_v_S1)
plot(regr_wd_S1)
plot(regr_f_S1)
plot(regr_s_S1)
plot(regr_sp_S1)

plot(regr_v_S2)
plot(regr_wd_S2)
plot(regr_f_S2)
plot(regr_s_S2)
plot(regr_sp_S2)

plot(regr_v_TH4)
plot(regr_wd_TH4)
plot(regr_f_TH4)
plot(regr_s_TH4)
plot(regr_sp_TH4)

plot(regr_v_VR3)
plot(regr_wd_VR3)
plot(regr_f_VR3)
plot(regr_s_VR3)
plot(regr_sp_VR3)

plot(regr_v) # OK
plot(regr_wd) # Residuen nicht normalverteilt, sonst OK
plot(regr_f) # OK
plot(regr_s) # Residien nicht normalverteilt, Linearität fraglich
plot(regr_sp) # Residien nicht normalverteilt, Linearität fraglich

# Normalverteilung Residuen starke abweichung 
# Linearität nicht gegeben aufgrund Bananenform oben links
```

## Plots
```{r}
ggplot(data_hdm, aes(velocity, v_raster)) +
  geom_point() +
  geom_abline() +
  geom_smooth(method = "lm", se = FALSE)

ggplot(data_hdm, aes(wd_m, wd_m_raster)) +
  geom_point() +
  geom_abline() +
  geom_smooth(method = "lm", se = FALSE)

ggplot(data_hdm, aes(froude, froude_raster)) +
  geom_point() +
  geom_abline() +
  geom_smooth(method = "lm", se = FALSE)

ggplot(data_hdm, aes(shear_stress, shear_raster)) +
  geom_point() +
  geom_abline() +
  geom_smooth(method = "lm", se = FALSE)

ggplot(data_hdm, aes(stream_power, stream_raster)) +
  geom_point() +
  geom_abline() +
  geom_smooth(method = "lm", se = FALSE)

# plot(data_hdm$velocity, data_hdm$v_raster)
```


# Create dataframe
```{r}
results_hdm <- data.frame(lm_p_value = c(p_v_GL1, p_wd_GL1, p_f_GL1, p_s_GL1, p_sp_GL1, p_v_GL2, p_wd_GL2, p_f_GL2, p_s_GL2, p_sp_GL2, p_v_L2, p_wd_L2, p_f_L2, p_s_L2, p_sp_L2, p_v_M1, p_wd_M1, p_f_M1, p_s_M1, p_sp_M1, p_v_S1, p_wd_S1, p_f_S1, p_s_S1, p_sp_S1, p_v_S2, p_wd_S2, p_f_S2, p_s_S2, p_sp_S2, "p_v_TH4", "p_wd_TH4", "p_f_TH4", "p_s_TH4", "p_sp_TH4", p_v_VR3, p_wd_VR3, p_f_VR3, p_s_VR3, p_sp_VR3, p_v, p_wd, p_f, p_s, p_sp),
                          
                          lm_slope = c(s_v_GL1, s_wd_GL1, s_f_GL1, s_s_GL1, s_sp_GL1, s_v_GL2, s_wd_GL2, s_f_GL2, s_s_GL2, s_sp_GL2, s_v_L2, s_wd_L2, s_f_L2, s_s_L2, s_sp_L2, s_v_M1, s_wd_M1, s_f_M1, s_s_M1, s_sp_M1, s_v_S1, s_wd_S1, s_f_S1, s_s_S1, s_sp_S1, s_v_S2, s_wd_S2, s_f_S2, s_s_S2, s_sp_S2, "s_v_TH4", "s_wd_TH4", "s_f_TH4", "s_s_TH4", "s_sp_TH4", s_v_VR3, s_wd_VR3, s_f_VR3, s_s_VR3, s_sp_VR3, s_v, s_wd, s_f, s_s, s_sp),
                          
  rmse = c(rmse_v_GL1, rmse_wd_GL1, rmse_f_GL1, rmse_s_GL1, rmse_sp_GL1, rmse_v_GL2, rmse_wd_GL2, rmse_f_GL2, rmse_s_GL2, rmse_sp_GL2, rmse_v_L2, rmse_wd_L2, rmse_f_L2, rmse_s_L2, rmse_sp_L2, rmse_v_M1, rmse_wd_M1, rmse_f_M1, rmse_s_M1, rmse_sp_M1, rmse_v_S1, rmse_wd_S1, rmse_f_S1, rmse_s_S1, rmse_sp_S1, rmse_v_S2, rmse_wd_S2, rmse_f_S2, rmse_s_S2, rmse_sp_S2, rmse_v_TH4, rmse_wd_TH4, rmse_f_TH4, rmse_s_TH4, rmse_sp_TH4, rmse_v_VR3, rmse_wd_VR3, rmse_f_VR3, rmse_s_VR3, rmse_sp_VR3, rmse_v, rmse_wd, rmse_f, rmse_s, rmse_sp),
  
           mae = c(mae_v_GL1, mae_wd_GL1, mae_f_GL1, mae_s_GL1, mae_sp_GL1, mae_v_GL2, mae_wd_GL2, mae_f_GL2, mae_s_GL2, mae_sp_GL2, mae_v_L2, mae_wd_L2, mae_f_L2, mae_s_L2, mae_sp_L2, mae_v_M1, mae_wd_M1, mae_f_M1, mae_s_M1, mae_sp_M1, mae_v_S1, mae_wd_S1, mae_f_S1, mae_s_S1, mae_sp_S1, mae_v_S2, mae_wd_S2, mae_f_S2, mae_s_S2, mae_sp_S2, mae_v_TH4, mae_wd_TH4, mae_f_TH4, mae_s_TH4, mae_sp_TH4, mae_v_VR3, mae_wd_VR3, mae_f_VR3, mae_s_VR3, mae_sp_VR3, mae_v, mae_wd, mae_f, mae_s, mae_sp),
  
           section = c("GL1", "GL1", "GL1", "GL1", "GL1", "GL2", "GL2", "GL2", "GL2", "GL2", "L2", "L2", "L2", "L2", "L2", "M1", "M1", "M1", "M1", "M1", "S1", "S1", "S1", "S1", "S1", "S2", "S2", "S2", "S2", "S2", "TH4", "TH4", "TH4", "TH4", "TH4", "VR3", "VR3", "VR3", "VR3", "VR3", "all", "all", "all", "all", "all"),
  
           variable = c("velocity", "v + wd", "froude", "shear_stress", "stream_power", "velocity", "v + wd", "froude", "shear_stress", "stream_power", "velocity", "v + wd", "froude", "shear_stress", "stream_power", "velocity", "v + wd", "froude", "shear_stress", "stream_power", "velocity", "v + wd", "froude", "shear_stress", "stream_power", "velocity", "v + wd", "froude", "shear_stress", "stream_power", "velocity", "v + wd", "froude", "shear_stress", "stream_power", "velocity", "v + wd", "froude", "shear_stress", "stream_power", "velocity", "v + wd", "froude", "shear_stress", "stream_power"))

# write .csv file 
write.csv(results_hdm, "Stat_Analysis/results_hdm_mi_metrics.csv", row.names = FALSE)
```


