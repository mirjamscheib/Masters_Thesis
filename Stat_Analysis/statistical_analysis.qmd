---
title: "Habitat_Model_VZH"
format: html
---

# Load packages 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("raster")
pkgCheck("spsurvey")
pkgCheck("terra")
pkgCheck("raster")
pkgCheck("ggplot2")
pkgCheck("tibble")
pkgCheck("readr")
pkgCheck("dplyr")
pkgCheck("tidyr")
pkgCheck("scales")
pkgCheck("RColorBrewer")
```

# Load Data 
```{r}
# change biogeo regions and geology into integers for ML modelling
test_sections <- c("L2" = "Hydropeaking", "M1" = "Hydropeaking", "S1" = "Hydropeaking", "S2" = "Hydropeaking", "TH4" = "Natural/near-natural", "GL1" = "Natural/near-natural", "GL2" = "Natural/near-natural", "VR3" = "Hydropeaking")

training_sections <- c("L2" = "Hydropeaking", "L1" = "Hydropeaking", "LR" = "Residual flow",
                       "M1" = "Hydropeaking", "M5" = "Hydropeaking", "M7" = "Hydropeaking", "MR" = "Residual flow", 
                       "GL5" = "Natural/near-natural", 
                       "P1" = "Hydropeaking", "PR" = "Residual flow", 
                       "SA1" = "Hydropeaking", "SA2" = "Hydropeaking", "SA6" = "Hydropeaking", "SAR" = "Residual flow",
                       "SE2" = "Natural/near-natural", "SE3" = "Natural/near-natural",
                       "S1" = "Hydropeaking", "S2" = "Hydropeaking", "SR" = "Residual flow",
                       "S5" = "Hydropeaking", "TH3" = "Natural/near-natural", "TH4" = "Natural/near-natural", 
                       "T1" = "Hydropeaking", "T2" = "Hydropeaking",
                       "GL1" = "Natural/near-natural", "GL2" = "Natural/near-natural", 
                       "VE2" = "Natural/near-natural", "VE4" = "Natural/near-natural",
                       "VR1" = "Hydropeaking", "VR3" = "Hydropeaking", "VR6" = "Residual flow")

# load data 
brt_test <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_test_brt.csv") |>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(test_sections), 
                                   test_sections[Reach_Untersuchungsstelle], NA))

brt_test_2 <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_test_2_brt.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(test_sections), 
                                   test_sections[Reach_Untersuchungsstelle], NA))

brt_train <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_train_brt.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(training_sections), 
                                   training_sections[Reach_Untersuchungsstelle], NA))

brt_train_2 <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_train_2_brt.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(training_sections), 
                                   training_sections[Reach_Untersuchungsstelle], NA))

### RF ### 
rf_test <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_test_rf.csv") |>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(test_sections), 
                                   test_sections[Reach_Untersuchungsstelle], NA))

rf_test_2 <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_test_2_rf.csv") |>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(test_sections), 
                                   test_sections[Reach_Untersuchungsstelle], NA))

rf_train <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_train_rf.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(training_sections), 
                                   training_sections[Reach_Untersuchungsstelle], NA))

rf_train_2 <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_train_2_rf.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(training_sections), 
                                   training_sections[Reach_Untersuchungsstelle], NA))
```


# Mean per Study Area
```{r}
# calculate mean simulated (from measured and raster data) and observed k-index values from the var RF model for each study area
rf_var <- rf_test |>
  dplyr::select(k_index_var, Reach_Untersuchungsstelle, obs_k_index) |>
  group_by(Reach_Untersuchungsstelle) |>
  dplyr::summarise(mean_rast = mean(k_index_var),
            mean_obs = mean(obs_k_index))


rf_var_2 <- rf_test_2 |>
  dplyr::select(rf_pred_model_var_k_c, Reach_Untersuchungsstelle) |>
  group_by(Reach_Untersuchungsstelle) |>
  dplyr::summarise(mean_meas = mean(rf_pred_model_var_k_c)) |>
  full_join(rf_var, by = "Reach_Untersuchungsstelle") 
```

# Regr. Analysis
## BRT
### Test Measured
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_brt_k_measured <- lm(brt_pred_model_v_k_c ~ obs_k_index, data = brt_test)
sum_v_brt_k_measured <- summary(regr_v_brt_k_measured)
p_v_brt_k_measured <- sum_v_brt_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_v_brt_k_measured <- sum_v_brt_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_v_brt_s_measured <- lm(brt_pred_model_v_s_c ~ obs_shannon, data = brt_test)
sum_v_brt_s_measured <- summary(regr_v_brt_s_measured)
p_v_brt_s_measured <- sum_v_brt_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_v_brt_s_measured <- sum_v_brt_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_v_brt_a_measured <- lm(brt_pred_model_v_a_c ~ obs_abundance, data = brt_test)
sum_v_brt_a_measured <- summary(regr_v_brt_a_measured)
p_v_brt_a_measured <- sum_v_brt_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_v_brt_a_measured <- sum_v_brt_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_v_brt_ra_measured <- lm(brt_pred_model_v_ra_c ~ obs_rel_abundance, data = brt_test)
sum_v_brt_ra_measured <- summary(regr_v_brt_ra_measured)
p_v_brt_ra_measured <- sum_v_brt_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_v_brt_ra_measured <- sum_v_brt_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_brt_k_measured <- lm(brt_pred_model_wd_k_c ~ obs_k_index, data = brt_test)
sum_wd_brt_k_measured <- summary(regr_wd_brt_k_measured)
p_wd_brt_k_measured <- sum_wd_brt_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_wd_brt_k_measured <- sum_wd_brt_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_wd_brt_s_measured <- lm(brt_pred_model_wd_s_c ~ obs_shannon, data = brt_test)
sum_wd_brt_s_measured <- summary(regr_wd_brt_s_measured)
p_wd_brt_s_measured <- sum_wd_brt_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_wd_brt_s_measured <- sum_wd_brt_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_wd_brt_a_measured <- lm(brt_pred_model_wd_a_c ~ obs_abundance, data = brt_test)
sum_wd_brt_a_measured <- summary(regr_wd_brt_a_measured)
p_wd_brt_a_measured <- sum_wd_brt_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_wd_brt_a_measured <- sum_wd_brt_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_wd_brt_ra_measured <- lm(brt_pred_model_wd_ra_c ~ obs_rel_abundance, data = brt_test)
sum_wd_brt_ra_measured <- summary(regr_wd_brt_ra_measured)
p_wd_brt_ra_measured <- sum_wd_brt_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_wd_brt_ra_measured <- sum_wd_brt_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_brt_k_measured <- lm(brt_pred_model_samp_k_c ~ obs_k_index, data = brt_test)
sum_samp_brt_k_measured <- summary(regr_samp_brt_k_measured)
p_samp_brt_k_measured <- sum_samp_brt_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_samp_brt_k_measured <- sum_samp_brt_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_samp_brt_s_measured <- lm(brt_pred_model_samp_s_c ~ obs_shannon, data = brt_test)
sum_samp_brt_s_measured <- summary(regr_samp_brt_s_measured)
p_samp_brt_s_measured <- sum_samp_brt_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_samp_brt_s_measured <- sum_samp_brt_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_samp_brt_a_measured <- lm(brt_pred_model_samp_a_c ~ obs_abundance, data = brt_test)
sum_samp_brt_a_measured <- summary(regr_samp_brt_a_measured)
p_samp_brt_a_measured <- sum_samp_brt_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_samp_brt_a_measured <- sum_samp_brt_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_samp_brt_ra_measured <- lm(brt_pred_model_samp_ra_c ~ obs_rel_abundance, data = brt_test)
sum_samp_brt_ra_measured <- summary(regr_samp_brt_ra_measured)
p_samp_brt_ra_measured <- sum_samp_brt_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_samp_brt_ra_measured <- sum_samp_brt_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_brt_k_measured <- lm(brt_pred_model_sec_k_c ~ k_index, data = brt_test_2)
sum_sec_brt_k_measured <- summary(regr_sec_brt_k_measured)
p_sec_brt_k_measured <- sum_sec_brt_k_measured$coefficients["k_index", "Pr(>|t|)"]
s_sec_brt_k_measured <- sum_sec_brt_k_measured$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_sec_brt_s_measured <- lm(brt_pred_model_sec_s_c ~ shannon, data = brt_test_2)
sum_sec_brt_s_measured <- summary(regr_sec_brt_s_measured)
p_sec_brt_s_measured <- sum_sec_brt_s_measured$coefficients["shannon", "Pr(>|t|)"]
s_sec_brt_s_measured <- sum_sec_brt_s_measured$coefficients["shannon", "Estimate"]

# with abundance as response
regr_sec_brt_a_measured <- lm(brt_pred_model_sec_a_c ~ abundance, data = brt_test_2)
sum_sec_brt_a_measured <- summary(regr_sec_brt_a_measured)
p_sec_brt_a_measured <- sum_sec_brt_a_measured$coefficients["abundance", "Pr(>|t|)"]
s_sec_brt_a_measured <- sum_sec_brt_a_measured$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_sec_brt_ra_measured <- lm(brt_pred_model_sec_ra_c ~ rel_abundance, data = brt_test_2)
sum_sec_brt_ra_measured <- summary(regr_sec_brt_ra_measured)
p_sec_brt_ra_measured <- sum_sec_brt_ra_measured$coefficients["rel_abundance", "Pr(>|t|)"]
s_sec_brt_ra_measured <- sum_sec_brt_ra_measured$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_brt_k_measured <- lm(brt_pred_model_var_k_c ~ k_index, data = brt_test_2)
sum_var_brt_k_measured <- summary(regr_var_brt_k_measured)
p_var_brt_k_measured <- sum_var_brt_k_measured$coefficients["k_index", "Pr(>|t|)"]
s_var_brt_k_measured <- sum_var_brt_k_measured$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_var_brt_s_measured <- lm(brt_pred_model_var_s_c ~ shannon, data = brt_test_2)
sum_var_brt_s_measured <- summary(regr_var_brt_s_measured)
p_var_brt_s_measured <- sum_var_brt_s_measured$coefficients["shannon", "Pr(>|t|)"]
s_var_brt_s_measured <- sum_var_brt_s_measured$coefficients["shannon", "Estimate"]

# with abundance as response
regr_var_brt_a_measured <- lm(brt_pred_model_var_a_c ~ abundance, data = brt_test_2)
sum_var_brt_a_measured <- summary(regr_var_brt_a_measured)
p_var_brt_a_measured <- sum_var_brt_a_measured$coefficients["abundance", "Pr(>|t|)"]
s_var_brt_a_measured <- sum_var_brt_a_measured$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_var_brt_ra_measured <- lm(brt_pred_model_var_ra_c ~ rel_abundance, data = brt_test_2)
sum_var_brt_ra_measured <- summary(regr_var_brt_ra_measured)
p_var_brt_ra_measured <- sum_var_brt_ra_measured$coefficients["rel_abundance", "Pr(>|t|)"]
s_var_brt_ra_measured <- sum_var_brt_ra_measured$coefficients["rel_abundance", "Estimate"]
```
                                          
### Test Raster
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_brt_k_rast <- lm(k_index_v ~ obs_k_index, data = brt_test)
sum_v_brt_k_rast <- summary(regr_v_brt_k_rast)
p_v_brt_k_rast <- sum_v_brt_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_v_brt_k_rast <- sum_v_brt_k_rast$coefficients["obs_k_index", "Estimate"]
r_v_brt_k_rast <- summary(lm(k_index_v ~ obs_k_index, data = brt_test))$adj.r.squared

# with shannon index as response
regr_v_brt_s_rast <- lm(shannon_v ~ obs_shannon, data = brt_test)
sum_v_brt_s_rast <- summary(regr_v_brt_s_rast)
p_v_brt_s_rast <- sum_v_brt_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_v_brt_s_rast <- sum_v_brt_s_rast$coefficients["obs_shannon", "Estimate"]
r_v_brt_s_rast <- summary(lm(shannon_v ~ obs_shannon, data = brt_test))$adj.r.squared

# with abundance as response
regr_v_brt_a_rast <- lm(abundance_v ~ obs_abundance, data = brt_test)
sum_v_brt_a_rast <- summary(regr_v_brt_a_rast)
p_v_brt_a_rast <- sum_v_brt_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_v_brt_a_rast <- sum_v_brt_a_rast$coefficients["obs_abundance", "Estimate"]
r_v_brt_a_rast <- summary(lm(abundance_v ~ obs_abundance, data = brt_test))$adj.r.squared

# with rel_abundance as response
regr_v_brt_ra_rast <- lm(rel_abundance_v ~ obs_rel_abundance, data = brt_test)
sum_v_brt_ra_rast <- summary(regr_v_brt_ra_rast)
p_v_brt_ra_rast <- sum_v_brt_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_v_brt_ra_rast <- sum_v_brt_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_v_brt_ra_rast <- summary(lm(rel_abundance_v ~ obs_rel_abundance, data = brt_test))$adj.r.squared

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_brt_k_rast <- lm(k_index_wd ~ obs_k_index, data = brt_test)
sum_wd_brt_k_rast <- summary(regr_wd_brt_k_rast)
p_wd_brt_k_rast <- sum_wd_brt_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_wd_brt_k_rast <- sum_wd_brt_k_rast$coefficients["obs_k_index", "Estimate"]
r_wd_brt_k_rast <- summary(lm(k_index_wd ~ obs_k_index, data = brt_test))$adj.r.squared

# with shannon index as response
regr_wd_brt_s_rast <- lm(shannon_wd ~ obs_shannon, data = brt_test)
sum_wd_brt_s_rast <- summary(regr_wd_brt_s_rast)
p_wd_brt_s_rast <- sum_wd_brt_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_wd_brt_s_rast <- sum_wd_brt_s_rast$coefficients["obs_shannon", "Estimate"]
r_wd_brt_s_rast <- summary(lm(shannon_wd ~ obs_shannon, data = brt_test))$adj.r.squared

# with abundance as response
regr_wd_brt_a_rast <- lm(abundance_wd ~ obs_abundance, data = brt_test)
sum_wd_brt_a_rast <- summary(regr_wd_brt_a_rast)
p_wd_brt_a_rast <- sum_wd_brt_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_wd_brt_a_rast <- sum_wd_brt_a_rast$coefficients["obs_abundance", "Estimate"]
r_wd_brt_a_rast <- summary(lm(abundance_wd ~ obs_abundance, data = brt_test))$adj.r.squared

# with rel_abundance as response
regr_wd_brt_ra_rast <- lm(rel_abundance_wd ~ obs_rel_abundance, data = brt_test)
sum_wd_brt_ra_rast <- summary(regr_wd_brt_ra_rast)
p_wd_brt_ra_rast <- sum_wd_brt_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_wd_brt_ra_rast <- sum_wd_brt_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_wd_brt_ra_rast <- summary(lm(rel_abundance_wd ~ obs_rel_abundance, data = brt_test))$adj.r.squared

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_brt_k_rast <- lm(k_index_var ~ obs_k_index, data = brt_test)
sum_var_brt_k_rast <- summary(regr_var_brt_k_rast)
p_var_brt_k_rast <- sum_var_brt_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_var_brt_k_rast <- sum_var_brt_k_rast$coefficients["obs_k_index", "Estimate"]
r_var_brt_k_rast <- summary(lm(k_index_var ~ obs_k_index, data = brt_test))$adj.r.squared

# with shannon index as response
regr_var_brt_s_rast <- lm(shannon_var ~ obs_shannon, data = brt_test)
sum_var_brt_s_rast <- summary(regr_wd_brt_s_rast)
p_var_brt_s_rast <- sum_var_brt_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_var_brt_s_rast <- sum_var_brt_s_rast$coefficients["obs_shannon", "Estimate"]
r_var_brt_s_rast <- summary(lm(shannon_var ~ obs_shannon, data = brt_test))$adj.r.squared

# with abundance as response
regr_var_brt_a_rast <- lm(abundance_var ~ obs_abundance, data = brt_test)
sum_var_brt_a_rast <- summary(regr_var_brt_a_rast)
p_var_brt_a_rast <- sum_var_brt_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_var_brt_a_rast <- sum_var_brt_a_rast$coefficients["obs_abundance", "Estimate"]
r_var_brt_a_rast <- summary(lm(abundance_var ~ obs_abundance, data = brt_test))$adj.r.squared

# with rel_abundance as response
regr_var_brt_ra_rast <- lm(rel_abundance_var ~ obs_rel_abundance, data = brt_test)
sum_var_brt_ra_rast <- summary(regr_var_brt_ra_rast)
p_var_brt_ra_rast <- sum_var_brt_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_var_brt_ra_rast <- sum_var_brt_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_var_brt_ra_rast <- summary(lm(rel_abundance_var ~ obs_rel_abundance, data = brt_test))$adj.r.squared
```
                              
### Training Sets
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_brt_k_train <- lm(pred_train_v_k ~ k_index, data = brt_train)
sum_v_brt_k_train <- summary(regr_v_brt_k_train)
p_v_brt_k_train <- sum_v_brt_k_train$coefficients["k_index", "Pr(>|t|)"]
s_v_brt_k_train <- sum_v_brt_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_v_brt_s_train <- lm(pred_train_v_s ~ shannon, data = brt_train)
sum_v_brt_s_train <- summary(regr_v_brt_s_train)
p_v_brt_s_train <- sum_v_brt_s_train$coefficients["shannon", "Pr(>|t|)"]
s_v_brt_s_train <- sum_v_brt_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_v_brt_a_train <- lm(pred_train_v_a ~ abundance, data = brt_train)
sum_v_brt_a_train <- summary(regr_v_brt_a_train)
p_v_brt_a_train <- sum_v_brt_a_train$coefficients["abundance", "Pr(>|t|)"]
s_v_brt_a_train <- sum_v_brt_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_v_brt_ra_train <- lm(pred_train_v_ra ~ rel_abundance, data = brt_train)
sum_v_brt_ra_train <- summary(regr_v_brt_ra_train)
p_v_brt_ra_train <- sum_v_brt_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_v_brt_ra_train <- sum_v_brt_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_brt_k_train <- lm(pred_train_wd_k ~ k_index, data = brt_train)
sum_wd_brt_k_train <- summary(regr_wd_brt_k_train)
p_wd_brt_k_train <- sum_wd_brt_k_train$coefficients["k_index", "Pr(>|t|)"]
s_wd_brt_k_train <- sum_wd_brt_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_wd_brt_s_train <- lm(pred_train_wd_s ~ shannon, data = brt_train)
sum_wd_brt_s_train <- summary(regr_wd_brt_s_train)
p_wd_brt_s_train <- sum_wd_brt_s_train$coefficients["shannon", "Pr(>|t|)"]
s_wd_brt_s_train <- sum_wd_brt_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_wd_brt_a_train <- lm(pred_train_wd_a ~ abundance, data = brt_train)
sum_wd_brt_a_train <- summary(regr_wd_brt_a_train)
p_wd_brt_a_train <- sum_wd_brt_a_train$coefficients["abundance", "Pr(>|t|)"]
s_wd_brt_a_train <- sum_wd_brt_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_wd_brt_ra_train <- lm(pred_train_wd_ra ~ rel_abundance, data = brt_train)
sum_wd_brt_ra_train <- summary(regr_wd_brt_ra_train)
p_wd_brt_ra_train <- sum_wd_brt_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_wd_brt_ra_train <- sum_wd_brt_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_brt_k_train <- lm(pred_train_samp_k ~ k_index, data = brt_train)
sum_samp_brt_k_train <- summary(regr_samp_brt_k_train)
p_samp_brt_k_train <- sum_samp_brt_k_train$coefficients["k_index", "Pr(>|t|)"]
s_samp_brt_k_train <- sum_samp_brt_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_samp_brt_s_train <- lm(pred_train_samp_s ~ shannon, data = brt_train)
sum_samp_brt_s_train <- summary(regr_samp_brt_s_train)
p_samp_brt_s_train <- sum_samp_brt_s_train$coefficients["shannon", "Pr(>|t|)"]
s_samp_brt_s_train <- sum_samp_brt_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_samp_brt_a_train <- lm(pred_train_samp_a ~ abundance, data = brt_train)
sum_samp_brt_a_train <- summary(regr_samp_brt_a_train)
p_samp_brt_a_train <- sum_samp_brt_a_train$coefficients["abundance", "Pr(>|t|)"]
s_samp_brt_a_train <- sum_samp_brt_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_samp_brt_ra_train <- lm(pred_train_samp_ra ~ rel_abundance, data = brt_train)
sum_samp_brt_ra_train <- summary(regr_samp_brt_ra_train)
p_samp_brt_ra_train <- sum_samp_brt_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_samp_brt_ra_train <- sum_samp_brt_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_brt_k_train <- lm(pred_train_sec_k ~ k_index, data = brt_train_2)
sum_sec_brt_k_train <- summary(regr_sec_brt_k_train)
p_sec_brt_k_train <- sum_sec_brt_k_train$coefficients["k_index", "Pr(>|t|)"]
s_sec_brt_k_train <- sum_sec_brt_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_sec_brt_s_train <- lm(pred_train_sec_s ~ shannon, data = brt_train_2)
sum_sec_brt_s_train <- summary(regr_sec_brt_s_train)
p_sec_brt_s_train <- sum_sec_brt_s_train$coefficients["shannon", "Pr(>|t|)"]
s_sec_brt_s_train <- sum_sec_brt_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_sec_brt_a_train <- lm(pred_train_sec_a ~ abundance, data = brt_train_2)
sum_sec_brt_a_train <- summary(regr_sec_brt_a_train)
p_sec_brt_a_train <- sum_sec_brt_a_train$coefficients["abundance", "Pr(>|t|)"]
s_sec_brt_a_train <- sum_sec_brt_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_sec_brt_ra_train <- lm(pred_train_sec_ra ~ rel_abundance, data = brt_train_2)
sum_sec_brt_ra_train <- summary(regr_sec_brt_ra_train)
p_sec_brt_ra_train <- sum_sec_brt_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_sec_brt_ra_train <- sum_sec_brt_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_brt_k_train <- lm(pred_train_var_k ~ k_index, data = brt_train_2)
sum_var_brt_k_train <- summary(regr_var_brt_k_train)
p_var_brt_k_train <- sum_var_brt_k_train$coefficients["k_index", "Pr(>|t|)"]
s_var_brt_k_train <- sum_var_brt_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_var_brt_s_train <- lm(pred_train_var_s ~ shannon, data = brt_train_2)
sum_var_brt_s_train <- summary(regr_var_brt_s_train)
p_var_brt_s_train <- sum_var_brt_s_train$coefficients["shannon", "Pr(>|t|)"]
s_var_brt_s_train <- sum_var_brt_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_var_brt_a_train <- lm(pred_train_var_a ~ abundance, data = brt_train_2)
sum_var_brt_a_train <- summary(regr_var_brt_a_train)
p_var_brt_a_train <- sum_var_brt_a_train$coefficients["abundance", "Pr(>|t|)"]
s_var_brt_a_train <- sum_var_brt_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_var_brt_ra_train <- lm(pred_train_var_ra ~ rel_abundance, data = brt_train_2)
sum_var_brt_ra_train <- summary(regr_var_brt_ra_train)
p_var_brt_ra_train <- sum_var_brt_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_var_brt_ra_train <- sum_var_brt_ra_train$coefficients["rel_abundance", "Estimate"]
```
                              
## RF
### Test Measured 
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_rf_rf_k_measured <- lm(rf_pred_model_v_k_c ~ obs_k_index, data = rf_test)
sum_v_rf_k_measured <- summary(regr_v_rf_rf_k_measured)
p_v_rf_k_measured <- sum_v_rf_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_v_rf_k_measured <- sum_v_rf_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_v_rf_s_measured <- lm(rf_pred_model_v_s_c ~ obs_shannon, data = rf_test)
sum_v_rf_s_measured <- summary(regr_v_rf_s_measured)
p_v_rf_s_measured <- sum_v_rf_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_v_rf_s_measured <- sum_v_rf_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_v_rf_a_measured <- lm(rf_pred_model_v_a_c ~ obs_abundance, data = rf_test)
sum_v_rf_a_measured <- summary(regr_v_rf_a_measured)
p_v_rf_a_measured <- sum_v_rf_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_v_rf_a_measured <- sum_v_rf_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_v_rf_ra_measured <- lm(rf_pred_model_v_ra_c ~ obs_rel_abundance, data = rf_test)
sum_v_rf_ra_measured <- summary(regr_v_rf_ra_measured)
p_v_rf_ra_measured <- sum_v_rf_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_v_rf_ra_measured <- sum_v_rf_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_rf_k_measured <- lm(rf_pred_model_wd_k_c ~ obs_k_index, data = rf_test)
sum_wd_rf_k_measured <- summary(regr_wd_rf_k_measured)
p_wd_rf_k_measured <- sum_wd_rf_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_wd_rf_k_measured <- sum_wd_rf_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_wd_rf_s_measured <- lm(rf_pred_model_wd_s_c ~ obs_shannon, data = rf_test)
sum_wd_rf_s_measured <- summary(regr_wd_rf_s_measured)
p_wd_rf_s_measured <- sum_wd_rf_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_wd_rf_s_measured <- sum_wd_rf_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_wd_rf_a_measured <- lm(rf_pred_model_wd_a_c ~ obs_abundance, data = rf_test)
sum_wd_rf_a_measured <- summary(regr_wd_rf_a_measured)
p_wd_rf_a_measured <- sum_wd_rf_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_wd_rf_a_measured <- sum_wd_rf_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_wd_rf_ra_measured <- lm(rf_pred_model_wd_ra_c ~ obs_rel_abundance, data = rf_test)
sum_wd_rf_ra_measured <- summary(regr_wd_rf_ra_measured)
p_wd_rf_ra_measured <- sum_wd_rf_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_wd_rf_ra_measured <- sum_wd_rf_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_rf_k_measured <- lm(rf_pred_model_samp_k_c ~ obs_k_index, data = rf_test)
sum_samp_rf_k_measured <- summary(regr_samp_rf_k_measured)
p_samp_rf_k_measured <- sum_samp_rf_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_samp_rf_k_measured <- sum_samp_rf_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_samp_rf_s_measured <- lm(rf_pred_model_samp_s_c ~ obs_shannon, data = rf_test)
sum_samp_rf_s_measured <- summary(regr_samp_rf_s_measured)
p_samp_rf_s_measured <- sum_samp_rf_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_samp_rf_s_measured <- sum_samp_rf_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_samp_rf_a_measured <- lm(rf_pred_model_samp_a_c ~ obs_abundance, data = rf_test)
sum_samp_rf_a_measured <- summary(regr_samp_rf_a_measured)
p_samp_rf_a_measured <- sum_samp_rf_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_samp_rf_a_measured <- sum_samp_rf_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_samp_rf_ra_measured <- lm(rf_pred_model_samp_ra_c ~ obs_rel_abundance, data = rf_test)
sum_samp_rf_ra_measured <- summary(regr_samp_rf_ra_measured)
p_samp_rf_ra_measured <- sum_samp_rf_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_samp_rf_ra_measured <- sum_samp_rf_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_rf_k_measured <- lm(rf_pred_model_sec_k_c ~ k_index, data = rf_test_2)
sum_sec_rf_k_measured <- summary(regr_sec_rf_k_measured)
p_sec_rf_k_measured <- sum_sec_rf_k_measured$coefficients["k_index", "Pr(>|t|)"]
s_sec_rf_k_measured <- sum_sec_rf_k_measured$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_sec_rf_s_measured <- lm(rf_pred_model_sec_s_c ~ shannon, data = rf_test_2)
sum_sec_rf_s_measured <- summary(regr_sec_rf_s_measured)
p_sec_rf_s_measured <- sum_sec_rf_s_measured$coefficients["shannon", "Pr(>|t|)"]
s_sec_rf_s_measured <- sum_sec_rf_s_measured$coefficients["shannon", "Estimate"]

# with abundance as response
regr_sec_rf_a_measured <- lm(rf_pred_model_sec_a_c ~ abundance, data = rf_test_2)
sum_sec_rf_a_measured <- summary(regr_sec_rf_a_measured)
p_sec_rf_a_measured <- sum_sec_rf_a_measured$coefficients["abundance", "Pr(>|t|)"]
s_sec_rf_a_measured <- sum_sec_rf_a_measured$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_sec_rf_ra_measured <- lm(rf_pred_model_sec_ra_c ~ rel_abundance, data = rf_test_2)
sum_sec_rf_ra_measured <- summary(regr_sec_rf_ra_measured)
p_sec_rf_ra_measured <- sum_sec_rf_ra_measured$coefficients["rel_abundance", "Pr(>|t|)"]
s_sec_rf_ra_measured <- sum_sec_rf_ra_measured$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_rf_k_measured <- lm(rf_pred_model_var_k_c ~ k_index, data = rf_test_2)
sum_var_rf_k_measured <- summary(regr_var_rf_k_measured)
p_var_rf_k_measured <- sum_var_rf_k_measured$coefficients["k_index", "Pr(>|t|)"]
s_var_rf_k_measured <- sum_var_rf_k_measured$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_var_rf_s_measured <- lm(rf_pred_model_var_s_c ~ shannon, data = rf_test_2)
sum_var_rf_s_measured <- summary(regr_var_rf_s_measured)
p_var_rf_s_measured <- sum_var_rf_s_measured$coefficients["shannon", "Pr(>|t|)"]
s_var_rf_s_measured <- sum_var_rf_s_measured$coefficients["shannon", "Estimate"]

# with abundance as response
regr_var_rf_a_measured <- lm(rf_pred_model_var_a_c ~ abundance, data = rf_test_2)
sum_var_rf_a_measured <- summary(regr_var_rf_a_measured)
p_var_rf_a_measured <- sum_var_rf_a_measured$coefficients["abundance", "Pr(>|t|)"]
s_var_rf_a_measured <- sum_var_rf_a_measured$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_var_rf_ra_measured <- lm(rf_pred_model_var_ra_c ~ rel_abundance, data = rf_test_2)
sum_var_rf_ra_measured <- summary(regr_var_rf_ra_measured)
p_var_rf_ra_measured <- sum_var_rf_ra_measured$coefficients["rel_abundance", "Pr(>|t|)"]
s_var_rf_ra_measured <- sum_var_rf_ra_measured$coefficients["rel_abundance", "Estimate"]
```

### Test Raster
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_rf_k_rast <- lm(k_index_v ~ obs_k_index, data = rf_test)
sum_v_rf_k_rast <- summary(regr_v_rf_k_rast)
p_v_rf_k_rast <- sum_v_rf_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_v_rf_k_rast <- sum_v_rf_k_rast$coefficients["obs_k_index", "Estimate"]
r_v_rf_k_rast <- summary(lm(k_index_v ~ obs_k_index, data = rf_test))$adj.r.squared

# with shannon index as response
regr_v_rf_s_rast <- lm(shannon_v ~ obs_shannon, data = rf_test)
sum_v_rf_s_rast <- summary(regr_v_rf_s_rast)
p_v_rf_s_rast <- sum_v_rf_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_v_rf_s_rast <- sum_v_rf_s_rast$coefficients["obs_shannon", "Estimate"]
r_v_rf_s_rast <- summary(lm(shannon_v ~ obs_shannon, data = rf_test))$adj.r.squared

# with abundance as response
regr_v_rf_a_rast <- lm(abundance_v ~ obs_abundance, data = rf_test)
sum_v_rf_a_rast <- summary(regr_v_rf_a_rast)
p_v_rf_a_rast <- sum_v_rf_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_v_rf_a_rast <- sum_v_rf_a_rast$coefficients["obs_abundance", "Estimate"]
r_v_rf_a_rast <- summary(lm(abundance_v ~ obs_abundance, data = rf_test))$adj.r.squared

# with rel_abundance as response
regr_v_rf_ra_rast <- lm(rel_abundance_v ~ obs_rel_abundance, data = rf_test)
sum_v_rf_ra_rast <- summary(regr_v_rf_ra_rast)
p_v_rf_ra_rast <- sum_v_rf_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_v_rf_ra_rast <- sum_v_rf_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_v_rf_ra_rast <- summary(lm(rel_abundance_v ~ obs_rel_abundance, data = rf_test))$adj.r.squared

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_rf_k_rast <- lm(k_index_wd ~ obs_k_index, data = rf_test)
sum_wd_rf_k_rast <- summary(regr_wd_rf_k_rast)
p_wd_rf_k_rast <- sum_wd_rf_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_wd_rf_k_rast <- sum_wd_rf_k_rast$coefficients["obs_k_index", "Estimate"]
r_wd_rf_k_rast <- summary(lm(k_index_wd ~ obs_k_index, data = rf_test))$adj.r.squared

# with shannon index as response
regr_wd_rf_s_rast <- lm(shannon_wd ~ obs_shannon, data = rf_test)
sum_wd_rf_s_rast <- summary(regr_wd_rf_s_rast)
p_wd_rf_s_rast <- sum_wd_rf_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_wd_rf_s_rast <- sum_wd_rf_s_rast$coefficients["obs_shannon", "Estimate"]
r_wd_rf_s_rast <- summary(lm(shannon_wd ~ obs_shannon, data = rf_test))$adj.r.squared

# with abundance as response
regr_wd_rf_a_rast <- lm(abundance_wd ~ obs_abundance, data = rf_test)
sum_wd_rf_a_rast <- summary(regr_wd_rf_a_rast)
p_wd_rf_a_rast <- sum_wd_rf_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_wd_rf_a_rast <- sum_wd_rf_a_rast$coefficients["obs_abundance", "Estimate"]
r_wd_rf_a_rast <- summary(lm(abundance_wd ~ obs_abundance, data = rf_test))$adj.r.squared

# with rel_abundance as response
regr_wd_rf_ra_rast <- lm(rel_abundance_wd ~ obs_rel_abundance, data = rf_test)
sum_wd_rf_ra_rast <- summary(regr_wd_rf_ra_rast)
p_wd_rf_ra_rast <- sum_wd_rf_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_wd_rf_ra_rast <- sum_wd_rf_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_wd_rf_ra_rast <- summary(lm(rel_abundance_wd ~ obs_rel_abundance, data = rf_test))$adj.r.squared

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_rf_k_rast <- lm(k_index_var ~ obs_k_index, data = rf_test)
sum_var_rf_k_rast <- summary(regr_var_rf_k_rast)
p_var_rf_k_rast <- sum_var_rf_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_var_rf_k_rast <- sum_var_rf_k_rast$coefficients["obs_k_index", "Estimate"]
r_var_rf_k_rast <- summary(lm(k_index_var ~ obs_k_index, data = rf_test))$adj.r.squared

# with shannon index as response
regr_var_rf_s_rast <- lm(shannon_var ~ obs_shannon, data = rf_test)
sum_var_rf_s_rast <- summary(regr_wd_rf_s_rast)
p_var_rf_s_rast <- sum_var_rf_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_var_rf_s_rast <- sum_var_rf_s_rast$coefficients["obs_shannon", "Estimate"]
r_var_rf_s_rast <- summary(lm(shannon_var ~ obs_shannon, data = rf_test))$adj.r.squared

# with abundance as response
regr_var_rf_a_rast <- lm(abundance_var ~ obs_abundance, data = rf_test)
sum_var_rf_a_rast <- summary(regr_var_rf_a_rast)
p_var_rf_a_rast <- sum_var_rf_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_var_rf_a_rast <- sum_var_rf_a_rast$coefficients["obs_abundance", "Estimate"]
r_var_rf_a_rast <- summary(lm(abundance_var ~ obs_abundance, data = rf_test))$adj.r.squared

# with rel_abundance as response
regr_var_rf_ra_rast <- lm(rel_abundance_var ~ obs_rel_abundance, data = rf_test)
sum_var_rf_ra_rast <- summary(regr_var_rf_ra_rast)
p_var_rf_ra_rast <- sum_var_rf_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_var_rf_ra_rast <- sum_var_rf_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_var_rf_ra_rast <- summary(lm(rel_abundance_var ~ obs_rel_abundance, data = rf_test))$adj.r.squared
```

### Training Sets
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_rf_k_train <- lm(pred_train_v_k ~ k_index, data = rf_train)
sum_v_rf_k_train <- summary(regr_v_rf_k_train)
p_v_rf_k_train <- sum_v_rf_k_train$coefficients["k_index", "Pr(>|t|)"]
s_v_rf_k_train <- sum_v_rf_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_v_rf_s_train <- lm(pred_train_v_s ~ shannon, data = rf_train)
sum_v_rf_s_train <- summary(regr_v_rf_s_train)
p_v_rf_s_train <- sum_v_rf_s_train$coefficients["shannon", "Pr(>|t|)"]
s_v_rf_s_train <- sum_v_rf_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_v_rf_a_train <- lm(pred_train_v_a ~ abundance, data = rf_train)
sum_v_rf_a_train <- summary(regr_v_rf_a_train)
p_v_rf_a_train <- sum_v_rf_a_train$coefficients["abundance", "Pr(>|t|)"]
s_v_rf_a_train <- sum_v_rf_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_v_rf_ra_train <- lm(pred_train_v_ra ~ rel_abundance, data = rf_train)
sum_v_rf_ra_train <- summary(regr_v_rf_ra_train)
p_v_rf_ra_train <- sum_v_rf_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_v_rf_ra_train <- sum_v_rf_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_rf_k_train <- lm(pred_train_wd_k ~ k_index, data = rf_train)
sum_wd_rf_k_train <- summary(regr_wd_rf_k_train)
p_wd_rf_k_train <- sum_wd_rf_k_train$coefficients["k_index", "Pr(>|t|)"]
s_wd_rf_k_train <- sum_wd_rf_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_wd_rf_s_train <- lm(pred_train_wd_s ~ shannon, data = rf_train)
sum_wd_rf_s_train <- summary(regr_wd_rf_s_train)
p_wd_rf_s_train <- sum_wd_rf_s_train$coefficients["shannon", "Pr(>|t|)"]
s_wd_rf_s_train <- sum_wd_rf_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_wd_rf_a_train <- lm(pred_train_wd_a ~ abundance, data = rf_train)
sum_wd_rf_a_train <- summary(regr_wd_rf_a_train)
p_wd_rf_a_train <- sum_wd_rf_a_train$coefficients["abundance", "Pr(>|t|)"]
s_wd_rf_a_train <- sum_wd_rf_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_wd_rf_ra_train <- lm(pred_train_wd_ra ~ rel_abundance, data = rf_train)
sum_wd_rf_ra_train <- summary(regr_wd_rf_ra_train)
p_wd_rf_ra_train <- sum_wd_rf_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_wd_rf_ra_train <- sum_wd_rf_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_rf_k_train <- lm(pred_train_samp_k ~ k_index, data = rf_train)
sum_samp_rf_k_train <- summary(regr_samp_rf_k_train)
p_samp_rf_k_train <- sum_samp_rf_k_train$coefficients["k_index", "Pr(>|t|)"]
s_samp_rf_k_train <- sum_samp_rf_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_samp_rf_s_train <- lm(pred_train_samp_s ~ shannon, data = rf_train)
sum_samp_rf_s_train <- summary(regr_samp_rf_s_train)
p_samp_rf_s_train <- sum_samp_rf_s_train$coefficients["shannon", "Pr(>|t|)"]
s_samp_rf_s_train <- sum_samp_rf_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_samp_rf_a_train <- lm(pred_train_samp_a ~ abundance, data = rf_train)
sum_samp_rf_a_train <- summary(regr_samp_rf_a_train)
p_samp_rf_a_train <- sum_samp_rf_a_train$coefficients["abundance", "Pr(>|t|)"]
s_samp_rf_a_train <- sum_samp_rf_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_samp_rf_ra_train <- lm(pred_train_samp_ra ~ rel_abundance, data = rf_train)
sum_samp_rf_ra_train <- summary(regr_samp_rf_ra_train)
p_samp_rf_ra_train <- sum_samp_rf_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_samp_rf_ra_train <- sum_samp_rf_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_rf_k_train <- lm(pred_train_sec_k ~ k_index, data = rf_train_2)
sum_sec_rf_k_train <- summary(regr_sec_rf_k_train)
p_sec_rf_k_train <- sum_sec_rf_k_train$coefficients["k_index", "Pr(>|t|)"]
s_sec_rf_k_train <- sum_sec_rf_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_sec_rf_s_train <- lm(pred_train_sec_s ~ shannon, data = rf_train_2)
sum_sec_rf_s_train <- summary(regr_sec_rf_s_train)
p_sec_rf_s_train <- sum_sec_rf_s_train$coefficients["shannon", "Pr(>|t|)"]
s_sec_rf_s_train <- sum_sec_rf_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_sec_rf_a_train <- lm(pred_train_sec_a ~ abundance, data = rf_train_2)
sum_sec_rf_a_train <- summary(regr_sec_rf_a_train)
p_sec_rf_a_train <- sum_sec_rf_a_train$coefficients["abundance", "Pr(>|t|)"]
s_sec_rf_a_train <- sum_sec_rf_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_sec_rf_ra_train <- lm(pred_train_sec_ra ~ rel_abundance, data = rf_train_2)
sum_sec_rf_ra_train <- summary(regr_sec_rf_ra_train)
p_sec_rf_ra_train <- sum_sec_rf_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_sec_rf_ra_train <- sum_sec_rf_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_rf_k_train <- lm(pred_train_var_k ~ k_index, data = rf_train_2)
sum_var_rf_k_train <- summary(regr_var_rf_k_train)
p_var_rf_k_train <- sum_var_rf_k_train$coefficients["k_index", "Pr(>|t|)"]
s_var_rf_k_train <- sum_var_rf_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_var_rf_s_train <- lm(pred_train_var_s ~ shannon, data = rf_train_2)
sum_var_rf_s_train <- summary(regr_var_rf_s_train)
p_var_rf_s_train <- sum_var_rf_s_train$coefficients["shannon", "Pr(>|t|)"]
s_var_rf_s_train <- sum_var_rf_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_var_rf_a_train <- lm(pred_train_var_a ~ abundance, data = rf_train_2)
sum_var_rf_a_train <- summary(regr_var_rf_a_train)
p_var_rf_a_train <- sum_var_rf_a_train$coefficients["abundance", "Pr(>|t|)"]
s_var_rf_a_train <- sum_var_rf_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_var_rf_ra_train <- lm(pred_train_var_ra ~ rel_abundance, data = rf_train_2)
sum_var_rf_ra_train <- summary(regr_var_rf_ra_train)
p_var_rf_ra_train <- sum_var_rf_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_var_rf_ra_train <- sum_var_rf_ra_train$coefficients["rel_abundance", "Estimate"]
```

# Create dataframe
```{r}
regr_brt <- data.frame(p_value = c(p_v_brt_k_measured, p_v_brt_s_measured, p_v_brt_a_measured, p_v_brt_ra_measured,
                                        p_wd_brt_k_measured, p_wd_brt_s_measured, p_wd_brt_a_measured, p_wd_brt_ra_measured,
                                        p_samp_brt_k_measured, p_samp_brt_s_measured, p_samp_brt_a_measured, p_samp_brt_ra_measured,
                                        p_sec_brt_k_measured, p_sec_brt_s_measured, p_sec_brt_a_measured, p_sec_brt_ra_measured,
                                        p_var_brt_k_measured, p_var_brt_s_measured, p_var_brt_a_measured, p_var_brt_ra_measured,
                                        p_v_brt_k_rast, p_v_brt_s_rast, p_v_brt_a_rast, p_v_brt_ra_rast,
                                        p_wd_brt_k_rast, p_wd_brt_s_rast, p_wd_brt_a_rast, p_wd_brt_ra_rast,
                                        p_var_brt_k_rast, p_var_brt_s_rast, p_var_brt_a_rast, p_var_brt_ra_rast,
                                        p_v_brt_k_train, p_v_brt_s_train, p_v_brt_a_train, p_v_brt_ra_train,
                                        p_wd_brt_k_train, p_wd_brt_s_train, p_wd_brt_a_train, p_wd_brt_ra_train,
                                        p_samp_brt_k_train, p_samp_brt_s_train, p_samp_brt_a_train, p_samp_brt_ra_train,
                                        p_sec_brt_k_train, p_sec_brt_s_train, p_sec_brt_a_train, p_sec_brt_ra_train,
                                        p_var_brt_k_train, p_var_brt_s_train, p_var_brt_a_train, p_var_brt_ra_train),
                            slope = c(s_v_brt_k_measured, s_v_brt_s_measured, s_v_brt_a_measured, s_v_brt_ra_measured,
                                        s_wd_brt_k_measured, s_wd_brt_s_measured, s_wd_brt_a_measured, s_wd_brt_ra_measured,
                                        s_samp_brt_k_measured, s_samp_brt_s_measured, s_samp_brt_a_measured, s_samp_brt_ra_measured,
                                        s_sec_brt_k_measured, s_sec_brt_s_measured, s_sec_brt_a_measured, s_sec_brt_ra_measured,
                                        s_var_brt_k_measured, s_var_brt_s_measured, s_var_brt_a_measured, s_var_brt_ra_measured,
                                        s_v_brt_k_rast, s_v_brt_s_rast, s_v_brt_a_rast, s_v_brt_ra_rast,
                                        s_wd_brt_k_rast, s_wd_brt_s_rast, s_wd_brt_a_rast, s_wd_brt_ra_rast,
                                        s_var_brt_k_rast, s_var_brt_s_rast, s_var_brt_a_rast, s_var_brt_ra_rast,
                                        s_v_brt_k_train, s_v_brt_s_train, s_v_brt_a_train, s_v_brt_ra_train,
                                        s_wd_brt_k_train, s_wd_brt_s_train, s_wd_brt_a_train, s_wd_brt_ra_train,
                                        s_samp_brt_k_train, s_samp_brt_s_train, s_samp_brt_a_train, s_samp_brt_ra_train,
                                        s_sec_brt_k_train, s_sec_brt_s_train, s_sec_brt_a_train, s_sec_brt_ra_train,
                                        s_var_brt_k_train, s_var_brt_s_train, s_var_brt_a_train, s_var_brt_ra_train),
                            index = c("k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance"),
                            algorithm = c("brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt"),
                            predictor = c("velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "samp", "samp", "samp", "samp",
                                          "sec", "sec", "sec", "sec",
                                          "var", "var", "var", "var",
                                          "velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "var", "var", "var", "var",
                                          "velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "samp", "samp", "samp", "samp",
                                          "sec", "sec", "sec", "sec",
                                          "var", "var", "var", "var"),
                              origin = c("measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured", 
                              "measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured",
                              "raster", "raster", "raster", "raster",
                              "raster", "raster", "raster", "raster", 
                              "raster", "raster", "raster", "raster",
                              "training", "training", "training", "training",
                              "training", "training", "training", "training",
                              "training", "training", "training", "training", 
                              "training", "training", "training", "training",
                              "training", "training", "training", "training"))


regr_rf <- data.frame(p_value = c(p_v_rf_k_measured, p_v_rf_s_measured, p_v_rf_a_measured, p_v_rf_ra_measured,
                                        p_wd_rf_k_measured, p_wd_rf_s_measured, p_wd_rf_a_measured, p_wd_rf_ra_measured,
                                        p_samp_rf_k_measured, p_samp_rf_s_measured, p_samp_rf_a_measured, p_samp_rf_ra_measured,
                                        p_sec_rf_k_measured, p_sec_rf_s_measured, p_sec_rf_a_measured, p_sec_rf_ra_measured,
                                        p_var_rf_k_measured, p_var_rf_s_measured, p_var_rf_a_measured, p_var_rf_ra_measured,
                                        p_v_rf_k_rast, p_v_rf_s_rast, p_v_rf_a_rast, p_v_rf_ra_rast,
                                        p_wd_rf_k_rast, p_wd_rf_s_rast, p_wd_rf_a_rast, p_wd_rf_ra_rast,
                                        p_var_rf_k_rast, p_var_rf_s_rast, p_var_rf_a_rast, p_var_rf_ra_rast,
                                        p_v_rf_k_train, p_v_rf_s_train, p_v_rf_a_train, p_v_rf_ra_train,
                                        p_wd_rf_k_train, p_wd_rf_s_train, p_wd_rf_a_train, p_wd_rf_ra_train,
                                        p_samp_rf_k_train, p_samp_rf_s_train, p_samp_rf_a_train, p_samp_rf_ra_train,
                                        p_sec_rf_k_train, p_sec_rf_s_train, p_sec_rf_a_train, p_sec_rf_ra_train,
                                        p_var_rf_k_train, p_var_rf_s_train, p_var_rf_a_train, p_var_rf_ra_train),
                            slope = c(s_v_rf_k_measured, s_v_rf_s_measured, s_v_rf_a_measured, s_v_rf_ra_measured,
                                        s_wd_rf_k_measured, s_wd_rf_s_measured, s_wd_rf_a_measured, s_wd_rf_ra_measured,
                                        s_samp_rf_k_measured, s_samp_rf_s_measured, s_samp_rf_a_measured, s_samp_rf_ra_measured,
                                        s_sec_rf_k_measured, s_sec_rf_s_measured, s_sec_rf_a_measured, s_sec_rf_ra_measured,
                                        s_var_rf_k_measured, s_var_rf_s_measured, s_var_rf_a_measured, s_var_rf_ra_measured,
                                        s_v_rf_k_rast, s_v_rf_s_rast, s_v_rf_a_rast, s_v_rf_ra_rast,
                                        s_wd_rf_k_rast, s_wd_rf_s_rast, s_wd_rf_a_rast, s_wd_rf_ra_rast,
                                        s_var_rf_k_rast, s_var_rf_s_rast, s_var_rf_a_rast, s_var_rf_ra_rast,
                                        s_v_rf_k_train, s_v_rf_s_train, s_v_rf_a_train, s_v_rf_ra_train,
                                        s_wd_rf_k_train, s_wd_rf_s_train, s_wd_rf_a_train, s_wd_rf_ra_train,
                                        s_samp_rf_k_train, s_samp_rf_s_train, s_samp_rf_a_train, s_samp_rf_ra_train,
                                        s_sec_rf_k_train, s_sec_rf_s_train, s_sec_rf_a_train, s_sec_rf_ra_train,
                                        s_var_rf_k_train, s_var_rf_s_train, s_var_rf_a_train, s_var_rf_ra_train),
                            index = c("k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance"),
                            algorithm = c("rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf"),
                            predictor = c("velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "samp", "samp", "samp", "samp",
                                          "sec", "sec", "sec", "sec",
                                          "var", "var", "var", "var",
                                          "velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "var", "var", "var", "var",
                                          "velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "samp", "samp", "samp", "samp",
                                          "sec", "sec", "sec", "sec",
                                          "var", "var", "var", "var"),
                              origin = c("measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured", 
                              "measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured",
                              "raster", "raster", "raster", "raster",
                              "raster", "raster", "raster", "raster", 
                              "raster", "raster", "raster", "raster",
                              "training", "training", "training", "training",
                              "training", "training", "training", "training",
                              "training", "training", "training", "training", 
                              "training", "training", "training", "training",
                              "training", "training", "training", "training"))

regr_all <- rbind(regr_brt, regr_rf)

# write .csv file 
write.csv(regr_brt, "Stat_Analysis/stat_analysis_data/results_regr_brt.csv", row.names = FALSE)
write.csv(regr_rf, "Stat_Analysis/stat_analysis_data/results_regr_rf.csv", row.names = FALSE)
write.csv(regr_all, "Stat_Analysis/stat_analysis_data/results_regr_all.csv", row.names = FALSE)
```

# Plots
## BRT 
### Make dataframe
```{r}
# order, obtain dataframe for measured, raster and training values ----------------------
# prep 1. dataframe using test data and raster extracted data --------------
brt_1 <- brt_test |>
  dplyr::select(-Reach_Untersuchungsstelle, -x, -y, -velocity, -wd_m) |>
  dplyr::rename(Measured_Velocity_k_index = brt_pred_model_v_k_c,
                Measured_Velocity_shannon = brt_pred_model_v_s_c,
                Measured_Velocity_abundance = brt_pred_model_v_a_c,
                Measured_Velocity_rel_abundance = brt_pred_model_v_ra_c,
                Measured_WD_k_index = brt_pred_model_wd_k_c,
                Measured_WD_shannon = brt_pred_model_wd_s_c,
                Measured_WD_abundance = brt_pred_model_wd_a_c,
                Measured_WD_rel_abundance = brt_pred_model_wd_ra_c,
                Measured_Samp_k_index = brt_pred_model_samp_k_c,
                Measured_Samp_shannon = brt_pred_model_samp_s_c,
                Measured_Samp_abundance = brt_pred_model_samp_a_c,
                Measured_Samp_rel_abundance = brt_pred_model_samp_ra_c,
                k_index = obs_k_index,
                shannon = obs_shannon,
                abundance = obs_abundance,
                rel_abundance = obs_rel_abundance,
                Raster_Velocity_k_index = k_index_v,
                Raster_Velocity_shannon = shannon_v,
                Raster_Velocity_abundance = abundance_v,
                Raster_Velocity_rel_abundance = rel_abundance_v,
                Raster_WD_k_index = k_index_wd,
                Raster_WD_shannon = shannon_wd,
                Raster_WD_abundance = abundance_wd,
                Raster_WD_rel_abundance = rel_abundance_wd,
                Raster_Var_k_index = k_index_var,
                Raster_Var_shannon = shannon_var,
                Raster_Var_abundance = abundance_var,
                Raster_Var_rel_abundance = rel_abundance_var)


brt_1_long <- pivot_longer(brt_1, cols = c(Measured_Velocity_k_index,
                Measured_Velocity_shannon,
                Measured_Velocity_abundance,
                Measured_Velocity_rel_abundance,
                Measured_WD_k_index,
                Measured_WD_shannon,
                Measured_WD_abundance,
                Measured_WD_rel_abundance,
                Measured_Samp_k_index,
                Measured_Samp_shannon,
                Measured_Samp_abundance,
                Measured_Samp_rel_abundance,
                Raster_Velocity_k_index,
                Raster_Velocity_shannon,
                Raster_Velocity_abundance,
                Raster_Velocity_rel_abundance,
                Raster_WD_k_index,
                Raster_WD_shannon,
                Raster_WD_abundance,
                Raster_WD_rel_abundance,
                Raster_Var_k_index,
                Raster_Var_shannon,
                Raster_Var_abundance,
                Raster_Var_rel_abundance), names_to = "names", values_to = "values")

brt_1_long <- brt_1_long |>
  mutate(names = sub("_", " ", names),
         names = sub("_", " ", names)) |>
  separate(names, into = c("origin", "predictor", "index"), sep = " ")


# prep 2. dataframe using test data from selected variables --------------
brt_2 <- brt_test_2 |>
  dplyr::select(brt_pred_model_var_k_c, brt_pred_model_var_s_c,
                brt_pred_model_var_a_c, brt_pred_model_var_ra_c,
                k_index, shannon, abundance, rel_abundance, reach_type) |>
  dplyr::rename(Measured_Var_k_index = brt_pred_model_var_k_c,
                Measured_Var_shannon = brt_pred_model_var_s_c,
                Measured_Var_abundance = brt_pred_model_var_a_c,
                Measured_Var_rel_abundance = brt_pred_model_var_ra_c)

brt_2_long <- pivot_longer(brt_2, cols = c(Measured_Var_k_index,
                Measured_Var_shannon,
                Measured_Var_abundance,
                Measured_Var_rel_abundance), names_to = "names", values_to = "values")

brt_2_long <- brt_2_long |>
  mutate(names = sub("_", " ", names),
         names = sub("_", " ", names)) |>
  separate(names, into = c("origin", "predictor", "index"), sep = " ")


# prep 3. dataframe using training data --------------
brt_3 <- brt_train |>
  dplyr::select(pred_train_v_k, pred_train_v_s,
                pred_train_v_a, pred_train_v_ra,
                pred_train_wd_k, pred_train_wd_s, pred_train_wd_a,
                pred_train_wd_ra, pred_train_samp_k, pred_train_samp_s,
                pred_train_samp_a, pred_train_samp_ra, reach_type,
                k_index, shannon, abundance, rel_abundance) |>
  dplyr::rename(Train_Velocity_k_index = pred_train_v_k,
                Train_Velocity_shannon = pred_train_v_s,
                Train_Velocity_abundance = pred_train_v_a,
                Train_Velocity_rel_abundance = pred_train_v_ra,
                Train_WD_k_index = pred_train_wd_k,
                Train_WD_shannon = pred_train_wd_s,
                Train_WD_abundance = pred_train_wd_a,
                Train_WD_rel_abundance = pred_train_wd_ra,
                Train_Samp_k_index = pred_train_samp_k,
                Train_Samp_shannon = pred_train_samp_s,
                Train_Samp_abundance = pred_train_samp_a,
                Train_Samp_rel_abundance = pred_train_samp_ra)

brt_3_long <- pivot_longer(brt_3, cols = c(Train_Velocity_k_index,
                Train_Velocity_shannon,
                Train_Velocity_abundance,
                Train_Velocity_rel_abundance,
                Train_WD_k_index,
                Train_WD_shannon,
                Train_WD_abundance,
                Train_WD_rel_abundance,
                Train_Samp_k_index,
                Train_Samp_shannon,
                Train_Samp_abundance,
                Train_Samp_rel_abundance), names_to = "names", values_to = "values")

brt_3_long <- brt_3_long |>
  mutate(names = sub("_", " ", names),
         names = sub("_", " ", names)) |>
  separate(names, into = c("origin", "predictor", "index"), sep = " ")

# prep 4. dataframe using training data --------------
brt_4 <- brt_train_2 |>
  dplyr::select(pred_train_var_k, pred_train_var_s,
                pred_train_var_a, pred_train_var_ra, reach_type,
                k_index, shannon, abundance, rel_abundance) |>
  dplyr::rename(Train_Var_k_index = pred_train_var_k,
                Train_Var_shannon = pred_train_var_s,
                Train_Var_abundance = pred_train_var_a,
                Train_Var_rel_abundance = pred_train_var_ra)

brt_4_long <- pivot_longer(brt_4, cols = c(Train_Var_k_index,
                Train_Var_shannon,
                Train_Var_abundance,
                Train_Var_rel_abundance), names_to = "names", values_to = "values")

brt_4_long <- brt_4_long |>
  mutate(names = sub("_", " ", names),
         names = sub("_", " ", names)) |>
  separate(names, into = c("origin", "predictor", "index"), sep = " ")

# bind dataframes together for plots  -------------------------------
brt_long <- rbind(brt_1_long, brt_2_long, brt_3_long, brt_4_long)

brt_long <- brt_long |>
  mutate(predictor = gsub("WD", "WD + V", predictor),
         predictor = factor(predictor, levels = c("Var", "Samp", "WD + V", "Velocity")),
         origin = factor(origin, levels = c("Measured", "Raster", "Train")))


# Choose individiual indices to make plots ------------------------------
brt_k_index <- brt_long |>
  filter(index == "k_index")

brt_shannon <- brt_long |>
  filter(index == "shannon")

brt_abundance <- brt_long |>
  filter(index == "abundance")

brt_rel_abundance <- brt_long |>
  filter(index == "rel_abundance")
```

### Comparison 
```{r}
# Use a colorblind-friendly palette
color_palette <- brewer.pal(4, "RdYlBu")

# Plots for all Indices -------------------
brt_k_index_comp <- ggplot(brt_k_index, aes(x = k_index, y = values, col = origin)) +
  facet_wrap(~predictor, nrow = 1, ncol = 4) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(aes(color = origin), method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8) +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette) 


brt_shannon_comp <- ggplot(brt_shannon, aes(x = shannon, y = values, col = origin)) +
  facet_wrap(~predictor, nrow = 1, ncol = 4) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(aes(color = origin), method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8) +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette) 

brt_abundance_comp <- ggplot(brt_abundance, aes(x = abundance, y = values, col = origin)) +
  facet_wrap(~predictor, nrow = 1, ncol = 4) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(aes(color = origin), method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8) +
  theme_minimal() +
  ylim(0, 2000) +
  xlim(0, 2000) + 
  labs(
    x = "Abs. Abundance Observed",
    y = "Abs. Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette) 

brt_rel_abundance_comp <- ggplot(brt_rel_abundance, aes(x = rel_abundance, y = values, col = origin)) +
  facet_wrap(~predictor, nrow = 1, ncol = 4) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(aes(color = origin), method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8) +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Rel. Abundance Observed",
    y = "Rel. Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette) 


ggsave("Stat_Analysis/regr_plots/brt_k_index_comp.png", plot = brt_k_index_comp, width = 18, height = 5)
ggsave("Stat_Analysis/regr_plots/brt_shannon_comp.png", plot = brt_shannon_comp, width = 18, height = 5)
ggsave("Stat_Analysis/regr_plots/brt_abundance_comp.png", plot = brt_abundance_comp, width = 18, height = 5)
ggsave("Stat_Analysis/regr_plots/brt_rel_abundance_comp.png", plot = brt_rel_abundance_comp, width = 18, height = 5)
```

## RF 
### Make dataframe
```{r}
# order, obtain dataframe for measured, raster and training values ----------------------
# prep 1. dataframe using test data and raster extracted data --------------
rf_1 <- rf_test |>
  dplyr::select(-Reach_Untersuchungsstelle, -x, -y, -velocity, -wd_m) |>
  dplyr::rename(Measured_Velocity_k_index = rf_pred_model_v_k_c,
                Measured_Velocity_shannon = rf_pred_model_v_s_c,
                Measured_Velocity_abundance = rf_pred_model_v_a_c,
                Measured_Velocity_rel_abundance = rf_pred_model_v_ra_c,
                Measured_WD_k_index = rf_pred_model_wd_k_c,
                Measured_WD_shannon = rf_pred_model_wd_s_c,
                Measured_WD_abundance = rf_pred_model_wd_a_c,
                Measured_WD_rel_abundance = rf_pred_model_wd_ra_c,
                Measured_Samp_k_index = rf_pred_model_samp_k_c,
                Measured_Samp_shannon = rf_pred_model_samp_s_c,
                Measured_Samp_abundance = rf_pred_model_samp_a_c,
                Measured_Samp_rel_abundance = rf_pred_model_samp_ra_c,
                k_index = obs_k_index,
                shannon = obs_shannon,
                abundance = obs_abundance,
                rel_abundance = obs_rel_abundance,
                Raster_Velocity_k_index = k_index_v,
                Raster_Velocity_shannon = shannon_v,
                Raster_Velocity_abundance = abundance_v,
                Raster_Velocity_rel_abundance = rel_abundance_v,
                Raster_WD_k_index = k_index_wd,
                Raster_WD_shannon = shannon_wd,
                Raster_WD_abundance = abundance_wd,
                Raster_WD_rel_abundance = rel_abundance_wd,
                Raster_Var_k_index = k_index_var,
                Raster_Var_shannon = shannon_var,
                Raster_Var_abundance = abundance_var,
                Raster_Var_rel_abundance = rel_abundance_var)


rf_1_long <- pivot_longer(rf_1, cols = c(Measured_Velocity_k_index,
                Measured_Velocity_shannon,
                Measured_Velocity_abundance,
                Measured_Velocity_rel_abundance,
                Measured_WD_k_index,
                Measured_WD_shannon,
                Measured_WD_abundance,
                Measured_WD_rel_abundance,
                Measured_Samp_k_index,
                Measured_Samp_shannon,
                Measured_Samp_abundance,
                Measured_Samp_rel_abundance,
                Raster_Velocity_k_index,
                Raster_Velocity_shannon,
                Raster_Velocity_abundance,
                Raster_Velocity_rel_abundance,
                Raster_WD_k_index,
                Raster_WD_shannon,
                Raster_WD_abundance,
                Raster_WD_rel_abundance,
                Raster_Var_k_index,
                Raster_Var_shannon,
                Raster_Var_abundance,
                Raster_Var_rel_abundance), names_to = "names", values_to = "values")

rf_1_long <- rf_1_long |>
  mutate(names = sub("_", " ", names),
         names = sub("_", " ", names)) |>
  separate(names, into = c("origin", "predictor", "index"), sep = " ")


# prep 2. dataframe using test data from selected variables --------------
rf_2 <- rf_test_2 |>
  dplyr::select(rf_pred_model_var_k_c, rf_pred_model_var_s_c,
                rf_pred_model_var_a_c, rf_pred_model_var_ra_c,
                k_index, shannon, abundance, rel_abundance, reach_type) |>
  dplyr::rename(Measured_Var_k_index = rf_pred_model_var_k_c,
                Measured_Var_shannon = rf_pred_model_var_s_c,
                Measured_Var_abundance = rf_pred_model_var_a_c,
                Measured_Var_rel_abundance = rf_pred_model_var_ra_c)

rf_2_long <- pivot_longer(rf_2, cols = c(Measured_Var_k_index,
                Measured_Var_shannon,
                Measured_Var_abundance,
                Measured_Var_rel_abundance), names_to = "names", values_to = "values")

rf_2_long <- rf_2_long |>
  mutate(names = sub("_", " ", names),
         names = sub("_", " ", names)) |>
  separate(names, into = c("origin", "predictor", "index"), sep = " ")


# prep 3. dataframe using training data --------------
rf_3 <- rf_train |>
  dplyr::select(pred_train_v_k, pred_train_v_s,
                pred_train_v_a, pred_train_v_ra,
                pred_train_wd_k, pred_train_wd_s, pred_train_wd_a,
                pred_train_wd_ra, pred_train_samp_k, pred_train_samp_s,
                pred_train_samp_a, pred_train_samp_ra, reach_type,
                k_index, shannon, abundance, rel_abundance) |>
  dplyr::rename(Train_Velocity_k_index = pred_train_v_k,
                Train_Velocity_shannon = pred_train_v_s,
                Train_Velocity_abundance = pred_train_v_a,
                Train_Velocity_rel_abundance = pred_train_v_ra,
                Train_WD_k_index = pred_train_wd_k,
                Train_WD_shannon = pred_train_wd_s,
                Train_WD_abundance = pred_train_wd_a,
                Train_WD_rel_abundance = pred_train_wd_ra,
                Train_Samp_k_index = pred_train_samp_k,
                Train_Samp_shannon = pred_train_samp_s,
                Train_Samp_abundance = pred_train_samp_a,
                Train_Samp_rel_abundance = pred_train_samp_ra)

rf_3_long <- pivot_longer(rf_3, cols = c(Train_Velocity_k_index,
                Train_Velocity_shannon,
                Train_Velocity_abundance,
                Train_Velocity_rel_abundance,
                Train_WD_k_index,
                Train_WD_shannon,
                Train_WD_abundance,
                Train_WD_rel_abundance,
                Train_Samp_k_index,
                Train_Samp_shannon,
                Train_Samp_abundance,
                Train_Samp_rel_abundance), names_to = "names", values_to = "values")

rf_3_long <- rf_3_long |>
  mutate(names = sub("_", " ", names),
         names = sub("_", " ", names)) |>
  separate(names, into = c("origin", "predictor", "index"), sep = " ")

# prep 4. dataframe using training data --------------
rf_4 <- rf_train_2 |>
  dplyr::select(pred_train_var_k, pred_train_var_s,
                pred_train_var_a, pred_train_var_ra, reach_type,
                k_index, shannon, abundance, rel_abundance) |>
  dplyr::rename(Train_Var_k_index = pred_train_var_k,
                Train_Var_shannon = pred_train_var_s,
                Train_Var_abundance = pred_train_var_a,
                Train_Var_rel_abundance = pred_train_var_ra)

rf_4_long <- pivot_longer(rf_4, cols = c(Train_Var_k_index,
                Train_Var_shannon,
                Train_Var_abundance,
                Train_Var_rel_abundance), names_to = "names", values_to = "values")

rf_4_long <- rf_4_long |>
  mutate(names = sub("_", " ", names),
         names = sub("_", " ", names)) |>
  separate(names, into = c("origin", "predictor", "index"), sep = " ")

# bind dataframes together for plots  -------------------------------
rf_long <- rbind(rf_1_long, rf_2_long, rf_3_long, rf_4_long)

rf_long <- rf_long |>
  mutate(predictor = gsub("WD", "WD + V", predictor),
         predictor = factor(predictor, levels = c("Var", "Samp", "WD + V", "Velocity")))


# Choose individiual indices to make plots ------------------------------
rf_k_index <- rf_long |>
  filter(index == "k_index")

rf_shannon <- rf_long |>
  filter(index == "shannon")

rf_abundance <- rf_long |>
  filter(index == "abundance")

rf_rel_abundance <- rf_long |>
  filter(index == "rel_abundance")
```

### Comparison 
```{r}
# Use a colorblind-friendly palette
color_palette <- brewer.pal(4, "RdYlBu")

# Plots for all Indices -------------------
rf_k_index_comp <- ggplot(rf_k_index, aes(x = k_index, y = values, col = origin)) +
  facet_wrap(~predictor, nrow = 1, ncol = 4) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(aes(color = origin), method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8) +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette) 


rf_shannon_comp <- ggplot(rf_shannon, aes(x = shannon, y = values, col = origin)) +
  facet_wrap(~predictor, nrow = 1, ncol = 4) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(aes(color = origin), method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8) +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette) 

rf_abundance_comp <- ggplot(rf_abundance, aes(x = abundance, y = values, col = origin)) +
  facet_wrap(~predictor, nrow = 1, ncol = 4) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(aes(color = origin), method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8) +
  theme_minimal() +
  ylim(0, 2000) +
  xlim(0, 2000) + 
  labs(
    x = "Abs. Abundance Observed",
    y = "Abs. Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette) 

rf_rel_abundance_comp <- ggplot(rf_rel_abundance, aes(x = rel_abundance, y = values, col = origin)) +
  facet_wrap(~predictor, nrow = 1, ncol = 4) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(aes(color = origin), method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8) +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Rel. Abundance Observed",
    y = "Rel. Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette) 


ggsave("Stat_Analysis/regr_plots/rf_k_index_comp.png", plot = rf_k_index_comp, width = 18, height = 5)
ggsave("Stat_Analysis/regr_plots/rf_shannon_comp.png", plot = rf_shannon_comp, width = 18, height = 5)
ggsave("Stat_Analysis/regr_plots/rf_abundance_comp.png", plot = rf_abundance_comp, width = 18, height = 5)
ggsave("Stat_Analysis/regr_plots/rf_rel_abundance_comp.png", plot = rf_rel_abundance_comp, width = 18, height = 5)
```

### LM for best Model 
```{r}
rf_best <- rf_k_index |>
  dplyr::filter(predictor == "Var",
                index == "k_index", 
                origin == "Measured" |
                  origin == "Raster")

# LM Plot -------------------------
lm_reach <- ggplot(rf_best, aes(x = k_index, y = values, col = reach_type)) +
  geom_point(size = 2.0) +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette)

# save the plots 
ggsave("Stat_Analysis/plots/lm_reach_type.png", plot = lm_reach, width = 8, height = 5)
```



