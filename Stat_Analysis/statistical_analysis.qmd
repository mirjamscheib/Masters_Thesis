---
title: "Habitat_Model_VZH"
format: html
---

# Load packages 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("raster")
pkgCheck("spsurvey")
pkgCheck("terra")
pkgCheck("raster")
pkgCheck("ggplot2")
pkgCheck("tibble")
pkgCheck("readr")
pkgCheck("dplyr")
pkgCheck("tidyr")
pkgCheck("scales")
```

# Load Data 
```{r}
# change biogeo regions and geology into integers for ML modelling
test_sections <- c("L2" = "Hydropeaking", "M1" = "Hydropeaking", "S1" = "Hydropeaking", "S2" = "Hydropeaking", "TH4" = "Natural/near-natural", "GL1" = "Natural/near-natural", "GL2" = "Natural/near-natural", "VR3" = "Hydropeaking")

training_sections <- c("L2" = "Hydropeaking", "L1" = "Hydropeaking", "LR" = "Residual flow",
                       "M1" = "Hydropeaking", "M5" = "Hydropeaking", "M7" = "Hydropeaking", "MR" = "Residual flow", 
                       "GL5" = "Natural/near-natural", 
                       "P1" = "Hydropeaking", "PR" = "Residual flow", 
                       "SA1" = "Hydropeaking", "SA2" = "Hydropeaking", "SA6" = "Hydropeaking", "SAR" = "Residual flow",
                       "SE2" = "Natural/near-natural", "SE3" = "Natural/near-natural",
                       "S1" = "Hydropeaking", "S2" = "Hydropeaking", "SR" = "Residual flow",
                       "S5" = "Hydropeaking", "TH3" = "Natural/near-natural", "TH4" = "Natural/near-natural", 
                       "T1" = "Hydropeaking", "T2" = "Hydropeaking",
                       "GL1" = "Natural/near-natural", "GL2" = "Natural/near-natural", 
                       "VE2" = "Natural/near-natural", "VE4" = "Natural/near-natural",
                       "VR1" = "Hydropeaking", "VR3" = "Hydropeaking", "VR6" = "Residual flow")

# load data 
brt_test <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_test_brt.csv") |>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(test_sections), 
                                   test_sections[Reach_Untersuchungsstelle], NA))

brt_test_2 <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_test_2_brt.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(test_sections), 
                                   test_sections[Reach_Untersuchungsstelle], NA))

brt_train <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_train_brt.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(training_sections), 
                                   training_sections[Reach_Untersuchungsstelle], NA))

brt_train_2 <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_train_2_brt.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(training_sections), 
                                   training_sections[Reach_Untersuchungsstelle], NA))

### RF ### 
rf_test <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_test_rf.csv") |>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(test_sections), 
                                   test_sections[Reach_Untersuchungsstelle], NA))

rf_test_2 <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_test_2_rf.csv") |>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(test_sections), 
                                   test_sections[Reach_Untersuchungsstelle], NA))

rf_train <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_train_rf.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(training_sections), 
                                   training_sections[Reach_Untersuchungsstelle], NA))

rf_train_2 <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_train_2_rf.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(training_sections), 
                                   training_sections[Reach_Untersuchungsstelle], NA))
```


# Mean per Study Area
```{r}
# calculate mean simulated (from measured and raster data) and observed k-index values from the var RF model for each study area
rf_var <- rf_test |>
  dplyr::select(k_index_var, Reach_Untersuchungsstelle, obs_k_index) |>
  group_by(Reach_Untersuchungsstelle) |>
  dplyr::summarise(mean_rast = mean(k_index_var),
            mean_obs = mean(obs_k_index))


rf_var_2 <- rf_test_2 |>
  dplyr::select(rf_pred_model_var_k_c, Reach_Untersuchungsstelle) |>
  group_by(Reach_Untersuchungsstelle) |>
  dplyr::summarise(mean_meas = mean(rf_pred_model_var_k_c)) |>
  full_join(rf_var, by = "Reach_Untersuchungsstelle") 

rf_var_boxplot <- pivot_longer(rf_test, cols = c("obs_k_index", "k_index_var"), names_to = "name", values_to = "values")

ggplot(rf_var_boxplot, aes(x = Reach_Untersuchungsstelle, y = values, fill = name)) +
  geom_boxplot()

```

# Regr. Analysis
## BRT
### Test Measured
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_brt_k_measured <- lm(rf_pred_model_v_k_c ~ obs_k_index, data = rf_test)
sum_v_brt_k_measured <- summary(regr_v_brt_k_measured)
p_v_brt_k_measured <- sum_v_brt_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_v_brt_k_measured <- sum_v_brt_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_v_brt_s_measured <- lm(rf_pred_model_v_s_c ~ obs_shannon, data = rf_test)
sum_v_brt_s_measured <- summary(regr_v_brt_s_measured)
p_v_brt_s_measured <- sum_v_brt_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_v_brt_s_measured <- sum_v_brt_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_v_brt_a_measured <- lm(rf_pred_model_v_a_c ~ obs_abundance, data = rf_test)
sum_v_brt_a_measured <- summary(regr_v_brt_a_measured)
p_v_brt_a_measured <- sum_v_brt_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_v_brt_a_measured <- sum_v_brt_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_v_brt_ra_measured <- lm(rf_pred_model_v_ra_c ~ obs_rel_abundance, data = rf_test)
sum_v_brt_ra_measured <- summary(regr_v_brt_ra_measured)
p_v_brt_ra_measured <- sum_v_brt_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_v_brt_ra_measured <- sum_v_brt_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_brt_k_measured <- lm(rf_pred_model_wd_k_c ~ obs_k_index, data = rf_test)
sum_wd_brt_k_measured <- summary(regr_wd_brt_k_measured)
p_wd_brt_k_measured <- sum_wd_brt_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_wd_brt_k_measured <- sum_wd_brt_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_wd_brt_s_measured <- lm(rf_pred_model_wd_s_c ~ obs_shannon, data = rf_test)
sum_wd_brt_s_measured <- summary(regr_wd_brt_s_measured)
p_wd_brt_s_measured <- sum_wd_brt_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_wd_brt_s_measured <- sum_wd_brt_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_wd_brt_a_measured <- lm(rf_pred_model_wd_a_c ~ obs_abundance, data = rf_test)
sum_wd_brt_a_measured <- summary(regr_wd_brt_a_measured)
p_wd_brt_a_measured <- sum_wd_brt_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_wd_brt_a_measured <- sum_wd_brt_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_wd_brt_ra_measured <- lm(rf_pred_model_wd_ra_c ~ obs_rel_abundance, data = rf_test)
sum_wd_brt_ra_measured <- summary(regr_wd_brt_ra_measured)
p_wd_brt_ra_measured <- sum_wd_brt_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_wd_brt_ra_measured <- sum_wd_brt_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_brt_k_measured <- lm(rf_pred_model_samp_k_c ~ obs_k_index, data = rf_test)
sum_samp_brt_k_measured <- summary(regr_samp_brt_k_measured)
p_samp_brt_k_measured <- sum_samp_brt_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_samp_brt_k_measured <- sum_samp_brt_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_samp_brt_s_measured <- lm(rf_pred_model_samp_s_c ~ obs_shannon, data = rf_test)
sum_samp_brt_s_measured <- summary(regr_samp_brt_s_measured)
p_samp_brt_s_measured <- sum_samp_brt_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_samp_brt_s_measured <- sum_samp_brt_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_samp_brt_a_measured <- lm(rf_pred_model_samp_a_c ~ obs_abundance, data = rf_test)
sum_samp_brt_a_measured <- summary(regr_samp_brt_a_measured)
p_samp_brt_a_measured <- sum_samp_brt_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_samp_brt_a_measured <- sum_samp_brt_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_samp_brt_ra_measured <- lm(rf_pred_model_samp_ra_c ~ obs_rel_abundance, data = rf_test)
sum_samp_brt_ra_measured <- summary(regr_samp_brt_ra_measured)
p_samp_brt_ra_measured <- sum_samp_brt_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_samp_brt_ra_measured <- sum_samp_brt_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_brt_k_measured <- lm(rf_pred_model_sec_k_c ~ k_index, data = rf_test_2)
sum_sec_brt_k_measured <- summary(regr_sec_brt_k_measured)
p_sec_brt_k_measured <- sum_sec_brt_k_measured$coefficients["k_index", "Pr(>|t|)"]
s_sec_brt_k_measured <- sum_sec_brt_k_measured$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_sec_brt_s_measured <- lm(rf_pred_model_sec_s_c ~ shannon, data = rf_test_2)
sum_sec_brt_s_measured <- summary(regr_sec_brt_s_measured)
p_sec_brt_s_measured <- sum_sec_brt_s_measured$coefficients["shannon", "Pr(>|t|)"]
s_sec_brt_s_measured <- sum_sec_brt_s_measured$coefficients["shannon", "Estimate"]

# with abundance as response
regr_sec_brt_a_measured <- lm(rf_pred_model_sec_a_c ~ abundance, data = rf_test_2)
sum_sec_brt_a_measured <- summary(regr_sec_brt_a_measured)
p_sec_brt_a_measured <- sum_sec_brt_a_measured$coefficients["abundance", "Pr(>|t|)"]
s_sec_brt_a_measured <- sum_sec_brt_a_measured$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_sec_brt_ra_measured <- lm(rf_pred_model_sec_ra_c ~ rel_abundance, data = rf_test_2)
sum_sec_brt_ra_measured <- summary(regr_sec_brt_ra_measured)
p_sec_brt_ra_measured <- sum_sec_brt_ra_measured$coefficients["rel_abundance", "Pr(>|t|)"]
s_sec_brt_ra_measured <- sum_sec_brt_ra_measured$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_brt_k_measured <- lm(rf_pred_model_var_k_c ~ k_index, data = rf_test_2)
sum_var_brt_k_measured <- summary(regr_var_brt_k_measured)
p_var_brt_k_measured <- sum_var_brt_k_measured$coefficients["k_index", "Pr(>|t|)"]
s_var_brt_k_measured <- sum_var_brt_k_measured$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_var_brt_s_measured <- lm(rf_pred_model_var_s_c ~ shannon, data = rf_test_2)
sum_var_brt_s_measured <- summary(regr_var_brt_s_measured)
p_var_brt_s_measured <- sum_var_brt_s_measured$coefficients["shannon", "Pr(>|t|)"]
s_var_brt_s_measured <- sum_var_brt_s_measured$coefficients["shannon", "Estimate"]

# with abundance as response
regr_var_brt_a_measured <- lm(rf_pred_model_var_a_c ~ abundance, data = rf_test_2)
sum_var_brt_a_measured <- summary(regr_var_brt_a_measured)
p_var_brt_a_measured <- sum_var_brt_a_measured$coefficients["abundance", "Pr(>|t|)"]
s_var_brt_a_measured <- sum_var_brt_a_measured$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_var_brt_ra_measured <- lm(rf_pred_model_var_ra_c ~ rel_abundance, data = rf_test_2)
sum_var_brt_ra_measured <- summary(regr_var_brt_ra_measured)
p_var_brt_ra_measured <- sum_var_brt_ra_measured$coefficients["rel_abundance", "Pr(>|t|)"]
s_var_brt_ra_measured <- sum_var_brt_ra_measured$coefficients["rel_abundance", "Estimate"]
```
                                          
### Test Raster
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_brt_k_rast <- lm(k_index_v ~ obs_k_index, data = brt_test)
sum_v_brt_k_rast <- summary(regr_v_brt_k_rast)
p_v_brt_k_rast <- sum_v_brt_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_v_brt_k_rast <- sum_v_brt_k_rast$coefficients["obs_k_index", "Estimate"]
r_v_brt_k_rast <- summary(lm(k_index_v ~ obs_k_index, data = brt_test))$adj.r.squared

# with shannon index as response
regr_v_brt_s_rast <- lm(shannon_v ~ obs_shannon, data = brt_test)
sum_v_brt_s_rast <- summary(regr_v_brt_s_rast)
p_v_brt_s_rast <- sum_v_brt_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_v_brt_s_rast <- sum_v_brt_s_rast$coefficients["obs_shannon", "Estimate"]
r_v_brt_s_rast <- summary(lm(shannon_v ~ obs_shannon, data = brt_test))$adj.r.squared

# with abundance as response
regr_v_brt_a_rast <- lm(abundance_v ~ obs_abundance, data = brt_test)
sum_v_brt_a_rast <- summary(regr_v_brt_a_rast)
p_v_brt_a_rast <- sum_v_brt_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_v_brt_a_rast <- sum_v_brt_a_rast$coefficients["obs_abundance", "Estimate"]
r_v_brt_a_rast <- summary(lm(abundance_v ~ obs_abundance, data = brt_test))$adj.r.squared

# with rel_abundance as response
regr_v_brt_ra_rast <- lm(rel_abundance_v ~ obs_rel_abundance, data = brt_test)
sum_v_brt_ra_rast <- summary(regr_v_brt_ra_rast)
p_v_brt_ra_rast <- sum_v_brt_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_v_brt_ra_rast <- sum_v_brt_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_v_brt_ra_rast <- summary(lm(rel_abundance_v ~ obs_rel_abundance, data = brt_test))$adj.r.squared

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_brt_k_rast <- lm(k_index_wd ~ obs_k_index, data = brt_test)
sum_wd_brt_k_rast <- summary(regr_wd_brt_k_rast)
p_wd_brt_k_rast <- sum_wd_brt_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_wd_brt_k_rast <- sum_wd_brt_k_rast$coefficients["obs_k_index", "Estimate"]
r_wd_brt_k_rast <- summary(lm(k_index_wd ~ obs_k_index, data = brt_test))$adj.r.squared

# with shannon index as response
regr_wd_brt_s_rast <- lm(shannon_wd ~ obs_shannon, data = brt_test)
sum_wd_brt_s_rast <- summary(regr_wd_brt_s_rast)
p_wd_brt_s_rast <- sum_wd_brt_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_wd_brt_s_rast <- sum_wd_brt_s_rast$coefficients["obs_shannon", "Estimate"]
r_wd_brt_s_rast <- summary(lm(shannon_wd ~ obs_shannon, data = brt_test))$adj.r.squared

# with abundance as response
regr_wd_brt_a_rast <- lm(abundance_wd ~ obs_abundance, data = brt_test)
sum_wd_brt_a_rast <- summary(regr_wd_brt_a_rast)
p_wd_brt_a_rast <- sum_wd_brt_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_wd_brt_a_rast <- sum_wd_brt_a_rast$coefficients["obs_abundance", "Estimate"]
r_wd_brt_a_rast <- summary(lm(abundance_wd ~ obs_abundance, data = brt_test))$adj.r.squared

# with rel_abundance as response
regr_wd_brt_ra_rast <- lm(rel_abundance_wd ~ obs_rel_abundance, data = brt_test)
sum_wd_brt_ra_rast <- summary(regr_wd_brt_ra_rast)
p_wd_brt_ra_rast <- sum_wd_brt_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_wd_brt_ra_rast <- sum_wd_brt_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_wd_brt_ra_rast <- summary(lm(rel_abundance_wd ~ obs_rel_abundance, data = brt_test))$adj.r.squared

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_brt_k_rast <- lm(k_index_var ~ obs_k_index, data = brt_test)
sum_var_brt_k_rast <- summary(regr_var_brt_k_rast)
p_var_brt_k_rast <- sum_var_brt_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_var_brt_k_rast <- sum_var_brt_k_rast$coefficients["obs_k_index", "Estimate"]
r_var_brt_k_rast <- summary(lm(k_index_var ~ obs_k_index, data = brt_test))$adj.r.squared

# with shannon index as response
regr_var_brt_s_rast <- lm(shannon_var ~ obs_shannon, data = brt_test)
sum_var_brt_s_rast <- summary(regr_wd_brt_s_rast)
p_var_brt_s_rast <- sum_var_brt_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_var_brt_s_rast <- sum_var_brt_s_rast$coefficients["obs_shannon", "Estimate"]
r_var_brt_s_rast <- summary(lm(shannon_var ~ obs_shannon, data = brt_test))$adj.r.squared

# with abundance as response
regr_var_brt_a_rast <- lm(abundance_var ~ obs_abundance, data = brt_test)
sum_var_brt_a_rast <- summary(regr_var_brt_a_rast)
p_var_brt_a_rast <- sum_var_brt_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_var_brt_a_rast <- sum_var_brt_a_rast$coefficients["obs_abundance", "Estimate"]
r_var_brt_a_rast <- summary(lm(abundance_var ~ obs_abundance, data = brt_test))$adj.r.squared

# with rel_abundance as response
regr_var_brt_ra_rast <- lm(rel_abundance_var ~ obs_rel_abundance, data = brt_test)
sum_var_brt_ra_rast <- summary(regr_var_brt_ra_rast)
p_var_brt_ra_rast <- sum_var_brt_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_var_brt_ra_rast <- sum_var_brt_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_var_brt_ra_rast <- summary(lm(rel_abundance_var ~ obs_rel_abundance, data = brt_test))$adj.r.squared
```
                              
### Training Sets
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_brt_k_train <- lm(pred_train_v_k ~ k_index, data = brt_train)
sum_v_brt_k_train <- summary(regr_v_brt_k_train)
p_v_brt_k_train <- sum_v_brt_k_train$coefficients["k_index", "Pr(>|t|)"]
s_v_brt_k_train <- sum_v_brt_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_v_brt_s_train <- lm(pred_train_v_s ~ shannon, data = brt_train)
sum_v_brt_s_train <- summary(regr_v_brt_s_train)
p_v_brt_s_train <- sum_v_brt_s_train$coefficients["shannon", "Pr(>|t|)"]
s_v_brt_s_train <- sum_v_brt_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_v_brt_a_train <- lm(pred_train_v_a ~ abundance, data = brt_train)
sum_v_brt_a_train <- summary(regr_v_brt_a_train)
p_v_brt_a_train <- sum_v_brt_a_train$coefficients["abundance", "Pr(>|t|)"]
s_v_brt_a_train <- sum_v_brt_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_v_brt_ra_train <- lm(pred_train_v_ra ~ rel_abundance, data = brt_train)
sum_v_brt_ra_train <- summary(regr_v_brt_ra_train)
p_v_brt_ra_train <- sum_v_brt_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_v_brt_ra_train <- sum_v_brt_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_brt_k_train <- lm(pred_train_wd_k ~ k_index, data = brt_train)
sum_wd_brt_k_train <- summary(regr_wd_brt_k_train)
p_wd_brt_k_train <- sum_wd_brt_k_train$coefficients["k_index", "Pr(>|t|)"]
s_wd_brt_k_train <- sum_wd_brt_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_wd_brt_s_train <- lm(pred_train_wd_s ~ shannon, data = brt_train)
sum_wd_brt_s_train <- summary(regr_wd_brt_s_train)
p_wd_brt_s_train <- sum_wd_brt_s_train$coefficients["shannon", "Pr(>|t|)"]
s_wd_brt_s_train <- sum_wd_brt_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_wd_brt_a_train <- lm(pred_train_wd_a ~ abundance, data = brt_train)
sum_wd_brt_a_train <- summary(regr_wd_brt_a_train)
p_wd_brt_a_train <- sum_wd_brt_a_train$coefficients["abundance", "Pr(>|t|)"]
s_wd_brt_a_train <- sum_wd_brt_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_wd_brt_ra_train <- lm(pred_train_wd_ra ~ rel_abundance, data = brt_train)
sum_wd_brt_ra_train <- summary(regr_wd_brt_ra_train)
p_wd_brt_ra_train <- sum_wd_brt_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_wd_brt_ra_train <- sum_wd_brt_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_brt_k_train <- lm(pred_train_samp_k ~ k_index, data = brt_train)
sum_samp_brt_k_train <- summary(regr_samp_brt_k_train)
p_samp_brt_k_train <- sum_samp_brt_k_train$coefficients["k_index", "Pr(>|t|)"]
s_samp_brt_k_train <- sum_samp_brt_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_samp_brt_s_train <- lm(pred_train_samp_s ~ shannon, data = brt_train)
sum_samp_brt_s_train <- summary(regr_samp_brt_s_train)
p_samp_brt_s_train <- sum_samp_brt_s_train$coefficients["shannon", "Pr(>|t|)"]
s_samp_brt_s_train <- sum_samp_brt_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_samp_brt_a_train <- lm(pred_train_samp_a ~ abundance, data = brt_train)
sum_samp_brt_a_train <- summary(regr_samp_brt_a_train)
p_samp_brt_a_train <- sum_samp_brt_a_train$coefficients["abundance", "Pr(>|t|)"]
s_samp_brt_a_train <- sum_samp_brt_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_samp_brt_ra_train <- lm(pred_train_samp_ra ~ rel_abundance, data = brt_train)
sum_samp_brt_ra_train <- summary(regr_samp_brt_ra_train)
p_samp_brt_ra_train <- sum_samp_brt_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_samp_brt_ra_train <- sum_samp_brt_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_brt_k_train <- lm(pred_train_sec_k ~ k_index, data = brt_train_2)
sum_sec_brt_k_train <- summary(regr_sec_brt_k_train)
p_sec_brt_k_train <- sum_sec_brt_k_train$coefficients["k_index", "Pr(>|t|)"]
s_sec_brt_k_train <- sum_sec_brt_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_sec_brt_s_train <- lm(pred_train_sec_s ~ shannon, data = brt_train_2)
sum_sec_brt_s_train <- summary(regr_sec_brt_s_train)
p_sec_brt_s_train <- sum_sec_brt_s_train$coefficients["shannon", "Pr(>|t|)"]
s_sec_brt_s_train <- sum_sec_brt_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_sec_brt_a_train <- lm(pred_train_sec_a ~ abundance, data = brt_train_2)
sum_sec_brt_a_train <- summary(regr_sec_brt_a_train)
p_sec_brt_a_train <- sum_sec_brt_a_train$coefficients["abundance", "Pr(>|t|)"]
s_sec_brt_a_train <- sum_sec_brt_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_sec_brt_ra_train <- lm(pred_train_sec_ra ~ rel_abundance, data = brt_train_2)
sum_sec_brt_ra_train <- summary(regr_sec_brt_ra_train)
p_sec_brt_ra_train <- sum_sec_brt_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_sec_brt_ra_train <- sum_sec_brt_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_brt_k_train <- lm(pred_train_var_k ~ k_index, data = brt_train_2)
sum_var_brt_k_train <- summary(regr_var_brt_k_train)
p_var_brt_k_train <- sum_var_brt_k_train$coefficients["k_index", "Pr(>|t|)"]
s_var_brt_k_train <- sum_var_brt_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_var_brt_s_train <- lm(pred_train_var_s ~ shannon, data = brt_train_2)
sum_var_brt_s_train <- summary(regr_var_brt_s_train)
p_var_brt_s_train <- sum_var_brt_s_train$coefficients["shannon", "Pr(>|t|)"]
s_var_brt_s_train <- sum_var_brt_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_var_brt_a_train <- lm(pred_train_var_a ~ abundance, data = brt_train_2)
sum_var_brt_a_train <- summary(regr_var_brt_a_train)
p_var_brt_a_train <- sum_var_brt_a_train$coefficients["abundance", "Pr(>|t|)"]
s_var_brt_a_train <- sum_var_brt_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_var_brt_ra_train <- lm(pred_train_var_ra ~ rel_abundance, data = brt_train_2)
sum_var_brt_ra_train <- summary(regr_var_brt_ra_train)
p_var_brt_ra_train <- sum_var_brt_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_var_brt_ra_train <- sum_var_brt_ra_train$coefficients["rel_abundance", "Estimate"]
```
                              
## RF
### Test Measured 
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_rf_rf_k_measured <- lm(rf_pred_model_v_k_c ~ obs_k_index, data = rf_test)
sum_v_rf_k_measured <- summary(regr_v_rf_rf_k_measured)
p_v_rf_k_measured <- sum_v_rf_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_v_rf_k_measured <- sum_v_rf_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_v_rf_s_measured <- lm(rf_pred_model_v_s_c ~ obs_shannon, data = rf_test)
sum_v_rf_s_measured <- summary(regr_v_rf_s_measured)
p_v_rf_s_measured <- sum_v_rf_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_v_rf_s_measured <- sum_v_rf_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_v_rf_a_measured <- lm(rf_pred_model_v_a_c ~ obs_abundance, data = rf_test)
sum_v_rf_a_measured <- summary(regr_v_rf_a_measured)
p_v_rf_a_measured <- sum_v_rf_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_v_rf_a_measured <- sum_v_rf_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_v_rf_ra_measured <- lm(rf_pred_model_v_ra_c ~ obs_rel_abundance, data = rf_test)
sum_v_rf_ra_measured <- summary(regr_v_rf_ra_measured)
p_v_rf_ra_measured <- sum_v_rf_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_v_rf_ra_measured <- sum_v_rf_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_rf_k_measured <- lm(rf_pred_model_wd_k_c ~ obs_k_index, data = rf_test)
sum_wd_rf_k_measured <- summary(regr_wd_rf_k_measured)
p_wd_rf_k_measured <- sum_wd_rf_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_wd_rf_k_measured <- sum_wd_rf_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_wd_rf_s_measured <- lm(rf_pred_model_wd_s_c ~ obs_shannon, data = rf_test)
sum_wd_rf_s_measured <- summary(regr_wd_rf_s_measured)
p_wd_rf_s_measured <- sum_wd_rf_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_wd_rf_s_measured <- sum_wd_rf_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_wd_rf_a_measured <- lm(rf_pred_model_wd_a_c ~ obs_abundance, data = rf_test)
sum_wd_rf_a_measured <- summary(regr_wd_rf_a_measured)
p_wd_rf_a_measured <- sum_wd_rf_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_wd_rf_a_measured <- sum_wd_rf_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_wd_rf_ra_measured <- lm(rf_pred_model_wd_ra_c ~ obs_rel_abundance, data = rf_test)
sum_wd_rf_ra_measured <- summary(regr_wd_rf_ra_measured)
p_wd_rf_ra_measured <- sum_wd_rf_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_wd_rf_ra_measured <- sum_wd_rf_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_rf_k_measured <- lm(rf_pred_model_samp_k_c ~ obs_k_index, data = rf_test)
sum_samp_rf_k_measured <- summary(regr_samp_rf_k_measured)
p_samp_rf_k_measured <- sum_samp_rf_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_samp_rf_k_measured <- sum_samp_rf_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_samp_rf_s_measured <- lm(rf_pred_model_samp_s_c ~ obs_shannon, data = rf_test)
sum_samp_rf_s_measured <- summary(regr_samp_rf_s_measured)
p_samp_rf_s_measured <- sum_samp_rf_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_samp_rf_s_measured <- sum_samp_rf_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_samp_rf_a_measured <- lm(rf_pred_model_samp_a_c ~ obs_abundance, data = rf_test)
sum_samp_rf_a_measured <- summary(regr_samp_rf_a_measured)
p_samp_rf_a_measured <- sum_samp_rf_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_samp_rf_a_measured <- sum_samp_rf_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_samp_rf_ra_measured <- lm(rf_pred_model_samp_ra_c ~ obs_rel_abundance, data = rf_test)
sum_samp_rf_ra_measured <- summary(regr_samp_rf_ra_measured)
p_samp_rf_ra_measured <- sum_samp_rf_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_samp_rf_ra_measured <- sum_samp_rf_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_rf_k_measured <- lm(rf_pred_model_sec_k_c ~ k_index, data = rf_test_2)
sum_sec_rf_k_measured <- summary(regr_sec_rf_k_measured)
p_sec_rf_k_measured <- sum_sec_rf_k_measured$coefficients["k_index", "Pr(>|t|)"]
s_sec_rf_k_measured <- sum_sec_rf_k_measured$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_sec_rf_s_measured <- lm(rf_pred_model_sec_s_c ~ shannon, data = rf_test_2)
sum_sec_rf_s_measured <- summary(regr_sec_rf_s_measured)
p_sec_rf_s_measured <- sum_sec_rf_s_measured$coefficients["shannon", "Pr(>|t|)"]
s_sec_rf_s_measured <- sum_sec_rf_s_measured$coefficients["shannon", "Estimate"]

# with abundance as response
regr_sec_rf_a_measured <- lm(rf_pred_model_sec_a_c ~ abundance, data = rf_test_2)
sum_sec_rf_a_measured <- summary(regr_sec_rf_a_measured)
p_sec_rf_a_measured <- sum_sec_rf_a_measured$coefficients["abundance", "Pr(>|t|)"]
s_sec_rf_a_measured <- sum_sec_rf_a_measured$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_sec_rf_ra_measured <- lm(rf_pred_model_sec_ra_c ~ rel_abundance, data = rf_test_2)
sum_sec_rf_ra_measured <- summary(regr_sec_rf_ra_measured)
p_sec_rf_ra_measured <- sum_sec_rf_ra_measured$coefficients["rel_abundance", "Pr(>|t|)"]
s_sec_rf_ra_measured <- sum_sec_rf_ra_measured$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_rf_k_measured <- lm(rf_pred_model_var_k_c ~ k_index, data = rf_test_2)
sum_var_rf_k_measured <- summary(regr_var_rf_k_measured)
p_var_rf_k_measured <- sum_var_rf_k_measured$coefficients["k_index", "Pr(>|t|)"]
s_var_rf_k_measured <- sum_var_rf_k_measured$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_var_rf_s_measured <- lm(rf_pred_model_var_s_c ~ shannon, data = rf_test_2)
sum_var_rf_s_measured <- summary(regr_var_rf_s_measured)
p_var_rf_s_measured <- sum_var_rf_s_measured$coefficients["shannon", "Pr(>|t|)"]
s_var_rf_s_measured <- sum_var_rf_s_measured$coefficients["shannon", "Estimate"]

# with abundance as response
regr_var_rf_a_measured <- lm(rf_pred_model_var_a_c ~ abundance, data = rf_test_2)
sum_var_rf_a_measured <- summary(regr_var_rf_a_measured)
p_var_rf_a_measured <- sum_var_rf_a_measured$coefficients["abundance", "Pr(>|t|)"]
s_var_rf_a_measured <- sum_var_rf_a_measured$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_var_rf_ra_measured <- lm(rf_pred_model_var_ra_c ~ rel_abundance, data = rf_test_2)
sum_var_rf_ra_measured <- summary(regr_var_rf_ra_measured)
p_var_rf_ra_measured <- sum_var_rf_ra_measured$coefficients["rel_abundance", "Pr(>|t|)"]
s_var_rf_ra_measured <- sum_var_rf_ra_measured$coefficients["rel_abundance", "Estimate"]
```

### Test Raster
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_rf_k_rast <- lm(k_index_v ~ obs_k_index, data = rf_test)
sum_v_rf_k_rast <- summary(regr_v_rf_k_rast)
p_v_rf_k_rast <- sum_v_rf_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_v_rf_k_rast <- sum_v_rf_k_rast$coefficients["obs_k_index", "Estimate"]
r_v_rf_k_rast <- summary(lm(k_index_v ~ obs_k_index, data = rf_test))$adj.r.squared

# with shannon index as response
regr_v_rf_s_rast <- lm(shannon_v ~ obs_shannon, data = rf_test)
sum_v_rf_s_rast <- summary(regr_v_rf_s_rast)
p_v_rf_s_rast <- sum_v_rf_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_v_rf_s_rast <- sum_v_rf_s_rast$coefficients["obs_shannon", "Estimate"]
r_v_rf_s_rast <- summary(lm(shannon_v ~ obs_shannon, data = rf_test))$adj.r.squared

# with abundance as response
regr_v_rf_a_rast <- lm(abundance_v ~ obs_abundance, data = rf_test)
sum_v_rf_a_rast <- summary(regr_v_rf_a_rast)
p_v_rf_a_rast <- sum_v_rf_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_v_rf_a_rast <- sum_v_rf_a_rast$coefficients["obs_abundance", "Estimate"]
r_v_rf_a_rast <- summary(lm(abundance_v ~ obs_abundance, data = rf_test))$adj.r.squared

# with rel_abundance as response
regr_v_rf_ra_rast <- lm(rel_abundance_v ~ obs_rel_abundance, data = rf_test)
sum_v_rf_ra_rast <- summary(regr_v_rf_ra_rast)
p_v_rf_ra_rast <- sum_v_rf_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_v_rf_ra_rast <- sum_v_rf_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_v_rf_ra_rast <- summary(lm(rel_abundance_v ~ obs_rel_abundance, data = rf_test))$adj.r.squared

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_rf_k_rast <- lm(k_index_wd ~ obs_k_index, data = rf_test)
sum_wd_rf_k_rast <- summary(regr_wd_rf_k_rast)
p_wd_rf_k_rast <- sum_wd_rf_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_wd_rf_k_rast <- sum_wd_rf_k_rast$coefficients["obs_k_index", "Estimate"]
r_wd_rf_k_rast <- summary(lm(k_index_wd ~ obs_k_index, data = rf_test))$adj.r.squared

# with shannon index as response
regr_wd_rf_s_rast <- lm(shannon_wd ~ obs_shannon, data = rf_test)
sum_wd_rf_s_rast <- summary(regr_wd_rf_s_rast)
p_wd_rf_s_rast <- sum_wd_rf_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_wd_rf_s_rast <- sum_wd_rf_s_rast$coefficients["obs_shannon", "Estimate"]
r_wd_rf_s_rast <- summary(lm(shannon_wd ~ obs_shannon, data = rf_test))$adj.r.squared

# with abundance as response
regr_wd_rf_a_rast <- lm(abundance_wd ~ obs_abundance, data = rf_test)
sum_wd_rf_a_rast <- summary(regr_wd_rf_a_rast)
p_wd_rf_a_rast <- sum_wd_rf_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_wd_rf_a_rast <- sum_wd_rf_a_rast$coefficients["obs_abundance", "Estimate"]
r_wd_rf_a_rast <- summary(lm(abundance_wd ~ obs_abundance, data = rf_test))$adj.r.squared

# with rel_abundance as response
regr_wd_rf_ra_rast <- lm(rel_abundance_wd ~ obs_rel_abundance, data = rf_test)
sum_wd_rf_ra_rast <- summary(regr_wd_rf_ra_rast)
p_wd_rf_ra_rast <- sum_wd_rf_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_wd_rf_ra_rast <- sum_wd_rf_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_wd_rf_ra_rast <- summary(lm(rel_abundance_wd ~ obs_rel_abundance, data = rf_test))$adj.r.squared

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_rf_k_rast <- lm(k_index_var ~ obs_k_index, data = rf_test)
sum_var_rf_k_rast <- summary(regr_var_rf_k_rast)
p_var_rf_k_rast <- sum_var_rf_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_var_rf_k_rast <- sum_var_rf_k_rast$coefficients["obs_k_index", "Estimate"]
r_var_rf_k_rast <- summary(lm(k_index_var ~ obs_k_index, data = rf_test))$adj.r.squared

# with shannon index as response
regr_var_rf_s_rast <- lm(shannon_var ~ obs_shannon, data = rf_test)
sum_var_rf_s_rast <- summary(regr_wd_rf_s_rast)
p_var_rf_s_rast <- sum_var_rf_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_var_rf_s_rast <- sum_var_rf_s_rast$coefficients["obs_shannon", "Estimate"]
r_var_rf_s_rast <- summary(lm(shannon_var ~ obs_shannon, data = rf_test))$adj.r.squared

# with abundance as response
regr_var_rf_a_rast <- lm(abundance_var ~ obs_abundance, data = rf_test)
sum_var_rf_a_rast <- summary(regr_var_rf_a_rast)
p_var_rf_a_rast <- sum_var_rf_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_var_rf_a_rast <- sum_var_rf_a_rast$coefficients["obs_abundance", "Estimate"]
r_var_rf_a_rast <- summary(lm(abundance_var ~ obs_abundance, data = rf_test))$adj.r.squared

# with rel_abundance as response
regr_var_rf_ra_rast <- lm(rel_abundance_var ~ obs_rel_abundance, data = rf_test)
sum_var_rf_ra_rast <- summary(regr_var_rf_ra_rast)
p_var_rf_ra_rast <- sum_var_rf_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_var_rf_ra_rast <- sum_var_rf_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_var_rf_ra_rast <- summary(lm(rel_abundance_var ~ obs_rel_abundance, data = rf_test))$adj.r.squared
```

### Training Sets
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_rf_k_train <- lm(pred_train_v_k ~ k_index, data = rf_train)
sum_v_rf_k_train <- summary(regr_v_rf_k_train)
p_v_rf_k_train <- sum_v_rf_k_train$coefficients["k_index", "Pr(>|t|)"]
s_v_rf_k_train <- sum_v_rf_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_v_rf_s_train <- lm(pred_train_v_s ~ shannon, data = rf_train)
sum_v_rf_s_train <- summary(regr_v_rf_s_train)
p_v_rf_s_train <- sum_v_rf_s_train$coefficients["shannon", "Pr(>|t|)"]
s_v_rf_s_train <- sum_v_rf_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_v_rf_a_train <- lm(pred_train_v_a ~ abundance, data = rf_train)
sum_v_rf_a_train <- summary(regr_v_rf_a_train)
p_v_rf_a_train <- sum_v_rf_a_train$coefficients["abundance", "Pr(>|t|)"]
s_v_rf_a_train <- sum_v_rf_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_v_rf_ra_train <- lm(pred_train_v_ra ~ rel_abundance, data = rf_train)
sum_v_rf_ra_train <- summary(regr_v_rf_ra_train)
p_v_rf_ra_train <- sum_v_rf_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_v_rf_ra_train <- sum_v_rf_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_rf_k_train <- lm(pred_train_wd_k ~ k_index, data = rf_train)
sum_wd_rf_k_train <- summary(regr_wd_rf_k_train)
p_wd_rf_k_train <- sum_wd_rf_k_train$coefficients["k_index", "Pr(>|t|)"]
s_wd_rf_k_train <- sum_wd_rf_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_wd_rf_s_train <- lm(pred_train_wd_s ~ shannon, data = rf_train)
sum_wd_rf_s_train <- summary(regr_wd_rf_s_train)
p_wd_rf_s_train <- sum_wd_rf_s_train$coefficients["shannon", "Pr(>|t|)"]
s_wd_rf_s_train <- sum_wd_rf_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_wd_rf_a_train <- lm(pred_train_wd_a ~ abundance, data = rf_train)
sum_wd_rf_a_train <- summary(regr_wd_rf_a_train)
p_wd_rf_a_train <- sum_wd_rf_a_train$coefficients["abundance", "Pr(>|t|)"]
s_wd_rf_a_train <- sum_wd_rf_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_wd_rf_ra_train <- lm(pred_train_wd_ra ~ rel_abundance, data = rf_train)
sum_wd_rf_ra_train <- summary(regr_wd_rf_ra_train)
p_wd_rf_ra_train <- sum_wd_rf_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_wd_rf_ra_train <- sum_wd_rf_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_rf_k_train <- lm(pred_train_samp_k ~ k_index, data = rf_train)
sum_samp_rf_k_train <- summary(regr_samp_rf_k_train)
p_samp_rf_k_train <- sum_samp_rf_k_train$coefficients["k_index", "Pr(>|t|)"]
s_samp_rf_k_train <- sum_samp_rf_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_samp_rf_s_train <- lm(pred_train_samp_s ~ shannon, data = rf_train)
sum_samp_rf_s_train <- summary(regr_samp_rf_s_train)
p_samp_rf_s_train <- sum_samp_rf_s_train$coefficients["shannon", "Pr(>|t|)"]
s_samp_rf_s_train <- sum_samp_rf_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_samp_rf_a_train <- lm(pred_train_samp_a ~ abundance, data = rf_train)
sum_samp_rf_a_train <- summary(regr_samp_rf_a_train)
p_samp_rf_a_train <- sum_samp_rf_a_train$coefficients["abundance", "Pr(>|t|)"]
s_samp_rf_a_train <- sum_samp_rf_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_samp_rf_ra_train <- lm(pred_train_samp_ra ~ rel_abundance, data = rf_train)
sum_samp_rf_ra_train <- summary(regr_samp_rf_ra_train)
p_samp_rf_ra_train <- sum_samp_rf_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_samp_rf_ra_train <- sum_samp_rf_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_rf_k_train <- lm(pred_train_sec_k ~ k_index, data = rf_train_2)
sum_sec_rf_k_train <- summary(regr_sec_rf_k_train)
p_sec_rf_k_train <- sum_sec_rf_k_train$coefficients["k_index", "Pr(>|t|)"]
s_sec_rf_k_train <- sum_sec_rf_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_sec_rf_s_train <- lm(pred_train_sec_s ~ shannon, data = rf_train_2)
sum_sec_rf_s_train <- summary(regr_sec_rf_s_train)
p_sec_rf_s_train <- sum_sec_rf_s_train$coefficients["shannon", "Pr(>|t|)"]
s_sec_rf_s_train <- sum_sec_rf_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_sec_rf_a_train <- lm(pred_train_sec_a ~ abundance, data = rf_train_2)
sum_sec_rf_a_train <- summary(regr_sec_rf_a_train)
p_sec_rf_a_train <- sum_sec_rf_a_train$coefficients["abundance", "Pr(>|t|)"]
s_sec_rf_a_train <- sum_sec_rf_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_sec_rf_ra_train <- lm(pred_train_sec_ra ~ rel_abundance, data = rf_train_2)
sum_sec_rf_ra_train <- summary(regr_sec_rf_ra_train)
p_sec_rf_ra_train <- sum_sec_rf_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_sec_rf_ra_train <- sum_sec_rf_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_rf_k_train <- lm(pred_train_var_k ~ k_index, data = rf_train_2)
sum_var_rf_k_train <- summary(regr_var_rf_k_train)
p_var_rf_k_train <- sum_var_rf_k_train$coefficients["k_index", "Pr(>|t|)"]
s_var_rf_k_train <- sum_var_rf_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_var_rf_s_train <- lm(pred_train_var_s ~ shannon, data = rf_train_2)
sum_var_rf_s_train <- summary(regr_var_rf_s_train)
p_var_rf_s_train <- sum_var_rf_s_train$coefficients["shannon", "Pr(>|t|)"]
s_var_rf_s_train <- sum_var_rf_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_var_rf_a_train <- lm(pred_train_var_a ~ abundance, data = rf_train_2)
sum_var_rf_a_train <- summary(regr_var_rf_a_train)
p_var_rf_a_train <- sum_var_rf_a_train$coefficients["abundance", "Pr(>|t|)"]
s_var_rf_a_train <- sum_var_rf_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_var_rf_ra_train <- lm(pred_train_var_ra ~ rel_abundance, data = rf_train_2)
sum_var_rf_ra_train <- summary(regr_var_rf_ra_train)
p_var_rf_ra_train <- sum_var_rf_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_var_rf_ra_train <- sum_var_rf_ra_train$coefficients["rel_abundance", "Estimate"]
```

# Create dataframe
```{r}
regr_brt <- data.frame(p_value = c(p_v_brt_k_measured, p_v_brt_s_measured, p_v_brt_a_measured, p_v_brt_ra_measured,
                                        p_wd_brt_k_measured, p_wd_brt_s_measured, p_wd_brt_a_measured, p_wd_brt_ra_measured,
                                        p_samp_brt_k_measured, p_samp_brt_s_measured, p_samp_brt_a_measured, p_samp_brt_ra_measured,
                                        p_sec_brt_k_measured, p_sec_brt_s_measured, p_sec_brt_a_measured, p_sec_brt_ra_measured,
                                        p_var_brt_k_measured, p_var_brt_s_measured, p_var_brt_a_measured, p_var_brt_ra_measured,
                                        p_v_brt_k_rast, p_v_brt_s_rast, p_v_brt_a_rast, p_v_brt_ra_rast,
                                        p_wd_brt_k_rast, p_wd_brt_s_rast, p_wd_brt_a_rast, p_wd_brt_ra_rast,
                                        p_var_brt_k_rast, p_var_brt_s_rast, p_var_brt_a_rast, p_var_brt_ra_rast,
                                        p_v_brt_k_train, p_v_brt_s_train, p_v_brt_a_train, p_v_brt_ra_train,
                                        p_wd_brt_k_train, p_wd_brt_s_train, p_wd_brt_a_train, p_wd_brt_ra_train,
                                        p_samp_brt_k_train, p_samp_brt_s_train, p_samp_brt_a_train, p_samp_brt_ra_train,
                                        p_sec_brt_k_train, p_sec_brt_s_train, p_sec_brt_a_train, p_sec_brt_ra_train,
                                        p_var_brt_k_train, p_var_brt_s_train, p_var_brt_a_train, p_var_brt_ra_train),
                            slope = c(s_v_brt_k_measured, s_v_brt_s_measured, s_v_brt_a_measured, s_v_brt_ra_measured,
                                        s_wd_brt_k_measured, s_wd_brt_s_measured, s_wd_brt_a_measured, s_wd_brt_ra_measured,
                                        s_samp_brt_k_measured, s_samp_brt_s_measured, s_samp_brt_a_measured, s_samp_brt_ra_measured,
                                        s_sec_brt_k_measured, s_sec_brt_s_measured, s_sec_brt_a_measured, s_sec_brt_ra_measured,
                                        s_var_brt_k_measured, s_var_brt_s_measured, s_var_brt_a_measured, s_var_brt_ra_measured,
                                        s_v_brt_k_rast, s_v_brt_s_rast, s_v_brt_a_rast, s_v_brt_ra_rast,
                                        s_wd_brt_k_rast, s_wd_brt_s_rast, s_wd_brt_a_rast, s_wd_brt_ra_rast,
                                        s_var_brt_k_rast, s_var_brt_s_rast, s_var_brt_a_rast, s_var_brt_ra_rast,
                                        s_v_brt_k_train, s_v_brt_s_train, s_v_brt_a_train, s_v_brt_ra_train,
                                        s_wd_brt_k_train, s_wd_brt_s_train, s_wd_brt_a_train, s_wd_brt_ra_train,
                                        s_samp_brt_k_train, s_samp_brt_s_train, s_samp_brt_a_train, s_samp_brt_ra_train,
                                        s_sec_brt_k_train, s_sec_brt_s_train, s_sec_brt_a_train, s_sec_brt_ra_train,
                                        s_var_brt_k_train, s_var_brt_s_train, s_var_brt_a_train, s_var_brt_ra_train),
                            index = c("k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance"),
                            algorithm = c("brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt"),
                            predictor = c("velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "samp", "samp", "samp", "samp",
                                          "sec", "sec", "sec", "sec",
                                          "var", "var", "var", "var",
                                          "velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "var", "var", "var", "var",
                                          "velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "samp", "samp", "samp", "samp",
                                          "sec", "sec", "sec", "sec",
                                          "var", "var", "var", "var"),
                              origin = c("measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured", 
                              "measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured",
                              "raster", "raster", "raster", "raster",
                              "raster", "raster", "raster", "raster", 
                              "raster", "raster", "raster", "raster",
                              "training", "training", "training", "training",
                              "training", "training", "training", "training",
                              "training", "training", "training", "training", 
                              "training", "training", "training", "training",
                              "training", "training", "training", "training"))


regr_rf <- data.frame(p_value = c(p_v_rf_k_measured, p_v_rf_s_measured, p_v_rf_a_measured, p_v_rf_ra_measured,
                                        p_wd_rf_k_measured, p_wd_rf_s_measured, p_wd_rf_a_measured, p_wd_rf_ra_measured,
                                        p_samp_rf_k_measured, p_samp_rf_s_measured, p_samp_rf_a_measured, p_samp_rf_ra_measured,
                                        p_sec_rf_k_measured, p_sec_rf_s_measured, p_sec_rf_a_measured, p_sec_rf_ra_measured,
                                        p_var_rf_k_measured, p_var_rf_s_measured, p_var_rf_a_measured, p_var_rf_ra_measured,
                                        p_v_rf_k_rast, p_v_rf_s_rast, p_v_rf_a_rast, p_v_rf_ra_rast,
                                        p_wd_rf_k_rast, p_wd_rf_s_rast, p_wd_rf_a_rast, p_wd_rf_ra_rast,
                                        p_var_rf_k_rast, p_var_rf_s_rast, p_var_rf_a_rast, p_var_rf_ra_rast,
                                        p_v_rf_k_train, p_v_rf_s_train, p_v_rf_a_train, p_v_rf_ra_train,
                                        p_wd_rf_k_train, p_wd_rf_s_train, p_wd_rf_a_train, p_wd_rf_ra_train,
                                        p_samp_rf_k_train, p_samp_rf_s_train, p_samp_rf_a_train, p_samp_rf_ra_train,
                                        p_sec_rf_k_train, p_sec_rf_s_train, p_sec_rf_a_train, p_sec_rf_ra_train,
                                        p_var_rf_k_train, p_var_rf_s_train, p_var_rf_a_train, p_var_rf_ra_train),
                            slope = c(s_v_rf_k_measured, s_v_rf_s_measured, s_v_rf_a_measured, s_v_rf_ra_measured,
                                        s_wd_rf_k_measured, s_wd_rf_s_measured, s_wd_rf_a_measured, s_wd_rf_ra_measured,
                                        s_samp_rf_k_measured, s_samp_rf_s_measured, s_samp_rf_a_measured, s_samp_rf_ra_measured,
                                        s_sec_rf_k_measured, s_sec_rf_s_measured, s_sec_rf_a_measured, s_sec_rf_ra_measured,
                                        s_var_rf_k_measured, s_var_rf_s_measured, s_var_rf_a_measured, s_var_rf_ra_measured,
                                        s_v_rf_k_rast, s_v_rf_s_rast, s_v_rf_a_rast, s_v_rf_ra_rast,
                                        s_wd_rf_k_rast, s_wd_rf_s_rast, s_wd_rf_a_rast, s_wd_rf_ra_rast,
                                        s_var_rf_k_rast, s_var_rf_s_rast, s_var_rf_a_rast, s_var_rf_ra_rast,
                                        s_v_rf_k_train, s_v_rf_s_train, s_v_rf_a_train, s_v_rf_ra_train,
                                        s_wd_rf_k_train, s_wd_rf_s_train, s_wd_rf_a_train, s_wd_rf_ra_train,
                                        s_samp_rf_k_train, s_samp_rf_s_train, s_samp_rf_a_train, s_samp_rf_ra_train,
                                        s_sec_rf_k_train, s_sec_rf_s_train, s_sec_rf_a_train, s_sec_rf_ra_train,
                                        s_var_rf_k_train, s_var_rf_s_train, s_var_rf_a_train, s_var_rf_ra_train),
                            index = c("k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance"),
                            algorithm = c("rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf"),
                            predictor = c("velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "samp", "samp", "samp", "samp",
                                          "sec", "sec", "sec", "sec",
                                          "var", "var", "var", "var",
                                          "velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "var", "var", "var", "var",
                                          "velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "samp", "samp", "samp", "samp",
                                          "sec", "sec", "sec", "sec",
                                          "var", "var", "var", "var"),
                              origin = c("measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured", 
                              "measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured",
                              "raster", "raster", "raster", "raster",
                              "raster", "raster", "raster", "raster", 
                              "raster", "raster", "raster", "raster",
                              "training", "training", "training", "training",
                              "training", "training", "training", "training",
                              "training", "training", "training", "training", 
                              "training", "training", "training", "training",
                              "training", "training", "training", "training"))

regr_all <- rbind(regr_brt, regr_rf)

# write .csv file 
write.csv(regr_brt, "Stat_Analysis/stat_analysis_data/results_regr_brt.csv", row.names = FALSE)
write.csv(regr_rf, "Stat_Analysis/stat_analysis_data/results_regr_rf.csv", row.names = FALSE)
write.csv(regr_all, "Stat_Analysis/stat_analysis_data/results_regr_rf.csv", row.names = FALSE)
```

# Plots
## BRT 
```{r}
# Use a colorblind-friendly palette
color_palette <- brewer.pal(4, "RdYlBu")

brt_1 <- brt_test |>
  dplyr::select(obs_shannon, obs_k_index, obs_abundance, obs_rel_abundance,
                brt_pred_model_v_k_c, brt_pred_model_v_s_c, brt_pred_model_v_a_c,
                brt_pred_model_v_ra_c,
                brt_pred_model_wd_k_c, brt_pred_model_wd_s_c,
                brt_pred_model_wd_a_c, brt_pred_model_wd_ra_c,
                brt_pred_model_samp_k_c, brt_pred_model_samp_s_c,
                brt_pred_model_samp_a_c, brt_pred_model_samp_ra_c,
                reach_type) |>
  dplyr::rename(Velocity_K_Index = brt_pred_model_v_k_c,
                Velocity_Shannon_Index = brt_pred_model_v_s_c,
                Velocity_Abs._Abundance = brt_pred_model_v_a_c,
                Velocity_Rel._Abundance = brt_pred_model_v_ra_c,
                WD_K_Index = brt_pred_model_wd_k_c,
                WD_Shannon_Index = brt_pred_model_wd_s_c,
                WD_Abs._Abundance = brt_pred_model_wd_a_c,
                WD_Rel._Abundance = brt_pred_model_wd_ra_c,
                Samp_K_Index = brt_pred_model_samp_k_c,
                Samp_Shannon_Index = brt_pred_model_samp_s_c,
                Samp_Abs._Abundance = brt_pred_model_samp_a_c,
                Samp_Rel._Abundance = brt_pred_model_samp_ra_c,
                k_index = obs_k_index,
                shannon = obs_shannon,
                abundance = obs_abundance,
                rel_abundance = obs_rel_abundance)



brt_t <- pivot_longer(brt_1, cols = c(Velocity_K_Index, Velocity_Shannon_Index,
                             Velocity_Abs._Abundance, Velocity_Rel._Abundance,
                             WD_K_Index, WD_Shannon_Index, WD_Abs._Abundance,
                WD_Rel._Abundance, Samp_K_Index, Samp_Shannon_Index, 
                Samp_Abs._Abundance, Samp_Rel._Abundance), names_to = "index", values_to = "values")

brt_t$index <- sub("_", " ", brt_t$index)

brt_new <- brt_t |>
  separate(index, into = c("predictor", "index_2"), sep = " ")

brt_new_new <- brt_new |>
  filter(index_2 == "K_Index") |>
  dplyr::select(-Reach_Untersuchungsstelle)



brt_2 <- brt_test_2 |>
  dplyr::select(brt_pred_model_var_k_c, brt_pred_model_var_s_c,
                brt_pred_model_var_a_c, brt_pred_model_var_ra_c,
                reach_type,
                k_index, shannon, abundance, rel_abundance) |>
  dplyr::rename(Var_K_Index = brt_pred_model_var_k_c,
                Var_Shannon_Index = brt_pred_model_var_s_c,
                Var_Abs._Abundance = brt_pred_model_var_a_c,
                Var_Rel._Abundance = brt_pred_model_var_ra_c)

brt_2 <- pivot_longer(brt_2, cols = c(Var_K_Index, Var_Shannon_Index,
                             Var_Abs._Abundance, Var_Rel._Abundance), names_to = "index", values_to = "values")

brt_2$index <- sub("_", " ", brt_2$index)

brt_new_2 <- brt_2 |>
  separate(index, into = c("predictor", "index_2"), sep = " ")

brt_test_end <- rbind(brt_new, brt_new_2)

brt_k_index <- brt_test_end |>
  filter(index_2 == "K_Index")

brt_shannon <- brt_test_end |>
  filter(index_2 == "Shannon_Index")

brt_abundance <- brt_test_end |>
  filter(index_2 == "Abs._Abundance")

brt_rel_abundance <- brt_test_end |>
  filter(index_2 == "Rel._Abundance")
```

## Test Measured
```{r}
# Plots for all Indices -------------------
k_index_meas <- ggplot(brt_k_index, aes(x = k_index, y = values, col = reach_type)) +
  facet_wrap(~predictor, nrow = 1, ncol = 4) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette) 


shannon_meas <- ggplot(brt_shannon, aes(x = shannon, y = values, col = reach_type)) +
  facet_wrap(~predictor, nrow = 1, ncol = 4) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette) 

abundance_meas <- ggplot(brt_abundance, aes(x = abundance, y = values, col = reach_type)) +
  facet_wrap(~predictor, nrow = 1, ncol = 4) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 2000) +
  xlim(0, 2000) + 
  labs(
    x = "Abs. Abundance Observed",
    y = "Abs. Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette) 

rel_abundance_meas <- ggplot(brt_rel_abundance, aes(x = rel_abundance, y = values, col = reach_type)) +
  facet_wrap(~predictor, nrow = 1, ncol = 4) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Rel. Abundance Observed",
    y = "Rel. Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    strip.text = element_text(size = 16, face = "bold")) +
  scale_color_manual(values = color_palette) 


ggsave("Stat_Analysis/regr_plots/k_index_meas.png", plot = k_index_meas, width = 18, height = 5)
ggsave("Stat_Analysis/regr_plots/shannon_meas.png", plot = shannon_meas, width = 18, height = 5)
ggsave("Stat_Analysis/regr_plots/abundance_meas.png", plot = abundance_meas, width = 18, height = 5)
ggsave("Stat_Analysis/regr_plots/rel_abundance_meas.png", plot = rel_abundance_meas, width = 18, height = 5)
```

### Test Raster
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response ----------------------------------------------------
p_brt_k_rast <- ggplot(brt_test, aes(obs_k_index, k_index_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_wrap_k_rast <- ggplot(brt_test, aes(obs_k_index, k_index_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_k_v_rast.png", plot = p_brt_k_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_k_v_rast.png", plot = p_brt_wrap_k_rast, width = 8, height = 8)

# with shannon index as response ----------------------------------------------
p_brt_s_rast <- ggplot(brt_test, aes(obs_shannon, shannon_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wrap_s_rast <- ggplot(brt_test, aes(obs_shannon, shannon_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_s_v_rast.png", plot = p_brt_s_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_s_v_rast.png", plot = p_brt_wrap_s_rast, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_a_rast <- ggplot(brt_test, aes(obs_abundance, abundance_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))


p_brt_wrap_a_rast <- ggplot(brt_test, aes(obs_abundance, abundance_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_a_v_rast.png", plot = p_brt_a_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_a_v_rast.png", plot = p_brt_wrap_a_rast, width = 8, height = 8)

# with relative abundance as response -----------------------------------------
p_brt_ra_rast <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))


p_brt_wrap_ra_rast <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_ra_v_rast.png", plot = p_brt_ra_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_ra_v_rast.png", plot = p_brt_wrap_ra_rast, width = 8, height = 8)


### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_wd_k_rast <- ggplot(brt_test, aes(obs_k_index, k_index_wd, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_wd_wrap_k_rast <- ggplot(brt_test, aes(obs_k_index, k_index_wd, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_k_rast.png", plot = p_brt_wd_k_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_k_rast.png", plot = p_brt_wd_wrap_k_rast, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_wd_s_rast <- ggplot(brt_test, aes(obs_shannon, shannon_wd, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wd_wrap_s_rast <- ggplot(brt_test, aes(obs_shannon, shannon_wd, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_s_rast.png", plot = p_brt_wd_s_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_s_rast.png", plot = p_brt_wd_wrap_s_rast, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_wd_a_rast <- ggplot(brt_test, aes(obs_abundance, abundance_wd, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wd_wrap_a_rast <- ggplot(brt_test, aes(obs_abundance, abundance_wd, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_a_rast.png", plot = p_brt_wd_a_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_a_rast.png", plot = p_brt_wd_wrap_a_rast, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_wd_ra_rast <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_wd, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wd_wrap_ra_rast <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_wd, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_ra_rast.png", plot = p_brt_wd_ra_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_ra_rast.png", plot = p_brt_wd_wrap_ra_rast, width = 8, height = 8)

### PREDICTOR: SELCTED VARIABLES ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_var_k_rast <- ggplot(brt_test, aes(obs_k_index, k_index_var, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_var_wrap_k_rast <- ggplot(brt_test, aes(obs_k_index, k_index_var, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_k_rast.png", plot = p_brt_var_k_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_k_rast.png", plot = p_brt_var_wrap_k_rast, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_var_s_rast <- ggplot(brt_test, aes(obs_shannon, shannon_var, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_var_wrap_s_rast <- ggplot(brt_test, aes(obs_shannon, shannon_var, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_s_rast.png", plot = p_brt_var_s_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_s_rast.png", plot = p_brt_var_wrap_s_rast, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_var_a_rast <- ggplot(brt_test, aes(obs_abundance, abundance_var, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_var_wrap_a_rast <- ggplot(brt_test, aes(obs_abundance, abundance_var, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_a_rast.png", plot = p_brt_var_a_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_a_rast.png", plot = p_brt_var_wrap_a_rast, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_var_ra_rast <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_var, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_var_wrap_ra_rast <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_var, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_ra_rast.png", plot = p_brt_var_ra_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_ra_rast.png", plot = p_brt_var_wrap_ra_rast, width = 8, height = 8)
```

### Test Measured
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response ----------------------------------------------------
p_brt_k_meas <- ggplot(brt_test, aes(obs_k_index, k_index_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_wrap_k_meas <- ggplot(brt_test, aes(obs_k_index, k_index_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_k_v_meas.png", plot = p_brt_k_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_k_v_meas.png", plot = p_brt_wrap_k_meas, width = 8, height = 8)

# with shannon index as response ----------------------------------------------
p_brt_s_meas <- ggplot(brt_test, aes(obs_shannon, shannon_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))
  
p_brt_wrap_s_meas <- ggplot(brt_test, aes(obs_shannon, shannon_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_s_v_meas.png", plot = p_brt_s_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_s_v_meas.png", plot = p_brt_wrap_s_meas, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_a_meas <- ggplot(brt_test, aes(obs_abundance, abundance_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_wrap_a_meas <- ggplot(brt_test, aes(obs_abundance, abundance_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_a_v_meas.png", plot = p_brt_a_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_a_v_meas.png", plot = p_brt_wrap_a_meas, width = 8, height = 8)

# with relative abundance as response -----------------------------------------
p_brt_ra_meas <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_wrap_ra_meas <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_ra_v_meas.png", plot = p_brt_ra_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_ra_v_meas.png", plot = p_brt_wrap_ra_meas, width = 8, height = 8)


### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_wd_k_meas <- ggplot(brt_test, aes(obs_k_index, brt_pred_model_wd_k_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_wd_wrap_k_meas <- ggplot(brt_test, aes(obs_k_index, brt_pred_model_wd_k_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_k_meas.png", plot = p_brt_wd_k_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_k_meas.png", plot = p_brt_wd_wrap_k_meas, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_wd_s_meas <- ggplot(brt_test, aes(obs_shannon, brt_pred_model_wd_s_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wd_wrap_s_meas <- ggplot(brt_test, aes(obs_shannon, brt_pred_model_wd_s_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_s_meas.png", plot = p_brt_wd_s_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_s_meas.png", plot = p_brt_wd_wrap_s_meas, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_wd_a_meas <- ggplot(brt_test, aes(obs_abundance, brt_pred_model_wd_a_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wd_wrap_a_meas <- ggplot(brt_test, aes(obs_abundance, brt_pred_model_wd_a_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_a_meas.png", plot = p_brt_wd_a_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_a_meas.png", plot = p_brt_wd_wrap_a_meas, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_wd_ra_meas <- ggplot(brt_test, aes(obs_rel_abundance, brt_pred_model_wd_ra_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wd_wrap_ra_meas <- ggplot(brt_test, aes(obs_rel_abundance, brt_pred_model_wd_ra_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_ra_meas.png", plot = p_brt_wd_ra_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_ra_meas.png", plot = p_brt_wd_wrap_ra_meas, width = 8, height = 8)

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_samp_k_meas <- ggplot(brt_test, aes(obs_k_index, brt_pred_model_samp_k_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_samp_wrap_k_meas <- ggplot(brt_test, aes(obs_k_index, brt_pred_model_samp_k_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_k_meas.png", plot = p_brt_samp_k_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_wrap_k_meas.png", plot = p_brt_samp_wrap_k_meas, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_samp_s_meas <- ggplot(brt_test, aes(obs_shannon, brt_pred_model_samp_s_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_samp_wrap_s_meas <- ggplot(brt_test, aes(obs_shannon, brt_pred_model_samp_s_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_s_meas.png", plot = p_brt_samp_s_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_wrap_s_meas.png", plot = p_brt_samp_wrap_s_meas, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_samp_a_meas <- ggplot(brt_test, aes(obs_abundance, brt_pred_model_samp_a_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_samp_wrap_a_meas <- ggplot(brt_test, aes(obs_abundance, brt_pred_model_samp_a_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_a_meas.png", plot = p_brt_samp_a_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_wrap_a_meas.png", plot = p_brt_samp_wrap_a_meas, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_samp_ra_meas <- ggplot(brt_test, aes(obs_rel_abundance, brt_pred_model_samp_ra_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_samp_wrap_ra_meas <- ggplot(brt_test, aes(obs_rel_abundance, brt_pred_model_samp_ra_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_ra_meas.png", plot = p_brt_samp_ra_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_wrap_ra_meas.png", plot = p_brt_samp_wrap_ra_meas, width = 8, height = 8)

### PREDICTOR: ALL PREDICTORS ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_sec_k_meas <- ggplot(brt_test_2, aes(k_index, brt_pred_model_sec_k_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_sec_wrap_k_meas <- ggplot(brt_test_2, aes(k_index, brt_pred_model_sec_k_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_k_meas.png", plot = p_brt_sec_k_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_wrap_k_meas.png", plot = p_brt_sec_wrap_k_meas, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_sec_s_meas <- ggplot(brt_test_2, aes(shannon, brt_pred_model_sec_s_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_sec_wrap_s_meas <- ggplot(brt_test_2, aes(shannon, brt_pred_model_sec_s_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_s_meas.png", plot = p_brt_sec_s_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_wrap_s_meas.png", plot = p_brt_sec_wrap_s_meas, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_sec_a_meas <- ggplot(brt_test_2, aes(abundance, brt_pred_model_sec_a_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_sec_wrap_a_meas <- ggplot(brt_test_2, aes(abundance, brt_pred_model_sec_a_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_a_meas.png", plot = p_brt_sec_a_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_wrap_a_meas.png", plot = p_brt_sec_wrap_a_meas, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_sec_ra_meas <- ggplot(brt_test_2, aes(rel_abundance, brt_pred_model_sec_ra_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_sec_wrap_ra_meas <- ggplot(brt_test_2, aes(rel_abundance, brt_pred_model_sec_ra_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_ra_meas.png", plot = p_brt_sec_ra_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_wrap_ra_meas.png", plot = p_brt_sec_wrap_ra_meas, width = 8, height = 8)

### PREDICTOR: SELCTED VARIABLES ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_var_k_meas <- ggplot(brt_test_2, aes(k_index, brt_pred_model_var_k_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_var_wrap_k_meas <- ggplot(brt_test_2, aes(k_index, brt_pred_model_var_k_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_k_meas.png", plot = p_brt_var_k_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_k_meas.png", plot = p_brt_var_wrap_k_meas, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_var_s_meas <- ggplot(brt_test_2, aes(shannon, brt_pred_model_var_s_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_var_wrap_s_meas <- ggplot(brt_test_2, aes(shannon, brt_pred_model_var_s_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_s_meas.png", plot = p_brt_var_s_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_s_meas.png", plot = p_brt_var_wrap_s_meas, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_var_a_meas <- ggplot(brt_test_2, aes(abundance, brt_pred_model_var_a_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_var_wrap_a_meas <- ggplot(brt_test_2, aes(abundance, brt_pred_model_var_a_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_a_meas.png", plot = p_brt_var_a_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_a_meas.png", plot = p_brt_var_wrap_a_meas, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_var_ra_meas <- ggplot(brt_test_2, aes(rel_abundance, brt_pred_model_var_ra_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_var_wrap_ra_meas <- ggplot(brt_test_2, aes(rel_abundance, brt_pred_model_var_ra_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_ra_meas.png", plot = p_brt_var_ra_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_ra_meas.png", plot = p_brt_var_wrap_ra_meas, width = 8, height = 8)
```

### Training Sets
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response ----------------------------------------------------
p_brt_k_train <- ggplot(brt_train, aes(k_index, pred_train_v_k, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_wrap_k_train <- ggplot(brt_train, aes(k_index, pred_train_v_k, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_k_v_train.png", plot = p_brt_k_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_k_v_train.png", plot = p_brt_wrap_k_train, width = 8, height = 8)

# with shannon index as response ----------------------------------------------
p_brt_s_train <- ggplot(brt_train, aes(shannon, pred_train_v_s, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))
  
p_brt_wrap_s_train <- ggplot(brt_train, aes(shannon, pred_train_v_s, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_s_v_train.png", plot = p_brt_s_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_s_v_train.png", plot = p_brt_wrap_s_train, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_a_train <- ggplot(brt_train, aes(abundance, pred_train_v_a, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_wrap_a_train <- ggplot(brt_train, aes(abundance, pred_train_v_a, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_a_v_train.png", plot = p_brt_a_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_a_v_train.png", plot = p_brt_wrap_a_train, width = 8, height = 8)

# with relative abundance as response -----------------------------------------
p_brt_ra_train <- ggplot(brt_train, aes(rel_abundance, pred_train_v_ra, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_wrap_ra_train <- ggplot(brt_train, aes(rel_abundance, pred_train_v_ra, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_ra_v_train.png", plot = p_brt_ra_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_ra_v_train.png", plot = p_brt_wrap_ra_train, width = 8, height = 8)


### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_wd_k_train <- ggplot(brt_train, aes(k_index, pred_train_wd_k, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_wd_wrap_k_train <- ggplot(brt_train, aes(k_index, pred_train_wd_k, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_k_train.png", plot = p_brt_wd_k_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_k_train.png", plot = p_brt_wd_wrap_k_train, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_wd_s_train <- ggplot(brt_train, aes(shannon, pred_train_wd_s, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wd_wrap_s_train <- ggplot(brt_train, aes(shannon, pred_train_wd_s, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_s_train.png", plot = p_brt_wd_s_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_s_train.png", plot = p_brt_wd_wrap_s_train, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_wd_a_train <- ggplot(brt_train, aes(abundance, pred_train_wd_a, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wd_wrap_a_train <- ggplot(brt_train, aes(abundance, pred_train_wd_a, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_a_train.png", plot = p_brt_wd_a_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_a_train.png", plot = p_brt_wd_wrap_a_train, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_wd_ra_train <- ggplot(brt_train, aes(rel_abundance, pred_train_wd_ra, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wd_wrap_ra_train <- ggplot(brt_train, aes(rel_abundance, pred_train_wd_ra, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_ra_train.png", plot = p_brt_wd_ra_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_ra_train.png", plot = p_brt_wd_wrap_ra_train, width = 8, height = 8)

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_samp_k_train <- ggplot(brt_train, aes(k_index, pred_train_samp_k, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_samp_wrap_k_train <- ggplot(brt_train, aes(k_index, pred_train_samp_k, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_k_train.png", plot = p_brt_samp_k_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_wrap_k_train.png", plot = p_brt_samp_wrap_k_train, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_samp_s_train <- ggplot(brt_train, aes(shannon, pred_train_samp_s, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_samp_wrap_s_train <- ggplot(brt_train, aes(shannon, pred_train_samp_s, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_s_train.png", plot = p_brt_samp_s_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_wrap_s_train.png", plot = p_brt_samp_wrap_s_train, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_samp_a_train <- ggplot(brt_train, aes(abundance, pred_train_samp_a, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_samp_wrap_a_train <- ggplot(brt_train, aes(abundance, pred_train_samp_a, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_a_train.png", plot = p_brt_samp_a_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_wrap_a_train.png", plot = p_brt_samp_wrap_a_train, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_samp_ra_train <- ggplot(brt_train, aes(rel_abundance, pred_train_samp_ra, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_samp_wrap_ra_train <- ggplot(brt_train, aes(rel_abundance, pred_train_samp_ra, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_ra_train.png", plot = p_brt_samp_ra_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_samp_wrap_ra_train.png", plot = p_brt_samp_wrap_ra_train, width = 8, height = 8)

### PREDICTOR: ALL PREDICTORS ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_sec_k_train <- ggplot(brt_train_2, aes(k_index, pred_train_sec_k, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_sec_wrap_k_train <- ggplot(brt_train_2, aes(k_index, pred_train_sec_k, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_k_train.png", plot = p_brt_sec_k_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_wrap_k_train.png", plot = p_brt_sec_wrap_k_train, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_sec_s_train <- ggplot(brt_train_2, aes(shannon, pred_train_sec_s, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_sec_wrap_s_train <- ggplot(brt_train_2, aes(shannon, pred_train_sec_s, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_s_train.png", plot = p_brt_sec_s_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_wrap_s_train.png", plot = p_brt_sec_wrap_s_train, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_sec_a_train <- ggplot(brt_train_2, aes(abundance, pred_train_sec_a, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_sec_wrap_a_train <- ggplot(brt_train_2, aes(abundance, pred_train_sec_a, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_a_train.png", plot = p_brt_sec_a_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_wrap_a_train.png", plot = p_brt_sec_wrap_a_train, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_sec_ra_train <- ggplot(brt_train_2, aes(rel_abundance, pred_train_sec_ra, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_sec_wrap_ra_train <- ggplot(brt_train_2, aes(rel_abundance, pred_train_sec_ra, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_ra_train.png", plot = p_brt_sec_ra_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_sec_wrap_ra_train.png", plot = p_brt_sec_wrap_ra_train, width = 8, height = 8)

### PREDICTOR: SELCTED VARIABLES ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_var_k_train <- ggplot(brt_train_2, aes(k_index, pred_train_var_k, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_var_wrap_k_train <- ggplot(brt_train_2, aes(k_index, pred_train_var_k, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_k_train.png", plot = p_brt_var_k_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_k_train.png", plot = p_brt_var_wrap_k_train, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_var_s_train <- ggplot(brt_train_2, aes(shannon, pred_train_var_s, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_var_wrap_s_train <- ggplot(brt_train_2, aes(shannon, pred_train_var_s, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_s_train.png", plot = p_brt_var_s_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_s_train.png", plot = p_brt_var_wrap_s_train, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_var_a_train <- ggplot(brt_train_2, aes(abundance, pred_train_var_a, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_var_wrap_a_train <- ggplot(brt_train_2, aes(abundance, pred_train_var_a, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_a_train.png", plot = p_brt_var_a_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_a_train.png", plot = p_brt_var_wrap_a_train, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_var_ra_train <- ggplot(brt_train_2, aes(rel_abundance, pred_train_var_ra, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_var_wrap_ra_train <- ggplot(brt_train_2, aes(rel_abundance, pred_train_var_ra, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_ra_train.png", plot = p_brt_var_ra_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_ra_train.png", plot = p_brt_var_wrap_ra_train, width = 8, height = 8)
```

### Compare Raster & Measured
#### Create dataframes
```{r}
# select needed rows and construct the datafame needed
# combine raster with measured selected variable dataframe
brt_test_2_nr <- brt_test_2 |>
  dplyr::mutate(ID = row_number())

brt_test_nr <- brt_test |>
  dplyr::select(k_index_var, shannon_var, abundance_var, rel_abundance_var) |>
  dplyr::mutate(ID = row_number())

brt_test_var <- merge(brt_test_nr, brt_test_2_nr, by = "ID", all = TRUE)

# with k_index as response ------------------------------
brt_comp_v_k <- brt_test |>
  dplyr::select(obs_k_index, k_index_v, brt_pred_model_v_k_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = k_index_v,
                Measured = brt_pred_model_v_k_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

brt_comp_wd_k <- brt_test |>
  dplyr::select(obs_k_index, k_index_wd, brt_pred_model_wd_k_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = k_index_wd,
                Measured = brt_pred_model_wd_k_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

brt_comp_var_k <- brt_test_var |>
  dplyr::select(k_index, k_index_var, brt_pred_model_var_k_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = k_index_var,
                Measured = brt_pred_model_var_k_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

# with shannon index as response ----------------------------
brt_comp_v_s <- brt_test |>
  dplyr::select(obs_shannon, shannon_v, brt_pred_model_v_s_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = shannon_v,
                Measured = brt_pred_model_v_s_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

brt_comp_wd_s <- brt_test |>
  dplyr::select(obs_shannon, shannon_wd, brt_pred_model_wd_s_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = shannon_wd,
                Measured = brt_pred_model_wd_s_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

brt_comp_var_s <- brt_test_var |>
  dplyr::select(shannon, shannon_var, brt_pred_model_var_s_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = shannon_var,
                Measured = brt_pred_model_var_s_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

# with absolute abundance as response ----------------------------
brt_comp_v_a <- brt_test |>
  dplyr::select(obs_abundance, abundance_v, brt_pred_model_v_a_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = abundance_v,
                Measured = brt_pred_model_v_a_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

brt_comp_wd_a <- brt_test |>
  dplyr::select(obs_abundance, abundance_wd, brt_pred_model_wd_a_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = abundance_wd,
                Measured = brt_pred_model_wd_a_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

brt_comp_var_a <- brt_test_var |>
  dplyr::select(abundance, abundance_var, brt_pred_model_var_a_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = abundance_var,
                Measured = brt_pred_model_var_a_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

# with relative abundance as response ----------------------------
brt_comp_v_ra <- brt_test |>
  dplyr::select(obs_rel_abundance, rel_abundance_v, brt_pred_model_v_ra_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = rel_abundance_v,
                Measured = brt_pred_model_v_ra_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

brt_comp_wd_ra <- brt_test |>
  dplyr::select(obs_rel_abundance, rel_abundance_wd, brt_pred_model_wd_ra_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = rel_abundance_wd,
                Measured = brt_pred_model_wd_ra_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

brt_comp_var_ra <- brt_test_var |>
  dplyr::select(rel_abundance, rel_abundance_var, brt_pred_model_var_ra_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = rel_abundance_var,
                Measured = brt_pred_model_var_ra_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")
```

#### Comparative Plots
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response ----------------------------------------------------
p_brt_k_comp <- ggplot(brt_comp_v_k, aes(obs_k_index, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_wrap_k_comp <- ggplot(brt_comp_v_k, aes(obs_k_index, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_k_comp.png", plot = p_brt_k_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_k_comp.png", plot = p_brt_wrap_k_comp, width = 8, height = 8)

# with shannon index as response ----------------------------------------------
p_brt_s_comp <- ggplot(brt_comp_v_s, aes(obs_shannon, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wrap_s_comp <- ggplot(brt_comp_v_s, aes(obs_shannon, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_s_comp.png", plot = p_brt_s_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_s_comp.png", plot = p_brt_wrap_s_comp, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_a_comp <- ggplot(brt_comp_v_a, aes(obs_abundance, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))


p_brt_wrap_a_comp <- ggplot(brt_comp_v_a, aes(obs_abundance, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_a_comp.png", plot = p_brt_a_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_a_comp.png", plot = p_brt_wrap_a_comp, width = 8, height = 8)

# with relative abundance as response -----------------------------------------
p_brt_ra_comp <- ggplot(brt_comp_v_ra, aes(obs_rel_abundance, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))


p_brt_wrap_ra_comp <- ggplot(brt_comp_v_ra, aes(obs_rel_abundance, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_ra_comp.png", plot = p_brt_ra_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_ra_comp.png", plot = p_brt_wrap_ra_comp, width = 8, height = 8)


### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_wd_k_comp <- ggplot(brt_comp_wd_k, aes(obs_k_index, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_wd_wrap_k_comp <- ggplot(brt_comp_wd_k, aes(obs_k_index, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_k_comp.png", plot = p_brt_wd_k_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_k_comp.png", plot = p_brt_wd_wrap_k_comp, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_wd_s_comp <- ggplot(brt_comp_wd_s, aes(obs_shannon, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wd_wrap_s_comp <- ggplot(brt_comp_wd_s, aes(obs_shannon, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_s_comp.png", plot = p_brt_wd_s_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_s_comp.png", plot = p_brt_wd_wrap_s_comp, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_wd_a_comp <- ggplot(brt_comp_wd_a, aes(obs_abundance, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wd_wrap_a_comp <- ggplot(brt_comp_wd_a, aes(obs_abundance, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_a_comp.png", plot = p_brt_wd_a_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_a_comp.png", plot = p_brt_wd_wrap_a_comp, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_wd_ra_comp <- ggplot(brt_comp_wd_ra, aes(obs_rel_abundance, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_wd_wrap_ra_comp <- ggplot(brt_comp_wd_ra, aes(obs_rel_abundance, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_ra_comp.png", plot = p_brt_wd_ra_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_ra_comp.png", plot = p_brt_wd_wrap_ra_comp, width = 8, height = 8)

### PREDICTOR: SELCTED VARIABLES ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_var_k_comp <- ggplot(brt_comp_var_k, aes(k_index, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_brt_var_wrap_k_comp <- ggplot(brt_comp_var_k, aes(k_index, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_k_comp.png", plot = p_brt_var_k_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_k_comp.png", plot = p_brt_var_wrap_k_comp, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_var_s_comp <- ggplot(brt_comp_var_s, aes(shannon, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_var_wrap_s_comp <- ggplot(brt_comp_var_s, aes(shannon, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_s_comp.png", plot = p_brt_var_s_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_s_comp.png", plot = p_brt_var_wrap_s_comp, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_var_a_comp <- ggplot(brt_comp_var_a, aes(abundance, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_var_wrap_a_comp <- ggplot(brt_comp_var_a, aes(abundance, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_a_comp.png", plot = p_brt_var_a_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_a_comp.png", plot = p_brt_var_wrap_a_comp, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_var_ra_comp <- ggplot(brt_comp_var_ra, aes(rel_abundance, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_brt_var_wrap_ra_comp <- ggplot(brt_comp_var_ra, aes(rel_abundance, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_ra_comp.png", plot = p_brt_var_ra_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_ra_comp.png", plot = p_brt_var_wrap_ra_comp, width = 8, height = 8)
```

#### WRAPS 
```{r}
# NSE Plots for all Indices -------------------
nse <- ggplot(metrics, aes(x = models, y = nse, shape = origin, col = origin)) +
  facet_wrap(~index, nrow = 1, ncol = 4) +
  geom_point(size = 3.5) +
  labs(y = "NSE",
       x = " ",
       shape = "Origin",
       col = "Origin") +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(size = 16, face = "bold"))+ 
  scale_y_continuous(limits = c(-1.25, 1.0)) +
  scale_color_manual(values = color_palette) 


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_k_v_rast.png", plot = p_brt_k_rast, width = 8, height = 5)
```

## RF normal
### Test Raster
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response ----------------------------------------------------
p_rf_k_rast <- ggplot(rf_test, aes(obs_k_index, k_index_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_wrap_k_rast <- ggplot(rf_test, aes(obs_k_index, k_index_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_k_v_rast.png", plot = p_rf_k_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_k_v_rast.png", plot = p_rf_wrap_k_rast, width = 8, height = 8)

# with shannon index as response ----------------------------------------------
p_rf_s_rast <- ggplot(rf_test, aes(obs_shannon, shannon_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wrap_s_rast <- ggplot(rf_test, aes(obs_shannon, shannon_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_s_v_rast.png", plot = p_rf_s_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_s_v_rast.png", plot = p_rf_wrap_s_rast, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_a_rast <- ggplot(rf_test, aes(obs_abundance, abundance_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))


p_rf_wrap_a_rast <- ggplot(rf_test, aes(obs_abundance, abundance_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_a_v_rast.png", plot = p_rf_a_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_a_v_rast.png", plot = p_rf_wrap_a_rast, width = 8, height = 8)

# with relative abundance as response -----------------------------------------
p_rf_ra_rast <- ggplot(rf_test, aes(obs_rel_abundance, rel_abundance_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))


p_rf_wrap_ra_rast <- ggplot(rf_test, aes(obs_rel_abundance, rel_abundance_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_ra_v_rast.png", plot = p_rf_ra_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_ra_v_rast.png", plot = p_rf_wrap_ra_rast, width = 8, height = 8)


### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response-----------------------------------------------------
p_rf_wd_k_rast <- ggplot(rf_test, aes(obs_k_index, k_index_wd, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_wd_wrap_k_rast <- ggplot(rf_test, aes(obs_k_index, k_index_wd, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_k_rast.png", plot = p_rf_wd_k_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_k_rast.png", plot = p_rf_wd_wrap_k_rast, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_wd_s_rast <- ggplot(rf_test, aes(obs_shannon, shannon_wd, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wd_wrap_s_rast <- ggplot(rf_test, aes(obs_shannon, shannon_wd, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_s_rast.png", plot = p_rf_wd_s_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_s_rast.png", plot = p_rf_wd_wrap_s_rast, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_wd_a_rast <- ggplot(rf_test, aes(obs_abundance, abundance_wd, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wd_wrap_a_rast <- ggplot(rf_test, aes(obs_abundance, abundance_wd, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_a_rast.png", plot = p_rf_wd_a_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_a_rast.png", plot = p_rf_wd_wrap_a_rast, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_wd_ra_rast <- ggplot(rf_test, aes(obs_rel_abundance, rel_abundance_wd, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wd_wrap_ra_rast <- ggplot(rf_test, aes(obs_rel_abundance, rel_abundance_wd, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_ra_rast.png", plot = p_rf_wd_ra_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_ra_rast.png", plot = p_rf_wd_wrap_ra_rast, width = 8, height = 8)

### PREDICTOR: SELCTED VARIABLES ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_rf_var_k_rast <- ggplot(rf_test, aes(obs_k_index, k_index_var, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_var_wrap_k_rast <- ggplot(rf_test, aes(obs_k_index, k_index_var, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_k_rast.png", plot = p_rf_var_k_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_k_rast.png", plot = p_rf_var_wrap_k_rast, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_var_s_rast <- ggplot(rf_test, aes(obs_shannon, shannon_var, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_var_wrap_s_rast <- ggplot(rf_test, aes(obs_shannon, shannon_var, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_s_rast.png", plot = p_rf_var_s_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_s_rast.png", plot = p_rf_var_wrap_s_rast, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_var_a_rast <- ggplot(rf_test, aes(obs_abundance, abundance_var, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_var_wrap_a_rast <- ggplot(rf_test, aes(obs_abundance, abundance_var, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_a_rast.png", plot = p_rf_var_a_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_a_rast.png", plot = p_rf_var_wrap_a_rast, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_var_ra_rast <- ggplot(rf_test, aes(obs_rel_abundance, rel_abundance_var, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_var_wrap_ra_rast <- ggplot(rf_test, aes(obs_rel_abundance, rel_abundance_var, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_ra_rast.png", plot = p_rf_var_ra_rast, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_ra_rast.png", plot = p_rf_var_wrap_ra_rast, width = 8, height = 8)
```

### Test Measured
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response ----------------------------------------------------
p_rf_k_meas <- ggplot(rf_test, aes(obs_k_index, k_index_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_wrap_k_meas <- ggplot(rf_test, aes(obs_k_index, k_index_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_k_v_meas.png", plot = p_rf_k_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_k_v_meas.png", plot = p_rf_wrap_k_meas, width = 8, height = 8)

# with shannon index as response ----------------------------------------------
p_rf_s_meas <- ggplot(rf_test, aes(obs_shannon, shannon_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))
  
p_rf_wrap_s_meas <- ggplot(rf_test, aes(obs_shannon, shannon_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_s_v_meas.png", plot = p_rf_s_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_s_v_meas.png", plot = p_rf_wrap_s_meas, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_a_meas <- ggplot(rf_test, aes(obs_abundance, abundance_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_wrap_a_meas <- ggplot(rf_test, aes(obs_abundance, abundance_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_a_v_meas.png", plot = p_rf_a_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_a_v_meas.png", plot = p_rf_wrap_a_meas, width = 8, height = 8)

# with relative abundance as response -----------------------------------------
p_rf_ra_meas <- ggplot(rf_test, aes(obs_rel_abundance, rel_abundance_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_wrap_ra_meas <- ggplot(rf_test, aes(obs_rel_abundance, rel_abundance_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_ra_v_meas.png", plot = p_rf_ra_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_ra_v_meas.png", plot = p_rf_wrap_ra_meas, width = 8, height = 8)


### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response-----------------------------------------------------
p_rf_wd_k_meas <- ggplot(rf_test, aes(obs_k_index, rf_pred_model_wd_k_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_wd_wrap_k_meas <- ggplot(rf_test, aes(obs_k_index, rf_pred_model_wd_k_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_k_meas.png", plot = p_rf_wd_k_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_k_meas.png", plot = p_rf_wd_wrap_k_meas, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_wd_s_meas <- ggplot(rf_test, aes(obs_shannon, rf_pred_model_wd_s_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wd_wrap_s_meas <- ggplot(rf_test, aes(obs_shannon, rf_pred_model_wd_s_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_s_meas.png", plot = p_rf_wd_s_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_s_meas.png", plot = p_rf_wd_wrap_s_meas, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_wd_a_meas <- ggplot(rf_test, aes(obs_abundance, rf_pred_model_wd_a_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wd_wrap_a_meas <- ggplot(rf_test, aes(obs_abundance, rf_pred_model_wd_a_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_a_meas.png", plot = p_rf_wd_a_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_a_meas.png", plot = p_rf_wd_wrap_a_meas, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_wd_ra_meas <- ggplot(rf_test, aes(obs_rel_abundance, rf_pred_model_wd_ra_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wd_wrap_ra_meas <- ggplot(rf_test, aes(obs_rel_abundance, rf_pred_model_wd_ra_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_ra_meas.png", plot = p_rf_wd_ra_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_ra_meas.png", plot = p_rf_wd_wrap_ra_meas, width = 8, height = 8)

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_rf_samp_k_meas <- ggplot(rf_test, aes(obs_k_index, rf_pred_model_samp_k_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_samp_wrap_k_meas <- ggplot(rf_test, aes(obs_k_index, rf_pred_model_samp_k_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_k_meas.png", plot = p_rf_samp_k_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_wrap_k_meas.png", plot = p_rf_samp_wrap_k_meas, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_samp_s_meas <- ggplot(rf_test, aes(obs_shannon, rf_pred_model_samp_s_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_samp_wrap_s_meas <- ggplot(rf_test, aes(obs_shannon, rf_pred_model_samp_s_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_s_meas.png", plot = p_rf_samp_s_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_wrap_s_meas.png", plot = p_rf_samp_wrap_s_meas, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_samp_a_meas <- ggplot(rf_test, aes(obs_abundance, rf_pred_model_samp_a_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_samp_wrap_a_meas <- ggplot(rf_test, aes(obs_abundance, rf_pred_model_samp_a_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_a_meas.png", plot = p_rf_samp_a_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_wrap_a_meas.png", plot = p_rf_samp_wrap_a_meas, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_samp_ra_meas <- ggplot(rf_test, aes(obs_rel_abundance, rf_pred_model_samp_ra_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_samp_wrap_ra_meas <- ggplot(rf_test, aes(obs_rel_abundance, rf_pred_model_samp_ra_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_ra_meas.png", plot = p_rf_samp_ra_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_wrap_ra_meas.png", plot = p_rf_samp_wrap_ra_meas, width = 8, height = 8)

### PREDICTOR: ALL PREDICTORS ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_rf_sec_k_meas <- ggplot(rf_test_2, aes(k_index, rf_pred_model_sec_k_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_sec_wrap_k_meas <- ggplot(rf_test_2, aes(k_index, rf_pred_model_sec_k_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_k_meas.png", plot = p_rf_sec_k_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_wrap_k_meas.png", plot = p_rf_sec_wrap_k_meas, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_sec_s_meas <- ggplot(rf_test_2, aes(shannon, rf_pred_model_sec_s_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_sec_wrap_s_meas <- ggplot(rf_test_2, aes(shannon, rf_pred_model_sec_s_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_s_meas.png", plot = p_rf_sec_s_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_wrap_s_meas.png", plot = p_rf_sec_wrap_s_meas, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_sec_a_meas <- ggplot(rf_test_2, aes(abundance, rf_pred_model_sec_a_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_sec_wrap_a_meas <- ggplot(rf_test_2, aes(abundance, rf_pred_model_sec_a_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_a_meas.png", plot = p_rf_sec_a_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_wrap_a_meas.png", plot = p_rf_sec_wrap_a_meas, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_sec_ra_meas <- ggplot(rf_test_2, aes(rel_abundance, rf_pred_model_sec_ra_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_sec_wrap_ra_meas <- ggplot(rf_test_2, aes(rel_abundance, rf_pred_model_sec_ra_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_ra_meas.png", plot = p_rf_sec_ra_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_wrap_ra_meas.png", plot = p_rf_sec_wrap_ra_meas, width = 8, height = 8)

### PREDICTOR: SELCTED VARIABLES ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_rf_var_k_meas <- ggplot(rf_test_2, aes(k_index, rf_pred_model_var_k_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_var_wrap_k_meas <- ggplot(rf_test_2, aes(k_index, rf_pred_model_var_k_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_k_meas.png", plot = p_rf_var_k_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_k_meas.png", plot = p_rf_var_wrap_k_meas, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_var_s_meas <- ggplot(rf_test_2, aes(shannon, rf_pred_model_var_s_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_var_wrap_s_meas <- ggplot(rf_test_2, aes(shannon, rf_pred_model_var_s_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_s_meas.png", plot = p_rf_var_s_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_s_meas.png", plot = p_rf_var_wrap_s_meas, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_var_a_meas <- ggplot(rf_test_2, aes(abundance, rf_pred_model_var_a_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_var_wrap_a_meas <- ggplot(rf_test_2, aes(abundance, rf_pred_model_var_a_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_a_meas.png", plot = p_rf_var_a_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_a_meas.png", plot = p_rf_var_wrap_a_meas, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_var_ra_meas <- ggplot(rf_test_2, aes(rel_abundance, rf_pred_model_var_ra_c, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_var_wrap_ra_meas <- ggplot(rf_test_2, aes(rel_abundance, rf_pred_model_var_ra_c, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_ra_meas.png", plot = p_rf_var_ra_meas, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_ra_meas.png", plot = p_rf_var_wrap_ra_meas, width = 8, height = 8)
```

### Training Sets
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response ----------------------------------------------------
p_rf_k_train <- ggplot(rf_train, aes(k_index, pred_train_v_k, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_wrap_k_train <- ggplot(rf_train, aes(k_index, pred_train_v_k, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_k_v_train.png", plot = p_rf_k_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_k_v_train.png", plot = p_rf_wrap_k_train, width = 8, height = 8)

# with shannon index as response ----------------------------------------------
p_rf_s_train <- ggplot(rf_train, aes(shannon, pred_train_v_s, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))
  
p_rf_wrap_s_train <- ggplot(rf_train, aes(shannon, pred_train_v_s, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_s_v_train.png", plot = p_rf_s_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_s_v_train.png", plot = p_rf_wrap_s_train, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_a_train <- ggplot(rf_train, aes(abundance, pred_train_v_a, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_wrap_a_train <- ggplot(rf_train, aes(abundance, pred_train_v_a, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_a_v_train.png", plot = p_rf_a_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_a_v_train.png", plot = p_rf_wrap_a_train, width = 8, height = 8)

# with relative abundance as response -----------------------------------------
p_rf_ra_train <- ggplot(rf_train, aes(rel_abundance, pred_train_v_ra, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_wrap_ra_train <- ggplot(rf_train, aes(rel_abundance, pred_train_v_ra, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_ra_v_train.png", plot = p_rf_ra_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_ra_v_train.png", plot = p_rf_wrap_ra_train, width = 8, height = 8)


### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response-----------------------------------------------------
p_rf_wd_k_train <- ggplot(rf_train, aes(k_index, pred_train_wd_k, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_wd_wrap_k_train <- ggplot(rf_train, aes(k_index, pred_train_wd_k, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_k_train.png", plot = p_rf_wd_k_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_k_train.png", plot = p_rf_wd_wrap_k_train, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_wd_s_train <- ggplot(rf_train, aes(shannon, pred_train_wd_s, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wd_wrap_s_train <- ggplot(rf_train, aes(shannon, pred_train_wd_s, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_s_train.png", plot = p_rf_wd_s_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_s_train.png", plot = p_rf_wd_wrap_s_train, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_wd_a_train <- ggplot(rf_train, aes(abundance, pred_train_wd_a, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wd_wrap_a_train <- ggplot(rf_train, aes(abundance, pred_train_wd_a, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_a_train.png", plot = p_rf_wd_a_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_a_train.png", plot = p_rf_wd_wrap_a_train, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_wd_ra_train <- ggplot(rf_train, aes(rel_abundance, pred_train_wd_ra, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wd_wrap_ra_train <- ggplot(rf_train, aes(rel_abundance, pred_train_wd_ra, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_ra_train.png", plot = p_rf_wd_ra_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_ra_train.png", plot = p_rf_wd_wrap_ra_train, width = 8, height = 8)

### PREDICTOR: SAMPLING LOCATIONS ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_rf_samp_k_train <- ggplot(rf_train, aes(k_index, pred_train_samp_k, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_samp_wrap_k_train <- ggplot(rf_train, aes(k_index, pred_train_samp_k, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_k_train.png", plot = p_rf_samp_k_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_wrap_k_train.png", plot = p_rf_samp_wrap_k_train, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_samp_s_train <- ggplot(rf_train, aes(shannon, pred_train_samp_s, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_samp_wrap_s_train <- ggplot(rf_train, aes(shannon, pred_train_samp_s, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_s_train.png", plot = p_rf_samp_s_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_wrap_s_train.png", plot = p_rf_samp_wrap_s_train, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_samp_a_train <- ggplot(rf_train, aes(abundance, pred_train_samp_a, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_samp_wrap_a_train <- ggplot(rf_train, aes(abundance, pred_train_samp_a, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_a_train.png", plot = p_rf_samp_a_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_wrap_a_train.png", plot = p_rf_samp_wrap_a_train, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_samp_ra_train <- ggplot(rf_train, aes(rel_abundance, pred_train_samp_ra, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_samp_wrap_ra_train <- ggplot(rf_train, aes(rel_abundance, pred_train_samp_ra, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_ra_train.png", plot = p_rf_samp_ra_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_samp_wrap_ra_train.png", plot = p_rf_samp_wrap_ra_train, width = 8, height = 8)

### PREDICTOR: ALL PREDICTORS ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_rf_sec_k_train <- ggplot(rf_train_2, aes(k_index, pred_train_sec_k, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_sec_wrap_k_train <- ggplot(rf_train_2, aes(k_index, pred_train_sec_k, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_k_train.png", plot = p_rf_sec_k_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_wrap_k_train.png", plot = p_rf_sec_wrap_k_train, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_sec_s_train <- ggplot(rf_train_2, aes(shannon, pred_train_sec_s, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_sec_wrap_s_train <- ggplot(rf_train_2, aes(shannon, pred_train_sec_s, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_s_train.png", plot = p_rf_sec_s_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_wrap_s_train.png", plot = p_rf_sec_wrap_s_train, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_sec_a_train <- ggplot(rf_train_2, aes(abundance, pred_train_sec_a, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_sec_wrap_a_train <- ggplot(rf_train_2, aes(abundance, pred_train_sec_a, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_a_train.png", plot = p_rf_sec_a_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_wrap_a_train.png", plot = p_rf_sec_wrap_a_train, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_sec_ra_train <- ggplot(rf_train_2, aes(rel_abundance, pred_train_sec_ra, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_sec_wrap_ra_train <- ggplot(rf_train_2, aes(rel_abundance, pred_train_sec_ra, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_ra_train.png", plot = p_rf_sec_ra_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_sec_wrap_ra_train.png", plot = p_rf_sec_wrap_ra_train, width = 8, height = 8)

### PREDICTOR: SELCTED VARIABLES ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_rf_var_k_train <- ggplot(rf_train_2, aes(k_index, pred_train_var_k, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_var_wrap_k_train <- ggplot(rf_train_2, aes(k_index, pred_train_var_k, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_k_train.png", plot = p_rf_var_k_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_k_train.png", plot = p_rf_var_wrap_k_train, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_var_s_train <- ggplot(rf_train_2, aes(shannon, pred_train_var_s, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_var_wrap_s_train <- ggplot(rf_train_2, aes(shannon, pred_train_var_s, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_s_train.png", plot = p_rf_var_s_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_s_train.png", plot = p_rf_var_wrap_s_train, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_var_a_train <- ggplot(rf_train_2, aes(abundance, pred_train_var_a, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_var_wrap_a_train <- ggplot(rf_train_2, aes(abundance, pred_train_var_a, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_a_train.png", plot = p_rf_var_a_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_a_train.png", plot = p_rf_var_wrap_a_train, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_var_ra_train <- ggplot(rf_train_2, aes(rel_abundance, pred_train_var_ra, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_var_wrap_ra_train <- ggplot(rf_train_2, aes(rel_abundance, pred_train_var_ra, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Hydrol. Condition"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_ra_train.png", plot = p_rf_var_ra_train, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_ra_train.png", plot = p_rf_var_wrap_ra_train, width = 8, height = 8)
```

### Compare Raster & Measured
#### Create dataframes
```{r}
# select needed rows and construct the datafame needed
# combine raster with measured selected variable dataframe
rf_test_2_nr <- rf_test_2 |>
  dplyr::mutate(ID = row_number())

rf_test_nr <- rf_test |>
  dplyr::select(k_index_var, shannon_var, abundance_var, rel_abundance_var) |>
  dplyr::mutate(ID = row_number())

rf_test_var <- merge(rf_test_nr, rf_test_2_nr, by = "ID", all = TRUE)

# with k_index as response ------------------------------
rf_comp_v_k <- rf_test |>
  dplyr::select(obs_k_index, k_index_v, rf_pred_model_v_k_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = k_index_v,
                Measured = rf_pred_model_v_k_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

rf_comp_wd_k <- rf_test |>
  dplyr::select(obs_k_index, k_index_wd, rf_pred_model_wd_k_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = k_index_wd,
                Measured = rf_pred_model_wd_k_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

rf_comp_var_k <- rf_test_var |>
  dplyr::select(k_index, k_index_var, rf_pred_model_var_k_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = k_index_var,
                Measured = rf_pred_model_var_k_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

# with shannon index as response ----------------------------
rf_comp_v_s <- rf_test |>
  dplyr::select(obs_shannon, shannon_v, rf_pred_model_v_s_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = shannon_v,
                Measured = rf_pred_model_v_s_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

rf_comp_wd_s <- rf_test |>
  dplyr::select(obs_shannon, shannon_wd, rf_pred_model_wd_s_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = shannon_wd,
                Measured = rf_pred_model_wd_s_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

rf_comp_var_s <- rf_test_var |>
  dplyr::select(shannon, shannon_var, rf_pred_model_var_s_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = shannon_var,
                Measured = rf_pred_model_var_s_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

# with absolute abundance as response ----------------------------
rf_comp_v_a <- rf_test |>
  dplyr::select(obs_abundance, abundance_v, rf_pred_model_v_a_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = abundance_v,
                Measured = rf_pred_model_v_a_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

rf_comp_wd_a <- rf_test |>
  dplyr::select(obs_abundance, abundance_wd, rf_pred_model_wd_a_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = abundance_wd,
                Measured = rf_pred_model_wd_a_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

rf_comp_var_a <- rf_test_var |>
  dplyr::select(abundance, abundance_var, rf_pred_model_var_a_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = abundance_var,
                Measured = rf_pred_model_var_a_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

# with relative abundance as response ----------------------------
rf_comp_v_ra <- rf_test |>
  dplyr::select(obs_rel_abundance, rel_abundance_v, rf_pred_model_v_ra_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = rel_abundance_v,
                Measured = rf_pred_model_v_ra_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

rf_comp_wd_ra <- rf_test |>
  dplyr::select(obs_rel_abundance, rel_abundance_wd, rf_pred_model_wd_ra_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = rel_abundance_wd,
                Measured = rf_pred_model_wd_ra_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")

rf_comp_var_ra <- rf_test_var |>
  dplyr::select(rel_abundance, rel_abundance_var, rf_pred_model_var_ra_c, reach_type, Reach_Untersuchungsstelle) |>
  dplyr::rename(Raster = rel_abundance_var,
                Measured = rf_pred_model_var_ra_c) |>
  tidyr::pivot_longer(cols = c(Raster, Measured), names_to = "Origin", values_to = "simulated")
```

#### Comparative Plots
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response ----------------------------------------------------
p_rf_k_comp <- ggplot(rf_comp_v_k, aes(obs_k_index, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_wrap_k_comp <- ggplot(rf_comp_v_k, aes(obs_k_index, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_k_comp.png", plot = p_rf_k_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_k_comp.png", plot = p_rf_wrap_k_comp, width = 8, height = 8)

# with shannon index as response ----------------------------------------------
p_rf_s_comp <- ggplot(rf_comp_v_s, aes(obs_shannon, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wrap_s_comp <- ggplot(rf_comp_v_s, aes(obs_shannon, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_s_comp.png", plot = p_rf_s_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_s_comp.png", plot = p_rf_wrap_s_comp, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_a_comp <- ggplot(rf_comp_v_a, aes(obs_abundance, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))


p_rf_wrap_a_comp <- ggplot(rf_comp_v_a, aes(obs_abundance, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))


# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_a_comp.png", plot = p_rf_a_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_a_comp.png", plot = p_rf_wrap_a_comp, width = 8, height = 8)

# with relative abundance as response -----------------------------------------
p_rf_ra_comp <- ggplot(rf_comp_v_ra, aes(obs_rel_abundance, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))


p_rf_wrap_ra_comp <- ggplot(rf_comp_v_ra, aes(obs_rel_abundance, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_ra_comp.png", plot = p_rf_ra_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_ra_comp.png", plot = p_rf_wrap_ra_comp, width = 8, height = 8)


### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response-----------------------------------------------------
p_rf_wd_k_comp <- ggplot(rf_comp_wd_k, aes(obs_k_index, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_wd_wrap_k_comp <- ggplot(rf_comp_wd_k, aes(obs_k_index, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_k_comp.png", plot = p_rf_wd_k_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_k_comp.png", plot = p_rf_wd_wrap_k_comp, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_wd_s_comp <- ggplot(rf_comp_wd_s, aes(obs_shannon, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wd_wrap_s_comp <- ggplot(rf_comp_wd_s, aes(obs_shannon, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_s_comp.png", plot = p_rf_wd_s_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_s_comp.png", plot = p_rf_wd_wrap_s_comp, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_wd_a_comp <- ggplot(rf_comp_wd_a, aes(obs_abundance, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wd_wrap_a_comp <- ggplot(rf_comp_wd_a, aes(obs_abundance, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_a_comp.png", plot = p_rf_wd_a_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_a_comp.png", plot = p_rf_wd_wrap_a_comp, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_wd_ra_comp <- ggplot(rf_comp_wd_ra, aes(obs_rel_abundance, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_wd_wrap_ra_comp <- ggplot(rf_comp_wd_ra, aes(obs_rel_abundance, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_ra_comp.png", plot = p_rf_wd_ra_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_ra_comp.png", plot = p_rf_wd_wrap_ra_comp, width = 8, height = 8)

### PREDICTOR: SELCTED VARIABLES ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_rf_var_k_comp <- ggplot(rf_comp_var_k, aes(k_index, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

p_rf_var_wrap_k_comp <- ggplot(rf_comp_var_k, aes(k_index, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_k_comp.png", plot = p_rf_var_k_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_k_comp.png", plot = p_rf_var_wrap_k_comp, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_var_s_comp <- ggplot(rf_comp_var_s, aes(shannon, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_var_wrap_s_comp <- ggplot(rf_comp_var_s, aes(shannon, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_s_comp.png", plot = p_rf_var_s_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_s_comp.png", plot = p_rf_var_wrap_s_comp, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_var_a_comp <- ggplot(rf_comp_var_a, aes(abundance, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_var_wrap_a_comp <- ggplot(rf_comp_var_a, aes(abundance, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_a_comp.png", plot = p_rf_var_a_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_a_comp.png", plot = p_rf_var_wrap_a_comp, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_var_ra_comp <- ggplot(rf_comp_var_ra, aes(rel_abundance, simulated, col = Origin)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14))

  
p_rf_var_wrap_ra_comp <- ggplot(rf_comp_var_ra, aes(rel_abundance, simulated, col = Origin)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted",
    col = "Origin"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
        strip.text.x = element_text(size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_ra_comp.png", plot = p_rf_var_ra_comp, width = 8, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_ra_comp.png", plot = p_rf_var_wrap_ra_comp, width = 8, height = 8)
```




