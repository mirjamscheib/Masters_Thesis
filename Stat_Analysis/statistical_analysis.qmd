---
title: "Habitat_Model_VZH"
format: html
---

# Load packages 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("raster")
pkgCheck("spsurvey")
pkgCheck("terra")
pkgCheck("raster")
pkgCheck("ggplot2")
pkgCheck("tibble")
pkgCheck("readr")
pkgCheck("dplyr")
pkgCheck("tidyr")
pkgCheck("scales")
```

# Load Data 
```{r}
# change biogeo regions and geology into integers for ML modelling
test_sections <- c("L2" = "Hydropeaking", "M1" = "Hydropeaking", "S1" = "Hydropeaking", "S2" = "Hydropeaking", "TH4" = "Natural/near-natural", "GL1" = "Natural/near-natural", "GL2" = "Natural/near-natural", "VR3" = "Hydropeaking")

training_sections <- c("L2" = "Hydropeaking", "L1" = "Hydropeaking", "LR" = "Residual flow",
                       "M1" = "Hydropeaking", "M5" = "Hydropeaking", "M7" = "Hydropeaking", "MR" = "Residual flow", 
                       "GL5" = "Natural/near-natural", 
                       "P1" = "Hydropeaking", "PR" = "Residual flow", 
                       "SA1" = "Hydropeaking", "SA2" = "Hydropeaking", "SA6" = "Hydropeaking", "SAR" = "Residual flow",
                       "SE2" = "Natural/near-natural", "SE3" = "Natural/near-natural",
                       "S1" = "Hydropeaking", "S2" = "Hydropeaking", "SR" = "Residual flow",
                       "S5" = "Hydropeaking", "TH3" = "Natural/near-natural", "TH4" = "Natural/near-natural", 
                       "T1" = "Hydropeaking", "T2" = "Hydropeaking",
                       "GL1" = "Natural/near-natural", "GL2" = "Natural/near-natural", 
                       "VE2" = "Natural/near-natural", "VE4" = "Natural/near-natural",
                       "VR1" = "Hydropeaking", "VR3" = "Hydropeaking", "VR6" = "Residual flow")

# load data 
brt_test <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_test_brt.csv") |>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(test_sections), 
                                   test_sections[Reach_Untersuchungsstelle], NA))

brt_test_2 <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_test_2_brt.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(test_sections), 
                                   test_sections[Reach_Untersuchungsstelle], NA))

brt_train <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_train_brt.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(training_sections), 
                                   training_sections[Reach_Untersuchungsstelle], NA))


### RF ### 
rf_test <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_test_rf.csv") |>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(test_sections), 
                                   test_sections[Reach_Untersuchungsstelle], NA))

rf_test_2 <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_test_2_rf.csv") |>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(test_sections), 
                                   test_sections[Reach_Untersuchungsstelle], NA))

rf_train <- read_delim("Stat_Analysis/stat_analysis_data/regr_pred_train_rf.csv")|>
  mutate(reach_type = ifelse(Reach_Untersuchungsstelle %in% names(training_sections), 
                                   training_sections[Reach_Untersuchungsstelle], NA))
```
       
# Regr. Analysis
## BRT
### Test Measured
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_brt_k_measured <- lm(brt_pred_model_v_k_c ~ obs_k_index, data = brt_test)
sum_v_brt_k_measured <- summary(regr_v_brt_k_measured)
p_v_brt_k_measured <- sum_v_brt_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_v_brt_k_measured <- sum_v_brt_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_v_brt_s_measured <- lm(brt_pred_model_v_s_c ~ obs_shannon, data = brt_test)
sum_v_brt_s_measured <- summary(regr_v_brt_s_measured)
p_v_brt_s_measured <- sum_v_brt_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_v_brt_s_measured <- sum_v_brt_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_v_brt_a_measured <- lm(brt_pred_model_v_a_c ~ obs_abundance, data = brt_test)
sum_v_brt_a_measured <- summary(regr_v_brt_a_measured)
p_v_brt_a_measured <- sum_v_brt_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_v_brt_a_measured <- sum_v_brt_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_v_brt_ra_measured <- lm(brt_pred_model_v_ra_c ~ obs_rel_abundance, data = brt_test)
sum_v_brt_ra_measured <- summary(regr_v_brt_ra_measured)
p_v_brt_ra_measured <- sum_v_brt_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_v_brt_ra_measured <- sum_v_brt_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_brt_k_measured <- lm(brt_pred_model_wd_k_c ~ obs_k_index, data = brt_test)
sum_wd_brt_k_measured <- summary(regr_wd_brt_k_measured)
p_wd_brt_k_measured <- sum_wd_brt_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_wd_brt_k_measured <- sum_wd_brt_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_wd_brt_s_measured <- lm(brt_pred_model_wd_s_c ~ obs_shannon, data = brt_test)
sum_wd_brt_s_measured <- summary(regr_wd_brt_s_measured)
p_wd_brt_s_measured <- sum_wd_brt_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_wd_brt_s_measured <- sum_wd_brt_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_wd_brt_a_measured <- lm(brt_pred_model_wd_a_c ~ obs_abundance, data = brt_test)
sum_wd_brt_a_measured <- summary(regr_wd_brt_a_measured)
p_wd_brt_a_measured <- sum_wd_brt_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_wd_brt_a_measured <- sum_wd_brt_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_wd_brt_ra_measured <- lm(brt_pred_model_wd_ra_c ~ obs_rel_abundance, data = brt_test)
sum_wd_brt_ra_measured <- summary(regr_wd_brt_ra_measured)
p_wd_brt_ra_measured <- sum_wd_brt_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_wd_brt_ra_measured <- sum_wd_brt_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_brt_k_measured <- lm(brt_pred_model_samp_k_c ~ obs_k_index, data = brt_test)
sum_samp_brt_k_measured <- summary(regr_samp_brt_k_measured)
p_samp_brt_k_measured <- sum_samp_brt_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_samp_brt_k_measured <- sum_samp_brt_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_samp_brt_s_measured <- lm(brt_pred_model_samp_s_c ~ obs_shannon, data = brt_test)
sum_samp_brt_s_measured <- summary(regr_samp_brt_s_measured)
p_samp_brt_s_measured <- sum_samp_brt_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_samp_brt_s_measured <- sum_samp_brt_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_samp_brt_a_measured <- lm(brt_pred_model_samp_a_c ~ obs_abundance, data = brt_test)
sum_samp_brt_a_measured <- summary(regr_samp_brt_a_measured)
p_samp_brt_a_measured <- sum_samp_brt_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_samp_brt_a_measured <- sum_samp_brt_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_samp_brt_ra_measured <- lm(brt_pred_model_samp_ra_c ~ obs_rel_abundance, data = brt_test)
sum_samp_brt_ra_measured <- summary(regr_samp_brt_ra_measured)
p_samp_brt_ra_measured <- sum_samp_brt_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_samp_brt_ra_measured <- sum_samp_brt_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_brt_k_measured <- lm(brt_pred_model_sec_k_c ~ k_index, data = brt_test_2)
sum_sec_brt_k_measured <- summary(regr_sec_brt_k_measured)
p_sec_brt_k_measured <- sum_sec_brt_k_measured$coefficients["k_index", "Pr(>|t|)"]
s_sec_brt_k_measured <- sum_sec_brt_k_measured$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_sec_brt_s_measured <- lm(brt_pred_model_sec_s_c ~ shannon, data = brt_test_2)
sum_sec_brt_s_measured <- summary(regr_sec_brt_s_measured)
p_sec_brt_s_measured <- sum_sec_brt_s_measured$coefficients["shannon", "Pr(>|t|)"]
s_sec_brt_s_measured <- sum_sec_brt_s_measured$coefficients["shannon", "Estimate"]

# with abundance as response
regr_sec_brt_a_measured <- lm(brt_pred_model_sec_a_c ~ abundance, data = brt_test_2)
sum_sec_brt_a_measured <- summary(regr_sec_brt_a_measured)
p_sec_brt_a_measured <- sum_sec_brt_a_measured$coefficients["abundance", "Pr(>|t|)"]
s_sec_brt_a_measured <- sum_sec_brt_a_measured$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_sec_brt_ra_measured <- lm(brt_pred_model_sec_ra_c ~ rel_abundance, data = brt_test_2)
sum_sec_brt_ra_measured <- summary(regr_sec_brt_ra_measured)
p_sec_brt_ra_measured <- sum_sec_brt_ra_measured$coefficients["rel_abundance", "Pr(>|t|)"]
s_sec_brt_ra_measured <- sum_sec_brt_ra_measured$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_brt_k_measured <- lm(brt_pred_model_var_k_c ~ k_index, data = brt_test_2)
sum_var_brt_k_measured <- summary(regr_var_brt_k_measured)
p_var_brt_k_measured <- sum_var_brt_k_measured$coefficients["k_index", "Pr(>|t|)"]
s_var_brt_k_measured <- sum_var_brt_k_measured$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_var_brt_s_measured <- lm(brt_pred_model_var_s_c ~ shannon, data = brt_test_2)
sum_var_brt_s_measured <- summary(regr_var_brt_s_measured)
p_var_brt_s_measured <- sum_var_brt_s_measured$coefficients["shannon", "Pr(>|t|)"]
s_var_brt_s_measured <- sum_var_brt_s_measured$coefficients["shannon", "Estimate"]

# with abundance as response
regr_var_brt_a_measured <- lm(brt_pred_model_var_a_c ~ abundance, data = brt_test_2)
sum_var_brt_a_measured <- summary(regr_var_brt_a_measured)
p_var_brt_a_measured <- sum_var_brt_a_measured$coefficients["abundance", "Pr(>|t|)"]
s_var_brt_a_measured <- sum_var_brt_a_measured$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_var_brt_ra_measured <- lm(brt_pred_model_var_ra_c ~ rel_abundance, data = brt_test_2)
sum_var_brt_ra_measured <- summary(regr_var_brt_ra_measured)
p_var_brt_ra_measured <- sum_var_brt_ra_measured$coefficients["rel_abundance", "Pr(>|t|)"]
s_var_brt_ra_measured <- sum_var_brt_ra_measured$coefficients["rel_abundance", "Estimate"]
```
                                          
### Test Raster
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_brt_k_rast <- lm(k_index_v ~ obs_k_index, data = brt_test)
sum_v_brt_k_rast <- summary(regr_v_brt_k_rast)
p_v_brt_k_rast <- sum_v_brt_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_v_brt_k_rast <- sum_v_brt_k_rast$coefficients["obs_k_index", "Estimate"]
r_v_brt_k_rast <- summary(lm(k_index_v ~ obs_k_index, data = brt))$adj.r.squared

# with shannon index as response
regr_v_brt_s_rast <- lm(shannon_v ~ obs_shannon, data = brt_test)
sum_v_brt_s_rast <- summary(regr_v_brt_s_rast)
p_v_brt_s_rast <- sum_v_brt_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_v_brt_s_rast <- sum_v_brt_s_rast$coefficients["obs_shannon", "Estimate"]
r_v_brt_s_rast <- summary(lm(shannon_v ~ obs_shannon, data = brt))$adj.r.squared

# with abundance as response
regr_v_brt_a_rast <- lm(abundance_v ~ obs_abundance, data = brt_test)
sum_v_brt_a_rast <- summary(regr_v_brt_a_rast)
p_v_brt_a_rast <- sum_v_brt_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_v_brt_a_rast <- sum_v_brt_a_rast$coefficients["obs_abundance", "Estimate"]
r_v_brt_a_rast <- summary(lm(abundance_v ~ obs_abundance, data = brt))$adj.r.squared

# with rel_abundance as response
regr_v_brt_ra_rast <- lm(rel_abundance_v ~ obs_rel_abundance, data = brt_test)
sum_v_brt_ra_rast <- summary(regr_v_brt_ra_rast)
p_v_brt_ra_rast <- sum_v_brt_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_v_brt_ra_rast <- sum_v_brt_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_v_brt_ra_rast <- summary(lm(rel_abundance_v ~ obs_rel_abundance, data = brt))$adj.r.squared

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_brt_k_rast <- lm(k_index_wd ~ obs_k_index, data = brt_test)
sum_wd_brt_k_rast <- summary(regr_wd_brt_k_rast)
p_wd_brt_k_rast <- sum_wd_brt_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_wd_brt_k_rast <- sum_wd_brt_k_rast$coefficients["obs_k_index", "Estimate"]
r_wd_brt_k_rast <- summary(lm(k_index_wd ~ obs_k_index, data = brt))$adj.r.squared

# with shannon index as response
regr_wd_brt_s_rast <- lm(shannon_wd ~ obs_shannon, data = brt_test)
sum_wd_brt_s_rast <- summary(regr_wd_brt_s_rast)
p_wd_brt_s_rast <- sum_wd_brt_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_wd_brt_s_rast <- sum_wd_brt_s_rast$coefficients["obs_shannon", "Estimate"]
r_wd_brt_s_rast <- summary(lm(shannon_wd ~ obs_shannon, data = brt))$adj.r.squared

# with abundance as response
regr_wd_brt_a_rast <- lm(abundance_wd ~ obs_abundance, data = brt_test)
sum_wd_brt_a_rast <- summary(regr_wd_brt_a_rast)
p_wd_brt_a_rast <- sum_wd_brt_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_wd_brt_a_rast <- sum_wd_brt_a_rast$coefficients["obs_abundance", "Estimate"]
r_wd_brt_a_rast <- summary(lm(abundance_wd ~ obs_abundance, data = brt))$adj.r.squared

# with rel_abundance as response
regr_wd_brt_ra_rast <- lm(rel_abundance_wd ~ obs_rel_abundance, data = brt_test)
sum_wd_brt_ra_rast <- summary(regr_wd_brt_ra_rast)
p_wd_brt_ra_rast <- sum_wd_brt_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_wd_brt_ra_rast <- sum_wd_brt_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_wd_brt_ra_rast <- summary(lm(rel_abundance_wd ~ obs_rel_abundance, data = brt))$adj.r.squared

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_brt_k_rast <- lm(k_index_var ~ obs_k_index, data = brt_test)
sum_var_brt_k_rast <- summary(regr_var_brt_k_rast)
p_var_brt_k_rast <- sum_var_brt_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_var_brt_k_rast <- sum_var_brt_k_rast$coefficients["obs_k_index", "Estimate"]
r_var_brt_k_rast <- summary(lm(k_index_var ~ obs_k_index, data = brt))$adj.r.squared

# with shannon index as response
regr_var_brt_s_rast <- lm(shannon_var ~ obs_shannon, data = brt_test)
sum_var_brt_s_rast <- summary(regr_wd_brt_s_rast)
p_var_brt_s_rast <- sum_var_brt_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_var_brt_s_rast <- sum_var_brt_s_rast$coefficients["obs_shannon", "Estimate"]
r_var_brt_s_rast <- summary(lm(shannon_var ~ obs_shannon, data = brt))$adj.r.squared

# with abundance as response
regr_var_brt_a_rast <- lm(abundance_var ~ obs_abundance, data = brt_test)
sum_var_brt_a_rast <- summary(regr_var_brt_a_rast)
p_var_brt_a_rast <- sum_var_brt_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_var_brt_a_rast <- sum_var_brt_a_rast$coefficients["obs_abundance", "Estimate"]
r_var_brt_a_rast <- summary(lm(abundance_var ~ obs_abundance, data = brt))$adj.r.squared

# with rel_abundance as response
regr_var_brt_ra_rast <- lm(rel_abundance_var ~ obs_rel_abundance, data = brt_test)
sum_var_brt_ra_rast <- summary(regr_var_brt_ra_rast)
p_var_brt_ra_rast <- sum_var_brt_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_var_brt_ra_rast <- sum_var_brt_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_var_brt_ra_rast <- summary(lm(rel_abundance_var ~ obs_rel_abundance, data = brt))$adj.r.squared
```
                              
### Training Sets
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_brt_k_train <- lm(pred_train_v_k ~ k_index, data = brt_train)
sum_v_brt_k_train <- summary(regr_v_k_train)
p_v_brt_k_train <- sum_v_k_train$coefficients["k_index", "Pr(>|t|)"]
s_v_brt_k_train <- sum_v_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_v_brt_s_train <- lm(pred_train_v_s ~ shannon, data = brt_train)
sum_v_brt_s_train <- summary(regr_v_s_train)
p_v_brt_s_train <- sum_v_s_train$coefficients["shannon", "Pr(>|t|)"]
s_v_brt_s_train <- sum_v_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_v_brt_a_train <- lm(pred_train_v_a ~ abundance, data = brt_train)
sum_v_brt_a_train <- summary(regr_v_a_train)
p_v_brt_a_train <- sum_v_a_train$coefficients["abundance", "Pr(>|t|)"]
s_v_brt_a_train <- sum_v_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_v_brt_ra_train <- lm(pred_train_v_ra ~ rel_abundance, data = brt_train)
sum_v_brt_ra_train <- summary(regr_v_ra_train)
p_v_brt_ra_train <- sum_v_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_v_brt_ra_train <- sum_v_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_brt_k_train <- lm(pred_train_wd_k ~ k_index, data = brt_train)
sum_wd_brt_k_train <- summary(regr_wd_k_train)
p_wd_brt_k_train <- sum_wd_k_train$coefficients["k_index", "Pr(>|t|)"]
s_wd_brt_k_train <- sum_wd_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_wd_brt_s_train <- lm(pred_train_wd_s ~ shannon, data = brt_train)
sum_wd_brt_s_train <- summary(regr_wd_s_train)
p_wd_brt_s_train <- sum_wd_s_train$coefficients["shannon", "Pr(>|t|)"]
s_wd_brt_s_train <- sum_wd_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_wd_brt_a_train <- lm(pred_train_wd_a ~ abundance, data = brt_train)
sum_wd_brt_a_train <- summary(regr_wd_a_train)
p_wd_brt_a_train <- sum_wd_a_train$coefficients["abundance", "Pr(>|t|)"]
s_wd_brt_a_train <- sum_wd_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_wd_brt_ra_train <- lm(pred_train_wd_ra ~ rel_abundance, data = brt_train)
sum_wd_brt_ra_train <- summary(regr_wd_ra_train)
p_wd_brt_ra_train <- sum_wd_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_wd_brt_ra_train <- sum_wd_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_brt_k_train <- lm(pred_train_samp_k ~ k_index, data = brt_train)
sum_samp_brt_k_train <- summary(regr_samp_k_train)
p_samp_brt_k_train <- sum_samp_k_train$coefficients["k_index", "Pr(>|t|)"]
s_samp_brt_k_train <- sum_samp_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_samp_brt_s_train <- lm(pred_train_samp_s ~ shannon, data = brt_train)
sum_samp_brt_s_train <- summary(regr_samp_s_train)
p_samp_brt_s_train <- sum_samp_s_train$coefficients["shannon", "Pr(>|t|)"]
s_samp_brt_s_train <- sum_samp_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_samp_brt_a_train <- lm(pred_train_samp_a ~ abundance, data = brt_train)
sum_samp_brt_a_train <- summary(regr_samp_a_train)
p_samp_brt_a_train <- sum_samp_a_train$coefficients["abundance", "Pr(>|t|)"]
s_samp_brt_a_train <- sum_samp_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_samp_brt_ra_train <- lm(pred_train_samp_ra ~ rel_abundance, data = brt_train)
sum_samp_brt_ra_train <- summary(regr_samp_ra_train)
p_samp_brt_ra_train <- sum_samp_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_samp_brt_ra_train <- sum_samp_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_brt_k_train <- lm(pred_train_sec_k ~ k_index, data = brt_train)
sum_sec_brt_k_train <- summary(regr_sec_k_train)
p_sec_brt_k_train <- sum_sec_k_train$coefficients["k_index", "Pr(>|t|)"]
s_sec_brt_k_train <- sum_sec_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_sec_brt_s_train <- lm(pred_train_sec_s ~ shannon, data = brt_train)
sum_sec_brt_s_train <- summary(regr_sec_s_train)
p_sec_brt_s_train <- sum_sec_s_train$coefficients["shannon", "Pr(>|t|)"]
s_sec_brt_s_train <- sum_sec_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_sec_brt_a_train <- lm(pred_train_sec_a ~ abundance, data = brt_train)
sum_sec_brt_a_train <- summary(regr_sec_a_train)
p_sec_brt_a_train <- sum_sec_a_train$coefficients["abundance", "Pr(>|t|)"]
s_sec_brt_a_train <- sum_sec_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_sec_brt_ra_train <- lm(pred_train_sec_ra ~ rel_abundance, data = brt_train)
sum_sec_brt_ra_train <- summary(regr_sec_ra_train)
p_sec_brt_ra_train <- sum_sec_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_sec_brt_ra_train <- sum_sec_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_brt_k_train <- lm(pred_train_var_k ~ k_index, data = brt_train)
sum_var_brt_k_train <- summary(regr_var_k_train)
p_var_brt_k_train <- sum_var_k_train$coefficients["k_index", "Pr(>|t|)"]
s_var_brt_k_train <- sum_var_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_var_brt_s_train <- lm(pred_train_var_s ~ shannon, data = brt_train)
sum_var_brt_s_train <- summary(regr_var_s_train)
p_var_brt_s_train <- sum_var_s_train$coefficients["shannon", "Pr(>|t|)"]
s_var_brt_s_train <- sum_var_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_var_brt_a_train <- lm(pred_train_var_a ~ abundance, data = brt_train)
sum_var_brt_a_train <- summary(regr_var_a_train)
p_var_brt_a_train <- sum_var_a_train$coefficients["abundance", "Pr(>|t|)"]
s_var_brt_a_train <- sum_var_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_var_brt_ra_train <- lm(pred_train_var_ra ~ rel_abundance, data = brt_train)
sum_var_brt_ra_train <- summary(regr_var_ra_train)
p_var_brt_ra_train <- sum_var_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_var_brt_ra_train <- sum_var_ra_train$coefficients["rel_abundance", "Estimate"]
```
                              
## RF
### Test Measured 
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_rf_rf_k_measured <- lm(rf_pred_model_v_rf_k_c ~ obs_k_index, data = rf_test)
sum_v_rf_k_measured <- summary(regr_v_rf_k_measured)
p_v_rf_k_measured <- sum_v_rf_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_v_rf_k_measured <- sum_v_rf_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_v_rf_s_measured <- lm(rf_pred_model_v_rf_s_c ~ obs_shannon, data = rf_test)
sum_v_rf_s_measured <- summary(regr_v_rf_s_measured)
p_v_rf_s_measured <- sum_v_rf_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_v_rf_s_measured <- sum_v_rf_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_v_rf_a_measured <- lm(rf_pred_model_v_rf_a_c ~ obs_abundance, data = rf_test)
sum_v_rf_a_measured <- summary(regr_v_rf_a_measured)
p_v_rf_a_measured <- sum_v_rf_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_v_rf_a_measured <- sum_v_rf_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_v_rf_ra_measured <- lm(rf_pred_model_v_rf_ra_c ~ obs_rel_abundance, data = rf_test)
sum_v_rf_ra_measured <- summary(regr_v_rf_ra_measured)
p_v_rf_ra_measured <- sum_v_rf_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_v_rf_ra_measured <- sum_v_rf_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_rf_k_measured <- lm(rf_pred_model_wd_rf_k_c ~ obs_k_index, data = rf_test)
sum_wd_rf_k_measured <- summary(regr_wd_rf_k_measured)
p_wd_rf_k_measured <- sum_wd_rf_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_wd_rf_k_measured <- sum_wd_rf_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_wd_rf_s_measured <- lm(rf_pred_model_wd_rf_s_c ~ obs_shannon, data = rf_test)
sum_wd_rf_s_measured <- summary(regr_wd_rf_s_measured)
p_wd_rf_s_measured <- sum_wd_rf_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_wd_rf_s_measured <- sum_wd_rf_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_wd_rf_a_measured <- lm(rf_pred_model_wd_rf_a_c ~ obs_abundance, data = rf_test)
sum_wd_rf_a_measured <- summary(regr_wd_rf_a_measured)
p_wd_rf_a_measured <- sum_wd_rf_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_wd_rf_a_measured <- sum_wd_rf_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_wd_rf_ra_measured <- lm(rf_pred_model_wd_rf_ra_c ~ obs_rel_abundance, data = rf_test)
sum_wd_rf_ra_measured <- summary(regr_wd_rf_ra_measured)
p_wd_rf_ra_measured <- sum_wd_rf_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_wd_rf_ra_measured <- sum_wd_rf_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_rf_k_measured <- lm(rf_pred_model_samp_rf_k_c ~ obs_k_index, data = rf_test)
sum_samp_rf_k_measured <- summary(regr_samp_rf_k_measured)
p_samp_rf_k_measured <- sum_samp_rf_k_measured$coefficients["obs_k_index", "Pr(>|t|)"]
s_samp_rf_k_measured <- sum_samp_rf_k_measured$coefficients["obs_k_index", "Estimate"]

# with shannon index as response
regr_samp_rf_s_measured <- lm(rf_pred_model_samp_rf_s_c ~ obs_shannon, data = rf_test)
sum_samp_rf_s_measured <- summary(regr_samp_rf_s_measured)
p_samp_rf_s_measured <- sum_samp_rf_s_measured$coefficients["obs_shannon", "Pr(>|t|)"]
s_samp_rf_s_measured <- sum_samp_rf_s_measured$coefficients["obs_shannon", "Estimate"]

# with abundance as response
regr_samp_rf_a_measured <- lm(rf_pred_model_samp_rf_a_c ~ obs_abundance, data = rf_test)
sum_samp_rf_a_measured <- summary(regr_samp_rf_a_measured)
p_samp_rf_a_measured <- sum_samp_rf_a_measured$coefficients["obs_abundance", "Pr(>|t|)"]
s_samp_rf_a_measured <- sum_samp_rf_a_measured$coefficients["obs_abundance", "Estimate"]

# with rel_abundance as response
regr_samp_rf_ra_measured <- lm(rf_pred_model_samp_rf_ra_c ~ obs_rel_abundance, data = rf_test)
sum_samp_rf_ra_measured <- summary(regr_samp_rf_ra_measured)
p_samp_rf_ra_measured <- sum_samp_rf_ra_measured$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_samp_rf_ra_measured <- sum_samp_rf_ra_measured$coefficients["obs_rel_abundance", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_rf_k_measured <- lm(rf_pred_model_sec_rf_k_c ~ k_index, data = rf_test_2)
sum_sec_rf_k_measured <- summary(regr_sec_rf_k_measured)
p_sec_rf_k_measured <- sum_sec_rf_k_measured$coefficients["k_index", "Pr(>|t|)"]
s_sec_rf_k_measured <- sum_sec_rf_k_measured$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_sec_rf_s_measured <- lm(rf_pred_model_sec_rf_s_c ~ shannon, data = rf_test_2)
sum_sec_rf_s_measured <- summary(regr_sec_rf_s_measured)
p_sec_rf_s_measured <- sum_sec_rf_s_measured$coefficients["shannon", "Pr(>|t|)"]
s_sec_rf_s_measured <- sum_sec_rf_s_measured$coefficients["shannon", "Estimate"]

# with abundance as response
regr_sec_rf_a_measured <- lm(rf_pred_model_sec_rf_a_c ~ abundance, data = rf_test_2)
sum_sec_rf_a_measured <- summary(regr_sec_rf_a_measured)
p_sec_rf_a_measured <- sum_sec_rf_a_measured$coefficients["abundance", "Pr(>|t|)"]
s_sec_rf_a_measured <- sum_sec_rf_a_measured$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_sec_rf_ra_measured <- lm(rf_pred_model_sec_rf_ra_c ~ rel_abundance, data = rf_test_2)
sum_sec_rf_ra_measured <- summary(regr_sec_rf_ra_measured)
p_sec_rf_ra_measured <- sum_sec_rf_ra_measured$coefficients["rel_abundance", "Pr(>|t|)"]
s_sec_rf_ra_measured <- sum_sec_rf_ra_measured$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_rf_k_measured <- lm(rf_pred_model_var_rf_k_c ~ k_index, data = rf_test_2)
sum_var_rf_k_measured <- summary(regr_var_rf_k_measured)
p_var_rf_k_measured <- sum_var_rf_k_measured$coefficients["k_index", "Pr(>|t|)"]
s_var_rf_k_measured <- sum_var_rf_k_measured$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_var_rf_s_measured <- lm(rf_pred_model_var_rf_s_c ~ shannon, data = rf_test_2)
sum_var_rf_s_measured <- summary(regr_var_rf_s_measured)
p_var_rf_s_measured <- sum_var_rf_s_measured$coefficients["shannon", "Pr(>|t|)"]
s_var_rf_s_measured <- sum_var_rf_s_measured$coefficients["shannon", "Estimate"]

# with abundance as response
regr_var_rf_a_measured <- lm(rf_pred_model_var_rf_a_c ~ abundance, data = rf_test_2)
sum_var_rf_a_measured <- summary(regr_var_rf_a_measured)
p_var_rf_a_measured <- sum_var_rf_a_measured$coefficients["abundance", "Pr(>|t|)"]
s_var_rf_a_measured <- sum_var_rf_a_measured$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_var_rf_ra_measured <- lm(rf_pred_model_var_rf_ra_c ~ rel_abundance, data = rf_test_2)
sum_var_rf_ra_measured <- summary(regr_var_rf_ra_measured)
p_var_rf_ra_measured <- sum_var_rf_ra_measured$coefficients["rel_abundance", "Pr(>|t|)"]
s_var_rf_ra_measured <- sum_var_rf_ra_measured$coefficients["rel_abundance", "Estimate"]
```

### Test Raster
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_rf_k_rast <- lm(k_index_v ~ obs_k_index, data = rf_test)
sum_v_rf_k_rast <- summary(regr_v_rf_k_rast)
p_v_rf_k_rast <- sum_v_rf_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_v_rf_k_rast <- sum_v_rf_k_rast$coefficients["obs_k_index", "Estimate"]
r_v_rf_k_rast <- summary(lm(k_index_v ~ obs_k_index, data = brt))$adj.r.squared

# with shannon index as response
regr_v_rf_s_rast <- lm(shannon_v ~ obs_shannon, data = rf_test)
sum_v_rf_s_rast <- summary(regr_v_rf_s_rast)
p_v_rf_s_rast <- sum_v_rf_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_v_rf_s_rast <- sum_v_rf_s_rast$coefficients["obs_shannon", "Estimate"]
r_v_rf_s_rast <- summary(lm(shannon_v ~ obs_shannon, data = brt))$adj.r.squared

# with abundance as response
regr_v_rf_a_rast <- lm(abundance_v ~ obs_abundance, data = rf_test)
sum_v_rf_a_rast <- summary(regr_v_rf_a_rast)
p_v_rf_a_rast <- sum_v_rf_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_v_rf_a_rast <- sum_v_rf_a_rast$coefficients["obs_abundance", "Estimate"]
r_v_rf_a_rast <- summary(lm(abundance_v ~ obs_abundance, data = brt))$adj.r.squared

# with rel_abundance as response
regr_v_rf_ra_rast <- lm(rel_abundance_v ~ obs_rel_abundance, data = rf_test)
sum_v_rf_ra_rast <- summary(regr_v_rf_ra_rast)
p_v_rf_ra_rast <- sum_v_rf_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_v_rf_ra_rast <- sum_v_rf_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_v_rf_ra_rast <- summary(lm(rel_abundance_v ~ obs_rel_abundance, data = brt))$adj.r.squared

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_rf_k_rast <- lm(k_index_wd ~ obs_k_index, data = rf_test)
sum_wd_rf_k_rast <- summary(regr_wd_rf_k_rast)
p_wd_rf_k_rast <- sum_wd_rf_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_wd_rf_k_rast <- sum_wd_rf_k_rast$coefficients["obs_k_index", "Estimate"]
r_wd_rf_k_rast <- summary(lm(k_index_wd ~ obs_k_index, data = brt))$adj.r.squared

# with shannon index as response
regr_wd_rf_s_rast <- lm(shannon_wd ~ obs_shannon, data = rf_test)
sum_wd_rf_s_rast <- summary(regr_wd_rf_s_rast)
p_wd_rf_s_rast <- sum_wd_rf_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_wd_rf_s_rast <- sum_wd_rf_s_rast$coefficients["obs_shannon", "Estimate"]
r_wd_rf_s_rast <- summary(lm(shannon_wd ~ obs_shannon, data = brt))$adj.r.squared

# with abundance as response
regr_wd_rf_a_rast <- lm(abundance_wd ~ obs_abundance, data = rf_test)
sum_wd_rf_a_rast <- summary(regr_wd_rf_a_rast)
p_wd_rf_a_rast <- sum_wd_rf_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_wd_rf_a_rast <- sum_wd_rf_a_rast$coefficients["obs_abundance", "Estimate"]
r_wd_rf_a_rast <- summary(lm(abundance_wd ~ obs_abundance, data = brt))$adj.r.squared

# with rel_abundance as response
regr_wd_rf_ra_rast <- lm(rel_abundance_wd ~ obs_rel_abundance, data = rf_test)
sum_wd_rf_ra_rast <- summary(regr_wd_rf_ra_rast)
p_wd_rf_ra_rast <- sum_wd_rf_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_wd_rf_ra_rast <- sum_wd_rf_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_wd_rf_ra_rast <- summary(lm(rel_abundance_wd ~ obs_rel_abundance, data = brt))$adj.r.squared

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_rf_k_rast <- lm(k_index_var ~ obs_k_index, data = rf_test)
sum_var_rf_k_rast <- summary(regr_var_rf_k_rast)
p_var_rf_k_rast <- sum_var_rf_k_rast$coefficients["obs_k_index", "Pr(>|t|)"]
s_var_rf_k_rast <- sum_var_rf_k_rast$coefficients["obs_k_index", "Estimate"]
r_var_rf_k_rast <- summary(lm(k_index_var ~ obs_k_index, data = brt))$adj.r.squared

# with shannon index as response
regr_var_rf_s_rast <- lm(shannon_var ~ obs_shannon, data = rf_test)
sum_var_rf_s_rast <- summary(regr_wd_rf_s_rast)
p_var_rf_s_rast <- sum_var_rf_s_rast$coefficients["obs_shannon", "Pr(>|t|)"]
s_var_rf_s_rast <- sum_var_rf_s_rast$coefficients["obs_shannon", "Estimate"]
r_var_rf_s_rast <- summary(lm(shannon_var ~ obs_shannon, data = brt))$adj.r.squared

# with abundance as response
regr_var_rf_a_rast <- lm(abundance_var ~ obs_abundance, data = rf_test)
sum_var_rf_a_rast <- summary(regr_var_rf_a_rast)
p_var_rf_a_rast <- sum_var_rf_a_rast$coefficients["obs_abundance", "Pr(>|t|)"]
s_var_rf_a_rast <- sum_var_rf_a_rast$coefficients["obs_abundance", "Estimate"]
r_var_rf_a_rast <- summary(lm(abundance_var ~ obs_abundance, data = brt))$adj.r.squared

# with rel_abundance as response
regr_var_rf_ra_rast <- lm(rel_abundance_var ~ obs_rel_abundance, data = rf_test)
sum_var_rf_ra_rast <- summary(regr_var_rf_ra_rast)
p_var_rf_ra_rast <- sum_var_rf_ra_rast$coefficients["obs_rel_abundance", "Pr(>|t|)"]
s_var_rf_ra_rast <- sum_var_rf_ra_rast$coefficients["obs_rel_abundance", "Estimate"]
r_var_rf_ra_rast <- summary(lm(rel_abundance_var ~ obs_rel_abundance, data = brt))$adj.r.squared
```

### Training Sets
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response
regr_v_rf_k_train <- lm(pred_train_v_k ~ k_index, data = rf_train)
sum_v_rf_k_train <- summary(regr_v_k_train)
p_v_rf_k_train <- sum_v_k_train$coefficients["k_index", "Pr(>|t|)"]
s_v_rf_k_train <- sum_v_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_v_rf_s_train <- lm(pred_train_v_s ~ shannon, data = rf_train)
sum_v_rf_s_train <- summary(regr_v_s_train)
p_v_rf_s_train <- sum_v_s_train$coefficients["shannon", "Pr(>|t|)"]
s_v_rf_s_train <- sum_v_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_v_rf_a_train <- lm(pred_train_v_a ~ abundance, data = rf_train)
sum_v_rf_a_train <- summary(regr_v_a_train)
p_v_rf_a_train <- sum_v_a_train$coefficients["abundance", "Pr(>|t|)"]
s_v_rf_a_train <- sum_v_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_v_rf_ra_train <- lm(pred_train_v_ra ~ rel_abundance, data = rf_train)
sum_v_rf_ra_train <- summary(regr_v_ra_train)
p_v_rf_ra_train <- sum_v_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_v_rf_ra_train <- sum_v_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response
regr_wd_rf_k_train <- lm(pred_train_wd_k ~ k_index, data = rf_train)
sum_wd_rf_k_train <- summary(regr_wd_k_train)
p_wd_rf_k_train <- sum_wd_k_train$coefficients["k_index", "Pr(>|t|)"]
s_wd_rf_k_train <- sum_wd_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_wd_rf_s_train <- lm(pred_train_wd_s ~ shannon, data = rf_train)
sum_wd_rf_s_train <- summary(regr_wd_s_train)
p_wd_rf_s_train <- sum_wd_s_train$coefficients["shannon", "Pr(>|t|)"]
s_wd_rf_s_train <- sum_wd_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_wd_rf_a_train <- lm(pred_train_wd_a ~ abundance, data = rf_train)
sum_wd_rf_a_train <- summary(regr_wd_a_train)
p_wd_rf_a_train <- sum_wd_a_train$coefficients["abundance", "Pr(>|t|)"]
s_wd_rf_a_train <- sum_wd_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_wd_rf_ra_train <- lm(pred_train_wd_ra ~ rel_abundance, data = rf_train)
sum_wd_rf_ra_train <- summary(regr_wd_ra_train)
p_wd_rf_ra_train <- sum_wd_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_wd_rf_ra_train <- sum_wd_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SAMPLING LOCATIONS ### ----------------------------------------
# with k_index as response
regr_samp_rf_k_train <- lm(pred_train_samp_k ~ k_index, data = rf_train)
sum_samp_rf_k_train <- summary(regr_samp_k_train)
p_samp_rf_k_train <- sum_samp_k_train$coefficients["k_index", "Pr(>|t|)"]
s_samp_rf_k_train <- sum_samp_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_samp_rf_s_train <- lm(pred_train_samp_s ~ shannon, data = rf_train)
sum_samp_rf_s_train <- summary(regr_samp_s_train)
p_samp_rf_s_train <- sum_samp_s_train$coefficients["shannon", "Pr(>|t|)"]
s_samp_rf_s_train <- sum_samp_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_samp_rf_a_train <- lm(pred_train_samp_a ~ abundance, data = rf_train)
sum_samp_rf_a_train <- summary(regr_samp_a_train)
p_samp_rf_a_train <- sum_samp_a_train$coefficients["abundance", "Pr(>|t|)"]
s_samp_rf_a_train <- sum_samp_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_samp_rf_ra_train <- lm(pred_train_samp_ra ~ rel_abundance, data = rf_train)
sum_samp_rf_ra_train <- summary(regr_samp_ra_train)
p_samp_rf_ra_train <- sum_samp_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_samp_rf_ra_train <- sum_samp_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: ALL PREDICTORS ### ----------------------------------------
# with k_index as response
regr_sec_rf_k_train <- lm(pred_train_sec_k ~ k_index, data = rf_train)
sum_sec_rf_k_train <- summary(regr_sec_k_train)
p_sec_rf_k_train <- sum_sec_k_train$coefficients["k_index", "Pr(>|t|)"]
s_sec_rf_k_train <- sum_sec_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_sec_rf_s_train <- lm(pred_train_sec_s ~ shannon, data = rf_train)
sum_sec_rf_s_train <- summary(regr_sec_s_train)
p_sec_rf_s_train <- sum_sec_s_train$coefficients["shannon", "Pr(>|t|)"]
s_sec_rf_s_train <- sum_sec_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_sec_rf_a_train <- lm(pred_train_sec_a ~ abundance, data = rf_train)
sum_sec_rf_a_train <- summary(regr_sec_a_train)
p_sec_rf_a_train <- sum_sec_a_train$coefficients["abundance", "Pr(>|t|)"]
s_sec_rf_a_train <- sum_sec_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_sec_rf_ra_train <- lm(pred_train_sec_ra ~ rel_abundance, data = rf_train)
sum_sec_rf_ra_train <- summary(regr_sec_ra_train)
p_sec_rf_ra_train <- sum_sec_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_sec_rf_ra_train <- sum_sec_ra_train$coefficients["rel_abundance", "Estimate"]

### PREDICTOR: SELECTED VARIABLES ### ----------------------------------------
# with k_index as response
regr_var_rf_k_train <- lm(pred_train_var_k ~ k_index, data = rf_train)
sum_var_rf_k_train <- summary(regr_var_k_train)
p_var_rf_k_train <- sum_var_k_train$coefficients["k_index", "Pr(>|t|)"]
s_var_rf_k_train <- sum_var_k_train$coefficients["k_index", "Estimate"]

# with shannon index as response
regr_var_rf_s_train <- lm(pred_train_var_s ~ shannon, data = rf_train)
sum_var_rf_s_train <- summary(regr_var_s_train)
p_var_rf_s_train <- sum_var_s_train$coefficients["shannon", "Pr(>|t|)"]
s_var_rf_s_train <- sum_var_s_train$coefficients["shannon", "Estimate"]

# with abundance as response
regr_var_rf_a_train <- lm(pred_train_var_a ~ abundance, data = rf_train)
sum_var_rf_a_train <- summary(regr_var_a_train)
p_var_rf_a_train <- sum_var_a_train$coefficients["abundance", "Pr(>|t|)"]
s_var_rf_a_train <- sum_var_a_train$coefficients["abundance", "Estimate"]

# with rel_abundance as response
regr_var_rf_ra_train <- lm(pred_train_var_ra ~ rel_abundance, data = rf_train)
sum_var_rf_ra_train <- summary(regr_var_ra_train)
p_var_rf_ra_train <- sum_var_ra_train$coefficients["rel_abundance", "Pr(>|t|)"]
s_var_rf_ra_train <- sum_var_ra_train$coefficients["rel_abundance", "Estimate"]
```

# Create dataframe
```{r}
regr_brt <- data.frame(p_value = c(p_v_brt_k_measured, p_v_brt_s_measured, p_v_brt_a_measured, p_v_brt_ra_measured,
                                        p_wd_brt_k_measured, p_wd_brt_s_measured, p_wd_brt_a_measured, p_wd_brt_ra_measured,
                                        p_samp_brt_k_measured, p_samp_brt_s_measured, p_samp_brt_a_measured, p_samp_brt_ra_measured,
                                        p_sec_brt_k_measured, p_sec_brt_s_measured, p_sec_brt_a_measured, p_sec_brt_ra_measured,
                                        p_var_brt_k_measured, p_var_brt_s_measured, p_var_brt_a_measured, p_var_brt_ra_measured,
                                        p_v_brt_k_rast, p_v_brt_s_rast, p_v_brt_a_rast, p_v_brt_ra_rast,
                                        p_wd_brt_k_rast, p_wd_brt_s_rast, p_wd_brt_a_rast, p_wd_brt_ra_rast,
                                        p_var_brt_k_rast, p_var_brt_s_rast, p_var_brt_a_rast, p_var_brt_ra_rast,
                                        p_v_brt_k_train, p_v_brt_s_train, p_v_brt_a_train, p_v_brt_ra_train,
                                        p_wd_brt_k_train, p_wd_brt_s_train, p_wd_brt_a_train, p_wd_brt_ra_train,
                                        p_samp_brt_k_train, p_samp_brt_s_train, p_samp_brt_a_train, p_samp_brt_ra_train,
                                        p_sec_brt_k_train, p_sec_brt_s_train, p_sec_brt_a_train, p_sec_brt_ra_train,
                                        p_var_brt_k_train, p_var_brt_s_train, p_var_brt_a_train, p_var_brt_ra_train),
                            slope = c(s_v_brt_k_measured, s_v_brt_s_measured, s_v_brt_a_measured, s_v_brt_ra_measured,
                                        s_wd_brt_k_measured, s_wd_brt_s_measured, s_wd_brt_a_measured, s_wd_brt_ra_measured,
                                        s_samp_brt_k_measured, s_samp_brt_s_measured, s_samp_brt_a_measured, s_samp_brt_ra_measured,
                                        s_sec_brt_k_measured, s_sec_brt_s_measured, s_sec_brt_a_measured, s_sec_brt_ra_measured,
                                        s_var_brt_k_measured, s_var_brt_s_measured, s_var_brt_a_measured, s_var_brt_ra_measured,
                                        s_v_brt_k_rast, s_v_brt_s_rast, s_v_brt_a_rast, s_v_brt_ra_rast,
                                        s_wd_brt_k_rast, s_wd_brt_s_rast, s_wd_brt_a_rast, s_wd_brt_ra_rast,
                                        s_var_brt_k_rast, s_var_brt_s_rast, s_var_brt_a_rast, s_var_brt_ra_rast,
                                        s_v_brt_k_train, s_v_brt_s_train, s_v_brt_a_train, s_v_brt_ra_train,
                                        s_wd_brt_k_train, s_wd_brt_s_train, s_wd_brt_a_train, s_wd_brt_ra_train,
                                        s_samp_brt_k_train, s_samp_brt_s_train, s_samp_brt_a_train, s_samp_brt_ra_train,
                                        s_sec_brt_k_train, s_sec_brt_s_train, s_sec_brt_a_train, s_sec_brt_ra_train,
                                        s_var_brt_k_train, s_var_brt_s_train, s_var_brt_a_train, s_var_brt_ra_train),
                            index = c("k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance"),
                            algorithm = c("brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt",
                                          "brt", "brt", "brt", "brt"),
                            predictor = c("velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "samp", "samp", "samp", "samp",
                                          "sec", "sec", "sec", "sec",
                                          "var", "var", "var", "var",
                                          "velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "var", "var", "var", "var",
                                          "velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "samp", "samp", "samp", "samp",
                                          "sec", "sec", "sec", "sec",
                                          "var", "var", "var", "var"),
                              origin = c("measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured", 
                              "measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured",
                              "raster", "raster", "raster", "raster",
                              "raster", "raster", "raster", "raster", 
                              "raster", "raster", "raster", "raster",
                              "training", "training", "training", "training",
                              "training", "training", "training", "training",
                              "training", "training", "training", "training", 
                              "training", "training", "training", "training",
                              "training", "training", "training", "training"))


regr_rf <- data.frame(p_value = c(p_v_rf_k_measured, p_v_rf_s_measured, p_v_rf_a_measured, p_v_rf_ra_measured,
                                        p_wd_rf_k_measured, p_wd_rf_s_measured, p_wd_rf_a_measured, p_wd_rf_ra_measured,
                                        p_samp_rf_k_measured, p_samp_rf_s_measured, p_samp_rf_a_measured, p_samp_rf_ra_measured,
                                        p_sec_rf_k_measured, p_sec_rf_s_measured, p_sec_rf_a_measured, p_sec_rf_ra_measured,
                                        p_var_rf_k_measured, p_var_rf_s_measured, p_var_rf_a_measured, p_var_rf_ra_measured,
                                        p_v_rf_k_rast, p_v_rf_s_rast, p_v_rf_a_rast, p_v_rf_ra_rast,
                                        p_wd_rf_k_rast, p_wd_rf_s_rast, p_wd_rf_a_rast, p_wd_rf_ra_rast,
                                        p_var_rf_k_rast, p_var_rf_s_rast, p_var_rf_a_rast, p_var_rf_ra_rast,
                                        p_v_rf_k_train, p_v_rf_s_train, p_v_rf_a_train, p_v_rf_ra_train,
                                        p_wd_rf_k_train, p_wd_rf_s_train, p_wd_rf_a_train, p_wd_rf_ra_train,
                                        p_samp_rf_k_train, p_samp_rf_s_train, p_samp_rf_a_train, p_samp_rf_ra_train,
                                        p_sec_rf_k_train, p_sec_rf_s_train, p_sec_rf_a_train, p_sec_rf_ra_train,
                                        p_var_rf_k_train, p_var_rf_s_train, p_var_rf_a_train, p_var_rf_ra_train),
                            slope = c(s_v_rf_k_measured, s_v_rf_s_measured, s_v_rf_a_measured, s_v_rf_ra_measured,
                                        s_wd_rf_k_measured, s_wd_rf_s_measured, s_wd_rf_a_measured, s_wd_rf_ra_measured,
                                        s_samp_rf_k_measured, s_samp_rf_s_measured, s_samp_rf_a_measured, s_samp_rf_ra_measured,
                                        s_sec_rf_k_measured, s_sec_rf_s_measured, s_sec_rf_a_measured, s_sec_rf_ra_measured,
                                        s_var_rf_k_measured, s_var_rf_s_measured, s_var_rf_a_measured, s_var_rf_ra_measured,
                                        s_v_rf_k_rast, s_v_rf_s_rast, s_v_rf_a_rast, s_v_rf_ra_rast,
                                        s_wd_rf_k_rast, s_wd_rf_s_rast, s_wd_rf_a_rast, s_wd_rf_ra_rast,
                                        s_var_rf_k_rast, s_var_rf_s_rast, s_var_rf_a_rast, s_var_rf_ra_rast,
                                        s_v_rf_k_train, s_v_rf_s_train, s_v_rf_a_train, s_v_rf_ra_train,
                                        s_wd_rf_k_train, s_wd_rf_s_train, s_wd_rf_a_train, s_wd_rf_ra_train,
                                        s_samp_rf_k_train, s_samp_rf_s_train, s_samp_rf_a_train, s_samp_rf_ra_train,
                                        s_sec_rf_k_train, s_sec_rf_s_train, s_sec_rf_a_train, s_sec_rf_ra_train,
                                        s_var_rf_k_train, s_var_rf_s_train, s_var_rf_a_train, s_var_rf_ra_train),
                            index = c("k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance",
                                      "k_index", "shannon", "abundance", "rel_abundance"),
                            algorithm = c("rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf",
                                          "rf", "rf", "rf", "rf"),
                            predictor = c("velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "samp", "samp", "samp", "samp",
                                          "sec", "sec", "sec", "sec",
                                          "var", "var", "var", "var",
                                          "velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "var", "var", "var", "var",
                                          "velocity", "velocity", "velocity", "velocity",
                                          "v + wd", "v + wd", "v + wd", "v + wd",
                                          "samp", "samp", "samp", "samp",
                                          "sec", "sec", "sec", "sec",
                                          "var", "var", "var", "var"),
                              origin = c("measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured", 
                              "measured", "measured", "measured", "measured",
                              "measured", "measured", "measured", "measured",
                              "raster", "raster", "raster", "raster",
                              "raster", "raster", "raster", "raster", 
                              "raster", "raster", "raster", "raster",
                              "training", "training", "training", "training",
                              "training", "training", "training", "training",
                              "training", "training", "training", "training", 
                              "training", "training", "training", "training",
                              "training", "training", "training", "training"))

regr_all <- rbind(regr_brt, regr_rf)

# write .csv file 
write.csv(regr_brt, "Stat_Analysis/stat_analysis_data/results_regr_brt.csv", row.names = FALSE)
write.csv(regr_rf, "Stat_Analysis/stat_analysis_data/results_regr_rf.csv", row.names = FALSE)
write.csv(regr_all, "Stat_Analysis/stat_analysis_data/results_regr_rf.csv", row.names = FALSE)
```


## Stat. Analysis
```{r}
# Modellvoraussetzungen prüfen - residualplot 
par(mfrow=c(2, 2))

### BRT normal ### -----------------------------------------------------------
### Predictor Velocity ###
plot(regr_v_brt_k) # Linearität ok; Residuen ok 
plot(regr_v_brt_s) # Linearität ok; Residuen evt. nicht normalverteilt 
plot(regr_v_brt_a) # Linearität nicht gegeben (umgekehrte Trichterform); Residuen evt. nicht normalverteilt
plot(regr_v_brt_ra) # Linearität nicht gegeben (umgekehrte Trichterform); Residuen evt. nicht normalverteilt

### Predictor V + WD ###
plot(regr_wd_brt_k) # Linearität ok; Residuen evt. nicht normalverteilt
plot(regr_wd_brt_s) # Linearität ok; Residuen evt. nicht normalverteilt
plot(regr_wd_brt_a) # Linearität nicht gegeben (umgekehrte Trichterform); Residuen nicht normalverteilt
plot(regr_wd_brt_ra) # Linearität nicht gegeben (umgekehrte Trichterform); Residuen nicht normalverteilt

### RF normal ### ---------------------------------------------------------------
### Predictor Velocity ###
plot(regr_v_rf_k) # Linearität ok; Residuen nicht normalverteilt 
plot(regr_v_rf_s) # Linearität ok; Residuen nicht normalverteilt
plot(regr_v_rf_a) # Linearität ok; Residuen nicht normalverteilt 
plot(regr_v_rf_ra) # Linearität ok; Residuen nicht normalverteilt 

### Predictor V + WD ###
plot(regr_wd_rf_k) # Linearität ok; Residuen nicht normalverteilt 
plot(regr_wd_rf_s) # Linearität ok; Residuen nicht normalverteilt 
plot(regr_wd_rf_a) # Linearität ok; Residuen normalverteilt 
plot(regr_wd_rf_ra) # Linearität ok; Residuen normalverteilt 
```

# Plots
## BRT 
### Test Raster
```{r}
### PREDICTOR: VELOCITY ### --------------------------------------------------
# with k_index as response ----------------------------------------------------
p_brt_k <- ggplot(brt_test, aes(obs_k_index, k_index_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

p_brt_wrap_k <- ggplot(brt_test, aes(obs_k_index, k_index_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_k.png", plot = p_brt_k, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_k.png", plot = p_brt_wrap_k, width = 8, height = 8)

# with shannon index as response ----------------------------------------------
p_brt_s <- ggplot(brt_test, aes(obs_shannon, shannon_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))
  
p_brt_wrap_s <- ggplot(brt_test, aes(obs_shannon, shannon_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_s.png", plot = p_brt_s, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_s.png", plot = p_brt_wrap_s, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_a <- ggplot(brt_test, aes(obs_abundance, abundance_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

p_brt_wrap_a <- ggplot(brt_test, aes(obs_abundance, abundance_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_a.png", plot = p_brt_a, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_a.png", plot = p_brt_wrap_a, width = 8, height = 8)

# with relative abundance as response -----------------------------------------
p_brt_ra <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_v, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

p_brt_wrap_ra <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_v, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_ra.png", plot = p_brt_ra, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wrap_ra.png", plot = p_brt_wrap_ra, width = 8, height = 8)


### PREDICTOR: V + WD ### --------------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_wd_k <- ggplot(brt_test, aes(obs_k_index, k_index_wd, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

p_brt_wd_wrap_k <- ggplot(brt_test, aes(obs_k_index, k_index_wd, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_k.png", plot = p_brt_wd_k, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_k.png", plot = p_brt_wd_wrap_k, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_wd_s <- ggplot(brt_test, aes(obs_shannon, shannon_wd, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

  
p_brt_wd_wrap_s <- ggplot(brt_test, aes(obs_shannon, shannon_wd, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_s.png", plot = p_brt_wd_s, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_s.png", plot = p_brt_wd_wrap_s, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_wd_a <- ggplot(brt_test, aes(obs_abundance, abundance_wd, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

  
p_brt_wd_wrap_a <- ggplot(brt_test, aes(obs_abundance, abundance_wd, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_a.png", plot = p_brt_wd_a, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_a.png", plot = p_brt_wd_wrap_a, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_wd_ra <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_wd, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

  
p_brt_wd_wrap_ra <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_wd, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_ra.png", plot = p_brt_wd_ra, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_wd_wrap_ra.png", plot = p_brt_wd_wrap_ra, width = 8, height = 8)

### PREDICTOR: SELCTED VARIABLES ### ------------------------------------------
# with k_index as response-----------------------------------------------------
p_brt_var_k <- ggplot(brt_test, aes(obs_k_index, k_index_var, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

p_brt_var_wrap_k <- ggplot(brt_test, aes(obs_k_index, k_index_var, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_k.png", plot = p_brt_var_k, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_k.png", plot = p_brt_var_wrap_k, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_brt_var_s <- ggplot(brt_test, aes(obs_shannon, shannon_var, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

  
p_brt_var_wrap_s <- ggplot(brt_test, aes(obs_shannon, shannon_var, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_s.png", plot = p_brt_var_s, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_s.png", plot = p_brt_var_wrap_s, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_brt_var_a <- ggplot(brt_test, aes(obs_abundance, abundance_var, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

  
p_brt_var_wrap_a <- ggplot(brt_test, aes(obs_abundance, abundance_var, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_a.png", plot = p_brt_var_a, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_a.png", plot = p_brt_var_wrap_a, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_brt_var_ra <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_var, col = reach_type)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

  
p_brt_var_wrap_ra <- ggplot(brt_test, aes(obs_rel_abundance, rel_abundance_var, col = reach_type)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_brt_var_ra.png", plot = p_brt_var_ra, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_brt_var_wrap_ra.png", plot = p_brt_var_wrap_ra, width = 8, height = 8)
```

## RF normal 
### Predictor: Velocity
```{r}
# with k_index as response ----------------------------------------------------
p_rf_k <- ggplot(rf, aes(obs_k_index, k_index_v)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

p_rf_wrap_k <- ggplot(rf, aes(obs_k_index, k_index_v)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_k.png", plot = p_rf_k, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_k.png", plot = p_rf_wrap_k, width = 8, height = 8)

# with shannon index as response ----------------------------------------------
p_rf_s <- ggplot(rf, aes(obs_shannon, shannon_v)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))
  
p_rf_wrap_s <- ggplot(rf, aes(obs_shannon, shannon_v)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_s.png", plot = p_rf_s, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_s.png", plot = p_rf_wrap_s, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_a <- ggplot(rf, aes(obs_abundance, abundance_v)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

p_rf_wrap_a <- ggplot(rf, aes(obs_abundance, abundance_v)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_a.png", plot = p_rf_a, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_a.png", plot = p_rf_wrap_a, width = 8, height = 8)

# with relative abundance as response -----------------------------------------
p_rf_ra <- ggplot(rf, aes(obs_rel_abundance, rel_abundance_v)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

p_rf_wrap_ra <- ggplot(rf, aes(obs_rel_abundance, rel_abundance_v)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_ra.png", plot = p_rf_ra, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wrap_ra.png", plot = p_rf_wrap_ra, width = 8, height = 8)
```

### Predictor: V + WD
```{r}
# with k_index as response-----------------------------------------------------
p_rf_wd_k <- ggplot(rf, aes(obs_k_index, k_index_wd)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

p_rf_wd_wrap_k <- ggplot(rf, aes(obs_k_index, k_index_wd)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_k.png", plot = p_rf_wd_k, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_k.png", plot = p_rf_wd_wrap_k, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_wd_s <- ggplot(rf, aes(obs_shannon, shannon_wd)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

  
p_rf_wd_wrap_s <- ggplot(rf, aes(obs_shannon, shannon_wd)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_s.png", plot = p_rf_wd_s, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_s.png", plot = p_rf_wd_wrap_s, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_wd_a <- ggplot(rf, aes(obs_abundance, abundance_wd)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

  
p_rf_wd_wrap_a <- ggplot(rf, aes(obs_abundance, abundance_wd)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))
# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_a.png", plot = p_rf_wd_a, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_a.png", plot = p_rf_wd_wrap_a, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_wd_ra <- ggplot(rf, aes(obs_rel_abundance, rel_abundance_wd)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

  
p_rf_wd_wrap_ra <- ggplot(rf, aes(obs_rel_abundance, rel_abundance_wd)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_ra.png", plot = p_rf_wd_ra, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_wd_wrap_ra.png", plot = p_rf_wd_wrap_ra, width = 8, height = 8)
```

### Predictor: selected variables
```{r}
# with k_index as response-----------------------------------------------------
p_rf_var_k <- ggplot(rf, aes(obs_k_index, k_index_var)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

p_rf_var_wrap_k <- ggplot(rf, aes(obs_k_index, k_index_var)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "K-Index Observed",
    y = "K-Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_k.png", plot = p_rf_var_k, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_k.png", plot = p_rf_var_wrap_k, width = 8, height = 8)

# with shannon index as response ---------------------------------------------
p_rf_var_s <- ggplot(rf, aes(obs_shannon, shannon_var)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

  
p_rf_var_wrap_s <- ggplot(rf, aes(obs_shannon, shannon_var)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 5.0) +
  xlim(0, 5.0) + 
  labs(
    x = "Shannon Index Observed",
    y = "Shannon Index Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_s.png", plot = p_rf_var_s, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_s.png", plot = p_rf_var_wrap_s, width = 8, height = 8)

# with abundance as response --------------------------------------------------
p_rf_var_a <- ggplot(rf, aes(obs_abundance, abundance_var)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

  
p_rf_var_wrap_a <- ggplot(rf, aes(obs_abundance, abundance_var)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 3772) +
  xlim(0, 3772) + 
  labs(
    x = "Absolute Abundance Observed",
    y = "Absolute Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))
# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_a.png", plot = p_rf_var_a, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_a.png", plot = p_rf_var_wrap_a, width = 8, height = 8)

# with relative abundance as response ----------------------------------------
p_rf_var_ra <- ggplot(rf, aes(obs_rel_abundance, rel_abundance_var)) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16))

  
p_rf_var_wrap_ra <- ggplot(rf, aes(obs_rel_abundance, rel_abundance_var)) +
  facet_wrap(~Reach_Untersuchungsstelle) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, lty = 2, lwd = 0.8) +
  stat_smooth(method = "lm", se = FALSE, fullrange = TRUE, lwd = 0.8, col = "black") +
  theme_minimal() +
  ylim(0, 1.0) +
  xlim(0, 1.0) + 
  labs(
    x = "Relative Abundance Observed",
    y = "Relative Abundance Predicted"
  ) +
  theme_minimal() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=12),
        strip.text.x = element_text(
        size = 12))

# save the plots 
ggsave("Stat_Analysis/regr_plots/regr_rf_var_ra.png", plot = p_rf_var_ra, width = 6, height = 5)
ggsave("Stat_Analysis/regr_plots/regr_rf_var_wrap_ra.png", plot = p_rf_var_wrap_ra, width = 8, height = 8)
```




