---
title: "Habitat_Model_VZH"
format: html
---

# Load packages 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("raster")
pkgCheck("spsurvey")
pkgCheck("terra")
pkgCheck("raster")
pkgCheck("ggplot2")
pkgCheck("tibble")
pkgCheck("readr")
pkgCheck("dplyr")
pkgCheck("tidyr")
pkgCheck("scales")
```
  
# Load Data 
```{r}
# load data 
heat <- read_delim("Stat_Analysis/heat_map.csv") |>
  subset(model != "hsc")

index <- heat$index
model <- heat$model

# combine the first two rows 
combined <- paste(index, model, sep = "_")

# attach created row 
heat_new <- cbind(combined, heat) |>
  dplyr::select(-index, -model) |>
  dplyr::rename(models = combined) 



# load data for bar charts -> variable importance 
bar <- read_delim("ML_model/var_imp/var_imp_var.csv") |> 
  dplyr::select(variable, k_index_rf, k_index_brt) |>
  mutate(var_new = c("Z Coordinate [m.a.s.l.]", "Water Deph [m]", "Mean diffused total nitrogen [kg/ha a]", "Velocity [m/s]", "Mean diffused total phosphor [kg/ha a]", "Ecomorphological Class", "Bioregion")) |>
  pivot_longer(cols = c(2:3), names_to = "models", values_to = "values")

bar_rf <- read_delim("ML_model/var_imp/var_imp_var.csv") |> 
  dplyr::select(variable, k_index_rf) |>
  mutate(var_new = c("Z Coordinate [m.a.s.l.]", "Water Deph [m]", "Mean diffused total nitrogen [kg/ha a]", "Velocity [m/s]", "Mean diffused total phosphor [kg/ha a]", "Ecomorphological Class", "Bioregion"))
```


# Bar chart
```{r}
library(scales)

p <- ggplot(bar, aes(x = values, y = reorder(var_new, + values), fill = models)) +
  geom_bar(stat = "identity", position = position_dodge()) + 
  ylab(label = " ") +
  xlab(label = " ") +
  scale_x_continuous(labels = percent_format(scale = 100)) +
  scale_fill_manual(labels = c("BRT", "RF"), values = c("lightgray", "black")) +  # Adjust legend labels here
  theme_minimal() +
  labs(fill = "Algorithm") + 
  theme(axis.text = element_text(size = 14),
        legend.text = element_text(size = 14),
        legend.title = element_text(size = 16))


# save the plots 
ggsave("Stat_Analysis/var_imp.png", plot = p, width = 11, height = 6)
```

```{r}
library(scales)

p <- ggplot(bar_rf, aes(x = k_index_rf, y = reorder(var_new, + k_index_rf))) +
  geom_bar(stat = "identity", position = position_dodge()) + 
  ylab(label = " ") +
  xlab(label = " ") +
  scale_x_continuous(labels = percent_format(scale = 100)) +
  theme_minimal() +
  labs(fill = "Algorithm") + 
  theme(axis.text = element_text(size = 14),
        legend.text = element_text(size = 14),
        legend.title = element_text(size = 16))

# Assuming 'percentage' is a column in your 'bar_rf' data frame containing the calculated percentage values
bar_rf$percentage <- round(((bar_rf$k_index_rf) * 100), digits = 1)

p2 <- ggplot(bar_rf, aes(x = k_index_rf, y = reorder(var_new, +k_index_rf))) +
  geom_bar(stat = "identity", position = position_dodge(), fill = "lightgray") + 
  geom_text(aes(label = percent(percentage / 100)), 
            position = position_dodge(width = 0.9), 
            hjust = -0.5,vjust = -0.5, size = 5) +  # Adjust vjust as needed
  ylab(label = " ") +
  xlab(label = " ") +
  scale_x_continuous(labels = percent_format(scale = 100)) +
  theme_minimal() +
  labs(fill = "Algorithm") + 
  theme(axis.text = element_text(size = 14),
        legend.text = element_text(size = 14),
        legend.title = element_text(size = 16)) +
  scale_x_continuous(limits = c(0, 0.25), breaks = seq(0, 0.25, by = 0.05))


# save the plots 
ggsave("Stat_Analysis/var_imp_rf.png", plot = p2, width = 11, height = 6)
```

# Combine metric results and calc. rel. metrics
```{r}
# read brt and rf metric results
brt <- read_delim("Stat_Analysis/ml_evaluation_metrics_all_brt.csv")
rf <- read_delim("Stat_Analysis/ml_evaluation_metrics_all_rf.csv")

# bind rf and brt metric results together 
metrics <- rbind(brt, rf)

# calculate relative rmse, mae and bias metrics 
max_k_index <- 0.8819476
max_shannon <- 4.04037
max_abundance <- 3923
max_rel_abundance <- 1

max_ind <- c(max_k_index, max_shannon, max_abundance, max_rel_abundance)
max_index <- rep(max_ind, times = 26)

metrics$rel_rmse <- metrics$rmse/max_index
metrics$rel_mae <- metrics$mae/max_index
metrics$rel_bias <- metrics$bias/max_index

# round values to two decimal places 
metrics$nse <- round(metrics$nse, digits = 2)
metrics$r2 <- round(metrics$r2, digits = 2)
metrics$rel_rmse <- round(metrics$rel_rmse, digits = 2)
metrics$rel_mae <- round(metrics$rel_mae, digits = 2)
metrics$rel_bias <- round(metrics$rel_bias, digits = 2)

# save as .csv file 
write.csv(metrics, "Stat_Analysis/evaluation_metrics_all.csv", row.names = FALSE)
```

