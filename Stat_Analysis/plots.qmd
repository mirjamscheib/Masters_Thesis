---
title: "boxplots"
format: html
---

# Load packages 
```{r}
#clear R environment
rm(list = ls())

# check for a package, install and load 
pkgCheck <- function(x){ 
  if (!require(x,character.only = TRUE)){
    install.packages(x,dependencies=TRUE)
    if(!require(x,character.only = TRUE)) {
      stop()
    }
  }
}

pkgCheck("raster")
pkgCheck("spsurvey")
pkgCheck("terra")
pkgCheck("raster")
pkgCheck("ggplot2")
pkgCheck("tibble")
pkgCheck("readr")
pkgCheck("dplyr")
pkgCheck("tidyr")
pkgCheck("scales")
```

# Load Data 
```{r}
# load measured k_index values 
k_measured_natural <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_model_v.csv")|>
  mutate(study_area = reach,
         scenario = "Measured",
         ID = row_number()) |>
  dplyr::select(-x, -y, -shannon, -abundance, -rel_abundance, -velocity, -reach) |>
  filter(study_area == "GL1" |
           study_area == "GL2" |
           study_area == "TH4")

k_measured_hydro <- read_delim("Pre_Processing/abiotic_mi_sampling/lab_ml_model_v.csv")|>
  mutate(study_area = reach,
         scenario = "Measured",
         ID = row_number()) |>
  dplyr::select(-x, -y, -shannon, -abundance, -rel_abundance, -velocity, -reach) |>
  filter(study_area == "M1" |
           study_area == "S1" |
           study_area == "S2" |
           study_area == "L2" |
           study_area == "VR3")

# load rasters of scenarios 
# GL1 write scenario rasters ---------------------
GL1_min <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/GL1_k_min_var_rf.tif"))) |>
  rename(k_index = GL1_k_min_var_rf) |>
  mutate(study_area = "GL1",
         scenario = "Min",
         ID = row_number()) |>
  dplyr::select(-x, -y)

GL1_max <- data.frame(rasterToPoints(raster("ML_model/scenarios/GL1_k_max_var_rf.tif"))) |>
  rename(k_index = GL1_k_max_var_rf) |>
  mutate(study_area = "GL1",
         scenario = "Max",
         ID = row_number())|>
  dplyr::select(-x, -y)

GL1_pers <- data.frame(rasterToPoints(raster("ML_model/scenarios/GL1_k_pers_var_rf.tif"))) |>
  rename(k_index = GL1_k_pers_var_rf) |>
  mutate(study_area = "GL1",
         scenario = "Pers.",
         ID = row_number())|>
  dplyr::select(-x, -y)

# bind all GL1 frames together -------------------
GL1 <- rbind(GL1_min, GL1_max, GL1_pers)

# GL2 write rasters ---------------------
GL2_min <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/GL2_k_min_var_rf.tif"))) |>
  rename(k_index = GL2_k_min_var_rf) |>
  mutate(study_area = "GL2",
         scenario = "Min",
         ID = row_number())|>
  dplyr::select(-x, -y)

GL2_max <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/GL2_k_max_var_rf.tif"))) |>
  rename(k_index = GL2_k_max_var_rf) |>
  mutate(study_area = "GL2",
         scenario = "Max",
         ID = row_number())|>
  dplyr::select(-x, -y)

GL2_pers <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/GL2_k_pers_var_rf.tif"))) |>
  rename(k_index = GL2_k_pers_var_rf) |>
  mutate(study_area = "GL2",
         scenario = "Pers.",
         ID = row_number())|>
  dplyr::select(-x, -y)

# bind all GL2 frames together -------------------
GL2 <- rbind(GL2_min, GL2_max, GL2_pers)

# L2 write rasters ---------------------
L2_base <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/L2_k_base_var_rf.tif"))) |>
  rename(k_index = L2_k_base_var_rf) |>
  mutate(study_area = "L2",
         scenario = "Base",
         ID = row_number())|>
  dplyr::select(-x, -y)

L2_peak <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/L2_k_peak_var_rf.tif"))) |>
  rename(k_index = L2_k_peak_var_rf) |>
  mutate(study_area = "L2",
         scenario = "Peak",
         ID = row_number())|>
  dplyr::select(-x, -y)

L2_pers <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/L2_k_pers_var_rf.tif"))) |>
  rename(k_index = L2_k_pers_var_rf) |>
  mutate(study_area = "L2",
         scenario = "Pers.",
         ID = row_number())|>
  dplyr::select(-x, -y)

# bind all L2 frames together -------------------
L2 <- rbind(L2_base, L2_peak, L2_pers)

# M1 write rasters ---------------------
M1_base <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/M1_k_base_var_rf.tif"))) |>
  rename(k_index = M1_k_base_var_rf) |>
  mutate(study_area = "M1",
         scenario = "Base",
         ID = row_number())|>
  dplyr::select(-x, -y)

M1_peak <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/M1_k_peak_var_rf.tif"))) |>
  rename(k_index = M1_k_peak_var_rf) |>
  mutate(study_area = "M1",
         scenario = "Peak",
         ID = row_number())|>
  dplyr::select(-x, -y)

M1_pers <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/M1_k_pers_var_rf.tif"))) |>
  rename(k_index = M1_k_pers_var_rf) |>
  mutate(study_area = "M1",
         scenario = "Pers.",
         ID = row_number())|>
  dplyr::select(-x, -y)

# bind all M1 frames together -------------------
M1 <- rbind(M1_base, M1_peak, M1_pers)

# S1 write rasters ---------------------
S1_base <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/S1_k_base_var_rf.tif"))) |>
  rename(k_index = S1_k_base_var_rf) |>
  mutate(study_area = "S1",
         scenario = "Base",
         ID = row_number())|>
  dplyr::select(-x, -y)

S1_peak <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/S1_k_peak_var_rf.tif"))) |>
  rename(k_index = S1_k_peak_var_rf) |>
  mutate(study_area = "S1",
         scenario = "Peak",
         ID = row_number())|>
  dplyr::select(-x, -y)

S1_pers <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/S1_k_pers_var_rf.tif"))) |>
  rename(k_index = S1_k_pers_var_rf) |>
  mutate(study_area = "S1",
         scenario = "Pers.",
         ID = row_number())|>
  dplyr::select(-x, -y)

# bind all S1 frames together -------------------
S1 <- rbind(S1_base, S1_peak, S1_pers)

# S2 write rasters ---------------------
S2_base <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/S2_k_base_var_rf.tif"))) |>
  rename(k_index = S2_k_base_var_rf) |>
  mutate(study_area = "S2",
         scenario = "Base",
         ID = row_number())|>
  dplyr::select(-x, -y)

S2_peak <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/S2_k_peak_var_rf.tif"))) |>
  rename(k_index = S2_k_peak_var_rf) |>
  mutate(study_area = "S2",
         scenario = "Peak",
         ID = row_number())|>
  dplyr::select(-x, -y)

S2_pers <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/S2_k_pers_var_rf.tif"))) |>
  rename(k_index = S2_k_pers_var_rf) |>
  mutate(study_area = "S2",
         scenario = "Pers.",
         ID = row_number())|>
  dplyr::select(-x, -y)

# bind all S2 frames together -------------------
S2 <- rbind(S2_base, S2_peak, S2_pers)

# TH4 write rasters ---------------------
TH4_min <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/TH4_k_min_var_rf.tif"))) |>
  rename(k_index = TH4_k_min_var_rf) |>
  mutate(study_area = "TH4",
         scenario = "Min",
         ID = row_number())|>
  dplyr::select(-x, -y)

TH4_max <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/TH4_k_max_var_rf.tif"))) |>
  rename(k_index = TH4_k_max_var_rf) |>
  mutate(study_area = "TH4",
         scenario = "Max",
         ID = row_number())|>
  dplyr::select(-x, -y)

TH4_pers <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/TH4_k_pers_var_rf.tif"))) |>
  rename(k_index = TH4_k_pers_var_rf) |>
  mutate(study_area = "TH4",
         scenario = "Pers.",
         ID = row_number())|>
  dplyr::select(-x, -y)

# bind all TH4 frames together -------------------
TH4 <- rbind(TH4_min, TH4_max, TH4_pers)

# VR3 write rasters ---------------------
VR3_base <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/VR3_k_base_var_rf.tif"))) |>
  rename(k_index = VR3_k_base_var_rf) |>
  mutate(study_area = "VR3",
         scenario = "Base",
         ID = row_number())|>
  dplyr::select(-x, -y)

VR3_peak <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/VR3_k_peak_var_rf.tif"))) |>
  rename(k_index = VR3_k_peak_var_rf) |>
  mutate(study_area = "VR3",
         scenario = "Peak",
         ID = row_number())|>
  dplyr::select(-x, -y)

VR3_pers <- as.data.frame(rasterToPoints(raster("ML_model/scenarios/VR3_k_pers_var_rf.tif"))) |>
  rename(k_index = VR3_k_pers_var_rf) |>
  mutate(study_area = "VR3",
         scenario = "Pers.",
         ID = row_number())|>
  dplyr::select(-x, -y)

# bind all VR3 frames together -------------------
VR3 <- rbind(VR3_base, VR3_peak, VR3_pers)
```


# Boxplot
```{r}
natural <- rbind(GL1, GL2, TH4, k_measured_natural) |>
  mutate(reach_type = "Natural/near-natural")

hydropeak <- rbind(k_measured_hydro, L2, M1, S1, S2, VR3) |>
  mutate(reach_type = "Hydropeaking")

natural$scenario <- factor(natural$scenario, levels = c("Min", "Max", "Pers.", "Measured"))

hydropeak$scenario <- factor(hydropeak$scenario, levels = c("Base", "Peak", "Pers.", "Measured"))

natural_conform <- natural |>
  mutate(scenario = gsub("Min", "Base", scenario),
         scenario = gsub("Max", "Peak", scenario),
         scenario = factor(scenario, levels = c("Base", "Peak", "Pers.", "Measured")))

all <- rbind(natural_conform, hydropeak)

# Logit transformation function
logit <- function(x){
  x <- x/100
  log(x/(1-x))
}

natural_log <- natural |>
  mutate(k_index = scale(logit(k_index)))|>
  filter(scenario != "Measured")

hydropeak_log <- hydropeak |>
  mutate(k_index = scale(logit(k_index)))|>
  filter(scenario != "Measured")

all_log <- all |>
  mutate(k_index = scale(logit(k_index))) |>
  filter(scenario != "Measured")

all_meas_log <- all |>
  mutate(k_index = scale(logit(k_index))) |>
  filter(scenario == "Measured")

min(natural_log$k_index)
max(natural_log$k_index)

all_base_meas <- all |>
  filter(scenario == "Measured") |>
  pivot_wider(names_from = "reach_type", values_from = "k_index") 
```

# t.test hydrol. conditions
```{r}
# for base flow --------------------------------------
all_base <- all |>
  filter(scenario != "Measured",
           scenario == "Base") |>
  pivot_wider(names_from = "reach_type", values_from = "k_index")

# Einseitig "Test auf a > b" -------------
t_base <- t.test(all_base$`Natural/near-natural`, all_base$Hydropeaking, alternative = "greater")
# p-value < 2.2e-16

# for peak flow --------------------------------------
all_peak <- all |>
  filter(scenario != "Measured",
           scenario == "Peak") |>
  pivot_wider(names_from = "reach_type", values_from = "k_index")


# Einseitig "Test auf a > b" -------------
t.test(all_peak$`Natural/near-natural`, all_peak$Hydropeaking, alternative = "greater")
# p-value < 2.2e-16

# for pers. flow --------------------------------------
all_pers <- all |>
  filter(scenario != "Measured",
           scenario == "Pers.") |>
  pivot_wider(names_from = "reach_type", values_from = "k_index")


# Einseitig "Test auf a > b" -------------
t.test(all_pers$`Natural/near-natural`, all_pers$Hydropeaking, alternative = "greater")
# p-value < 2.2e-16

# for measured k-index --------------------------------------
all_meas <- all |>
  filter(scenario == "Measured") |>
  pivot_wider(names_from = "reach_type", values_from = "k_index")


# Einseitig "Test auf a > b" -------------
t.test(all_meas$`Natural/near-natural`, all_meas$Hydropeaking, alternative = "greater")
# p-value 1.0

# Einseitig "Test auf a < b" -------------
t.test(all_meas$`Natural/near-natural`, all_meas$Hydropeaking, alternative = "less")
# p-value 1.011e-05
```


```{r}
library(agricolae)
# GL1 --------------------------------------
scenarios_GL1 <- all |>
  filter(study_area == "GL1",
         scenario != "Measured") |>
  mutate(scenario = factor(scenario))

# alternativ kann anova in variable gespeichert werden - spart coding zeilen
aov.GL1 <- aov(k_index~scenario, data = scenarios_GL1)
summary(aov.GL1)
summary.lm(aov.GL1)

# erst nach sign. ANOVA!
# Posthoc-Test
TukeyHSD(aov.GL1)

# GL2 --------------------------------------
scenarios_GL2 <- all |>
  filter(study_area == "GL2",
         scenario != "Measured") |>
  mutate(scenario = factor(scenario))

# alternativ kann anova in variable gespeichert werden - spart coding zeilen
aov.GL2 <- aov(k_index~scenario, data = scenarios_GL2)
summary(aov.GL2)
summary.lm(aov.GL2)

# L2 --------------------------------------
scenarios_L2 <- all |>
  filter(study_area == "L2",
         scenario != "Measured") |>
  mutate(scenario = factor(scenario))

# alternativ kann anova in variable gespeichert werden - spart coding zeilen
aov.L2 <- aov(k_index~scenario, data = scenarios_L2)
summary(aov.L2)
summary.lm(aov.L2)

# M1 --------------------------------------
scenarios_M1 <- all |>
  filter(study_area == "M1",
         scenario != "Measured") |>
  mutate(scenario = factor(scenario))

# alternativ kann anova in variable gespeichert werden - spart coding zeilen
aov.M1 <- aov(k_index~scenario, data = scenarios_M1)
summary(aov.M1)
summary.lm(aov.M1)

# S1 --------------------------------------
scenarios_S1 <- all |>
  filter(study_area == "S1",
         scenario != "Measured") |>
  mutate(scenario = factor(scenario))

# alternativ kann anova in variable gespeichert werden - spart coding zeilen
aov.S1 <- aov(k_index~scenario, data = scenarios_S1)
summary(aov.S1)
summary.lm(aov.S1)

# S2 --------------------------------------
scenarios_S2 <- all |>
  filter(study_area == "S2",
         scenario != "Measured") |>
  mutate(scenario = factor(scenario))

# alternativ kann anova in variable gespeichert werden - spart coding zeilen
aov.S2 <- aov(k_index~scenario, data = scenarios_S2)
summary(aov.S2)
summary.lm(aov.S2)

# TH4 --------------------------------------
scenarios_TH4 <- all |>
  filter(study_area == "TH4",
         scenario != "Measured") |>
  mutate(scenario = factor(scenario))

# alternativ kann anova in variable gespeichert werden - spart coding zeilen
aov.TH4 <- aov(k_index~scenario, data = scenarios_TH4)
summary(aov.TH4)
summary.lm(aov.TH4)

# VR3 --------------------------------------
scenarios_VR3 <- all |>
  filter(study_area == "VR3",
         scenario != "Measured") |>
  mutate(scenario = factor(scenario))

# alternativ kann anova in variable gespeichert werden - spart coding zeilen
aov.VR3 <- aov(k_index~scenario, data = scenarios_VR3)
summary(aov.VR3)
summary.lm(aov.VR3)
```


# Boxplot hydrol. conditions
```{r}
library(RColorBrewer)

# Use a colorblind-friendly palette
color_palette <- brewer.pal(4, "RdYlBu")

#display.brewer.all()
```

```{r}
# Install and load the ggpubr package
#install.packages("ggpubr")
library(ggpubr)

## Log transformed data for simulated values ------------
comp_condition <- ggplot(all_log, aes(x = reach_type, y = k_index, fill = scenario)) +
  geom_boxplot() +
  theme_minimal() +
  labs(y = "Fitted K-Index (logit)",
       x = "Study Areas",
       fill = "Scenario") +
  scale_fill_manual(values = color_palette) +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14)) + 
  scale_y_continuous(limits = c(-2.5, 2.5)) 

# save the plots 
ggsave("Stat_Analysis/plots/boxplot_condition.png", plot = comp_condition, width = 8, height = 5)


## Log transformed data for measured values ------------
meas_condition <- ggplot(all_meas_log, aes(x = reach_type, y = k_index)) +
  geom_boxplot(fill = "lightgray") +
  theme_minimal() +
  labs(y = "Fitted K-Index (logit)",
       x = "Study Areas") +
  scale_fill_manual(values = color_palette) +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14)) + 
  scale_y_continuous(limits = c(-4.0, 3.0)) 

# save the plots 
ggsave("Stat_Analysis/plots/boxplot_condition_meas.png", plot = meas_condition, width = 6, height = 5)
```


```{r}
# Boxplot using natural river sections 
## Log transformed data 
nat_log <- ggplot(natural_log, aes(x = study_area, y = k_index, fill = scenario)) +
  geom_boxplot() +
  theme_minimal() +
  labs(y = "Fitted K-Index (logit)",
       x = "Study Areas",
       fill = "Scenario") +
  scale_fill_manual(values = color_palette) +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14)) + 
  scale_y_continuous(limits = c(-3.0, 2.0))

## untransformed data 
nat <- ggplot(natural, aes(x = study_area, y = k_index, fill = scenario)) +
  geom_boxplot() +
  theme_minimal() +
  labs(y = "K-Index",
       x = "Study Areas",
       fill = "Scenario") +
  scale_fill_manual(values = color_palette) +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14)) + 
  scale_y_continuous(limits = c(0, 1))

# Boxplot using hydropeaking river sections 
## Log transformed data 
hydr_log <- ggplot(hydropeak_log, aes(x = study_area, y = k_index, fill = scenario)) +
  geom_boxplot() +
  theme_minimal() +
  labs(y = "Fitted K-Index (logit)",
       x = "Study Areas",
       fill = "Scenario") +
  scale_fill_manual(values = color_palette) +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14)) + 
  scale_y_continuous(limits = c(-2.0, 2.5))

## untransformed data 
hydr <- ggplot(hydropeak, aes(x = study_area, y = k_index, fill = scenario)) +
  geom_boxplot() +
  theme_minimal() +
  labs(y = "K-Index",
       x = "Study Areas",
       fill = "Scenario") +
  scale_fill_manual(values = color_palette) +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14)) + 
  scale_y_continuous(limits = c(0, 1))

# save the plots 
ggsave("Stat_Analysis/plots/boxplot_natural_log.png", plot = nat_log, width = 6, height = 5)
ggsave("Stat_Analysis/plots/boxplot_natural.png", plot = nat, width = 6, height = 5)
ggsave("Stat_Analysis/plots/boxplot_hydropeak_log.png", plot = hydr_log, width = 8, height = 5)
ggsave("Stat_Analysis/plots/boxplot_hydropeak.png", plot = hydr, width = 8, height = 5)
```

# Evaluation metric comparison 
```{r}
# load data
metrics <- read_delim("Stat_Analysis/evaluation_metrics_all.csv")

metrics$predictor <- sub("^v\\s*\\+\\s*", "", metrics$predictor)
#metrics$predictor <- sub("v ", "velocity", metrics$predictor)

metrics <- metrics |>
  filter(predictor != "all") |>
  mutate(models = paste(model, predictor, sep = "-"))

metrics$index <- gsub("k_index", "K-Index", metrics$index)
metrics$index <- gsub("shannon", "Shannon Index", metrics$index)
metrics$index <- gsub("rel_abundance", "Rel. Abundance", metrics$index)
metrics$index <- gsub("abundance", "Abs. Abundance", metrics$index)

metrics$index <- factor(metrics$index, levels = c("K-Index", "Shannon Index", "Abs. Abundance", "Rel. Abundance"))
   

metrics$models <- gsub("brt-var", "Var BRT", metrics$models)
metrics$models <- gsub("rf-var", "Var RF", metrics$models)
metrics$models <- gsub("brt-velocity", "VBRT", metrics$models)
metrics$models <- gsub("rf-velocity", "VRF", metrics$models)
metrics$models <- gsub("brt-wd", "BRT", metrics$models)
metrics$models <- gsub("rf-wd", "RF", metrics$models)
metrics$models <- gsub("brt-samp", "Samp BRT", metrics$models)
metrics$models <- gsub("rf-samp", "Samp RF", metrics$models)
metrics$models <- gsub("brt-v", "VBRT", metrics$models)
metrics$models <- gsub("rf-v", "VRF", metrics$models)

metrics$models <- factor(metrics$models, levels = c("VBRT", "VRF", "BRT", "RF", "Var BRT", "Var RF", "Samp BRT", "Samp RF"))

metrics$origin <- gsub("measured", "Measured", metrics$origin)
metrics$origin <- gsub("raster_extract", "Raster", metrics$origin)
metrics$origin <- gsub("training", "Train", metrics$origin)

metrics$origin <- factor(metrics$origin, levels = c("Measured", "Raster", "Train"))


metrics_k <- metrics |>
  filter(index == "k_index")

metrics_s <- metrics |>
  filter(index == "shannon")

metrics_a <- metrics |>
  filter(index == "abundance")

metrics_ra <- metrics |>
  filter(index == "rel_abundance")
```

# ALL Plots
```{r}
# Use a colorblind-friendly palette
color_palette <- brewer.pal(4, "RdYlBu")

# NSE Plots for all Indices -------------------
nse <- ggplot(metrics, aes(x = models, y = nse, shape = origin, col = origin)) +
  facet_wrap(~index, nrow = 1, ncol = 4) +
  geom_point(size = 3.5) +
  labs(y = "NSE",
       x = " ",
       shape = "Origin",
       col = "Origin") +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(size = 16, face = "bold"))+ 
  scale_y_continuous(limits = c(-1.25, 1.0)) +
  scale_color_manual(values = color_palette) 

# R2 plots for all Indices ------------------------------------
r2 <- ggplot(metrics, aes(x = models, y = r2, shape = origin, col = origin)) +
  facet_wrap(~index, nrow = 1, ncol = 4) +
  geom_point(size = 3.5) +
  labs(y = expression(R^2),
       x = " ",
       shape = "Origin",
       col = "Origin") +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(size = 16, face = "bold"))+ 
  scale_y_continuous(limits = c(0, 1.0)) +
  scale_color_manual(values = color_palette)

# rel_rmse plots for all Indices ------------------------------------
rmse <- ggplot(metrics, aes(x = models, y = rel_rmse, shape = origin, col = origin)) +
  facet_wrap(~index, nrow = 1, ncol = 4) +
  geom_point(size = 3.5) +
  labs(y = "Rel. RMSE",
       x = " ",
       shape = "Origin",
       col = "Origin") +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(size = 16, face = "bold"))+ 
  scale_y_continuous(limits = c(0, 0.25)) +
  scale_color_manual(values = color_palette)

# rel_mae plots for all Indices ------------------------------------
mae <- ggplot(metrics, aes(x = models, y = rel_mae, shape = origin, col = origin)) +
  facet_wrap(~index, nrow = 1, ncol = 4) +
  geom_point(size = 3.5) +
  labs(y = "Rel. MAE",
       x = " ",
       shape = "Origin",
       col = "Origin") +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(size = 16, face = "bold"))+ 
  scale_y_continuous(limits = c(0, 0.25)) +
  scale_color_manual(values = color_palette)

# rel_bias plots for all Indices ------------------------------------
bias <- ggplot(metrics, aes(x = models, y = rel_bias, shape = origin, col = origin)) +
  facet_wrap(~index, nrow = 1, ncol = 4) +
  geom_point(size = 3.5) +
  labs(y = "Rel. Bias",
       x = " ",
       shape = "Origin",
       col = "Origin") +
  theme_minimal() +
  theme(axis.text = element_text(size=14),
        axis.title = element_text(size=16),
    legend.title = element_text(size = 16, face = "bold"),  
    legend.text = element_text(size = 14),
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(size = 16, face = "bold"))+ 
  scale_y_continuous(limits = c(-0.15, 0.30)) +
  scale_color_manual(values = color_palette)

ggsave("Stat_Analysis/plots/nse_all.png", plot = nse, width = 18, height = 5)
ggsave("Stat_Analysis/plots/r2_all.png", plot = r2, width = 18, height = 5)
ggsave("Stat_Analysis/plots/rmse_all.png", plot = rmse, width = 18, height = 5)
ggsave("Stat_Analysis/plots/mae_all.png", plot = mae, width = 18, height = 5)
ggsave("Stat_Analysis/plots/bias_all.png", plot = bias, width = 18, height = 5)
```

# Load Data 
```{r}
# load data for bar charts -> variable importance 
bar <- read_delim("ML_model/var_imp/var_imp_var.csv") |> 
  dplyr::select(variable, k_index_rf, k_index_brt) |>
  mutate(var_new = c("Z Coordinate [m.a.s.l.]", "Water Deph [m]", "Mean diffused total nitrogen [kg/ha a]", "Velocity [m/s]", "Mean diffused total phosphor [kg/ha a]", "Ecomorphological Class", "Bioregion")) |>
  pivot_longer(cols = c(2:3), names_to = "models", values_to = "values")

bar_rf <- read_delim("ML_model/var_imp/var_imp_var.csv") |> 
  dplyr::select(variable, k_index_rf) |>
  mutate(var_new = c("Elevation [m.a.s.l.]", "Water Deph [m]", "Mean diffuse total nitrogen [kg/ha a]", "Velocity [m/s]", "Mean diffuse total phosphorous [kg/ha a]", "Ecomorphology", "Biogeographical region"))
```


# Bar chart
```{r}
library(scales)

p <- ggplot(bar, aes(x = values, y = reorder(var_new, + values), fill = models)) +
  geom_bar(stat = "identity", position = position_dodge()) + 
  ylab(label = " ") +
  xlab(label = " ") +
  scale_x_continuous(labels = percent_format(scale = 100)) +
  scale_fill_manual(labels = c("BRT", "RF"), values = c("lightgray", "black")) +  # Adjust legend labels here
  theme_minimal() +
  labs(fill = "Algorithm") + 
  theme(axis.text = element_text(size = 14),
        legend.text = element_text(size = 14),
        legend.title = element_text(size = 16))


# save the plots 
ggsave("Stat_Analysis/plots/var_imp.png", plot = p, width = 11, height = 6)
```

```{r}
library(scales)

p <- ggplot(bar_rf, aes(x = k_index_rf, y = reorder(var_new, + k_index_rf))) +
  geom_bar(stat = "identity", position = position_dodge()) + 
  ylab(label = " ") +
  xlab(label = " ") +
  scale_x_continuous(labels = percent_format(scale = 100)) +
  theme_minimal() +
  labs(fill = "Algorithm") + 
  theme(axis.text = element_text(size = 14),
        legend.text = element_text(size = 14),
        legend.title = element_text(size = 16))

# Assuming 'percentage' is a column in your 'bar_rf' data frame containing the calculated percentage values
bar_rf$percentage <- round(((bar_rf$k_index_rf) * 100), digits = 1)

p2 <- ggplot(bar_rf, aes(x = k_index_rf, y = reorder(var_new, +k_index_rf))) +
  geom_bar(stat = "identity", position = position_dodge(), fill = "lightgray") + 
  geom_text(aes(label = percent(percentage / 100)), 
            position = position_dodge(width = 0.9), 
            hjust = -0.5,vjust = -0.5, size = 5) +  # Adjust vjust as needed
  ylab(label = " ") +
  xlab(label = " ") +
  scale_x_continuous(labels = percent_format(scale = 100)) +
  theme_minimal() +
  labs(fill = "Algorithm") + 
  theme(axis.text = element_text(size = 14),
        legend.text = element_text(size = 14),
        legend.title = element_text(size = 16)) +
  scale_x_continuous(limits = c(0, 0.25), breaks = seq(0, 0.25, by = 0.05))


# save the plots 
ggsave("Stat_Analysis/plots/var_imp_rf.png", plot = p2, width = 11, height = 6)
```

# Combine metric results and calc. rel. metrics
```{r}
# read brt and rf metric results
brt <- read_delim("Stat_Analysis/ml_evaluation_metrics_all_brt.csv")
rf <- read_delim("Stat_Analysis/ml_evaluation_metrics_all_rf.csv")

# bind rf and brt metric results together 
metrics <- rbind(brt, rf)

# calculate relative rmse, mae and bias metrics 
max_k_index <- 0.8819476
max_shannon <- 4.04037
max_abundance <- 3923
max_rel_abundance <- 1

max_ind <- c(max_k_index, max_shannon, max_abundance, max_rel_abundance)
max_index <- rep(max_ind, times = 26)

metrics$rel_rmse <- metrics$rmse/max_index
metrics$rel_mae <- metrics$mae/max_index
metrics$rel_bias <- metrics$bias/max_index

# round values to two decimal places 
metrics$nse <- round(metrics$nse, digits = 2)
metrics$r2 <- round(metrics$r2, digits = 2)
metrics$rel_rmse <- round(metrics$rel_rmse, digits = 2)
metrics$rel_mae <- round(metrics$rel_mae, digits = 2)
metrics$rel_bias <- round(metrics$rel_bias, digits = 2)

# save as .csv file 
write.csv(metrics, "Stat_Analysis/stat_analysis_data/evaluation_metrics_all.csv", row.names = FALSE)
```

