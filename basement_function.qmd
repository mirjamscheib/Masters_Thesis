---
title: "basement_function"
format: html
---
```{r}
rm(list = ls())

# load all Packages ---
library(hdf5r)
library(sp)
library(sf)
library(ggplot2)
library(dplyr)
library(readr)
library(Metrics)
library(raster)
library(rgeos)
library(hydroGOF)
library(jsonlite)
```

# function
```{r}
basement <- function(model_json, mesh_path, simulation_json, setup_h5, results_h5, results_xdmf, results_json, discharge, strickler, time_end, slope){

# funktioniert nur wenn inflow/outflow im file gleich wie code
# LÃ¶sung mit ifelse befehl 
model <- fromJSON(model_json) #read in model json # modify it change mesh
model$SETUP$DOMAIN$BASEPLANE_2D$GEOMETRY$mesh_file <- mesh_path
ifelse(model$SETUP$DOMAIN$BASEPLANE_2D$GEOMETRY$INTERPOLATION$REGIONDEF$STRINGDEF$name == "input", model$SETUP$DOMAIN$BASEPLANE_2D$HYDRAULICS$BOUNDARY$STANDARD$name == "input", model$SETUP$DOMAIN$BASEPLANE_2D$HYDRAULICS$BOUNDARY$STANDARD$name == "output")
ifelse(model$SETUP$DOMAIN$BASEPLANE_2D$HYDRAULICS$BOUNDARY$STANDARD$name == "input", model$SETUP$DOMAIN$BASEPLANE_2D$HYDRAULICS$BOUNDARY$STANDARD$discharge == discharge, model$SETUP$DOMAIN$BASEPLANE_2D$HYDRAULICS$BOUNDARY$STANDARD$discharge == NA)
ifelse(model$SETUP$DOMAIN$BASEPLANE_2D$HYDRAULICS$BOUNDARY$STANDARD$name == "output", model$SETUP$DOMAIN$BASEPLANE_2D$HYDRAULICS$BOUNDARY$STANDARD$type == "uniform_out", model$SETUP$DOMAIN$BASEPLANE_2D$HYDRAULICS$BOUNDARY$STANDARD$type == "uniform_in")
ifelse(model$SETUP$DOMAIN$BASEPLANE_2D$HYDRAULICS$BOUNDARY$STANDARD$name == "input", model$SETUP$DOMAIN$BASEPLANE_2D$HYDRAULICS$BOUNDARY$STANDARD$slope == slope, model$SETUP$DOMAIN$BASEPLANE_2D$HYDRAULICS$BOUNDARY$STANDARD$slope == 0.033)
model$SETUP$DOMAIN$BASEPLANE_2D$HYDRAULICS$FRICTION$default_friction <-  strickler #change Strickler

model_exp <- toJSON(model, pretty = TRUE, auto_unbox = TRUE) #export 
write(model_exp, "hdm_basement/model_new.json")

simulation <- fromJSON(simulation_json) #read in simulation json
simulation$SIMULATION$TIME$end <- time_end #modify it
simulation_exp <- toJSON(simulation, pretty = TRUE, auto_unbox = TRUE)
write(simulation_exp, "hdm_basement/simulation_new.json") #export 

# Set up BASEMENT
setup_cmd_name <- "c:\\Programme\\BASEMENT 3.2.0\\bin\\BMv3_BASEplane_setup.exe"
  setup_param1 = paste("-f ", getwd(), "\\", model_json, sep="")
  setup_param2 = paste("-o ", getwd(), "\\", setup_h5, sep="")
  system2(setup_cmd_name, args = c(setup_param1, setup_param2))
  
  # Simulation in BASEMENT
simulation_cmd_name <- "c:\\Programme\\BASEMENT 3.2.0\\bin\\BMv3_BASEplane_omp.exe"
  simulation_param1 = paste("-f ", getwd(), "\\", simulation_json, sep="")
  simulation_param2 = paste("-r ", getwd(), "\\", setup_h5, sep="")
  simulation_param3 = paste("-o ", getwd(), "\\", results_h5,  sep="")
  system2(simulation_cmd_name, args = c(simulation_param1, simulation_param2, simulation_param3, "-p", "-n 16"))

  # Results of BASEMENT
results_cmd_name <- "c:\\Programme\\BASEMENT 3.2.0\\bin\\BMv3_BASEplane_results.exe"
  results_param1 = paste("-f ", getwd(), "\\", results_json, sep="")
  results_param2 = paste("-r ", getwd(), "\\", results_h5, sep="")
  results_param3 = paste("-o ", getwd(), "\\", results_xdmf, sep="")
  system2(results_cmd_name, args = c(results_param1, results_param2, results_param3))
}
```


# Test-Application of function 
```{r}
function(discharge, results_h5){
  for (discharge in c(3.28, 6.00, 9.00, 12.68, 16.00, 19.00, 22.00, 25.00, 28.00, 31.76)) {
  for (results_h5 in c("hdm_models/GL1/results_GL1_3.28.h5", "hdm_models/GL1/results_GL1_6.00.h5", "hdm_models/GL1/results_GL1_9.00.h5", "hdm_models/GL1/results_GL1_12.68.h5", "hdm_models/GL1/results_GL1_16.00.h5", "hdm_models/GL1/results_GL1_19.00.h5", "hdm_models/GL1/results_GL1_22.00.h5", "hdm_models/GL1/results_GL1_25.00.h5", "hdm_models/GL1/results_GL1_28.00.h5", "hdm_models/GL1/results_GL1_31.76.h5")) {
     return(basement(model_json = "hdm_models/GL1/model.json", 
         mesh_path = "hdm_models/GL1/GL1_mesh_computational-mesh_3.2dm", 
         simulation_json = "hdm_models/GL1/simulation.json",
         setup_h5 = "hdm_models/GL1/setup.h5",
         results_h5,
         results_xdmf = "hdm_models/GL1/results", #this can actually remain always the same
         results_json = "hdm_models/GL1/results.json",
         discharge, 
         strickler = 38, 
         time_end = 3600,
         slope = 0.01))
  } 
  }
  }

GL1_args <- list(list(discharge = 3.28, results_h5 = "hdm_models/GL1/results_GL1_3.28.h5"),
                 list(discharge = 6.00, results_h5 = "hdm_models/GL1/results_GL1_6.00.h5"),
                 list(discharge = 9.00, results_h5 = "hdm_models/GL1/results_GL1_9.00.h5"),
                 list(discharge = 12.68, results_h5 = "hdm_models/GL1/results_GL1_12.68.h5"),
                 list(discharge = 16.00, results_h5 = "hdm_models/GL1/results_GL1_16.00.h5"),
                 list(discharge = 19.00, results_h5 = "hdm_models/GL1/results_GL1_19.00.h5"),
                 list(discharge = 22.00, results_h5 = "hdm_models/GL1/results_GL1_22.00.h5"),
                 list(discharge = 25.00, results_h5 = "hdm_models/GL1/results_GL1_25.00.h5"),
                 list(discharge = 28.00, results_h5 = "hdm_models/GL1/results_GL1_28.00.h5"),
                 list(discharge = 31.76, results_h5 = "hdm_models/GL1/results_GL1_31.76.h5"))
                 
  for (i in seq_along(GL1_args)) {
     return(basement(model_json = "hdm_models/GL1/model.json", 
         mesh_path = "hdm_models/GL1/GL1_mesh_computational-mesh_3.2dm", 
         simulation_json = "hdm_models/GL1/simulation.json",
         setup_h5 = "hdm_models/GL1/setup.h5",
         results_h5[i],
         results_xdmf = "hdm_models/GL1/results", #this can actually remain always the same
         results_json = "hdm_models/GL1/results.json",
         discharge[i],
         strickler = 38, 
         time_end = 3600,
         slope = 0.01))
  } 


 basement(model_json = "hdm_models/GL1/model.json", 
         mesh_path = "hdm_models/GL1/GL1_mesh_computational-mesh_3.2dm", 
         simulation_json = "hdm_models/GL1/simulation.json",
         setup_h5 = "hdm_models/GL1/setup.h5",
         results_h5 = "hdm_models/GL1//results.h5",
         results_xdmf = "hdm_models/GL1/results", #this can actually remain always the same
         results_json = "hdm_models/GL1/results.json",
         discharge = 20.00, 
         strickler = 38, 
         time_end = 3600,
         slope = 0.01)


# slope in inflow zone niedriger setzen - 0.0002 z.B. (bei Mass balance problem)
```

# Define the range of values for discharge and results_h5
discharge_values <- c(20.00, 30.00, 40.00) # Add more values if needed
results_h5_values <- c("hdm_models/GL1/results1.h5", "hdm_models/GL1/results2.h5", "hdm_models/GL1/results3.h5") # Add more values if needed

# Create an empty list to store the results
results_list <- list()

# Loop through the combinations of discharge and results_h5 values
for (i in seq_along(discharge_values)) {
  for (j in seq_along(results_h5_values)) {
    result <- basement(model_json = "hdm_models/GL1/model.json", 
                       mesh_path = "hdm_models/GL1/GL1_mesh_computational-mesh_3.2dm", 
                       simulation_json = "hdm_models/GL1/simulation.json",
                       setup_h5 = "hdm_models/GL1/setup.h5",
                       results_h5 = results_h5_values[j],
                       results_xdmf = "hdm_models/GL1/results",
                       results_json = "hdm_models/GL1/results.json",
                       discharge = discharge_values[i], 
                       strickler = 38, 
                       time_end = 3600,
                       slope = 0.01)
    results_list[[paste("discharge", discharge_values[i], "_results_h5", j, sep = "_")]] <- result
  }
}

# Now, results_list contains the results for each combination of discharge and results_h5 values
# You can access the results using names like "discharge_20.00_results_h5_1", "discharge_20.00_results_h5_2", etc.


